{"version":3,"file":"appstore/js/appstore.modules-traders-hub.f91c42b4adcaacdf292c.js","mappings":"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","sources":["webpack://@deriv/appstore/./src/components/banners/wallets-banner/wallets-banner.tsx","webpack://@deriv/appstore/./src/components/banners/wallets-banner/index.ts","webpack://@deriv/appstore/./src/components/add-options-account/add-options-account.tsx","webpack://@deriv/appstore/./src/components/add-options-account/index.ts","webpack://@deriv/appstore/./src/components/banners/nakala-linked-banner/nakala-linked-banner.tsx","webpack://@deriv/appstore/./src/components/banners/nakala-linked-banner/index.ts","webpack://@deriv/appstore/./src/components/compare-account/compare-account.tsx","webpack://@deriv/appstore/./src/components/compare-account/index.ts","webpack://@deriv/appstore/./src/components/pre-loader/platform-loader.tsx","webpack://@deriv/appstore/./src/components/cfds-listing/index.tsx","webpack://@deriv/appstore/../cfd/src/Containers/cfd-reset-password-modal.tsx","webpack://@deriv/appstore/./src/stores/index.ts","webpack://@deriv/appstore/./src/components/modals/modal-manager.tsx","webpack://@deriv/appstore/./src/components/pre-loader/regulations-switcher-loader.tsx","webpack://@deriv/appstore/./src/components/main-title-bar/account-type-dropdown.tsx","webpack://@deriv/appstore/./src/components/pre-loader/total-assets-loader.tsx","webpack://@deriv/appstore/../hooks/src/useCFDAllAccounts.ts","webpack://@deriv/appstore/../hooks/src/useCFDDemoAccounts.ts","webpack://@deriv/appstore/../hooks/src/useCFDRealAccounts.ts","webpack://@deriv/appstore/../hooks/src/useCFDAccounts.ts","webpack://@deriv/appstore/../hooks/src/useTotalAssetCurrency.ts","webpack://@deriv/appstore/../hooks/src/useTotalAccountBalance.ts","webpack://@deriv/appstore/./src/components/main-title-bar/asset-summary.tsx","webpack://@deriv/appstore/./src/components/main-title-bar/regulators-switcher.tsx","webpack://@deriv/appstore/./src/components/main-title-bar/index.tsx","webpack://@deriv/appstore/./src/components/options-multipliers-listing/index.tsx","webpack://@deriv/appstore/./src/components/pre-loader/button-toggle-loader.tsx","webpack://@deriv/appstore/./src/components/after-signup-flow/after-signup-flow.tsx","webpack://@deriv/appstore/./src/components/after-signup-flow/index.ts","webpack://@deriv/appstore/../hooks/src/useStoreHasAccountDeposited.ts","webpack://@deriv/appstore/./src/components/banners/book-banner/banner-template.tsx","webpack://@deriv/appstore/./src/components/banners/book-banner/book-banner.tsx","webpack://@deriv/appstore/./src/components/banners/book-banner/index.ts","webpack://@deriv/appstore/./src/components/banners/traders-hub-banners/traders-hub-banners.tsx","webpack://@deriv/appstore/./src/components/banners/traders-hub-banners/index.ts","webpack://@deriv/appstore/./src/components/banners/business-closure-banner/business-closure-banner.tsx","webpack://@deriv/appstore/./src/components/banners/business-closure-banner/index.ts","webpack://@deriv/appstore/./src/modules/traders-hub/index.tsx","webpack://@deriv/appstore/../cfd/src/Helpers/cfd-config.ts","webpack://@deriv/appstore/../cfd/src/Stores/Modules/CFD/Helpers/cfd-config.ts","webpack://@deriv/appstore/../hooks/src/useContentFlag.ts","webpack://@deriv/appstore/../hooks/src/useExchangeRate.ts","webpack://@deriv/appstore/../shared/src/utils/url/constants.ts","webpack://@deriv/appstore/../shared/src/utils/url/helpers.ts","webpack://@deriv/appstore/../shared/src/utils/brand/brand.ts","webpack://@deriv/appstore/../shared/src/utils/routes/routes.ts","webpack://@deriv/appstore/../shared/src/utils/platform/platform.ts","webpack://@deriv/appstore/../shared/src/utils/url/url.ts","webpack://@deriv/appstore/../hooks/src/useIsEnabledNakala.ts","webpack://@deriv/appstore/../hooks/src/useIsTNCNeeded.ts","webpack://@deriv/appstore/../hooks/src/useMT5SVGEligibleToMigrate.ts","webpack://@deriv/appstore/../hooks/src/useTradingPlatformStatus.ts","webpack://@deriv/appstore/../hooks/src/useWalletMigration.ts"],"sourcesContent":["import React from 'react';\n\nimport { Loading } from '@deriv/components';\nimport { useWalletMigration } from '@deriv/hooks';\nimport { makeLazyLoader, moduleLoader } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\n\nimport './wallets-banner.scss';\n\nconst WalletsBannerUpgrade = makeLazyLoader(\n    () => moduleLoader(() => import(/* webpackChunkName: \"wallets-banner-upgrade\" */ './wallets-banner-upgrade')),\n    () => <Loading />\n)();\n\nconst WalletsBannerUpgrading = makeLazyLoader(\n    () => moduleLoader(() => import(/* webpackChunkName: \"wallets-banner-upgrading\" */ './wallets-banner-upgrading')),\n    () => <Loading />\n)();\n\nconst WalletsBannerUnsuccessful = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () => import(/* webpackChunkName: \"wallets-banner-unsuccessful\" */ './wallets-banner-unsuccessful')\n        ),\n    () => <Loading />\n)();\n\nconst WalletsBanner = observer(() => {\n    const { client } = useStore();\n    const { is_eu } = client;\n    const { is_eligible, is_failed, is_in_progress, is_migrating } = useWalletMigration();\n\n    const is_upgrading = is_in_progress || is_migrating;\n\n    if (is_upgrading) return <WalletsBannerUpgrading />;\n\n    if (is_failed) return <WalletsBannerUnsuccessful />;\n\n    if (!is_eu && is_eligible) return <WalletsBannerUpgrade is_upgrading={is_upgrading} />;\n\n    return null;\n});\n\nexport default WalletsBanner;\n","import WalletsBanner from './wallets-banner';\n\nexport default WalletsBanner;\n","import React from 'react';\nimport { DesktopWrapper, MobileWrapper, Button, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport './add-options-account.scss';\nimport { useGrowthbookGetFeatureValue } from '@deriv/hooks';\nimport { useStore, observer } from '@deriv/stores';\nimport { isMobile, ContentFlag, cacheTrackEvents } from '@deriv/shared';\n\nconst AddOptions = observer(() => {\n    const { client, traders_hub, ui } = useStore();\n    const { is_real, content_flag, selected_account_type } = traders_hub;\n    const { setShouldShowCooldownModal, openRealAccountSignup } = ui;\n    const { real_account_creation_unlock_date } = client;\n\n    const add_deriv_account_text = localize('To trade CFDs, get a Deriv Apps account first.');\n    const add_deriv_account_btn = localize('Get a Deriv account');\n\n    const eu_user = content_flag === ContentFlag.LOW_RISK_CR_EU || content_flag === ContentFlag.EU_REAL;\n\n    const [is_traders_dashboard_tracking_enabled] = useGrowthbookGetFeatureValue({\n        featureFlag: 'ce_tradershub_dashboard_tracking',\n        defaultValue: false,\n    });\n\n    return (\n        <React.Fragment>\n            <div className='add-options-account__title'>\n                <Text size={isMobile() ? 'xxs' : 's'} weight='bold'>\n                    <Localize i18n_default_text={add_deriv_account_text} />\n                </Text>\n            </div>\n            <div className='add-options-account__button'>\n                <Button\n                    className='add-options-account__button'\n                    type='submit'\n                    has_effect\n                    onClick={() => {\n                        if (is_traders_dashboard_tracking_enabled) {\n                            cacheTrackEvents.loadEvent([\n                                {\n                                    event: {\n                                        name: 'ce_tradershub_dashboard_form',\n                                        properties: {\n                                            action: 'account_get',\n                                            form_name: 'traders_hub_default',\n                                            account_mode: selected_account_type,\n                                            account_name: 'cfd_banner',\n                                        },\n                                    },\n                                },\n                            ]);\n                        }\n\n                        if (is_real && eu_user) {\n                            if (real_account_creation_unlock_date) {\n                                setShouldShowCooldownModal(true);\n                            } else {\n                                openRealAccountSignup('maltainvest');\n                            }\n                        } else {\n                            openRealAccountSignup('svg');\n                        }\n                    }}\n                    is_disabled={false}\n                    is_loading={false}\n                    text={add_deriv_account_btn}\n                    medium\n                    primary\n                />\n            </div>\n        </React.Fragment>\n    );\n});\n\nconst AddOptionsAccount = observer(() => {\n    return (\n        <React.Fragment>\n            <div className='add-options-account'>\n                <DesktopWrapper>\n                    <AddOptions />\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <AddOptions />\n                </MobileWrapper>\n            </div>\n        </React.Fragment>\n    );\n});\n\nexport default AddOptionsAccount;\n","import AddOptionsAccount from './add-options-account';\nimport './add-options-account.scss';\n\nexport default AddOptionsAccount;\n","import React from 'react';\n\nimport { Icon, Text } from '@deriv/components';\nimport { LabelPairedChevronRightMdRegularIcon } from '@deriv/quill-icons';\n\nimport './nakala-linked-banner.scss';\n\ninterface ProductLinkedBannerProps {\n    description: string;\n    onClick: () => void;\n}\n\nconst ProductLinkedBanner: React.FC<ProductLinkedBannerProps> = ({ description, onClick }) => {\n    return (\n        <div className='product-linked-banner' onClick={onClick}>\n            <div className='product-linked-banner__content'>\n                <div className='product-linked-banner__icon'>\n                    <Icon icon='IcRebrandingDerivNakala' width={32} height={32} />\n                </div>\n                <Text size='xs' color='prominent'>\n                    {description}\n                </Text>\n            </div>\n            <LabelPairedChevronRightMdRegularIcon fill='var(--text-prominent)' />\n        </div>\n    );\n};\n\nexport default ProductLinkedBanner;\n","import ProductLinkedBanner from './nakala-linked-banner';\n\nexport default ProductLinkedBanner;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { useHistory } from 'react-router-dom';\nimport { routes, cacheTrackEvents } from '@deriv/shared';\nimport { useGrowthbookGetFeatureValue } from '@deriv/hooks';\nimport { useStore, observer } from '@deriv/stores';\n\ntype TCompareAccount = {\n    accounts_sub_text: string;\n    is_desktop?: boolean;\n};\n\nconst CompareAccount = observer(({ accounts_sub_text, is_desktop }: TCompareAccount) => {\n    const history = useHistory();\n    const { traders_hub } = useStore();\n    const { selected_account_type } = traders_hub;\n    const [is_traders_dashboard_tracking_enabled] = useGrowthbookGetFeatureValue({\n        featureFlag: 'ce_tradershub_dashboard_tracking',\n        defaultValue: false,\n    });\n\n    return (\n        <div\n            className='cfd-accounts__compare-table-title'\n            onClick={() => {\n                history.push(routes.compare_cfds);\n                if (is_traders_dashboard_tracking_enabled) {\n                    cacheTrackEvents.loadEvent([\n                        {\n                            event: {\n                                name: 'ce_tradershub_dashboard_form',\n                                properties: {\n                                    action: 'compare_accounts_push',\n                                    form_name: 'traders_hub_default',\n                                    account_mode: selected_account_type,\n                                },\n                            },\n                        },\n                    ]);\n                }\n            }}\n        >\n            <Text\n                size={is_desktop ? 'xxs' : 'xs'}\n                color='red'\n                weight='bold'\n                line_height='s'\n                styles={is_desktop ? { marginInlineStart: '1rem' } : ''}\n            >\n                <Localize i18n_default_text={accounts_sub_text} />\n            </Text>\n        </div>\n    );\n});\n\nexport default CompareAccount;\n","import CompareAccount from './compare-account';\nimport './compare-account.scss';\n\nexport default CompareAccount;\n","import ContentLoader from 'react-content-loader';\nimport React from 'react';\nimport { DesktopWrapper, MobileWrapper } from '@deriv/components';\n\nconst PlatformLoader = () => (\n    <ContentLoader\n        backgroundColor={'var(--general-section-1)'}\n        foregroundColor={'var(--general-hover)'}\n        width={600}\n        height={140}\n    >\n        <DesktopWrapper>\n            <rect x='0' y='0' rx='5' ry='5' width='50' height='50' />\n            <rect x='70' y='10' rx='4' ry='4' width='70' height='10' />\n            <rect x='70' y='30' rx='3' ry='3' width='150' height='10' />\n            <rect x='350' y='10' rx='5' ry='5' width='70' height='30' />\n        </DesktopWrapper>\n        <MobileWrapper>\n            <rect x='5' y='0' rx='5' ry='5' width='50' height='50' />\n            <rect x='80' y='10' rx='4' ry='4' width='70' height='10' />\n            <rect x='80' y='30' rx='3' ry='3' width='100' height='10' />\n            <rect x='300' y='15' rx='5' ry='5' width='50' height='20' />\n        </MobileWrapper>\n    </ContentLoader>\n);\n\nexport default PlatformLoader;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport Cookies from 'js-cookie';\n\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { Loading, Text } from '@deriv/components';\nimport {\n    TradingPlatformStatus,\n    useGrowthbookGetFeatureValue,\n    useIsEnabledNakala,\n    useMT5SVGEligibleToMigrate,\n    useTradingPlatformStatus,\n} from '@deriv/hooks';\nimport {\n    cacheTrackEvents,\n    CFD_PLATFORMS,\n    formatMoney,\n    makeLazyLoader,\n    moduleLoader,\n    MT5_ACCOUNT_STATUS,\n    setPerformanceValue,\n    TRADING_PLATFORM_STATUS,\n} from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\n\nimport AddOptionsAccount from 'Components/add-options-account';\nimport NakalaLinkedBanner from 'Components/banners/nakala-linked-banner';\nimport CompareAccount from 'Components/compare-account';\nimport ListingContainer from 'Components/containers/listing-container';\nimport TradingAppCard from 'Components/containers/trading-app-card';\nimport CFDsDescription from 'Components/elements/cfds-description';\nimport PlatformLoader from 'Components/pre-loader/platform-loader';\nimport { getHasDivider } from 'Constants/utils';\n\nimport './cfds-listing.scss';\n\nconst MigrationBanner = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"cfd_migration-banner\" */ '@deriv/cfd/src/Containers/migration-banner/migration-banner'\n                )\n        ),\n    () => <Loading />\n)();\n\ninterface INakalaAcount extends DetailsOfEachMT5Loginid {\n    platform: string;\n    product: string;\n}\n\nconst CFDsListing = observer(() => {\n    const { isDesktop } = useDevice();\n    const {\n        client,\n        modules: { cfd },\n        traders_hub,\n        common,\n        ui,\n    } = useStore();\n    const {\n        available_dxtrade_accounts,\n        available_ctrader_accounts,\n        combined_cfd_mt5_accounts,\n        selected_region,\n        has_any_real_account,\n        startTrade,\n        is_real,\n        getExistingAccounts,\n        getAccount,\n        selected_account_type,\n        is_eu_user,\n        is_demo_low_risk,\n        no_MF_account,\n        toggleAccountTransferModal,\n        is_demo,\n        showTopUpModal,\n        no_CR_account,\n        setSelectedAccount,\n        CFDs_restricted_countries,\n        financial_restricted_countries,\n        getDefaultJurisdiction,\n    } = traders_hub;\n    const {\n        setAccountType,\n        toggleCTraderTransferModal,\n        setAccountUnavailableModal,\n        setServerMaintenanceModal,\n        setProduct,\n        setJurisdictionSelectedShortcode,\n        setNakalaBannerVisible,\n    } = cfd;\n\n    const {\n        is_landing_company_loaded,\n        is_populating_mt5_account_list,\n        real_account_creation_unlock_date,\n        ctrader_total_balance,\n        is_trading_platform_available_account_loaded,\n        updateMT5AccountDetails,\n        is_switching,\n    } = client;\n    const { setAppstorePlatform } = common;\n    const { openDerivRealAccountNeededModal, setShouldShowCooldownModal } = ui;\n    const has_no_real_account = !has_any_real_account;\n    const accounts_sub_text =\n        !is_eu_user || is_demo_low_risk ? localize('Compare accounts') : localize('Account Information');\n\n    const [is_traders_dashboard_tracking_enabled] = useGrowthbookGetFeatureValue({\n        featureFlag: 'ce_tradershub_dashboard_tracking',\n        defaultValue: false,\n    });\n\n    const is_mt5_standard_available = combined_cfd_mt5_accounts.some(\n        account => account.platform === CFD_PLATFORMS.MT5 && account.product === 'standard'\n    );\n\n    const has_mt5_standard_account = combined_cfd_mt5_accounts.some(\n        account =>\n            account.platform === CFD_PLATFORMS.MT5 && account.product === 'standard' && account.action_type !== 'get'\n    );\n\n    const [isNakalaLinked, setIsNakalaLinked] = useState(() => Cookies.get('nakala_linked') === 'true');\n    const mt5_trade_account = combined_cfd_mt5_accounts.find(account => account.product === 'standard');\n    const { IsEnabledNakala } = useIsEnabledNakala([mt5_trade_account]);\n\n    const showNakala = is_real && !is_eu_user && !isNakalaLinked && IsEnabledNakala && is_mt5_standard_available;\n\n    const { has_svg_accounts_to_migrate } = useMT5SVGEligibleToMigrate();\n\n    const { getPlatformStatus } = useTradingPlatformStatus();\n\n    const getTradingPlatformStatus = (platform: TradingPlatformStatus['platform']) => {\n        const status = getPlatformStatus(platform);\n\n        switch (status) {\n            case TRADING_PLATFORM_STATUS.MAINTENANCE:\n                return setServerMaintenanceModal(true);\n            case TRADING_PLATFORM_STATUS.UNAVAILABLE:\n                return setAccountUnavailableModal(true);\n            case TRADING_PLATFORM_STATUS.ACTIVE:\n                return getAccount();\n            default:\n                break;\n        }\n    };\n\n    useEffect(() => {\n        const checkNakalaCookie = () => {\n            const isLinked = Cookies.get('nakala_linked') === 'true';\n            setIsNakalaLinked(isLinked);\n        };\n\n        window.addEventListener('storage', checkNakalaCookie);\n\n        const originalSet = Cookies.set;\n        Cookies.set = function (...args) {\n            const result = originalSet.apply(this, args);\n            checkNakalaCookie();\n            return result;\n        };\n\n        return () => {\n            window.removeEventListener('storage', checkNakalaCookie);\n            Cookies.set = originalSet;\n        };\n    }, []);\n\n    const hasUnavailableAccount = combined_cfd_mt5_accounts.some(\n        account => account.status === TRADING_PLATFORM_STATUS.UNAVAILABLE\n    );\n    const hasMaintenanceStatus =\n        combined_cfd_mt5_accounts.some(account => account.status === MT5_ACCOUNT_STATUS.UNDER_MAINTENANCE) ||\n        combined_cfd_mt5_accounts.some(\n            account => getPlatformStatus(account.platform ?? CFD_PLATFORMS.MT5) === TRADING_PLATFORM_STATUS.MAINTENANCE\n        );\n\n    const getMT5AccountAuthStatus = (current_acc_status?: string | null, jurisdiction?: string) => {\n        if (current_acc_status === 'under_maintenance') {\n            return MT5_ACCOUNT_STATUS.UNDER_MAINTENANCE;\n        } else if (current_acc_status === 'unavailable') {\n            return TRADING_PLATFORM_STATUS.UNAVAILABLE;\n        } else if (jurisdiction) {\n            switch (current_acc_status) {\n                case 'proof_failed':\n                case 'poa_failed':\n                case 'poa_outdated':\n                    return MT5_ACCOUNT_STATUS.FAILED;\n                case 'verification_pending':\n                case 'poa_pending':\n                    return MT5_ACCOUNT_STATUS.PENDING;\n                case 'needs_verification':\n                case 'poa_required':\n                    return MT5_ACCOUNT_STATUS.NEEDS_VERIFICATION;\n                case 'migrated_with_position':\n                    return MT5_ACCOUNT_STATUS.MIGRATED_WITH_POSITION;\n                case 'migrated_without_position':\n                    return MT5_ACCOUNT_STATUS.MIGRATED_WITHOUT_POSITION;\n                default:\n                    return null;\n            }\n        }\n        return '';\n    };\n\n    const no_real_mf_account_eu_regulator = no_MF_account && is_eu_user && is_real;\n\n    const no_real_cr_non_eu_regulator = no_CR_account && !is_eu_user && is_real;\n\n    const AddDerivAccount = () => {\n        if (is_real) {\n            if (no_CR_account && !is_eu_user) {\n                return (\n                    <div className='cfd-full-row'>\n                        <AddOptionsAccount />\n                    </div>\n                );\n            } else if (no_MF_account && is_eu_user) {\n                return (\n                    <div className='cfd-full-row'>\n                        <AddOptionsAccount />\n                    </div>\n                );\n            }\n        }\n        return null;\n    };\n\n    useEffect(() => {\n        if (is_landing_company_loaded && is_populating_mt5_account_list) {\n            setPerformanceValue('login_time');\n            setPerformanceValue('redirect_from_deriv_com_time');\n            setPerformanceValue('switch_currency_accounts_time');\n            setPerformanceValue('switch_from_demo_to_real_time');\n            setPerformanceValue('switch_from_real_to_demo_time');\n        }\n        updateMT5AccountDetails();\n    }, [is_landing_company_loaded, is_populating_mt5_account_list]);\n\n    const is_cfd_accounts_supported =\n        combined_cfd_mt5_accounts.length || available_dxtrade_accounts.length || available_ctrader_accounts.length;\n\n    const is_mt5_list_loaded =\n        is_landing_company_loaded &&\n        !is_populating_mt5_account_list &&\n        !is_switching &&\n        is_trading_platform_available_account_loaded;\n\n    if (is_mt5_list_loaded && !is_cfd_accounts_supported) {\n        return null;\n    }\n\n    const onGetAccount = (account: INakalaAcount, isNakala?: boolean) => {\n        let existing_account = account as INakalaAcount;\n        if (isNakala) {\n            setNakalaBannerVisible(true);\n            existing_account = {\n                platform: CFD_PLATFORMS.MT5,\n                market_type: 'synthetic',\n                product: 'standard',\n            };\n        } else {\n            setNakalaBannerVisible(false);\n        }\n        setAccountType({\n            category: selected_account_type,\n            type: existing_account.market_type,\n        });\n        setProduct(existing_account.product);\n        setAppstorePlatform(existing_account.platform);\n        setJurisdictionSelectedShortcode(getDefaultJurisdiction());\n        getTradingPlatformStatus(existing_account.platform);\n    };\n\n    const onOpenNakala = () => {\n        const account: INakalaAcount = {\n            platform: CFD_PLATFORMS.MT5,\n            market_type: 'synthetic',\n            product: 'standard',\n        };\n        startTrade('mt5', account);\n        setNakalaBannerVisible(true);\n    };\n\n    return (\n        <ListingContainer\n            title={\n                isDesktop && (\n                    <div className='cfd-accounts__title'>\n                        <Text size='sm' weight='bold' color='prominent'>\n                            {localize('CFDs')}\n                        </Text>\n                        <CompareAccount accounts_sub_text={accounts_sub_text} is_desktop />\n                    </div>\n                )\n            }\n            description={<CFDsDescription />}\n        >\n            {!isDesktop && <CompareAccount accounts_sub_text={accounts_sub_text} />}\n            {showNakala && (\n                <NakalaLinkedBanner\n                    description={localize('Copy trading with Deriv Nakala')}\n                    onClick={() => (has_mt5_standard_account ? onOpenNakala() : onGetAccount(null, true))}\n                />\n            )}\n            <AddDerivAccount />\n            <div className='cfd-full-row' style={{ paddingTop: '2rem' }}>\n                <Text line_height='m' weight='bold' color='prominent'>\n                    {localize('Deriv MT5')}\n                </Text>\n            </div>\n            {has_svg_accounts_to_migrate && is_landing_company_loaded && <MigrationBanner />}\n            {is_mt5_list_loaded && combined_cfd_mt5_accounts.length ? (\n                <React.Fragment>\n                    {/* MT5 */}\n                    {combined_cfd_mt5_accounts.map((existing_account, index: number) => {\n                        const list_size = combined_cfd_mt5_accounts.length;\n\n                        const track_account_subtitle = existing_account.tracking_name ?? '';\n\n                        const has_mt5_account_status =\n                            existing_account?.status || hasMaintenanceStatus\n                                ? getMT5AccountAuthStatus(\n                                      existing_account?.status,\n                                      existing_account?.landing_company_short\n                                  )\n                                : '';\n                        return (\n                            <TradingAppCard\n                                client_kyc_status={existing_account?.client_kyc_status}\n                                action_type={existing_account.action_type}\n                                availability={selected_region}\n                                clickable_icon\n                                is_new\n                                icon={existing_account.icon}\n                                sub_title={existing_account?.sub_title}\n                                name={!has_mt5_account_status ? existing_account?.name : ''}\n                                short_code_and_region={existing_account?.short_code_and_region}\n                                platform={existing_account.platform}\n                                description={existing_account.description}\n                                key={existing_account.key}\n                                has_divider={(!is_eu_user || is_demo) && getHasDivider(index, list_size, 3)}\n                                onAction={(e?: React.MouseEvent<HTMLButtonElement>) => {\n                                    if (existing_account.action_type === 'get') {\n                                        if (is_traders_dashboard_tracking_enabled) {\n                                            cacheTrackEvents.loadEvent([\n                                                {\n                                                    event: {\n                                                        name: 'ce_tradershub_dashboard_form',\n                                                        properties: {\n                                                            action: 'account_get',\n                                                            form_name: 'traders_hub_default',\n                                                            account_mode: selected_account_type,\n                                                            account_name: track_account_subtitle,\n                                                        },\n                                                    },\n                                                },\n                                            ]);\n                                        }\n                                        if (hasUnavailableAccount || hasMaintenanceStatus)\n                                            return setServerMaintenanceModal(true);\n                                        if (real_account_creation_unlock_date && no_real_mf_account_eu_regulator) {\n                                            setShouldShowCooldownModal(true);\n                                        } else if (no_real_cr_non_eu_regulator || no_real_mf_account_eu_regulator) {\n                                            openDerivRealAccountNeededModal();\n                                        } else {\n                                            onGetAccount(existing_account);\n                                        }\n                                    } else if (existing_account.action_type === 'multi-action') {\n                                        const button_name = e?.currentTarget?.name;\n                                        setProduct(existing_account.product);\n                                        if (button_name === 'transfer-btn') {\n                                            if (is_traders_dashboard_tracking_enabled) {\n                                                cacheTrackEvents.loadEvent([\n                                                    {\n                                                        event: {\n                                                            name: 'ce_tradershub_dashboard_form',\n                                                            properties: {\n                                                                action: 'account_transfer',\n                                                                form_name: 'traders_hub_default',\n                                                                account_mode: selected_account_type,\n                                                                account_name: track_account_subtitle,\n                                                            },\n                                                        },\n                                                    },\n                                                ]);\n                                            }\n\n                                            toggleAccountTransferModal();\n                                            setSelectedAccount(existing_account);\n                                        } else if (button_name === 'topup-btn') {\n                                            if (is_traders_dashboard_tracking_enabled) {\n                                                cacheTrackEvents.loadEvent([\n                                                    {\n                                                        event: {\n                                                            name: 'ce_tradershub_dashboard_form',\n                                                            properties: {\n                                                                action: 'account_topup',\n                                                                form_name: 'traders_hub_default',\n                                                                account_mode: selected_account_type,\n                                                                account_name: track_account_subtitle,\n                                                            },\n                                                        },\n                                                    },\n                                                ]);\n                                            }\n\n                                            showTopUpModal(existing_account);\n                                            setAppstorePlatform(existing_account.platform);\n                                        } else {\n                                            if (is_traders_dashboard_tracking_enabled) {\n                                                cacheTrackEvents.loadEvent([\n                                                    {\n                                                        event: {\n                                                            name: 'ce_tradershub_dashboard_form',\n                                                            properties: {\n                                                                action: 'account_open',\n                                                                form_name: 'traders_hub_default',\n                                                                account_mode: selected_account_type,\n                                                                account_name: track_account_subtitle,\n                                                            },\n                                                        },\n                                                    },\n                                                ]);\n                                            }\n\n                                            startTrade(existing_account.platform, existing_account);\n                                        }\n                                    }\n                                }}\n                                mt5_acc_auth_status={has_mt5_account_status}\n                                selected_mt5_jurisdiction={{\n                                    platform: existing_account.platform,\n                                    category: selected_account_type,\n                                    type: existing_account.market_type,\n                                    jurisdiction: existing_account.landing_company_short,\n                                    product: existing_account.product,\n                                }}\n                                market_type={existing_account?.market_type}\n                            />\n                        );\n                    })}\n                </React.Fragment>\n            ) : (\n                <PlatformLoader />\n            )}\n\n            {!is_eu_user && !CFDs_restricted_countries && !financial_restricted_countries && (\n                <Fragment>\n                    {is_landing_company_loaded && available_ctrader_accounts.length != 0 && (\n                        <>\n                            <div className='cfd-full-row'>\n                                <hr className='divider' />\n                            </div>\n                            <div className='cfd-full-row' style={{ paddingTop: '2rem' }}>\n                                <Text weight='bold'>{localize('Deriv cTrader')}</Text>\n                            </div>\n                        </>\n                    )}\n                    {/* cTrader */}\n                    {is_landing_company_loaded ? (\n                        available_ctrader_accounts.map(account => {\n                            const existing_accounts = getExistingAccounts(account.platform, account.market_type);\n                            const has_existing_accounts = existing_accounts.length > 0;\n                            const track_account_name = is_demo ? `${account.name} ${'Demo'}` : account.name;\n                            return has_existing_accounts ? (\n                                existing_accounts.map(existing_account => (\n                                    <TradingAppCard\n                                        action_type='multi-action'\n                                        availability={selected_region}\n                                        clickable_icon\n                                        icon={account.icon}\n                                        sub_title={account.name}\n                                        name={`${formatMoney(\n                                            existing_account.currency,\n                                            is_demo ? existing_account.display_balance : ctrader_total_balance,\n                                            true\n                                        )} ${existing_account.currency}`}\n                                        description={existing_account.display_login}\n                                        platform={account.platform}\n                                        key={`trading_app_card_${existing_account.display_login}`}\n                                        onAction={(e?: React.MouseEvent<HTMLButtonElement>) => {\n                                            const button_name = e?.currentTarget?.name;\n                                            setProduct();\n                                            if (button_name === 'transfer-btn') {\n                                                if (is_traders_dashboard_tracking_enabled) {\n                                                    cacheTrackEvents.loadEvent([\n                                                        {\n                                                            event: {\n                                                                name: 'ce_tradershub_dashboard_form',\n                                                                properties: {\n                                                                    action: 'account_transfer',\n                                                                    form_name: 'traders_hub_default',\n                                                                    account_mode: selected_account_type,\n                                                                    account_name: track_account_name,\n                                                                },\n                                                            },\n                                                        },\n                                                    ]);\n                                                }\n\n                                                toggleCTraderTransferModal();\n                                            } else if (button_name === 'topup-btn') {\n                                                if (is_traders_dashboard_tracking_enabled) {\n                                                    cacheTrackEvents.loadEvent([\n                                                        {\n                                                            event: {\n                                                                name: 'ce_tradershub_dashboard_form',\n                                                                properties: {\n                                                                    action: 'account_topup',\n                                                                    form_name: 'traders_hub_default',\n                                                                    account_mode: selected_account_type,\n                                                                    account_name: track_account_name,\n                                                                },\n                                                            },\n                                                        },\n                                                    ]);\n                                                }\n\n                                                showTopUpModal(existing_account);\n                                                setAppstorePlatform(account.platform);\n                                            } else {\n                                                if (is_traders_dashboard_tracking_enabled) {\n                                                    cacheTrackEvents.loadEvent([\n                                                        {\n                                                            event: {\n                                                                name: 'ce_tradershub_dashboard_form',\n                                                                properties: {\n                                                                    action: 'account_open',\n                                                                    form_name: 'traders_hub_default',\n                                                                    account_mode: selected_account_type,\n                                                                    account_name: track_account_name,\n                                                                },\n                                                            },\n                                                        },\n                                                    ]);\n                                                }\n\n                                                startTrade(account.platform, existing_account);\n                                            }\n                                        }}\n                                    />\n                                ))\n                            ) : (\n                                <TradingAppCard\n                                    action_type='get'\n                                    availability={selected_region}\n                                    clickable_icon\n                                    icon={account.icon}\n                                    name={account.name}\n                                    platform={account.platform}\n                                    description={account.description}\n                                    onAction={() => {\n                                        setProduct();\n                                        if (is_traders_dashboard_tracking_enabled) {\n                                            cacheTrackEvents.loadEvent([\n                                                {\n                                                    event: {\n                                                        name: 'ce_tradershub_dashboard_form',\n                                                        properties: {\n                                                            action: 'account_get',\n                                                            form_name: 'traders_hub_default',\n                                                            account_mode: selected_account_type,\n                                                            account_name: track_account_name,\n                                                        },\n                                                    },\n                                                },\n                                            ]);\n                                        }\n                                        if ((has_no_real_account || no_CR_account) && is_real) {\n                                            openDerivRealAccountNeededModal();\n                                        } else {\n                                            setAccountType({\n                                                category: selected_account_type,\n                                                type: account.market_type,\n                                            });\n                                            setAppstorePlatform(account.platform);\n                                            getTradingPlatformStatus(account.platform);\n                                        }\n                                    }}\n                                    key={`trading_app_card_${account.name}`}\n                                    is_new\n                                />\n                            );\n                        })\n                    ) : (\n                        <PlatformLoader />\n                    )}\n\n                    {/* dxtrade */}\n                    {is_landing_company_loaded ? (\n                        available_dxtrade_accounts?.map(account => {\n                            const existing_accounts = getExistingAccounts(account.platform, account.market_type);\n                            const has_existing_accounts = existing_accounts.length > 0;\n                            const track_account_name = is_demo ? `${account.name} ${'Demo'}` : account.name;\n\n                            return (\n                                has_existing_accounts &&\n                                existing_accounts.map(existing_account => (\n                                    <>\n                                        <div className='cfd-full-row'>\n                                            <hr className='divider' />\n                                        </div>\n\n                                        <div className='cfd-full-row'>\n                                            <Text line_height='m' weight='bold' color='prominent'>\n                                                {localize('Deriv X')}\n                                            </Text>\n                                        </div>\n                                        <TradingAppCard\n                                            action_type='multi-action'\n                                            availability={selected_region}\n                                            clickable_icon\n                                            icon={account.icon}\n                                            sub_title={account.name}\n                                            name={`${formatMoney(\n                                                existing_account.currency,\n                                                existing_account.display_balance,\n                                                true\n                                            )} ${existing_account.currency}`}\n                                            description={existing_account.login}\n                                            platform={account.platform}\n                                            key={`trading_app_card_${existing_account.login}`}\n                                            onAction={(e?: React.MouseEvent<HTMLButtonElement>) => {\n                                                const button_name = e?.currentTarget?.name;\n                                                setProduct();\n                                                if (button_name === 'transfer-btn') {\n                                                    if (is_traders_dashboard_tracking_enabled) {\n                                                        cacheTrackEvents.loadEvent([\n                                                            {\n                                                                event: {\n                                                                    name: 'ce_tradershub_dashboard_form',\n                                                                    properties: {\n                                                                        action: 'account_transfer',\n                                                                        form_name: 'traders_hub_default',\n                                                                        account_mode: selected_account_type,\n                                                                        account_name: track_account_name,\n                                                                    },\n                                                                },\n                                                            },\n                                                        ]);\n                                                    }\n\n                                                    toggleAccountTransferModal();\n                                                    setSelectedAccount(existing_account);\n                                                } else if (button_name === 'topup-btn') {\n                                                    if (is_traders_dashboard_tracking_enabled) {\n                                                        cacheTrackEvents.loadEvent([\n                                                            {\n                                                                event: {\n                                                                    name: 'ce_tradershub_dashboard_form',\n                                                                    properties: {\n                                                                        action: 'account_topup',\n                                                                        form_name: 'traders_hub_default',\n                                                                        account_mode: selected_account_type,\n                                                                        account_name: track_account_name,\n                                                                    },\n                                                                },\n                                                            },\n                                                        ]);\n                                                    }\n\n                                                    showTopUpModal(existing_account);\n                                                    setAppstorePlatform(account.platform);\n                                                } else {\n                                                    if (is_traders_dashboard_tracking_enabled) {\n                                                        cacheTrackEvents.loadEvent([\n                                                            {\n                                                                event: {\n                                                                    name: 'ce_tradershub_dashboard_form',\n                                                                    properties: {\n                                                                        action: 'account_open',\n                                                                        form_name: 'traders_hub_default',\n                                                                        account_mode: selected_account_type,\n                                                                        account_name: track_account_name,\n                                                                    },\n                                                                },\n                                                            },\n                                                        ]);\n                                                    }\n\n                                                    startTrade(account.platform, existing_account);\n                                                }\n                                            }}\n                                        />\n                                    </>\n                                ))\n                            );\n                        })\n                    ) : (\n                        <PlatformLoader />\n                    )}\n                </Fragment>\n            )}\n\n            {IsEnabledNakala && !is_eu_user && is_real && has_mt5_standard_account && (\n                <Fragment>\n                    <div className='cfd-full-row'>\n                        <hr className='divider' />\n                    </div>\n                    <div className='cfd-full-row' style={{ paddingTop: '2rem' }}>\n                        <Text weight='bold'>{localize('Deriv Nakala')}</Text>\n                    </div>\n                    <TradingAppCard\n                        action_type='open'\n                        availability={selected_region}\n                        clickable_icon\n                        icon={'DerivNakala'}\n                        name={'Deriv Nakala'}\n                        platform={'mt5'}\n                        description={localize('Copy trading for CFDs on MT5')}\n                        onAction={onOpenNakala}\n                        key={`trading_app_card_${'Deriv Nakala'}`}\n                        mt5_acc_auth_status={getMT5AccountAuthStatus(\n                            mt5_trade_account?.status,\n                            mt5_trade_account?.landing_company_short\n                        )}\n                        is_new\n                    />\n                </Fragment>\n            )}\n        </ListingContainer>\n    );\n});\n\nexport default CFDsListing;\n","import { Formik, FormikHelpers } from 'formik';\nimport React from 'react';\nimport { Button, Icon, PasswordMeter, PasswordInput, FormSubmitButton, Loading, Modal, Text } from '@deriv/components';\nimport { validLength, validPassword, validMT5Password, getErrorMessages, WS, redirectToLogin } from '@deriv/shared';\nimport { localize, Localize, getLanguage } from '@deriv/translations';\nimport { getMtCompanies, TMtCompanies } from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport { TResetPasswordIntent, TCFDResetPasswordModal, TError } from './props.types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { CFD_PLATFORMS } from '../Helpers/cfd-config';\n\nconst ResetPasswordIntent = ({ current_list, children, is_eu, ...props }: TResetPasswordIntent) => {\n    const reset_password_intent = localStorage.getItem('cfd_reset_password_intent');\n    const reset_password_type = localStorage.getItem('cfd_reset_password_type') || 'main'; // Default to main\n    const has_intent =\n        reset_password_intent &&\n        /(real|demo)\\.(gold_dml|gold_bvi|gold_v|gold|financial|financial_demo|financial_stp|financial_svg|financial_bvi|financial_fx|financial_v|synthetic|synthetic_svg|synthetic_bvi|synthetic_v|all_swap_free_svg|all_zero_spread_bvi|dxtrade|all)/.test(\n            reset_password_intent\n        );\n\n    let group, type, login, title, server;\n    if (has_intent && current_list) {\n        [server, group, type] = reset_password_intent.split('.');\n        login = current_list[`mt5.${group}.${type}@${server}`].login;\n        title =\n            getMtCompanies(is_eu)[group as keyof TMtCompanies][type as keyof TMtCompanies['demo' | 'real']]?.title ??\n            '';\n    } else if (current_list) {\n        [server, group, type] = (Object.keys(current_list).pop() as string).split('.');\n        login = current_list[`mt5.${group}.${type}@${server}`]?.login ?? '';\n        title =\n            getMtCompanies(is_eu)?.[group as keyof TMtCompanies]?.[type as keyof TMtCompanies['demo' | 'real']]\n                ?.title ?? '';\n    } else {\n        // Set a default intent\n        login = '';\n        title = '';\n    }\n\n    return children({\n        login,\n        title,\n        type: reset_password_type,\n        ...props,\n    });\n};\n\nconst CFDResetPasswordModal = observer(({ platform }: TCFDResetPasswordModal) => {\n    const { client, ui } = useStore();\n\n    const { email, is_eu, is_logged_in } = client;\n    const { is_cfd_reset_password_modal_enabled, setCFDPasswordResetModal } = ui;\n\n    const { current_list } = useCfdStore();\n\n    React.useEffect(() => {\n        if (!/reset-password/.test(location.hash)) {\n            return;\n        }\n        setCFDPasswordResetModal(true);\n    }, [setCFDPasswordResetModal]);\n\n    const [state, setState] = React.useState<{\n        error_code: string | number | undefined;\n        has_error: boolean;\n        error_message: string | undefined;\n        is_finished: boolean;\n        changed_password_type: string;\n    }>({\n        error_code: undefined,\n        has_error: false,\n        error_message: undefined,\n        is_finished: false,\n        changed_password_type: '',\n    });\n\n    const resetUrl = () => {\n        window.history.replaceState(null, '', window.location.pathname + window.location.search);\n    };\n\n    const renderErrorBox = (error: TError) => {\n        setState({\n            ...state,\n            error_code: error.code,\n            has_error: true,\n            error_message: error.message,\n        });\n    };\n    const clearAddressBar = () => {\n        localStorage.removeItem('cfd_reset_password_intent');\n        localStorage.removeItem('cfd_reset_password_type');\n        localStorage.removeItem('cfd_reset_password_code');\n    };\n    const validatePassword = (values: { new_password: string }) => {\n        const errors: { new_password?: string } = {};\n        const max_length = platform === CFD_PLATFORMS.DXTRADE ? 25 : 16;\n\n        if (\n            !validLength(values.new_password, {\n                min: 8,\n                max: max_length,\n            })\n        ) {\n            errors.new_password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: max_length,\n            });\n        } else if (!validPassword(values.new_password)) {\n            errors.new_password = getErrorMessages().password();\n        } else if (platform !== CFD_PLATFORMS.DXTRADE && !validMT5Password(values.new_password)) {\n            errors.new_password = localize(\n                'Please include at least 1 special character such as ( _ @ ? ! / # ) in your password.'\n            );\n        }\n        if (values.new_password.toLowerCase() === email.toLowerCase()) {\n            errors.new_password = localize('Your password cannot be the same as your email address.');\n        }\n\n        return errors;\n    };\n\n    const resetPassword = (\n        values: { new_password: string },\n        password_type: string,\n        login: string,\n        actions: FormikHelpers<{ new_password: string }>\n    ) => {\n        const { setSubmitting } = actions;\n        setSubmitting(true);\n        const request = {\n            account_id: login,\n            platform: CFD_PLATFORMS.MT5,\n            new_password: values.new_password,\n            verification_code: localStorage.getItem('cfd_reset_password_code'),\n        };\n\n        WS.tradingPlatformInvestorPasswordReset(request).then((response: { error: TError; password_type: string }) => {\n            if (response?.error?.code) {\n                renderErrorBox(response.error);\n            } else {\n                setState({\n                    ...state,\n                    is_finished: true,\n                    changed_password_type: password_type,\n                });\n                clearAddressBar();\n            }\n            resetUrl();\n            setSubmitting(false);\n        });\n    };\n    const getIsListFetched = () => {\n        return Object.keys(current_list).length !== 0;\n    };\n\n    const is_invalid_investor_token = !getIsListFetched() && localStorage.getItem('cfd_reset_password_code');\n\n    return (\n        <Modal\n            className='cfd-reset-password-modal'\n            is_open={is_cfd_reset_password_modal_enabled && !is_invalid_investor_token}\n            toggleModal={() => setCFDPasswordResetModal(false)}\n            title={\n                platform === CFD_PLATFORMS.DXTRADE\n                    ? localize('Reset Deriv X investor password')\n                    : localize('Reset Deriv MT5 investor password')\n            }\n            onMount={() => redirectToLogin(is_logged_in, getLanguage(), true)}\n            should_header_stick_body={false}\n        >\n            {!getIsListFetched() && !state.has_error && <Loading is_fullscreen={false} />}\n            {getIsListFetched() && !state.has_error && !state.is_finished && (\n                <ResetPasswordIntent current_list={current_list} is_eu={is_eu}>\n                    {({ type, login }) => (\n                        <Formik\n                            initialValues={{ new_password: '' }}\n                            validate={validatePassword}\n                            onSubmit={(values, actions) => resetPassword(values, type, login, actions)}\n                        >\n                            {({ handleSubmit, errors, values, isSubmitting, handleChange, handleBlur, touched }) => (\n                                <form autoComplete='off' onSubmit={handleSubmit}>\n                                    <div className='cfd-reset-password'>\n                                        <div className='cfd-reset-password__container'>\n                                            <div className='cfd-reset-password__password-area'>\n                                                <PasswordMeter\n                                                    input={values.new_password}\n                                                    has_error={!!(touched.new_password && errors.new_password)}\n                                                    custom_feedback_messages={getErrorMessages().password_warnings}\n                                                >\n                                                    {({ has_warning }: { has_warning: boolean }) => (\n                                                        <PasswordInput\n                                                            autoComplete='new-password'\n                                                            className='cfd-reset-password__password-field'\n                                                            name='new_password'\n                                                            label={localize('New {{type}} password', { type })}\n                                                            onChange={handleChange}\n                                                            onBlur={handleBlur}\n                                                            error={touched.new_password && errors.new_password}\n                                                            value={values.new_password}\n                                                            data-lpignore='true'\n                                                            required\n                                                            hint={\n                                                                !has_warning &&\n                                                                localize(\n                                                                    'Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.'\n                                                                )\n                                                            }\n                                                        />\n                                                    )}\n                                                </PasswordMeter>\n                                            </div>\n                                            {platform !== CFD_PLATFORMS.DXTRADE && (\n                                                <div className='cfd-reset-password__password-area'>\n                                                    <Text\n                                                        as='p'\n                                                        size='xs'\n                                                        align='center'\n                                                        className='cfd-reset-password__description2'\n                                                    >\n                                                        <Localize i18n_default_text='Your password must contain between 8-16 characters that include uppercase and lowercase letters, and at least one number and special character ( _ @ ? ! / # ).' />\n                                                    </Text>\n                                                </div>\n                                            )}\n                                            {isSubmitting && <Loading is_fullscreen={false} />}\n                                            {!isSubmitting && (\n                                                <FormSubmitButton\n                                                    is_disabled={\n                                                        isSubmitting ||\n                                                        !values.new_password ||\n                                                        Object.keys(errors).length > 0\n                                                    }\n                                                    errors={errors}\n                                                    is_center={true}\n                                                    large\n                                                    label={localize('Create {{type}} password', { type })}\n                                                />\n                                            )}\n                                        </div>\n                                    </div>\n                                </form>\n                            )}\n                        </Formik>\n                    )}\n                </ResetPasswordIntent>\n            )}\n            {state.has_error && (\n                <div className='cfd-reset-password__error'>\n                    <Icon icon='IcMt5Expired' size={128} />\n                    <Text as='p' size='xs' weight='bold' align='center' className='cfd-reset-password__heading'>\n                        {state.error_message}\n                    </Text>\n                    {state.error_code === 'InvalidToken' && (\n                        <Text\n                            as='p'\n                            color='prominent'\n                            size='xs'\n                            align='center'\n                            className='cfd-reset-password__description--is-centered'\n                        >\n                            <Localize i18n_default_text='Please request a new password and check your email for the new token.' />\n                        </Text>\n                    )}\n                    <Button\n                        primary\n                        large\n                        className='cfd-reset-password__confirm-button'\n                        onClick={() => {\n                            clearAddressBar();\n                            setCFDPasswordResetModal(false);\n                        }}\n                    >\n                        <Localize i18n_default_text='Ok' />\n                    </Button>\n                </div>\n            )}\n            {state.is_finished && (\n                <div className='cfd-reset-password__success'>\n                    <Icon icon='IcMt5PasswordUpdated' size={128} />\n                    <div className='cfd-reset-password__description'>\n                        <Text as='p' size='xs' align='center' weight='bold' line_height='xxl'>\n                            <Localize i18n_default_text='Password saved' />\n                        </Text>\n                        <Localize\n                            i18n_default_text='Your {{account_type}} password has been changed.'\n                            values={{\n                                account_type:\n                                    state.changed_password_type === 'main' ? localize('main') : localize('investor'),\n                            }}\n                        />\n                    </div>\n                    <Button primary large onClick={() => setCFDPasswordResetModal(false)}>\n                        <Localize i18n_default_text='Ok' />\n                    </Button>\n                </div>\n            )}\n        </Modal>\n    );\n});\n\nexport default React.memo(CFDResetPasswordModal);\n","import { useStore } from '@deriv/stores';\n\n/** @deprecated Use `useStore` from `@deriv/stores` package instead. */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const useStores: () => any = useStore;\n","import React from 'react';\nimport { useLocation } from 'react-router';\nimport { observer } from 'mobx-react-lite';\n\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport CFDResetPasswordModal from '@deriv/cfd/src/Containers/cfd-reset-password-modal';\nimport { Loading } from '@deriv/components';\nimport { useIsTNCNeeded, useWalletMigration } from '@deriv/hooks';\nimport { makeLazyLoader, moduleLoader } from '@deriv/shared';\n\nimport { useStores } from 'Stores';\n\nimport { TTradingPlatformAvailableAccount } from './account-type-modal/types';\n\nconst VerificationDocsListModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () => import(/* webpackChunkName: \"modal_verification-docs-list-modal\" */ './verification-docs-list-modal')\n        ),\n    () => <Loading />\n)();\n\nconst AccountTransferModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_Components_account-transfer-modal\" */ 'Components/account-transfer-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst RegulatorsCompareModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () => import(/* webpackChunkName: \"modal_regulators-compare-modal\" */ './regulators-compare-modal')\n        ),\n    () => <Loading />\n)();\n\nconst WalletsMigrationFailed = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () => import(/* webpackChunkName: \"modal_wallets-migration-failed\" */ './wallets-migration-failed')\n        ),\n    () => <Loading />\n)();\n\nconst WalletsUpgradeModal = makeLazyLoader(\n    () => moduleLoader(() => import(/* webpackChunkName: \"modal_wallets-upgrade-modal\" */ './wallets-upgrade-modal')),\n    () => <Loading />\n)();\n\nconst WalletsEUUpgradeModal = makeLazyLoader(\n    () =>\n        moduleLoader(() => import(/* webpackChunkName: \"modal_wallets-upgrade-modal\" */ './wallets-eu-upgrade-modal')),\n    () => <Loading />\n)();\n\nconst CFDServerErrorDialog = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_cfd-server-error-dialog\" */ '@deriv/cfd/src/Containers/cfd-server-error-dialog'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst CFDPasswordModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_cfd-password-modal\" */ '@deriv/cfd/src/Containers/cfd-password-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst CFDServerMaintenanceModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_cfd-server-maintenance-modal\" */ '@deriv/cfd/src/Containers/cfd-server-maintenance-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst MT5AccountUnavailableModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_mt5-account-unavailable-modal\" */ '@deriv/cfd/src/Containers/mt5-account-unavailable-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst CFDTopUpDemoModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_cfd-top-up-demo-modal\" */ '@deriv/cfd/src/Containers/cfd-top-up-demo-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst MT5TradeModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(/* webpackChunkName: \"modal_cfd_mt5-trade-modal\" */ '@deriv/cfd/src/Containers/mt5-trade-modal')\n        ),\n    () => <Loading />\n)();\n\nconst CFDPasswordManagerModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_cfd-password-manager-modal\" */ '@deriv/cfd/src/Containers/cfd-password-manager-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst MT5MigrationModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_mt5-migration-modal\" */ '@deriv/cfd/src/Containers/mt5-migration-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst ResetTradingPasswordModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_account_reset-trading-password-modal\" */ '@deriv/account/src/Components/reset-trading-password-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst CTraderTransferModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_ctrader-transfer-modal\" */ '@deriv/cfd/src/Containers/ctrader-transfer-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst SetupRealAccountOrGoToDemoModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_setup-real-account-or-go-to-demo\" */ './setup-real-account-or-go-to-demo-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\ntype TCurrentList = DetailsOfEachMT5Loginid & {\n    enabled: number;\n};\n\nconst ModalManager = () => {\n    const { is_eligible, is_in_progress } = useWalletMigration();\n    const store = useStores();\n    const { common, client, modules, traders_hub, ui } = store;\n    const {\n        is_logged_in,\n        is_eu,\n        is_eu_country,\n        is_populating_mt5_account_list,\n        verification_code,\n        is_trading_experience_incomplete,\n        is_virtual,\n    } = client;\n    const { platform } = common;\n    const {\n        current_list,\n        is_mt5_trade_modal_visible,\n        toggleMT5TradeModal,\n        getRealSyntheticAccountsExistingData,\n        getRealFinancialAccountsExistingData,\n        getRealSwapfreeAccountsExistingData,\n        has_cfd_error,\n        mt5_migration_error,\n        is_mt5_password_invalid_format_modal_visible,\n        is_cfd_password_modal_enabled,\n        is_cfd_success_dialog_enabled,\n        is_sent_email_modal_enabled,\n        is_ctrader_transfer_modal_visible,\n        is_server_maintenance_modal_visible,\n        is_account_unavailable_modal_visible,\n    } = modules.cfd;\n    const {\n        enableApp,\n        disableApp,\n        is_reset_trading_password_modal_visible,\n        setResetTradingPasswordModalOpen,\n        setCFDPasswordResetModal,\n        is_top_up_virtual_open,\n        is_top_up_virtual_success,\n        is_mt5_migration_modal_open,\n        should_show_assessment_complete_modal,\n        is_complete_user_profile_modal_open,\n    } = ui;\n    const {\n        is_demo,\n        is_account_transfer_modal_open,\n        toggleAccountTransferModal,\n        is_real_wallets_upgrade_on,\n        is_verification_docs_list_modal_visible,\n        is_regulators_compare_modal_visible,\n        is_wallet_migration_failed,\n        is_setup_real_account_or_go_to_demo_modal_visible,\n    } = traders_hub;\n\n    const [password_manager, setPasswordManager] = React.useState<{\n        is_visible: boolean;\n        selected_login: string;\n        selected_account: string;\n        selected_account_type: string;\n        selected_account_group: '' | 'demo' | 'real';\n        selected_server: string;\n    }>({\n        is_visible: false,\n        selected_login: '',\n        selected_account: '',\n        selected_account_type: '',\n        selected_account_group: '',\n        selected_server: '',\n    });\n\n    const is_tnc_needed = useIsTNCNeeded();\n\n    const togglePasswordManagerModal = (\n        login?: string,\n        title?: string,\n        group?: 'demo' | 'real' | '',\n        type?: string,\n        server?: string\n    ) => {\n        setPasswordManager(prev_state => ({\n            is_visible: !prev_state.is_visible,\n            selected_login: typeof login === 'string' ? login : '',\n            selected_account: typeof title === 'string' ? title : '',\n            selected_account_group: group || '',\n            selected_account_type: type || '',\n            selected_server: server || '',\n        }));\n    };\n\n    const existing_accounts_data = (acc_type: TTradingPlatformAvailableAccount['market_type'] | 'synthetic') => {\n        const current_list_keys = Object.keys(current_list);\n        const should_be_enabled = (list_item: TCurrentList) =>\n            platform === 'dxtrade' ? list_item.enabled === 1 : true;\n        const acc = current_list_keys.some(\n            key => key.startsWith(`${platform}.real.${acc_type}`) && should_be_enabled(current_list[key])\n        )\n            ? current_list_keys\n                  .filter(key => key.startsWith(`${platform}.real.${acc_type}`))\n                  .reduce((_acc, cur) => {\n                      _acc.push(current_list[cur]);\n                      return _acc;\n                  }, [] as DetailsOfEachMT5Loginid[])\n            : undefined;\n        return acc;\n    };\n    const trading_platform_dxtrade_password_reset = verification_code?.trading_platform_dxtrade_password_reset;\n    const trading_platform_mt5_password_reset = verification_code?.trading_platform_mt5_password_reset;\n\n    getRealSyntheticAccountsExistingData(existing_accounts_data('synthetic'));\n    getRealFinancialAccountsExistingData(existing_accounts_data('financial'));\n    getRealSwapfreeAccountsExistingData(existing_accounts_data('all'));\n\n    const should_show_cfd_password_modal =\n        is_cfd_password_modal_enabled ||\n        is_cfd_success_dialog_enabled ||\n        is_mt5_password_invalid_format_modal_visible ||\n        is_sent_email_modal_enabled;\n\n    const url_params = new URLSearchParams(useLocation().search);\n    const url_action_param = url_params.get('action');\n\n    const should_show_wallets_non_eu_upgrade_modal =\n        !is_eu &&\n        !is_tnc_needed &&\n        (is_eligible || is_real_wallets_upgrade_on || is_in_progress) &&\n        !is_complete_user_profile_modal_open;\n\n    const should_show_wallets_eu_upgrade_modal =\n        is_eu &&\n        (is_virtual || !is_trading_experience_incomplete) &&\n        !should_show_assessment_complete_modal &&\n        (is_eligible || is_real_wallets_upgrade_on) &&\n        !url_action_param &&\n        !is_complete_user_profile_modal_open;\n\n    return (\n        <React.Fragment>\n            {is_server_maintenance_modal_visible && <CFDServerMaintenanceModal />}\n            {is_account_unavailable_modal_visible && <MT5AccountUnavailableModal />}\n            {should_show_cfd_password_modal && <CFDPasswordModal platform={platform} />}\n            <CFDResetPasswordModal platform={platform} /> {/* a new condition for this hotfix needs to be found */}\n            {is_ctrader_transfer_modal_visible && <CTraderTransferModal />}\n            {has_cfd_error && <CFDServerErrorDialog />}\n            {(is_top_up_virtual_open || is_top_up_virtual_success) && <CFDTopUpDemoModal platform={platform} />}\n            {is_mt5_trade_modal_visible && (\n                <MT5TradeModal\n                    is_open={is_mt5_trade_modal_visible}\n                    onPasswordManager={togglePasswordManagerModal}\n                    toggleModal={toggleMT5TradeModal}\n                    is_eu_user={(is_logged_in && is_eu) || (!is_logged_in && is_eu_country)}\n                    is_demo={is_demo}\n                />\n            )}\n            {password_manager.is_visible && (\n                <CFDPasswordManagerModal\n                    is_visible={password_manager.is_visible}\n                    selected_login={password_manager.selected_login}\n                    selected_account_group={password_manager.selected_account_group}\n                    selected_account_type={password_manager.selected_account_type}\n                    selected_server={password_manager.selected_server}\n                    platform={platform}\n                    toggleModal={togglePasswordManagerModal}\n                />\n            )}\n            {is_reset_trading_password_modal_visible && (\n                <ResetTradingPasswordModal\n                    platform={trading_platform_dxtrade_password_reset ? 'dxtrade' : 'mt5'}\n                    enableApp={enableApp}\n                    disableApp={disableApp}\n                    toggleResetTradingPasswordModal={() => {\n                        setResetTradingPasswordModalOpen(false);\n                        setCFDPasswordResetModal(false);\n                    }}\n                    is_visible={is_reset_trading_password_modal_visible}\n                    is_loading={is_populating_mt5_account_list}\n                    verification_code={trading_platform_dxtrade_password_reset || trading_platform_mt5_password_reset}\n                />\n            )}\n            {(is_mt5_migration_modal_open || !!mt5_migration_error) && <MT5MigrationModal />}\n            {is_regulators_compare_modal_visible && <RegulatorsCompareModal />}\n            {is_account_transfer_modal_open && (\n                <AccountTransferModal\n                    is_modal_open={is_account_transfer_modal_open}\n                    toggleModal={toggleAccountTransferModal}\n                />\n            )}\n            {is_verification_docs_list_modal_visible && <VerificationDocsListModal />}\n            <React.Fragment>\n                {is_wallet_migration_failed && <WalletsMigrationFailed />}\n                {should_show_wallets_non_eu_upgrade_modal && <WalletsUpgradeModal />}\n                {should_show_wallets_eu_upgrade_modal && <WalletsEUUpgradeModal />}\n            </React.Fragment>\n            {is_setup_real_account_or_go_to_demo_modal_visible && <SetupRealAccountOrGoToDemoModal />}\n        </React.Fragment>\n    );\n};\n\nexport default observer(ModalManager);\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\nimport { useDevice } from '@deriv-com/ui';\n\nconst RegulationsSwitcherLoader = () => {\n    const { isDesktop } = useDevice();\n\n    return (\n        <ContentLoader\n            backgroundColor='var(--general-section-1)'\n            foregroundColor='var(--general-hover)'\n            width={300}\n            height={60}\n        >\n            {isDesktop ? (\n                <rect x='10' y='10' rx='6' ry='6' width='190' height='40' />\n            ) : (\n                <rect x='60' y='10' rx='6' ry='6' width='80' height='30' />\n            )}\n        </ContentLoader>\n    );\n};\n\nexport default RegulationsSwitcherLoader;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Dropdown } from '@deriv/components';\nimport { getAccountTypes } from 'Constants/platform-config';\nimport { useGrowthbookGetFeatureValue } from '@deriv/hooks';\nimport { useStore, observer } from '@deriv/stores';\nimport { startPerformanceEventTimer, cacheTrackEvents } from '@deriv/shared';\nimport { TAccountCategory } from 'Types';\nimport './account-type-dropdown.scss';\n\nconst AccountTypeDropdown = observer(() => {\n    const { traders_hub, client, common } = useStore();\n    const { selected_account_type, selectAccountType } = traders_hub;\n    const { setPrevAccountType } = client;\n    const { current_language } = common;\n\n    const [is_traders_dashboard_tracking_enabled] = useGrowthbookGetFeatureValue({\n        featureFlag: 'ce_tradershub_dashboard_tracking',\n        defaultValue: false,\n    });\n\n    return (\n        <div className={classNames('account-type-dropdown--parent')}>\n            <Dropdown\n                classNameIcon={`account-type-dropdown__icon--${selected_account_type}`}\n                value={selected_account_type}\n                classNameDisplay={classNames(\n                    'account-type-dropdown',\n                    `account-type-dropdown--${selected_account_type}`\n                )}\n                list={getAccountTypes()}\n                key={`account-type-dropdown__icon--key-${current_language}`}\n                onChange={async (e: React.ChangeEvent<HTMLInputElement>) => {\n                    if ((selected_account_type as TAccountCategory) === 'real')\n                        startPerformanceEventTimer('switch_from_real_to_demo_time');\n                    else if ((selected_account_type as TAccountCategory) === 'demo')\n                        startPerformanceEventTimer('switch_from_demo_to_real_time');\n                    await selectAccountType(e.target.value);\n                    await setPrevAccountType(e.target.value);\n                    if (is_traders_dashboard_tracking_enabled) {\n                        cacheTrackEvents.loadEvent([\n                            {\n                                event: {\n                                    name: 'ce_tradershub_dashboard_form',\n                                    properties: {\n                                        action: 'switch_account_mode',\n                                        form_name: 'traders_hub_default',\n                                        account_mode: selected_account_type,\n                                    },\n                                },\n                            },\n                        ]);\n                    }\n                }}\n            />\n        </div>\n    );\n});\n\nexport default AccountTypeDropdown;\n","import ContentLoader from 'react-content-loader';\nimport React from 'react';\nimport { useDevice } from '@deriv-com/ui';\n\nconst TotalAssetsLoader = () => {\n    const { isDesktop } = useDevice();\n\n    return (\n        <ContentLoader\n            backgroundColor={'var(--general-section-1)'}\n            foregroundColor={'var(--general-hover)'}\n            height={50}\n        >\n            {isDesktop ? (\n                <rect x='5' y='5' rx='3' ry='3' width='120' height='50' />\n            ) : (\n                <rect x='0' y='5' rx='3' ry='3' width='100' height='30' />\n            )}\n        </ContentLoader>\n    );\n};\n\nexport default TotalAssetsLoader;\n","import { useStore } from '@deriv/stores';\n\n/** @deprecated Use `useMT5AccountsList` for MT5 accounts and `useDxtradeAccountsList` for Other CFD accounts from `@deriv/api` instead. */\nconst useCFDAllAccounts = () => {\n    const { client } = useStore();\n    const { dxtrade_accounts_list, mt5_login_list, ctrader_accounts_list } = client;\n\n    let cfd_accounts: typeof mt5_login_list = [];\n    if (Array.isArray(mt5_login_list)) {\n        cfd_accounts = [...cfd_accounts, ...mt5_login_list];\n    }\n    if (Array.isArray(dxtrade_accounts_list)) {\n        cfd_accounts = [...cfd_accounts, ...dxtrade_accounts_list];\n    }\n    if (Array.isArray(ctrader_accounts_list)) {\n        cfd_accounts = [...cfd_accounts, ...ctrader_accounts_list];\n    }\n\n    return cfd_accounts;\n};\n\nexport default useCFDAllAccounts;\n","import useCFDAllAccounts from './useCFDAllAccounts';\n\n/**\n *  we can use this hook to get the CFD demo accounts.\n *  it loops through the all of user's CFD accounts, finds and returns demo accounts\n */\nconst useCFDDemoAccounts = () => {\n    const cfd_accounts = useCFDAllAccounts();\n\n    const cfd_demo_accounts = cfd_accounts.filter(account => account.account_type === 'demo');\n\n    return cfd_demo_accounts;\n};\n\nexport default useCFDDemoAccounts;\n","import { useStore } from '@deriv/stores';\nimport useCFDAllAccounts from './useCFDAllAccounts';\n\n/**\n * we can use this hook to get the real CFD accounts for both Eu and Non-Eu regions.\n * it loops through the all of user's CFD accounts, finds and returns real accounts\n */\nconst useCFDRealAccounts = () => {\n    const { traders_hub } = useStore();\n    const { is_eu_user } = traders_hub;\n    const cfd_accounts = useCFDAllAccounts();\n\n    const cfd_real_accounts = cfd_accounts.filter(account => {\n        const is_demo = account.account_type === 'demo';\n        const is_maltainvest = account.landing_company_short === 'maltainvest';\n\n        if (is_demo) return false;\n        if (!is_eu_user) return !is_maltainvest;\n\n        return is_maltainvest;\n    });\n\n    return cfd_real_accounts;\n};\n\nexport default useCFDRealAccounts;\n","import useCFDAllAccounts from './useCFDAllAccounts';\nimport useCFDDemoAccounts from './useCFDDemoAccounts';\nimport useCFDRealAccounts from './useCFDRealAccounts';\n\n/**\n * this is a wrapper hook for useCFDDemoAccounts and useCFDRealAccounts\n * and it returns different cfd account types which are demo, real, and all\n */\n\nconst useCFDAccounts = () => {\n    const all_cfd_accounts = useCFDAllAccounts();\n    const cfd_demo_accounts = useCFDDemoAccounts();\n    const cfd_real_accounts = useCFDRealAccounts();\n\n    return {\n        all: all_cfd_accounts,\n        demo: cfd_demo_accounts,\n        real: cfd_real_accounts,\n    };\n};\n\nexport default useCFDAccounts;\n","import { useStore } from '@deriv/stores';\nimport usePlatformAccounts from './usePlatformAccounts';\n\nconst useRealTotalAssetCurrency = () => {\n    const { client, traders_hub } = useStore();\n    const { current_fiat_currency, is_crypto, currency, default_currency } = client;\n    const { is_eu_user } = traders_hub;\n    const { real: platform_real_accounts } = usePlatformAccounts();\n\n    if (!platform_real_accounts.length) return default_currency;\n\n    const non_crypto_accounts = platform_real_accounts.find(account => !is_crypto(account.currency || 'USD'));\n\n    if (non_crypto_accounts) return non_crypto_accounts?.currency || '';\n\n    const currency_if_is_crypto = is_eu_user\n        ? current_fiat_currency || default_currency\n        : platform_real_accounts[0].currency;\n\n    return is_crypto() ? currency_if_is_crypto : currency;\n};\n\nexport default useRealTotalAssetCurrency;\n","import useRealTotalAssetCurrency from './useTotalAssetCurrency';\nimport { useExchangeRate } from './useExchangeRate';\n/**\n * we can use this hook to get the total balance of the given accounts list.\n * it loops through the accounts list and adds the balance of each account\n * to the total balance, it also converts the balance to the currency of the\n * first account in the list\n */\ntype TUseTotalAccountBalance = {\n    balance?: number;\n    currency?: string;\n    account_type?: string;\n};\n\nconst useTotalAccountBalance = (accounts: TUseTotalAccountBalance[]) => {\n    const total_assets_real_currency = useRealTotalAssetCurrency();\n    const { handleSubscription, getExchangeRate } = useExchangeRate();\n\n    if (!accounts.length) return { balance: 0, currency: total_assets_real_currency };\n\n    const balance = accounts.reduce((total, account) => {\n        const new_base = account?.account_type === 'demo' ? 'USD' : total_assets_real_currency || '';\n        const new_target = account.currency || total_assets_real_currency || '';\n\n        if (new_base !== new_target) handleSubscription(new_base, new_target);\n\n        const new_rate = getExchangeRate(new_base, new_target);\n\n        return total + (account.balance || 0) / new_rate;\n    }, 0);\n\n    return {\n        balance,\n        currency: total_assets_real_currency,\n    };\n};\n\nexport default useTotalAccountBalance;\n","import React from 'react';\nimport { Text, Popover } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport BalanceText from 'Components/elements/text/balance-text';\nimport { observer, useStore } from '@deriv/stores';\nimport './asset-summary.scss';\nimport TotalAssetsLoader from 'Components/pre-loader/total-assets-loader';\nimport {\n    useTotalAccountBalance,\n    useCFDAccounts,\n    usePlatformAccounts,\n    useTotalAssetCurrency,\n    useExchangeRate,\n} from '@deriv/hooks';\nimport { isRatesLoaded } from '../../helpers';\n\nconst AssetSummary = observer(() => {\n    const { isDesktop } = useDevice();\n    const {\n        traders_hub,\n        client,\n        common,\n        modules,\n        gtm: { pushDataLayer },\n    } = useStore();\n\n    const { selected_account_type, is_eu_user, no_CR_account, no_MF_account } = traders_hub;\n    const {\n        is_logging_in,\n        is_switching,\n        default_currency,\n        is_landing_company_loaded,\n        is_mt5_allowed,\n        is_populating_account_list,\n        is_populating_mt5_account_list,\n        is_populating_dxtrade_account_list,\n        is_populating_ctrader_account_list,\n    } = client;\n    const { account_transfer, general_store } = modules.cashier;\n    const { is_transfer_confirm } = account_transfer;\n    const { is_loading } = general_store;\n    const { current_language } = common;\n    const { real: platform_real_accounts, demo: platform_demo_account } = usePlatformAccounts();\n    const { real: cfd_real_accounts, demo: cfd_demo_accounts } = useCFDAccounts();\n\n    const is_still_waiting_for_loading_accounts =\n        is_populating_account_list ||\n        is_populating_mt5_account_list ||\n        is_populating_dxtrade_account_list ||\n        is_populating_ctrader_account_list;\n\n    const platform_real_balance = useTotalAccountBalance(platform_real_accounts);\n    const cfd_real_balance = useTotalAccountBalance(cfd_real_accounts);\n    const cfd_demo_balance = useTotalAccountBalance(cfd_demo_accounts);\n    const total_assets_real_currency = useTotalAssetCurrency();\n    const { exchange_rates } = useExchangeRate();\n\n    const is_real = selected_account_type === 'real';\n\n    const real_total_balance = platform_real_balance.balance + cfd_real_balance.balance;\n    const demo_total_balance = (platform_demo_account?.balance || 0) + cfd_demo_balance.balance;\n\n    const has_active_related_deriv_account = !((no_CR_account && !is_eu_user) || (no_MF_account && is_eu_user)); // if selected region is non-eu, check active cr accounts, if selected region is eu- check active mf accounts\n    const eu_account = is_eu_user && !no_MF_account;\n    const cr_account = !is_eu_user && !no_CR_account;\n\n    const eu_mt5_allowed_total_assets = is_mt5_allowed\n        ? localize('Total assets in your Deriv Apps and Deriv MT5 CFDs demo account.')\n        : localize('Total assets in your account.');\n\n    const should_show_loader =\n        ((is_switching || is_logging_in) && (eu_account || cr_account)) ||\n        !is_landing_company_loaded ||\n        is_loading ||\n        is_transfer_confirm ||\n        is_still_waiting_for_loading_accounts ||\n        !isRatesLoaded(is_real, total_assets_real_currency, platform_real_accounts, cfd_real_accounts, exchange_rates);\n\n    React.useEffect(() => {\n        if (!should_show_loader && is_real) {\n            if (real_total_balance == 0) {\n                pushDataLayer({ event: 'balance', value: false });\n            } else if (real_total_balance > 0) {\n                pushDataLayer({ event: 'balance', value: true });\n            }\n        }\n    }, [should_show_loader, is_real, pushDataLayer, real_total_balance]);\n\n    if (should_show_loader) {\n        return (\n            <React.Fragment>\n                <div className='asset-summary__container content-loader'>\n                    <TotalAssetsLoader />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <div className='asset-summary'>\n            {has_active_related_deriv_account || selected_account_type === 'demo' ? (\n                <React.Fragment>\n                    {isDesktop ? (\n                        <Text align='right' key={`asset-summary--key-${current_language}`} size='xs' line_height='s'>\n                            {localize('Total assets')}\n                        </Text>\n                    ) : null}\n                    <Popover\n                        alignment={isDesktop ? 'left' : 'top'}\n                        message={\n                            is_eu_user ? eu_mt5_allowed_total_assets : localize('Total assets in all your accounts')\n                        }\n                        zIndex={9999}\n                        is_bubble_hover_enabled\n                    >\n                        <BalanceText\n                            currency={\n                                is_real\n                                    ? platform_real_balance.currency || ''\n                                    : platform_demo_account?.currency || default_currency\n                            }\n                            balance={is_real ? real_total_balance : demo_total_balance}\n                            underline_style='dotted'\n                        />\n                    </Popover>\n                </React.Fragment>\n            ) : null}\n        </div>\n    );\n});\n\nexport default AssetSummary;\n","import React, { HTMLAttributes } from 'react';\nimport classNames from 'classnames';\nimport { Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { region_availability } from 'Constants/platform-config';\nimport RegulationsSwitcherLoader from 'Components/pre-loader/regulations-switcher-loader';\nimport { useStore, observer } from '@deriv/stores';\nimport './regulators-switcher.scss';\n\ntype SwitcherItemProps = {\n    onClick: () => void;\n    is_selected: boolean;\n};\n\nconst SwitcherItem = ({ children, is_selected, ...props }: SwitcherItemProps & HTMLAttributes<HTMLDivElement>) => {\n    return (\n        <div className={classNames('item', { 'is-selected': is_selected })} {...props}>\n            <Text size='xs' weight={is_selected ? 'bold' : 'normal'} color={is_selected ? 'prominent' : 'general'}>\n                {children}\n            </Text>\n        </div>\n    );\n};\n\nconst RegulatorSwitcher = observer(() => {\n    const { traders_hub, client } = useStore();\n    const { toggleRegulatorsCompareModal } = traders_hub;\n    const { is_switching } = client;\n\n    return (\n        <div className='regulators-switcher__container'>\n            <div className='regulators-switcher--text'>\n                <Text>{localize('Regulation:')}</Text>\n                <div\n                    data-testid='dt_regulators-switcher-icon'\n                    className='regulators-switcher--icon'\n                    onClick={() => toggleRegulatorsCompareModal()}\n                >\n                    <Icon icon='IcInfoOutline' />\n                </div>\n            </div>\n            {!is_switching ? (\n                <div className='regulators-switcher__switch'>\n                    {region_availability.map(region => {\n                        return (\n                            <SwitcherItem\n                                key={`regulator-item_${region}`}\n                                is_selected={region === traders_hub.selected_region}\n                                onClick={() => traders_hub.selectRegion(region)}\n                            >\n                                {region}\n                            </SwitcherItem>\n                        );\n                    })}\n                </div>\n            ) : (\n                <div className='regulators-switcher__container content-loader'>\n                    <RegulationsSwitcherLoader />\n                </div>\n            )}\n        </div>\n    );\n});\n\nexport default RegulatorSwitcher;\n","import React from 'react';\nimport { Text, Tabs, Icon, Loading } from '@deriv/components';\nimport { ContentFlag, makeLazyLoader, moduleLoader } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport RegulationsSwitcherLoader from 'Components/pre-loader/regulations-switcher-loader';\nimport AccountTypeDropdown from './account-type-dropdown';\nimport AssetSummary from './asset-summary';\nimport RegulatorSwitcher from './regulators-switcher';\nimport './main-title-bar.scss';\n\nconst WalletsBanner = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () => import(/* webpackChunkName: \"Components_wallets-banner\" */ 'Components/banners/wallets-banner')\n        ),\n    () => <Loading />\n)();\n\nconst MainTitleBar = () => {\n    const { isDesktop } = useDevice();\n    const { traders_hub, client } = useStore();\n    const { is_landing_company_loaded, is_switching, has_maltainvest_account } = client;\n    const { selected_region, handleTabItemClick, toggleRegulatorsCompareModal, content_flag } = traders_hub;\n\n    const is_low_risk_cr_real_account =\n        content_flag === ContentFlag.LOW_RISK_CR_NON_EU || content_flag === ContentFlag.LOW_RISK_CR_EU;\n\n    const [active_index, setActiveIndex] = React.useState(0);\n    React.useEffect(() => {\n        setActiveIndex(selected_region === 'Non-EU' ? 0 : 1);\n    }, [selected_region]);\n\n    return (\n        <React.Fragment>\n            {isDesktop ? (\n                <div className='main-title-bar'>\n                    <div className='main-title-bar__right'>\n                        <Text size='m' weight='bold' color='prominent'>\n                            <Localize i18n_default_text=\"Trader's Hub\" />\n                        </Text>\n                        <AccountTypeDropdown />\n                    </div>\n                    {is_low_risk_cr_real_account && has_maltainvest_account && is_landing_company_loaded && (\n                        <RegulatorSwitcher />\n                    )}\n                    <AssetSummary />\n                </div>\n            ) : (\n                <React.Fragment>\n                    <Text weight='bold' className='main-title-bar__text' color='prominent'>\n                        <Localize i18n_default_text=\"Trader's Hub\" />\n                    </Text>\n                    <div className='main-title-bar-mobile'>\n                        <div className='main-title-bar-mobile--account-type-dropdown'>\n                            <AccountTypeDropdown />\n                        </div>\n                        {is_low_risk_cr_real_account && has_maltainvest_account && is_landing_company_loaded ? (\n                            <div className='main-title-bar-mobile--regulator'>\n                                {!is_switching ? (\n                                    <>\n                                        <div\n                                            className='main-title-bar-mobile--regulator--compare-modal'\n                                            onClick={() => toggleRegulatorsCompareModal()}\n                                        >\n                                            <Icon icon='IcInfoOutline' />\n                                        </div>\n                                        <Tabs\n                                            active_index={active_index}\n                                            onTabItemClick={(index: number) => {\n                                                setActiveIndex(index);\n                                                handleTabItemClick(index);\n                                            }}\n                                            top\n                                            is_scrollable\n                                            is_overflow_hidden\n                                        >\n                                            <div label={localize('Non-EU')} />\n                                            <div label={localize('EU')} />\n                                        </Tabs>\n                                    </>\n                                ) : (\n                                    <div className='main-title-bar-mobile--regulator__container content-loader'>\n                                        <RegulationsSwitcherLoader />\n                                    </div>\n                                )}\n                            </div>\n                        ) : null}\n                    </div>\n                    <AssetSummary />\n                </React.Fragment>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default observer(MainTitleBar);\n","import React, { useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Text, StaticUrl } from '@deriv/components';\nimport { ContentFlag, setPerformanceValue, cacheTrackEvents } from '@deriv/shared';\nimport { useGrowthbookGetFeatureValue } from '@deriv/hooks';\nimport { useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport ListingContainer from 'Components/containers/listing-container';\nimport TradingAppCard from 'Components/containers/trading-app-card';\nimport { BrandConfig } from 'Constants/platform-config';\nimport { getHasDivider } from 'Constants/utils';\nimport PlatformLoader from 'Components/pre-loader/platform-loader';\nimport OptionsDescription from 'Components/elements/options-description';\n\nconst OptionsAndMultipliersListing = observer(() => {\n    const { isDesktop } = useDevice();\n    const { traders_hub, client, ui } = useStore();\n    const {\n        available_platforms,\n        is_eu_user,\n        is_real,\n        no_MF_account,\n        no_CR_account,\n        is_demo,\n        content_flag,\n        selected_account_type,\n    } = traders_hub;\n    const { is_landing_company_loaded, is_eu, has_maltainvest_account, real_account_creation_unlock_date } = client;\n\n    const { setShouldShowCooldownModal, openRealAccountSignup } = ui;\n\n    const low_risk_cr_non_eu = content_flag === ContentFlag.LOW_RISK_CR_NON_EU;\n\n    const low_risk_cr_eu = content_flag === ContentFlag.LOW_RISK_CR_EU;\n\n    const high_risk_cr = content_flag === ContentFlag.HIGH_RISK_CR;\n\n    const cr_demo = content_flag === ContentFlag.CR_DEMO;\n\n    const [is_traders_dashboard_tracking_enabled] = useGrowthbookGetFeatureValue({\n        featureFlag: 'ce_tradershub_dashboard_tracking',\n        defaultValue: false,\n    });\n\n    const OptionsTitle = () => {\n        if (!isDesktop) return null;\n        if (low_risk_cr_non_eu || high_risk_cr || cr_demo) {\n            return (\n                <Text size='sm' weight='bold'>\n                    <Localize i18n_default_text='Options' />\n                </Text>\n            );\n        } else if (low_risk_cr_eu || is_eu) {\n            return (\n                <Text size='sm' weight='bold' color='prominent'>\n                    <Localize i18n_default_text='Multipliers' />\n                </Text>\n            );\n        }\n        return null;\n    };\n\n    useEffect(() => {\n        if (is_landing_company_loaded) {\n            setPerformanceValue('option_multiplier_section_loading_time');\n        }\n    }, [is_landing_company_loaded]);\n\n    return (\n        <ListingContainer\n            title={<OptionsTitle />}\n            description={<OptionsDescription is_eu_user={!(low_risk_cr_non_eu || high_risk_cr || cr_demo)} />}\n            is_deriv_platform\n        >\n            {is_real && (no_CR_account || no_MF_account) && (\n                <div className='full-row'>\n                    <TradingAppCard\n                        action_type='get'\n                        availability='All'\n                        clickable_icon\n                        name={localize('Deriv account')}\n                        description={\n                            is_eu_user\n                                ? localize('To trade multipliers, get a Deriv Apps account first.')\n                                : localize('To trade options and multipliers, get a Deriv Apps account first.')\n                        }\n                        icon='Options'\n                        onAction={() => {\n                            if (no_MF_account) {\n                                if (real_account_creation_unlock_date) {\n                                    setShouldShowCooldownModal(true);\n                                } else {\n                                    openRealAccountSignup('maltainvest');\n                                }\n                            } else {\n                                openRealAccountSignup('svg');\n                            }\n                        }}\n                    />\n                </div>\n            )}\n\n            {!available_platforms.length && <PlatformLoader />}\n            {available_platforms.map((available_platform: BrandConfig, index: number) => (\n                <TradingAppCard\n                    key={`trading_app_card_${available_platform.name}`}\n                    {...available_platform}\n                    clickable_icon\n                    action_type={\n                        is_demo || (!no_CR_account && !is_eu_user) || (has_maltainvest_account && is_eu_user)\n                            ? 'trade'\n                            : 'none'\n                    }\n                    is_deriv_platform\n                    onAction={() => {\n                        if (is_traders_dashboard_tracking_enabled) {\n                            cacheTrackEvents.loadEvent([\n                                {\n                                    event: {\n                                        name: 'ce_tradershub_dashboard_form',\n                                        properties: {\n                                            action: 'account_open',\n                                            form_name: 'traders_hub_default',\n                                            account_mode: selected_account_type,\n                                            account_name: is_demo\n                                                ? `${available_platform.name} Demo`\n                                                : available_platform.name,\n                                        },\n                                    },\n                                },\n                            ]);\n                        }\n                    }}\n                    has_divider={(!is_eu_user || is_demo) && getHasDivider(index, available_platforms.length, 3)}\n                />\n            ))}\n        </ListingContainer>\n    );\n});\n\nexport default OptionsAndMultipliersListing;\n","import ContentLoader from 'react-content-loader';\nimport React from 'react';\nimport { MobileWrapper } from '@deriv/components';\n\nconst ButtonToggleLoader = () => (\n    <ContentLoader\n        height={80}\n        backgroundColor={'var(--general-section-1)'}\n        foregroundColor={'var(--general-hover)'}\n        width={500}\n    >\n        <MobileWrapper>\n            <rect x='10' y='35' rx='5' ry='5' width='330' height='45' />\n        </MobileWrapper>\n    </ContentLoader>\n);\n\nexport default ButtonToggleLoader;\n","import React, { useEffect } from 'react';\nimport { useContentFlag, useGrowthbookGetFeatureValue } from '@deriv/hooks';\nimport { observer, useStore } from '@deriv/stores';\nimport { Jurisdiction } from '@deriv/shared';\n\nconst AfterSignupFlow = observer(() => {\n    const { client, ui, traders_hub } = useStore();\n    const { openRealAccountSignup, is_from_signup_account, setIsFromSignupAccount } = ui;\n    const { is_logged_in, has_active_real_account } = client;\n    const { setIsSetupRealAccountOrGoToDemoModalVisible } = traders_hub;\n\n    const { is_cr_demo, is_eu_demo } = useContentFlag();\n\n    const [direct_to_real_account_creation] = useGrowthbookGetFeatureValue({\n        featureFlag: 'direct-real-account-creation-flow',\n        defaultValue: false,\n    });\n\n    const [show_setup_real_or_go_demo] = useGrowthbookGetFeatureValue({\n        featureFlag: 'show_setup_real_or_go_demo',\n        defaultValue: false,\n    });\n\n    useEffect(() => {\n        if (!has_active_real_account && is_from_signup_account && is_logged_in) {\n            // move the user directly to setup real account\n            if (direct_to_real_account_creation && !show_setup_real_or_go_demo) {\n                if (is_cr_demo) {\n                    openRealAccountSignup(Jurisdiction.SVG);\n                    setIsFromSignupAccount(false);\n                } else if (is_eu_demo) {\n                    openRealAccountSignup(Jurisdiction.MALTA_INVEST);\n                    setIsFromSignupAccount(false);\n                }\n            }\n\n            // show setup real or go to demo modal for user\n            if (!direct_to_real_account_creation && show_setup_real_or_go_demo) {\n                setIsSetupRealAccountOrGoToDemoModalVisible(true);\n                setIsFromSignupAccount(false);\n            }\n        }\n    }, [\n        is_cr_demo,\n        is_eu_demo,\n        has_active_real_account,\n        is_from_signup_account,\n        is_logged_in,\n        direct_to_real_account_creation,\n        openRealAccountSignup,\n        setIsFromSignupAccount,\n    ]);\n\n    return null;\n});\n\nexport default AfterSignupFlow;\n","import AfterSignupFlow from './after-signup-flow';\n\nexport default AfterSignupFlow;\n","import { useStore } from '@deriv/stores';\n\n/**\n * A custom hook to check whether the current account has deposited based on statement from the client store\n * This hook should be used in the component wrapped by observer\n */\nconst useStoreHasAccountDeposited = () => {\n    const { client } = useStore();\n    const { statement } = client;\n\n    const count = statement?.count ?? 0;\n    const transactions = statement?.transactions ?? [];\n    const hasDeposited = transactions.some(tx => tx.action_type === 'deposit');\n    const hasTransferred = transactions.some(tx => tx.action_type === 'transfer' && tx.amount && tx.amount > 0);\n    const isLoaded = statement?.count !== undefined && statement?.transactions !== undefined;\n\n    return { count, transactions, hasDeposited, hasTransferred, isLoaded };\n};\n\nexport default useStoreHasAccountDeposited;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport { Analytics } from '@deriv-com/analytics';\nimport { SessionStore, cacheTrackEvents } from '@deriv/shared';\nimport { getAllowedLanguages, Localize } from '@deriv/translations';\nimport { LabelPairedCircleChevronDownXlBoldIcon, LabelPairedXmarkLgBoldIcon } from '@deriv/quill-icons';\nimport { TEbooksUrl } from 'Components/banners/book-banner/book-banner';\n\ntype TBookBannerTemplate = {\n    e_book_show_way: string;\n    e_books_url: TEbooksUrl;\n    e_book_from_landing: keyof TEbooksUrl;\n    lang: ReturnType<typeof getAllowedLanguages>;\n};\n\nconst BookBannerTemplate = ({ e_book_show_way, e_books_url, e_book_from_landing, lang }: TBookBannerTemplate) => {\n    const [is_banner_shows, setIsBannerShows] = React.useState(true);\n    const { traders_hub, ui } = useStore();\n    const { selected_account_type } = traders_hub;\n    const analytics_data: Parameters<typeof Analytics.trackEvent>[1] = {\n        banner_name: e_book_from_landing,\n        account_mode: selected_account_type,\n    };\n\n    React.useEffect(() => {\n        cacheTrackEvents.loadEvent([\n            {\n                event: {\n                    name: 'ce_tradershub_banner',\n                    properties: {\n                        action: 'open',\n                        ...analytics_data,\n                    },\n                },\n            },\n        ]);\n    }, []);\n\n    return (\n        <React.Fragment>\n            {is_banner_shows ? (\n                <div id='e-book-banner' className='book-banner-template'>\n                    <div className='book-banner-template__left'>\n                        <LabelPairedCircleChevronDownXlBoldIcon width='24' height='24' fill='#00822A' />\n                        {e_book_show_way === 'banner-with-link' ? (\n                            <div className='book-banner-template__content'>\n                                <label>\n                                    <Localize i18n_default_text='We’ve sent your e-book to your email. You can also download it here.' />\n                                </label>\n                                <a\n                                    href={e_books_url[e_book_from_landing][lang] || e_books_url[e_book_from_landing].EN}\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    onClick={() => {\n                                        cacheTrackEvents.loadEvent([\n                                            {\n                                                event: {\n                                                    name: 'ce_tradershub_banner',\n                                                    properties: {\n                                                        action: 'click download',\n                                                        ...analytics_data,\n                                                    },\n                                                },\n                                            },\n                                        ]);\n                                    }}\n                                >\n                                    <Localize i18n_default_text='Download e-book' />\n                                </a>\n                            </div>\n                        ) : (\n                            <div className='book-banner-template__content'>\n                                <label>\n                                    <Localize i18n_default_text='We’ve sent your e-book. Check your email to download it.' />\n                                </label>\n                            </div>\n                        )}\n                    </div>\n                    <LabelPairedXmarkLgBoldIcon\n                        className='book-banner-template__cancel'\n                        width='24'\n                        height='24'\n                        fill='var(--text-prominent)'\n                        onClick={() => {\n                            cacheTrackEvents.loadEvent([\n                                {\n                                    event: {\n                                        name: 'ce_tradershub_banner',\n                                        properties: {\n                                            action: 'close',\n                                            ...analytics_data,\n                                        },\n                                    },\n                                },\n                            ]);\n                            SessionStore.remove('show_book');\n                            setIsBannerShows(false);\n                        }}\n                    />\n                </div>\n            ) : null}\n        </React.Fragment>\n    );\n};\n\nexport default BookBannerTemplate;\n","import React from 'react';\nimport { SessionStore } from '@deriv/shared';\nimport { getAllowedLanguages, getLanguage } from '@deriv/translations';\nimport { Analytics } from '@deriv-com/analytics';\nimport BookBannerTemplate from 'Components/banners/book-banner/banner-template';\n\ntype TEbooks = 'forex-ebook' | 'stock-ebook' | 'cryptocurrencies-ebook' | 'synthetic-indices-ebook' | 'chart-patterns';\nexport type TEbooksUrl = { [B in TEbooks]: Record<keyof ReturnType<typeof getAllowedLanguages>, string> };\n\nconst e_books_url: TEbooksUrl = {\n    'forex-ebook': {\n        EN: 'https://deriv.link/ebook-forex-en-lq',\n        FR: 'https://deriv.link/ebook-forex-fr-lq',\n        PT: 'https://deriv.link/ebook-forex-pt-lq',\n        ES: 'https://deriv.link/ebook-forex-sp-lq',\n        VI: 'https://deriv.link/ebook-forex-vn-lq',\n    },\n    'stock-ebook': {\n        EN: 'https://deriv.link/ebook-stocks-en-lq',\n        FR: 'https://deriv.link/ebook-stocks-fr-lq',\n        PT: 'https://deriv.link/ebook-stocks-pt-lq',\n        ES: 'https://deriv.link/ebook-stocks-sp-lq',\n    },\n    'cryptocurrencies-ebook': {\n        EN: 'https://deriv.link/ebook-crypto-en-lq',\n        FR: 'https://deriv.link/ebook-crypto-fr-lq',\n        PT: 'https://deriv.link/ebook-crypto-pt-lq',\n        ES: 'https://deriv.link/ebook-crypto-fr-lq',\n    },\n    'synthetic-indices-ebook': {\n        EN: 'https://deriv.link/ebook-synthetics-en-lq',\n        FR: 'https://deriv.link/ebook-synthetics-fr-lq',\n        PT: 'https://deriv.link/ebook-synthetics-pt-lq',\n        ES: 'https://deriv.link/ebook-synthetics-sp-lq',\n        VI: 'https://deriv.link/ebook-synthetics-vn-lq',\n    },\n    'chart-patterns': {\n        EN: 'https://deriv.link/ebook-10chart-en-lq',\n        FR: 'https://deriv.link/ebook-10charts-fr-lq',\n        PT: 'https://deriv.link/ebook-10charts-pt-lq',\n        ES: 'https://deriv.link/ebook-10charts-sp-lq',\n    },\n};\nconst e_book_show_way: string = Analytics.getFeatureValue('e_book', 'inactive');\n\nconst BookBanner = () => {\n    const e_book_from_landing: TEbooks = SessionStore.get('show_book');\n    const lang = getLanguage();\n\n    if (e_book_from_landing && e_book_show_way?.includes('banner')) {\n        return (\n            <BookBannerTemplate\n                e_book_show_way={e_book_show_way}\n                e_books_url={e_books_url}\n                e_book_from_landing={e_book_from_landing}\n                lang={lang}\n            />\n        );\n    }\n    // Will be a part of upcoming a/b experiment\n    // if (e_book && e_book_show_way === 'popup') return ( <BookPopupTemplate e_books_url={e_books_url} e_book={e_book} lang={lang} />)\n    return null;\n};\n\nexport default BookBanner;\n","import BookBanner from './book-banner';\nimport './book-banner.scss';\n\nexport default BookBanner;\n","import React from 'react';\n\nimport { Loading } from '@deriv/components';\nimport { useGrowthbookGetFeatureValue, useStoreHasAccountDeposited, useWalletMigration } from '@deriv/hooks';\nimport { makeLazyLoader, moduleLoader } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\n\nimport BookBanner from 'Components/banners/book-banner';\nimport WalletsBanner from 'Components/banners/wallets-banner';\n\nconst RealAccountCreationBanner = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"Components_banners_real-account-creation-banner\" */ 'Components/banners/real-account-creation-banner'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst DepositNowBanner = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"Components_banners_deposit-now-banner\" */ 'Components/banners/deposit-now-banner'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst TradersHubBanners = observer(() => {\n    const { client, common, traders_hub } = useStore();\n    const { current_language } = common;\n    const { is_landing_company_loaded, has_any_real_account, is_eu, has_maltainvest_account, is_low_risk } = client;\n    const { is_real } = traders_hub;\n    const { hasDeposited, hasTransferred, isLoaded } = useStoreHasAccountDeposited();\n    const { is_eligible, is_failed, is_in_progress, is_migrating } = useWalletMigration();\n\n    const [ff_real_account_creation_banner] = useGrowthbookGetFeatureValue({\n        featureFlag: 'traders-hub-real-account-banner',\n        defaultValue: false,\n    });\n\n    const [ff_deposit_now_banner] = useGrowthbookGetFeatureValue({\n        featureFlag: 'traders_hub_first_deposit_banner',\n        defaultValue: false,\n    });\n\n    const is_wallet_banner_visible =\n        is_in_progress ||\n        is_migrating ||\n        is_failed ||\n        (!is_eu && is_eligible);\n\n    const should_add_empty_div_for_get_started_trading_banner_clever_tap = has_any_real_account;\n    const should_show_real_account_creation_banner =\n        ff_real_account_creation_banner && !has_any_real_account && !is_eu && is_landing_company_loaded;\n    const should_show_deposit_now_banner =\n        ff_deposit_now_banner &&\n        is_real &&\n        !(is_low_risk && has_maltainvest_account) &&\n        isLoaded &&\n        !hasDeposited &&\n        !hasTransferred &&\n        !is_wallet_banner_visible;\n\n    return (\n        <React.Fragment key={current_language}>\n            {should_add_empty_div_for_get_started_trading_banner_clever_tap && (\n                <div className='get-started-trading-banner-ct' />\n            )}\n            {should_show_real_account_creation_banner && <RealAccountCreationBanner />}\n            {should_show_deposit_now_banner && <DepositNowBanner />}\n            <BookBanner />\n            <WalletsBanner />\n        </React.Fragment>\n    );\n});\n\nexport default TradersHubBanners;\n","import TradersHubBanners from './traders-hub-banners';\n\nexport default TradersHubBanners;\n","import React from 'react';\nimport { InlineMessage, Text } from '@deriv-com/ui';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { formatDate } from '@deriv/shared';\nimport './business-closure-banner.scss';\n\nconst BusinessClosureBanner = observer(() => {\n    const { client } = useStore();\n    const { is_account_to_be_closed_by_residence, account_time_of_closure } = client;\n\n    if (!is_account_to_be_closed_by_residence) return null;\n\n    return (\n        <InlineMessage type='filled' variant='warning' className='business-closure-banner'>\n            <Text size='xs'>\n                <Localize\n                    i18n_default_text='Due to business changes, client accounts in your country are to be closed. Deposits and trading are disabled. Withdraw your funds by {{date}}.'\n                    values={{\n                        date: formatDate(account_time_of_closure, 'DD MMM YYYY'),\n                    }}\n                />\n            </Text>\n        </InlineMessage>\n    );\n});\n\nexport default BusinessClosureBanner;\n","import BusinessClosureBanner from './business-closure-banner';\n\nexport default BusinessClosureBanner;\n","import React from 'react';\nimport { ButtonToggle, Div100vhContainer, Loading, Text } from '@deriv/components';\nimport { routes, checkServerMaintenance, startPerformanceEventTimer } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { useContentFlag } from '@deriv/hooks';\nimport { useDevice } from '@deriv-com/ui';\nimport CFDsListing from 'Components/cfds-listing';\nimport ModalManager from 'Components/modals/modal-manager';\nimport MainTitleBar from 'Components/main-title-bar';\nimport OptionsAndMultipliersListing from 'Components/options-multipliers-listing';\nimport ButtonToggleLoader from 'Components/pre-loader/button-toggle-loader';\nimport AfterSignupFlow from 'Components/after-signup-flow';\nimport Disclaimer from 'Components/disclaimer';\nimport TradersHubBanners from 'Components/banners/traders-hub-banners';\nimport BusinessClosureBanner from 'Components/banners/business-closure-banner';\nimport classNames from 'classnames';\nimport './traders-hub.scss';\n\ntype OrderedPlatformSectionsProps = {\n    is_cfd_visible?: boolean;\n    is_options_and_multipliers_visible?: boolean;\n};\n\nconst OrderedPlatformSections = observer(\n    ({ is_cfd_visible = true, is_options_and_multipliers_visible = true }: OrderedPlatformSectionsProps) => {\n        const {\n            traders_hub: { selected_region, is_eu_user },\n        } = useStore();\n\n        return (\n            <div\n                data-testid='dt_traders_hub'\n                className={classNames('traders-hub__main-container', {\n                    'traders-hub__main-container-reversed': is_eu_user || selected_region === 'EU',\n                })}\n            >\n                {is_options_and_multipliers_visible && <OptionsAndMultipliersListing />}\n                {is_cfd_visible && <CFDsListing />}\n            </div>\n        );\n    }\n);\n\nconst TradersHub = observer(() => {\n    const { isDesktop } = useDevice();\n    const { traders_hub, client, ui } = useStore();\n    const { notification_messages_ui: Notifications } = ui;\n    const {\n        is_landing_company_loaded,\n        is_logged_in,\n        is_switching,\n        is_logging_in,\n        is_single_logging_in,\n        is_account_setting_loaded,\n        is_mt5_allowed,\n        website_status,\n    } = client;\n\n    const { is_eu_demo, is_eu_real } = useContentFlag();\n    const {\n        selected_platform_type,\n        setTogglePlatformType,\n        is_eu_user,\n        combined_cfd_mt5_accounts,\n        available_ctrader_accounts,\n        available_dxtrade_accounts,\n    } = traders_hub;\n    const traders_hub_ref = React.useRef<HTMLDivElement>(null);\n\n    const can_show_notify =\n        (!is_switching && !is_logging_in && is_account_setting_loaded && is_landing_company_loaded) ||\n        checkServerMaintenance(website_status);\n\n    React.useEffect(() => {\n        if (is_eu_user) {\n            setTogglePlatformType('cfd');\n        }\n    }, [is_eu_user, setTogglePlatformType]);\n\n    React.useEffect(() => {\n        if (is_eu_user) setTogglePlatformType('cfd');\n    }, [is_eu_user, setTogglePlatformType]);\n\n    React.useLayoutEffect(() => {\n        startPerformanceEventTimer('option_multiplier_section_loading_time');\n    }, []);\n\n    const eu_title = is_eu_demo || is_eu_real || is_eu_user;\n    const getPlatformToggleOptions = () => [\n        { text: eu_title ? localize('Multipliers') : localize('Options'), value: 'options' },\n        { text: localize('CFDs'), value: 'cfd' },\n    ];\n    const platform_toggle_options = getPlatformToggleOptions();\n    const platform_toggle_options_eu = getPlatformToggleOptions().reverse();\n\n    const platformTypeChange = (event: {\n        target: {\n            value: string;\n            name: string;\n        };\n    }) => {\n        setTogglePlatformType(event.target.value);\n    };\n    if (!is_logged_in) return null;\n    if (is_single_logging_in) return <Loading is_fullscreen />;\n    const is_cfd_accounts_supported =\n        combined_cfd_mt5_accounts.length || available_dxtrade_accounts.length || available_ctrader_accounts.length;\n    const should_show_cfd_section = !!(is_mt5_allowed && is_cfd_accounts_supported);\n\n    const getOrderedPlatformSections = () => {\n        if (should_show_cfd_section) {\n            return (\n                <OrderedPlatformSections\n                    is_cfd_visible={selected_platform_type === 'cfd'}\n                    is_options_and_multipliers_visible={selected_platform_type === 'options'}\n                />\n            );\n        }\n        return <OrderedPlatformSections is_cfd_visible={false} is_options_and_multipliers_visible={true} />;\n    };\n\n    const desktopContent = !is_landing_company_loaded ? (\n        <OrderedPlatformSections />\n    ) : (\n        <OrderedPlatformSections is_cfd_visible={should_show_cfd_section} />\n    );\n\n    const mobileTabletContent = (\n        <React.Fragment>\n            {is_landing_company_loaded ? (\n                should_show_cfd_section && (\n                    <ButtonToggle\n                        buttons_arr={is_eu_user ? platform_toggle_options_eu : platform_toggle_options}\n                        className='traders-hub__button-toggle'\n                        has_rounded_button\n                        is_traders_hub={window.location.pathname === routes.traders_hub}\n                        name='platform_type'\n                        onChange={platformTypeChange}\n                        value={selected_platform_type}\n                    />\n                )\n            ) : (\n                <ButtonToggleLoader />\n            )}\n            {is_landing_company_loaded && !should_show_cfd_section && (\n                <div className='traders-hub--mt5-not-allowed'>\n                    <Text size='s' weight='bold' color='prominent'>\n                        <Localize i18n_default_text='Multipliers' />\n                    </Text>\n                </div>\n            )}\n            {getOrderedPlatformSections()}\n        </React.Fragment>\n    );\n\n    return (\n        <React.Fragment>\n            <AfterSignupFlow />\n            <BusinessClosureBanner />\n            <Div100vhContainer className='traders-hub--mobile' height_offset='50px' is_disabled={isDesktop}>\n                {can_show_notify && <Notifications />}\n                <div\n                    id='traders-hub'\n                    className={classNames('traders-hub', {\n                        'traders-hub--eu-user': is_eu_user && should_show_cfd_section,\n                        'traders-hub--eu-user-without-mt5': is_eu_user && !should_show_cfd_section,\n                    })}\n                    ref={traders_hub_ref}\n                >\n                    <TradersHubBanners />\n                    <MainTitleBar />\n                    {isDesktop ? desktopContent : mobileTabletContent}\n                    <ModalManager />\n                </div>\n            </Div100vhContainer>\n            {is_eu_user && <Disclaimer />}\n        </React.Fragment>\n    );\n});\n\nexport default TradersHub;\n","export const CFD_PLATFORMS = {\n    MT5: 'mt5',\n    DXTRADE: 'dxtrade',\n    CTRADER: 'ctrader',\n    CFD: 'cfd',\n    CFDS: 'CFDs',\n} as const;\n\nexport const CATEGORY = {\n    DEMO: 'demo',\n    REAL: 'real',\n} as const;\n\nexport const MARKET_TYPE = {\n    SYNTHETIC: 'synthetic',\n    GAMING: 'gaming',\n    FINANCIAL: 'financial',\n    ALL: 'all',\n} as const;\n\nexport const PRODUCT = {\n    SWAPFREE: 'swap_free',\n    ZEROSPREAD: 'zero_spread',\n    CTRADER: 'ctrader',\n    DERIVX: 'derivx',\n    STP: 'stp',\n    GOLD: 'gold',\n} as const;\n\nexport const MOBILE_PLATFORMS = {\n    IOS: 'ios',\n    HAUWEI: 'huawei',\n    ANDROID: 'android',\n} as const;\n\nexport const DESKTOP_PLATFORMS = {\n    WINDOWS: 'windows',\n    LINUX: 'linux',\n    MACOS: 'macos',\n} as const;\n\nexport const REGION = {\n    EU: 'EU',\n    NON_EU: 'Non-EU',\n} as const;\n\nexport const JURISDICTION = {\n    SVG: 'svg',\n    BVI: 'bvi',\n    VANUATU: 'vanuatu',\n    LABUAN: 'labuan',\n    MALTA_INVEST: 'maltainvest',\n} as const;\n\nexport const MARKET_TYPE_SHORTCODE = {\n    SYNTHETIC: 'synthetic',\n    GAMING: 'gaming',\n    FINANCIAL: 'financial',\n    FINANCIAL_LABUAN: 'financial_stp_labuan',\n    FINANCIAL_MALTA_INVEST: 'financial_maltainvest',\n    FINANCIAL_GOLD: 'financial_gold',\n    FINANCIAL_SVG: 'financial_svg',\n    FINANCIAL_BVI: 'financial_bvi',\n    FINANCIAL_DML: 'financial_dml',\n    FINANCIAL_VANUATU: 'financial_vanuatu',\n    CFDS_GOLD: 'CFDs_gold',\n    ALL_SWAP_FREE_SVG: 'all_swap_free_svg',\n    ALL_ZERO_SPREAD_BVI: 'all_zero_spread_bvi',\n    ALL_ZS_BVI: 'all_bvi',\n    ALL_DXTRADE: 'all_',\n} as const;\n\nexport const QUERY_STATUS = {\n    SUCCESS: 'success',\n    ERROR: 'error',\n    IDLE: 'idle',\n    LOADING: 'loading',\n} as const;\n\nexport const PASSWORD_TYPE = {\n    INVESTOR: 'investor',\n} as const;\n","import { Jurisdiction, PRODUCT } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TProducts } from 'Components/props.types';\n\nexport type TDxCompanies = ReturnType<typeof getDxCompanies>;\nexport type TMtCompanies = ReturnType<typeof getMtCompanies>;\nexport type TCTraderCompanies = ReturnType<typeof getCTraderCompanies>;\n\nexport const getDxCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('CFDs'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Standard'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: localize('Financial'),\n    };\n    return {\n        demo: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getCTraderCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('All'),\n    };\n    return {\n        demo: {\n            all: {\n                ctrader_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('All'),\n                short_title: all_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getMtCompanies = (is_eu: boolean, product?: TProducts) => {\n    const all_config = {\n        account_type: '',\n        leverage: 100,\n        short_title: product === 'swap_free' ? localize('Swap-Free') : localize('Zero Spread'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Standard'),\n    };\n\n    let financial_title;\n    switch (product) {\n        case PRODUCT.STP:\n            financial_title = localize('Financial STP');\n            break;\n        case PRODUCT.GOLD:\n            financial_title = localize('Gold');\n            break;\n        default:\n            financial_title = localize('Financial');\n    }\n\n    const financial_demo_title = product === PRODUCT.GOLD ? localize('Demo Gold') : localize('Demo Financial');\n    const financial_demo_title_eu = product === PRODUCT.GOLD ? localize('Demo Gold') : localize('Demo CFDs');\n    const financial_demo_short_title = product === PRODUCT.GOLD ? localize('Gold') : localize('Deriv CFDs');\n    const financial_title_eu = product === PRODUCT.GOLD ? localize('Deriv Gold') : localize('Deriv CFDs');\n\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: is_eu ? financial_demo_short_title : financial_title,\n    };\n    const financial_stp_config = {\n        account_type: 'financial_stp',\n        leverage: 100,\n        short_title: localize('Financial STP'),\n    };\n\n    return {\n        demo: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: product === 'swap_free' ? localize('Demo Swap-Free') : localize('Demo Zero Spread'),\n                short_title: all_config.short_title,\n            },\n            all_swap_free_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free SVG'),\n                short_title: localize('Swap-Free SVG'),\n            },\n            all_zero_spread_bvi: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Zero Spread BVI'),\n                short_title: localize('Zero Spread BVI'),\n            },\n            ctrader: {\n                mt5_account_type: all_config.account_type,\n                leverage: '500',\n                title: localize('Demo'),\n                short_title: localize('cTrader'),\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? financial_demo_title_eu : financial_demo_title,\n                short_title: financial_config.short_title,\n            },\n            financial_demo: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Standard SVG'),\n                short_title: synthetic_config.short_title,\n            },\n\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial SVG'),\n                short_title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Demo Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: product === 'swap_free' ? localize('Swap-Free') : localize('Zero Spread'),\n                short_title: all_config.short_title,\n            },\n            all_swap_free_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free SVG'),\n                short_title: all_config.short_title,\n            },\n            all_zero_spread_bvi: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Zero Spread BVI'),\n                short_title: all_config.short_title,\n            },\n            ctrader: {\n                mt5_account_type: all_config.account_type,\n                leverage: '500',\n                title: localize('Real'),\n                short_title: localize('cTrader'),\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard SVG'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_bvi: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard BVI'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_v: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard Vanuatu'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? financial_title_eu : financial_title,\n                short_title: financial_config.short_title,\n            },\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n                short_title: financial_config.short_title,\n            },\n            financial_bvi: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial BVI'),\n                short_title: financial_config.short_title,\n            },\n            financial_fx: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Labuan'),\n                short_title: financial_config.short_title,\n            },\n            financial_v: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Vanuatu'),\n                short_title: financial_config.short_title,\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getFormattedJurisdictionCode = (jurisdiction_code: string) => {\n    let formatted_label = '';\n\n    switch (jurisdiction_code) {\n        case Jurisdiction.SVG:\n            formatted_label = localize('SVG');\n            break;\n        case Jurisdiction.BVI:\n            formatted_label = localize('BVI');\n            break;\n        case Jurisdiction.LABUAN:\n            formatted_label = localize('Labuan');\n            break;\n        case Jurisdiction.VANUATU:\n            formatted_label = localize('Vanuatu');\n            break;\n        case Jurisdiction.MALTA_INVEST:\n            formatted_label = localize('Malta');\n            break;\n        default:\n            formatted_label = jurisdiction_code?.toUpperCase();\n            break;\n    }\n\n    return formatted_label;\n};\n","import { ContentFlag } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\n\nconst useContentFlag = () => {\n    const { traders_hub } = useStore();\n    const content_flag = traders_hub?.content_flag;\n\n    return {\n        is_low_risk_cr_non_eu: content_flag === ContentFlag.LOW_RISK_CR_NON_EU,\n        is_low_risk_cr_eu: content_flag === ContentFlag.LOW_RISK_CR_EU,\n        is_high_risk_cr: content_flag === ContentFlag.HIGH_RISK_CR,\n        is_cr_demo: content_flag === ContentFlag.CR_DEMO,\n        is_eu_demo: content_flag === ContentFlag.EU_DEMO,\n        is_eu_real: content_flag === ContentFlag.EU_REAL,\n    };\n};\n\nexport default useContentFlag;\n","import { useStore } from '@deriv/stores';\n\nexport const useExchangeRate = () => {\n    const { client } = useStore();\n    const {\n        exchange_rates,\n        subscribeToExchangeRate,\n        getExchangeRate,\n        unsubscribeFromExchangeRate,\n        unsubscribeFromAllExchangeRates,\n    } = client;\n\n    return {\n        handleSubscription: subscribeToExchangeRate,\n        exchange_rates,\n        getExchangeRate,\n        unsubscribe: unsubscribeFromExchangeRate,\n        unsubscribeAll: unsubscribeFromAllExchangeRates,\n    };\n};\n\nexport default useExchangeRate;\n","const isBrowser = () => typeof window !== 'undefined';\n\nconst deriv_com_url = 'deriv.com';\nconst deriv_me_url = 'deriv.me';\nconst deriv_be_url = 'deriv.be';\n\nconst supported_domains = [deriv_com_url, deriv_me_url, deriv_be_url];\nconst domain_url_initial = (isBrowser() && window.location.hostname.split('app.')[1]) || '';\nconst domain_url = supported_domains.includes(domain_url_initial) ? domain_url_initial : deriv_com_url;\n\nexport const deriv_urls = Object.freeze({\n    DERIV_HOST_NAME: domain_url,\n    DERIV_COM_PRODUCTION: `https://${domain_url}`,\n    DERIV_COM_PRODUCTION_EU: `https://eu.${domain_url}`,\n    DERIV_COM_STAGING: `https://staging.${domain_url}`,\n    DERIV_APP_PRODUCTION: `https://app.${domain_url}`,\n    DERIV_APP_STAGING: `https://staging-app.${domain_url}`,\n    HUB_PRODUCTION: `https://hub.${domain_url}/tradershub`,\n    HUB_STAGING: `https://staging-hub.${domain_url}/tradershub`,\n    SMARTTRADER_PRODUCTION: `https://smarttrader.${domain_url}`,\n    SMARTTRADER_STAGING: `https://staging-smarttrader.${domain_url}`,\n    P2P_PRODUCTION: `https://p2p.${domain_url}`,\n    P2P_STAGING: `https://staging-p2p.${domain_url}`,\n    BOT_PRODUCTION: `https://dbot.${domain_url}`,\n    BOT_STAGING: `https://staging-dbot.${domain_url}`,\n});\n/**\n * @deprecated Please use 'URLConstants.whatsApp' from '@deriv-com/utils' instead of this.\n */\nexport const whatsapp_url = 'https://wa.me/35699578341';\n","import { LocalStorageUtils, URLUtils } from '@deriv-com/utils';\nimport { deriv_urls } from './constants';\n\n/**\n * @deprecated Please use 'URLUtils.getQueryParameter' from '@deriv-com/utils' instead of this.\n */\nexport const getlangFromUrl = () => {\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    const lang = urlParams.get('lang');\n    return lang;\n};\n\n/**\n * @deprecated Please use 'URLUtils.getQueryParameter' from '@deriv-com/utils' instead of this.\n */\nexport const getActionFromUrl = () => {\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    const action = urlParams.get('action');\n    return action;\n};\n\nexport const getUrlSmartTrader = () => {\n    const { is_staging_deriv_app } = getPlatformFromUrl();\n    const localize_language = LocalStorageUtils.getValue<string>('i18n_language');\n    const url_lang = URLUtils.getQueryParameter('lang');\n    const i18n_language = localize_language || url_lang || 'en';\n\n    let base_link = '';\n\n    if (is_staging_deriv_app) {\n        base_link = deriv_urls.SMARTTRADER_STAGING;\n    } else {\n        base_link = deriv_urls.SMARTTRADER_PRODUCTION;\n    }\n\n    return `${base_link}/${i18n_language.toLowerCase()}/trading.html`;\n};\n\nexport const getUrlBot = () => {\n    const { is_staging_deriv_app } = getPlatformFromUrl();\n    const localize_language = LocalStorageUtils.getValue<string>('i18n_language');\n    const url_lang = URLUtils.getQueryParameter('lang');\n    const i18n_language = localize_language || url_lang || 'en';\n\n    let base_link = '';\n\n    if (is_staging_deriv_app) {\n        base_link = deriv_urls.BOT_STAGING;\n    } else {\n        base_link = deriv_urls.BOT_PRODUCTION;\n    }\n\n    const url = `${base_link}?lang=${i18n_language.toLowerCase()}`;\n    return url;\n};\n\nexport const getUrlP2P = (is_language_required = true) => {\n    const { is_staging_deriv_app } = getPlatformFromUrl();\n\n    const localize_language = LocalStorageUtils.getValue<string>('i18n_language');\n    const url_lang = URLUtils.getQueryParameter('lang');\n    const i18n_language = localize_language || url_lang || 'en';\n    const base_link = is_staging_deriv_app ? deriv_urls.P2P_STAGING : deriv_urls.P2P_PRODUCTION;\n\n    return is_language_required ? `${base_link}/?l=${i18n_language.toLowerCase()}` : base_link;\n};\n\nexport const getPlatformFromUrl = (domain = window.location.hostname) => {\n    const resolutions = {\n        is_staging_deriv_app: /^staging-app\\.deriv\\.(com|me|be)$/i.test(domain),\n        is_deriv_app: /^app\\.deriv\\.(com|me|be)$/i.test(domain),\n        is_test_link: /^(.*)\\.binary\\.sx$/i.test(domain),\n        is_test_deriv_app: /^test-app\\.deriv\\.com$/i.test(domain),\n    };\n\n    return {\n        ...resolutions,\n        is_staging: resolutions.is_staging_deriv_app,\n        is_test_link: resolutions.is_test_link,\n    };\n};\n\nexport const isStaging = (domain = window.location.hostname) => {\n    const { is_staging_deriv_app } = getPlatformFromUrl(domain);\n\n    return is_staging_deriv_app;\n};\n\nexport const isTestDerivApp = (domain = window.location.hostname) => {\n    const { is_test_deriv_app } = getPlatformFromUrl(domain);\n\n    return is_test_deriv_app;\n};\n\nexport const removeActionParam = (action_to_remove: string) => {\n    const { pathname, search } = window.location;\n    const search_params = new URLSearchParams(search);\n\n    if (search_params.get('action') === action_to_remove) {\n        search_params.delete('action');\n    }\n    const new_search = search_params.toString();\n    const new_path = `${pathname}${new_search ? `?${new_search}` : ''}`;\n\n    window.history.pushState({}, '', new_path);\n};\n","import config_data from '../../../brand.config.json';\n\ntype TLandingCompany = {\n    fx: string;\n    malta: string;\n    maltainvest: string;\n    mx: string;\n    samoa: string;\n    svg: string;\n    v: string;\n};\n\ntype TPlatform = {\n    name: string;\n    icon: string;\n};\n\ntype TPlatformAppstore = {\n    name: string;\n    icon: string;\n    availability: string;\n};\n\ntype TPlatforms = {\n    ctrader: TPlatform;\n    trader: TPlatform;\n    dbot: TPlatform;\n    mt5: TPlatform;\n    dxtrade: TPlatform;\n    smarttrader: TPlatform;\n    go: TPlatform;\n};\n\ntype TPlatformsAppstore = {\n    ctrader: TPlatformAppstore;\n    trader: TPlatformAppstore;\n    dbot: TPlatformAppstore;\n    smarttrader: TPlatformAppstore;\n    go: TPlatformAppstore;\n};\n\nconst isDomainAllowed = (domain_name: string) => {\n    // This regex will match any official deriv production and testing domain names.\n    // Allowed deriv domains: localhost, binary.sx, binary.com, deriv.com, deriv.be, deriv.me and their subdomains.\n    return /^(((.*)\\.)?(localhost:8443|pages.dev|binary\\.(sx|com)|deriv.(com|me|be|dev)))$/.test(domain_name);\n};\n\nexport const getLegalEntityName = (landing_company: keyof TLandingCompany) => {\n    return config_data.legal_entities[landing_company];\n};\n\nexport const getBrandWebsiteName = () => {\n    return config_data.domain_name;\n};\n\nexport const getPlatformSettings = (platform_key: keyof TPlatforms): TPlatform => {\n    const allowed_config_data = config_data.platforms[platform_key];\n\n    if (!isDomainAllowed(window.location.host)) {\n        // Remove all official platform logos if the app is hosted under unofficial domain\n        allowed_config_data.icon = '';\n    }\n\n    return allowed_config_data;\n};\n\nexport const getAppstorePlatforms = () => {\n    const platform_data: Record<string, Record<string, string>> = config_data.platforms_appstore;\n    return Object.keys(platform_data).map(key => platform_data[key]);\n};\n\nexport const getPlatformSettingsAppstore = (platform_key: keyof TPlatformsAppstore): TPlatformAppstore => {\n    return config_data.platforms_appstore[platform_key];\n};\n\nexport const getDomainName = () => {\n    // Split the hostname into parts\n    const domainParts = window.location.hostname.split('.');\n\n    // Ensure we have at least two parts (SLD and TLD)\n    if (domainParts.length >= 2) {\n        // Combine the SLD and TLD\n        const domain = `${domainParts[domainParts.length - 2]}.${domainParts[domainParts.length - 1]}`;\n        return domain;\n    }\n\n    return '';\n};\n","import { getUrlSmartTrader } from '../url/helpers';\n\n// Local function to get domain to avoid circular dependency\nconst getDomainUrl = () => {\n    const hostname = window.location.hostname;\n\n    if (hostname.includes('.deriv.be')) {\n        return 'deriv.be';\n    }\n    if (hostname.includes('.deriv.me')) {\n        return 'deriv.me';\n    }\n    return 'deriv.com';\n};\n\nexport const routes = {\n    callback_page: '/callback',\n    reset_password: '/',\n    error404: '/404',\n    index: '/index',\n    redirect: '/redirect',\n    endpoint: '/endpoint',\n    complaints_policy: '/complaints-policy',\n    contract: '/contract/:contract_id',\n\n    // platforms\n    mt5: '/mt5',\n    dxtrade: '/derivx',\n    bot: '/bot',\n    trade: '/dtrader',\n    trader_positions: '/dtrader/positions',\n    smarttrader: getUrlSmartTrader(),\n\n    // account\n    account: '/account',\n    trading_assessment: '/account/trading-assessment',\n    languages: '/account/languages',\n    financial_assessment: '/account/financial-assessment',\n    personal_details: '/account/personal-details',\n    proof_of_identity: '/account/proof-of-identity',\n    proof_of_address: '/account/proof-of-address',\n    proof_of_ownership: '/account/proof-of-ownership',\n    proof_of_income: '/account/proof-of-income',\n    passwords: '/account/passwords',\n    passkeys: '/account/passkeys',\n    phone_verification: '/account/personal-details/phone-verification',\n    closing_account: '/account/closing-account',\n    deactivate_account: '/account/deactivate-account', // TODO: Remove once mobile team has changed this link\n    account_closed: '/account-closed',\n    account_limits: '/account/account-limits',\n    connected_apps: '/account/connected-apps',\n    api_token: '/account/api-token',\n    login_history: '/account/login-history',\n    two_factor_authentication: '/account/two-factor-authentication',\n    self_exclusion: '/account/self-exclusion',\n\n    // settings\n    settings: '/settings',\n    account_password: '/settings/account_password',\n    apps: '/settings/apps',\n    cashier_password: '/settings/cashier_password',\n    exclusion: '/settings/exclusion',\n    financial: '/settings/financial',\n    history: '/settings/history',\n    limits: '/settings/limits',\n    token: '/settings/token',\n    personal: '/settings/personal',\n\n    // reports\n    reports: '/reports',\n    positions: '/reports/positions',\n    profit: '/reports/profit',\n    statement: '/reports/statement',\n\n    // cashier\n    cashier: '/cashier',\n    cashier_deposit: '/cashier/deposit',\n    cashier_withdrawal: '/cashier/withdrawal',\n    cashier_pa: '/cashier/payment-agent',\n    cashier_acc_transfer: '/cashier/account-transfer',\n    cashier_transactions_crypto: '/cashier/crypto-transactions',\n    // cashier_offramp: '/cashier/off-ramp',\n    cashier_onramp: '/cashier/on-ramp',\n    cashier_p2p: '/cashier/p2p',\n    cashier_pa_transfer: '/cashier/payment-agent-transfer',\n\n    // P2P\n    p2p_verification: '/cashier/p2p/verification',\n    p2p_buy_sell: '/cashier/p2p/buy-sell',\n    p2p_orders: '/cashier/p2p/orders',\n    p2p_my_ads: '/cashier/p2p/my-ads',\n    p2p_my_profile: '/cashier/p2p/my-profile',\n    p2p_advertiser_page: '/cashier/p2p/advertiser',\n\n    // Appstore\n    old_traders_hub: '/appstore/traders-hub',\n    traders_hub: '/',\n    onboarding: '/onboarding',\n    compare_cfds: '/cfd-compare-accounts',\n\n    // Wallets\n    wallets: '/wallet',\n    wallets_deposit: '/wallet/deposit',\n    wallets_withdrawal: '/wallet/withdrawal',\n    wallets_transfer: '/wallet/account-transfer',\n    wallets_transactions: '/wallet/transactions',\n    wallets_compare_accounts: '/compare-accounts',\n    wallets_on_ramp: '/wallet/on-ramp',\n    wallets_reset_balance: '/wallet/reset-balance',\n\n    // Outsystems\n    os_redirect: '/os-redirect',\n};\n\nexport const DISABLE_LANDSCAPE_BLOCKER_ROUTES = [\n    routes.trade,\n    routes.onboarding,\n    routes.compare_cfds,\n    routes.reports,\n    routes.bot,\n    routes.account,\n    routes.endpoint,\n    routes.wallets,\n    routes.wallets_compare_accounts,\n    routes.cashier,\n    /** because contract route has dynamic id */\n    '/contract',\n];\n\nexport const isDisabledLandscapeBlockerRoute = (path: string) => {\n    // can't use routes.traders_hub for the next check because all routes starts with '/'\n    if (path === routes.traders_hub) return true;\n    return DISABLE_LANDSCAPE_BLOCKER_ROUTES.some(route => path.startsWith(route));\n};\n\nexport const ACCOUNTS_OS_POI_URL =\n    process.env.NODE_ENV === 'production'\n        ? `https://hub.${getDomainUrl()}/Accounts/ProofOfIdentity`\n        : `https://staging-hub.${getDomainUrl()}/Accounts/ProofOfIdentity`;\nexport const ACCOUNTS_OS_POI_STATUS_URL =\n    process.env.NODE_ENV === 'production'\n        ? `https://hub.${getDomainUrl()}/Accounts/ProofOfIdentityStatus`\n        : `https://staging-hub.${getDomainUrl()}/Accounts/ProofOfIdentityStatus`;\n\nexport const ACCOUNTS_OS_POA_URL =\n    process.env.NODE_ENV === 'production'\n        ? `https://hub.${getDomainUrl()}/Accounts/ProofOfAddress`\n        : `https://staging-hub.${getDomainUrl()}/Accounts/ProofOfAddress`;\n\nexport const ACCOUNTS_OS_DFA_URL =\n    process.env.NODE_ENV === 'production'\n        ? `https://hub.${getDomainUrl()}/Accounts/UserFinancialAssessment`\n        : `https://staging-hub.${getDomainUrl()}/Accounts/UserFinancialAssessment`;\n","import { Analytics } from '@deriv-com/analytics';\nimport { getPlatformSettings } from '../brand';\nimport { routes } from '../routes';\n\ntype TRoutingHistory = {\n    action: string;\n    hash: string;\n    key: string;\n    pathname: string;\n    search: string;\n}[];\n\n/*\n * These functions exist because we want to refresh the browser page on switch between Bot and the rest of the platforms.\n * */\n\nexport const platform_name = Object.freeze({\n    DBot: getPlatformSettings('dbot').name,\n    DTrader: getPlatformSettings('trader').name,\n    DXtrade: getPlatformSettings('dxtrade').name,\n    DMT5: getPlatformSettings('mt5').name,\n    SmartTrader: getPlatformSettings('smarttrader').name,\n    DerivGO: getPlatformSettings('go').name,\n});\n\nexport const CFD_PLATFORMS = Object.freeze({\n    MT5: 'mt5',\n    DXTRADE: 'dxtrade',\n    CTRADER: 'ctrader',\n});\n\nexport const isBot = () =>\n    /^\\/bot/.test(window.location.pathname) ||\n    (/^\\/(br_)/.test(window.location.pathname) && window.location.pathname.split('/')[2] === 'bot');\n\nexport const isMT5 = () =>\n    /^\\/mt5/.test(window.location.pathname) ||\n    (/^\\/(br_)/.test(window.location.pathname) && window.location.pathname.split('/')[2] === CFD_PLATFORMS.MT5);\n\nexport const isDXtrade = () =>\n    /^\\/derivx/.test(window.location.pathname) ||\n    (/^\\/(br_)/.test(window.location.pathname) && window.location.pathname.split('/')[2] === 'derivx');\n\nexport const isNavigationFromDerivGO = () => window.sessionStorage.getItem('config.platform') === 'derivgo';\n\nexport const isNavigationFromP2P = () => window.sessionStorage.getItem('config.platform') === 'dp2p';\n\nexport const isNavigationFromP2PV2 = () => window.sessionStorage.getItem('config.platform') === 'p2p-v2';\n\nexport const isNavigationFromTradersHubOS = () => window.sessionStorage.getItem('config.platform') === 'tradershub_os';\n\nexport const getPathname = () => {\n    if (isBot()) return platform_name.DBot;\n    if (isMT5()) return platform_name.DMT5;\n    if (isDXtrade()) return platform_name.DXtrade;\n    switch (window.location.pathname.split('/')[1]) {\n        case '':\n            return platform_name.DTrader;\n        case 'reports':\n            return 'Reports';\n        case 'cashier':\n            return 'Cashier';\n        default:\n            return platform_name.SmartTrader;\n    }\n};\n\nexport const getPlatformInformation = (routing_history: TRoutingHistory) => {\n    if (isBot() || isNavigationFromPlatform(routing_history, routes.bot)) {\n        return { header: platform_name.DBot, icon: getPlatformSettings('dbot').icon };\n    }\n\n    if (isMT5() || isNavigationFromPlatform(routing_history, routes.mt5)) {\n        return { header: platform_name.DMT5, icon: getPlatformSettings('mt5').icon };\n    }\n\n    if (isDXtrade() || isNavigationFromPlatform(routing_history, routes.dxtrade)) {\n        return { header: platform_name.DXtrade, icon: getPlatformSettings('dxtrade').icon };\n    }\n\n    if (isNavigationFromExternalPlatform(routing_history, routes.smarttrader)) {\n        return { header: platform_name.SmartTrader, icon: getPlatformSettings('smarttrader').icon };\n    }\n\n    return { header: platform_name.DTrader, icon: getPlatformSettings('trader').icon };\n};\n\nexport const getActivePlatform = (routing_history: TRoutingHistory) => {\n    switch (true) {\n        case isNavigationFromExternalPlatform(routing_history, routes.smarttrader):\n            return platform_name.SmartTrader;\n        case isNavigationFromPlatform(routing_history, '/'):\n            return '';\n        default:\n            return platform_name.DTrader;\n    }\n};\n\nexport const getPlatformRedirect = (routing_history: TRoutingHistory) => {\n    if (isBot() || isNavigationFromPlatform(routing_history, routes.bot))\n        return { name: platform_name.DBot, route: routes.bot };\n    if (isMT5() || isNavigationFromPlatform(routing_history, routes.mt5))\n        return { name: platform_name.DMT5, route: routes.mt5 };\n    if (isDXtrade() || isNavigationFromPlatform(routing_history, routes.dxtrade))\n        return { name: platform_name.DXtrade, route: routes.dxtrade };\n    if (isNavigationFromExternalPlatform(routing_history, routes.smarttrader))\n        return { name: platform_name.SmartTrader, route: routes.smarttrader };\n    if (isNavigationFromP2PV2()) return { name: 'P2P', ref: 'p2p_v2', route: routes.cashier_p2p };\n    if (isNavigationFromExternalPlatform(routing_history, routes.cashier_p2p))\n        return { name: 'P2P', route: routes.cashier_p2p };\n    if (isNavigationFromP2P()) return { name: 'P2P', route: routes.cashier_p2p, ref: 'p2p' };\n    return { name: platform_name.DTrader, route: routes.trade };\n};\n\nexport const isNavigationFromPlatform = (\n    app_routing_history: TRoutingHistory,\n    platform_route: string,\n    should_ignore_parent_path = false\n) => {\n    if (app_routing_history.length > 0) {\n        const getParentPath = (pathname: string) => (/^http/.test(pathname) ? false : pathname.split('/')[1]);\n\n        for (let i = 0; i < app_routing_history.length; i++) {\n            const history_item = app_routing_history[i];\n            const history_item_parent_path = getParentPath(history_item.pathname);\n            const next_history_item = app_routing_history.length > i + 1 && app_routing_history[i + 1];\n\n            if (\n                history_item_parent_path === getParentPath(platform_route) ||\n                (should_ignore_parent_path && history_item.pathname === platform_route)\n            ) {\n                return true;\n            } else if (!next_history_item) {\n                return false;\n            } else if (history_item_parent_path === getParentPath(next_history_item.pathname)) {\n                // Continue walking until we see passed in platform_route.\n                continue; // eslint-disable-line no-continue\n            } else {\n                // Return false when path matches a platform parent path, but don't return anything\n                // when a non-platform path was seen. i.e. navigating between /cashier and /reports\n                // should not affect navigating back to platform when clicking cross.\n                const platform_parent_paths = [routes.mt5, routes.dxtrade, routes.bot, routes.trade].map(route =>\n                    getParentPath(route)\n                );\n                const is_other_platform_path = platform_parent_paths.includes(history_item_parent_path);\n\n                if (is_other_platform_path) {\n                    break;\n                }\n            }\n        }\n    }\n\n    return false;\n};\n\nexport const isNavigationFromExternalPlatform = (routing_history: TRoutingHistory, platform_route: string) => {\n    /*\n     *  Check if the client is navigating from external platform(SmartTrader)\n     *  and has not visited Dtrader after it.\n     */\n\n    const platform_index = routing_history.findIndex(history_item => history_item.pathname === platform_route);\n    const dtrader_index = routing_history.findIndex(history_item => history_item.pathname === routes.trade);\n    const has_visited_platform = platform_index !== -1;\n    const has_visited_dtrader = dtrader_index !== -1;\n\n    if (has_visited_platform) {\n        return has_visited_dtrader ? platform_index < dtrader_index : true;\n    }\n\n    return false;\n};\n\nexport const isDtraderV2MobileEnabled = (is_mobile: boolean) => {\n    const dtrader_v2_enabled_gb = Analytics?.getFeatureValue('dtrader_v2_enabled', false);\n    const is_dtrader_v2_mobile =\n        JSON.parse(localStorage.getItem('FeatureFlagsStore') ?? '{}')?.data?.dtrader_v2_mobile || dtrader_v2_enabled_gb;\n\n    return (\n        is_dtrader_v2_mobile &&\n        is_mobile &&\n        (window.location.pathname.startsWith(routes.trade) || window.location.pathname.startsWith('/contract/'))\n    );\n};\n\nexport const isDtraderV2DesktopEnabled = (is_desktop: boolean) => {\n    const dtrader_v2_enabled_desktop_gb = Analytics?.getFeatureValue('dtrader_v2_enabled_desktop', false);\n    const is_dtrader_v2_desktop =\n        JSON.parse(localStorage.getItem('FeatureFlagsStore') ?? '{}')?.data?.dtrader_v2_desktop ||\n        dtrader_v2_enabled_desktop_gb;\n\n    return (\n        is_dtrader_v2_desktop &&\n        is_desktop &&\n        (window.location.pathname.startsWith(routes.trade) || window.location.pathname.startsWith('/contract/'))\n    );\n};\n","import { deriv_urls } from './constants';\nimport { getPlatformFromUrl } from './helpers';\nimport { getCurrentProductionDomain } from '../config/config';\nimport { routes } from '../routes';\n\ntype TOption = {\n    query_string?: string;\n    legacy?: boolean;\n    language?: string;\n};\n\nconst default_domain = 'binary.com';\nconst host_map = {\n    // the exceptions regarding updating the URLs\n    'bot.binary.com': 'www.binary.bot',\n    'developers.binary.com': 'developers.binary.com', // same, shouldn't change\n    'academy.binary.com': 'academy.binary.com',\n    'blog.binary.com': 'blog.binary.com',\n};\n\nlet location_url: Location, default_language: string;\n\nexport const legacyUrlForLanguage = (target_language: string, url: string = window.location.href) =>\n    url.replace(new RegExp(`/${default_language}/`, 'i'), `/${(target_language || 'EN').trim().toLowerCase()}/`);\n\nexport const urlForLanguage = (lang: string, url: string = window.location.href) => {\n    const current_url = new URL(url);\n\n    if (lang === 'EN') {\n        current_url.searchParams.delete('lang');\n    } else {\n        current_url.searchParams.set('lang', lang);\n    }\n\n    return `${current_url}`;\n};\n\nexport const reset = () => {\n    location_url = window?.location ?? location_url;\n};\n\nexport const params = (href?: string | URL) => {\n    const arr_params = [];\n    const parsed = ((href ? new URL(href) : location_url).search || '').substr(1).split('&');\n    let p_l = parsed.length;\n    while (p_l--) {\n        const param = parsed[p_l].split('=');\n        arr_params.push(param);\n    }\n    return arr_params;\n};\n\n/**\n * @deprecated Please use 'URLUtils.normalizePath' from '@deriv-com/utils' instead of this.\n */\nexport const normalizePath = (path: string) => (path ? path.replace(/(^\\/|\\/$|[^a-zA-Z0-9-_./()#])/g, '') : '');\n\nexport const urlFor = (\n    path: string,\n    options: TOption = {\n        query_string: undefined,\n        legacy: false,\n        language: undefined,\n    }\n) => {\n    const { legacy, language, query_string } = options;\n\n    if (legacy && /^bot$/.test(path)) {\n        return `https://${host_map['bot.binary.com']}`;\n    }\n\n    const lang = language?.toLowerCase?.() ?? default_language;\n    let domain = `https://${window.location.hostname}/`;\n    if (legacy) {\n        if (getPlatformFromUrl().is_staging_deriv_app) {\n            domain = domain.replace(/staging-app\\.deriv\\.com/, `staging.binary.com/${lang || 'en'}`);\n        } else if (getPlatformFromUrl().is_deriv_app) {\n            domain = domain.replace(/app\\.deriv\\.com/, `binary.com/${lang || 'en'}`);\n        } else {\n            domain = `https://binary.com/${lang || 'en'}/`;\n        }\n    }\n    const new_url = `${domain}${normalizePath(path) || 'home'}.html${query_string ? `?${query_string}` : ''}`;\n\n    if (lang && !legacy) {\n        return urlForLanguage(lang, new_url);\n    } else if (legacy) {\n        return legacyUrlForLanguage(lang, new_url);\n    }\n\n    return new_url;\n};\n\nexport const urlForCurrentDomain = (href: string) => {\n    const current_domain = getCurrentProductionDomain();\n\n    if (!current_domain) {\n        return href; // don't change when domain is not supported\n    }\n\n    const url_object = new URL(href);\n    if (Object.keys(host_map).includes(url_object.hostname)) {\n        url_object.hostname = host_map[url_object.hostname as keyof typeof host_map];\n    } else if (url_object.hostname.match(default_domain)) {\n        // to keep all non-Binary links unchanged, we use default domain for all Binary links in the codebase (javascript and templates)\n        url_object.hostname = url_object.hostname.replace(\n            new RegExp(`\\\\.${default_domain}`, 'i'),\n            `.${current_domain}`\n        );\n    } else {\n        return href;\n    }\n\n    return url_object.href;\n};\n\nexport const websiteUrl = () => `${location.protocol}//${location.hostname}/`;\n\nexport const getUrlBase = (path = '') => {\n    const l = window.location;\n\n    if (!/^\\/(br_)/.test(l.pathname)) return path;\n\n    return `/${l.pathname.split('/')[1]}${/^\\//.test(path) ? path : `/${path}`}`;\n};\n\nexport const removeBranchName = (path = '') => {\n    return path.replace(/^\\/br_.*?\\//, '/');\n};\n\nexport const getHostMap = () => host_map;\n\nexport const setUrlLanguage = (lang: string) => {\n    default_language = lang;\n};\n\n// TODO: cleanup options param usage\n// eslint-disable-next-line no-unused-vars\n/**\n * @deprecated Please use 'URLUtils.getDerivStaticURL' from '@deriv-com/utils' instead of this.\n */\nexport const getStaticUrl = (path = '', is_document = false, is_eu_url = false) => {\n    const host = is_eu_url ? deriv_urls.DERIV_COM_PRODUCTION_EU : deriv_urls.DERIV_COM_PRODUCTION;\n    let lang = default_language?.toLowerCase();\n\n    if (lang && lang !== 'en') {\n        lang = `/${lang}`;\n    } else {\n        lang = '';\n    }\n\n    if (is_document) return `${host}/${normalizePath(path)}`;\n\n    // Deriv.com supports languages separated by '-' not '_'\n    if (host === deriv_urls.DERIV_COM_PRODUCTION && lang.includes('_')) {\n        lang = lang.replace('_', '-');\n    }\n\n    return `${host}${lang}/${normalizePath(path)}`;\n};\n\nexport const getHubSignupUrl = (redirect_url?: string) => {\n    const current_domain = process.env.NODE_ENV === 'production' ? deriv_urls.HUB_PRODUCTION : deriv_urls.HUB_STAGING;\n\n    const lang = `?lang=${default_language?.toLowerCase() || 'en'}`;\n    const redirect_param = redirect_url ? `&redirect_url=${encodeURIComponent(redirect_url)}` : '';\n\n    return `${current_domain}/signup${lang}${redirect_param}`;\n};\n\nexport const getPath = (route_path: string, parameters = {}) =>\n    Object.keys(parameters).reduce(\n        (p, name) => p.replace(`:${name}`, parameters[name as keyof typeof parameters]),\n        route_path\n    );\n\nexport const getContractPath = (contract_id?: number) => getPath(routes.contract, { contract_id });\n\n/**\n * Filters query string. Returns filtered query (without '/?')\n * @param {string} search_param window.location.search\n * @param {Array<string>} allowed_keys array of string of allowed query string keys\n */\nexport const filterUrlQuery = (search_param: string, allowed_keys: string[]) => {\n    const search_params = new URLSearchParams(search_param);\n    const filtered_queries = [...search_params].filter(kvp => allowed_keys.includes(kvp[0]));\n    return new URLSearchParams(filtered_queries || '').toString();\n};\n\nexport const excludeParamsFromUrlQuery = (search_param: string, excluded_keys: string[]) => {\n    const search_params = new URLSearchParams(search_param);\n    const filtered_queries = [...search_params].filter(([key]) => !excluded_keys.includes(key));\n    return filtered_queries.length ? `?${new URLSearchParams(filtered_queries).toString()}` : '';\n};\n\nexport const getDomainUrl = () => {\n    const hostname = window.location.hostname;\n\n    if (hostname.includes('.deriv.be')) {\n        return 'deriv.be';\n    }\n    if (hostname.includes('.deriv.me')) {\n        return 'deriv.me';\n    }\n    return 'deriv.com';\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nimport { getDomainUrl } from '@deriv/shared/src/utils/url/url';\nimport { useStore } from '@deriv/stores';\n\nimport useGrowthbookGetFeatureValue from './useGrowthbookGetFeatureValue';\n\nconst NAKALA_INFO_BASEURL = {\n    PRODUCTION: `https://api-gateway.${getDomainUrl()}`,\n    STAGING: `https://staging-api-gateway.deriv.com`,\n};\n\nconst useIsEnabledNakala = (accounts: any[]) => {\n    const { traders_hub } = useStore();\n    const { is_demo } = traders_hub;\n    const getMT5Account = (accounts: any[]) => {\n        if (!accounts?.length) return null;\n\n        // Priority: svg > vanuatu > bvi\n        const priorityOrder = ['svg', 'vanuatu', 'bvi'];\n\n        const account = priorityOrder.reduce((found, company) => {\n            if (found) return found;\n            return accounts.find(\n                acc => acc?.landing_company_name?.toLowerCase() === company || acc?.landing_company_short === company\n            );\n        }, null);\n        if (account) return account;\n\n        return accounts[0]; // fallback to first account if no priority match\n    };\n\n    const selectedAccount = getMT5Account(accounts);\n    const loginId = selectedAccount?.display_login || '';\n\n    const [nakalaServerInfo, setNakalaServerInfo] = useState(null);\n\n    useEffect(() => {\n        loginId != '' && !is_demo && getNakalaServerInfo();\n    }, [loginId, is_demo]);\n\n    const [is_nakala_enabled] = useGrowthbookGetFeatureValue({\n        featureFlag: 'is_nakala_enabled',\n    });\n\n    const getNakalaServerInfo = async () => {\n        try {\n            const hostname = window.location.hostname;\n            const isProductionApp = ['app.deriv.com', 'app.deriv.me', 'app.deriv.be'].includes(hostname);\n            const apiUrl = isProductionApp ? NAKALA_INFO_BASEURL.PRODUCTION : NAKALA_INFO_BASEURL.STAGING;\n\n            const response = await axios.get(`${apiUrl}/nakala/v1/nakala-servers?mt5_login_id=${loginId}`);\n            setNakalaServerInfo(response.data?.server_name);\n        } catch (error) {\n            // eslint-disable-next-line no-console\n            console.error('Error fetching Nakala server info:', error);\n        }\n    };\n\n    return { IsEnabledNakala: is_nakala_enabled, nakalaServerInfo, loginId };\n};\n\nexport default useIsEnabledNakala;\n","import { useStore } from '@deriv/stores';\n\n/**\n * Custom hook to determine if TNC (Terms and Conditions) acceptance is needed.\n *\n * The function first checks if `tnc_status` is available in `account_settings`.\n * If `tnc_status` is not available, it is assumed that TNC acceptance is not needed.\n *\n * If `tnc_status` is available, it reads the status based on the current\n * `landing_company_shortcode`.\n * - If the status is 0, TNC acceptance is needed.\n * - If the status is 1, it means that TNC has been accepted, and acceptance is not needed.\n *\n * @returns {boolean} - Returns true if TNC acceptance is needed, false otherwise.\n */\n\nconst useIsTNCNeeded = () => {\n    const { client } = useStore();\n    const { account_settings, landing_company_shortcode } = client;\n    const { tnc_status } = account_settings || {};\n    const is_tnc_needed = tnc_status && tnc_status[landing_company_shortcode] === 0;\n\n    return is_tnc_needed;\n};\n\nexport default useIsTNCNeeded;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport { Jurisdiction, getFormattedJurisdictionCode } from '@deriv/shared';\n\nconst useMT5SVGEligibleToMigrate = () => {\n    const { client, traders_hub } = useStore();\n    const { mt5_login_list } = client;\n    const { show_eu_related_content } = traders_hub;\n\n    const mt5_migration_config = React.useMemo(() => {\n        const svg_accounts_to_migrate = mt5_login_list.filter(\n            account => account.landing_company_short === Jurisdiction.SVG && !!account.eligible_to_migrate\n        );\n\n        const has_svg_accounts_to_migrate = !!svg_accounts_to_migrate.length && !show_eu_related_content;\n\n        const no_of_svg_accounts_to_migrate = svg_accounts_to_migrate.length;\n\n        const is_eligible_for_svg_to_bvi_migration = !!svg_accounts_to_migrate.filter(account =>\n            Object.values(account.eligible_to_migrate ?? {}).includes(Jurisdiction.BVI)\n        ).length;\n\n        const is_eligible_for_svg_to_vanuatu_migration = !!svg_accounts_to_migrate.filter(account =>\n            Object.values(account.eligible_to_migrate ?? {}).includes(Jurisdiction.VANUATU)\n        ).length;\n\n        const getEligibleAccountToMigrate = () => {\n            if (is_eligible_for_svg_to_bvi_migration) {\n                return Jurisdiction.BVI;\n            } else if (is_eligible_for_svg_to_vanuatu_migration) {\n                return Jurisdiction.VANUATU;\n            }\n        };\n        const eligible_account_to_migrate_label = getFormattedJurisdictionCode(getEligibleAccountToMigrate());\n\n        const eligible_svg_to_bvi_derived_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.synthetic === Jurisdiction.BVI\n        ).length;\n\n        const eligible_svg_to_bvi_financial_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.financial === Jurisdiction.BVI\n        ).length;\n\n        const eligible_svg_to_vanuatu_derived_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.synthetic === Jurisdiction.VANUATU\n        ).length;\n\n        const eligible_svg_to_vanuatu_financial_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.financial === Jurisdiction.VANUATU\n        ).length;\n\n        const has_derived_mt5_to_migrate =\n            eligible_svg_to_bvi_derived_accounts || eligible_svg_to_vanuatu_derived_accounts;\n        const has_financial_mt5_to_migrate =\n            eligible_svg_to_bvi_financial_accounts || eligible_svg_to_vanuatu_financial_accounts;\n        const has_derived_and_financial_mt5 = has_derived_mt5_to_migrate && has_financial_mt5_to_migrate;\n\n        return {\n            eligible_account_to_migrate_label,\n            eligible_svg_to_bvi_derived_accounts,\n            eligible_svg_to_bvi_financial_accounts,\n            eligible_svg_to_vanuatu_derived_accounts,\n            eligible_svg_to_vanuatu_financial_accounts,\n            getEligibleAccountToMigrate,\n            has_derived_and_financial_mt5,\n            has_derived_mt5_to_migrate,\n            has_svg_accounts_to_migrate,\n            no_of_svg_accounts_to_migrate,\n            svg_accounts_to_migrate,\n        };\n    }, [mt5_login_list, show_eu_related_content]);\n    return {\n        ...mt5_migration_config,\n    };\n};\n\nexport default useMT5SVGEligibleToMigrate;\n","import { useState, useEffect } from 'react';\nimport { WS } from '@deriv/shared';\n\nexport type TradingPlatformStatus = {\n    platform: 'mt5' | 'dxtrade' | 'ctrader';\n    status: 'active' | 'maintenance' | 'unavailable';\n};\n\n/** A custom hook that gets the list of statuses of ctrader dxtrade mt5 platform. */\nconst useTradingPlatformStatus = () => {\n    const [data, setData] = useState<TradingPlatformStatus[] | null>(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await WS.send({ trading_platform_status: 1 });\n            setData(response.trading_platform_status);\n        };\n\n        fetchData();\n    }, []);\n\n    const getPlatformStatus = (platform: TradingPlatformStatus['platform']) =>\n        data?.find(status => status.platform === platform)?.status;\n\n    return { data, getPlatformStatus };\n};\n\nexport default useTradingPlatformStatus;\n","import { useStore } from '@deriv/stores';\n\n/** A custom hook to get the status of wallet_migration API and to start/reset the migration process\n * This hook is for the legacy WS connection (appstore and core packages)\n * This hook should be used in the component wrapped by observer\n */\nconst useWalletMigration = () => {\n    const { client } = useStore();\n    const {\n        wallet_migration_state,\n        startWalletMigration,\n        resetWalletMigration,\n        is_wallet_migration_request_is_in_progress,\n    } = client;\n\n    return {\n        /** The status of the wallet_migration API */\n        state: wallet_migration_state,\n        /** A boolean to check if the status is not_eligible */\n        is_ineligible: wallet_migration_state === 'ineligible',\n        /** A boolean to check if the status is eligible */\n        is_eligible: wallet_migration_state === 'eligible',\n        /** A boolean to check if the status is in_progress */\n        is_in_progress: wallet_migration_state === 'in_progress',\n        /** A boolean to check if the status is completed */\n        is_migrated: wallet_migration_state === 'migrated',\n        /** A boolean to check if the status is failed */\n        is_failed: wallet_migration_state === 'failed',\n        /** A boolean to check if migration is happening */\n        is_migrating: is_wallet_migration_request_is_in_progress,\n        /** Sends a request to wallet_migration API to start the migration process */\n        startMigration: startWalletMigration,\n        /** Sends a request to wallet_migration API to reset the migration process */\n        resetMigration: resetWalletMigration,\n    };\n};\n\nexport default useWalletMigration;\n"],"names":["WalletsBannerUpgrade","makeLazyLoader","moduleLoader","React","Loading","WalletsBannerUpgrading","WalletsBannerUnsuccessful","observer","is_eu","useStore","client","_useWalletMigration","useWalletMigration","is_eligible","is_failed","is_in_progress","is_migrating","is_upgrading","AddOptions","_useStore","traders_hub","ui","is_real","content_flag","selected_account_type","setShouldShowCooldownModal","openRealAccountSignup","real_account_creation_unlock_date","add_deriv_account_text","localize","add_deriv_account_btn","eu_user","ContentFlag","LOW_RISK_CR_EU","EU_REAL","is_traders_dashboard_tracking_enabled","_slicedToArray","useGrowthbookGetFeatureValue","featureFlag","defaultValue","className","Text","size","isMobile","weight","Localize","i18n_default_text","Button","type","has_effect","onClick","cacheTrackEvents","loadEvent","event","name","properties","action","form_name","account_mode","account_name","is_disabled","is_loading","text","medium","primary","DesktopWrapper","MobileWrapper","_ref","description","Icon","icon","width","height","color","LabelPairedChevronRightMdRegularIcon","fill","accounts_sub_text","is_desktop","history","useHistory","push","routes","compare_cfds","line_height","styles","marginInlineStart","ContentLoader","backgroundColor","foregroundColor","x","y","rx","ry","MigrationBanner","CFDsListing","isDesktop","useDevice","cfd","modules","common","available_dxtrade_accounts","available_ctrader_accounts","combined_cfd_mt5_accounts","selected_region","has_any_real_account","startTrade","getExistingAccounts","getAccount","is_eu_user","is_demo_low_risk","no_MF_account","toggleAccountTransferModal","is_demo","showTopUpModal","no_CR_account","setSelectedAccount","CFDs_restricted_countries","financial_restricted_countries","getDefaultJurisdiction","setAccountType","toggleCTraderTransferModal","setAccountUnavailableModal","setServerMaintenanceModal","setProduct","setJurisdictionSelectedShortcode","setNakalaBannerVisible","is_landing_company_loaded","is_populating_mt5_account_list","ctrader_total_balance","is_trading_platform_available_account_loaded","updateMT5AccountDetails","is_switching","setAppstorePlatform","openDerivRealAccountNeededModal","has_no_real_account","is_mt5_standard_available","some","account","platform","CFD_PLATFORMS","MT5","product","has_mt5_standard_account","action_type","_useState2","useState","Cookies","get","isNakalaLinked","setIsNakalaLinked","mt5_trade_account","find","IsEnabledNakala","useIsEnabledNakala","showNakala","has_svg_accounts_to_migrate","useMT5SVGEligibleToMigrate","getPlatformStatus","useTradingPlatformStatus","getTradingPlatformStatus","TRADING_PLATFORM_STATUS","MAINTENANCE","UNAVAILABLE","ACTIVE","useEffect","checkNakalaCookie","isLinked","window","addEventListener","originalSet","set","_len","arguments","length","args","Array","_key","result","apply","this","removeEventListener","hasUnavailableAccount","status","hasMaintenanceStatus","MT5_ACCOUNT_STATUS","UNDER_MAINTENANCE","_account$platform","getMT5AccountAuthStatus","current_acc_status","jurisdiction","FAILED","PENDING","NEEDS_VERIFICATION","MIGRATED_WITH_POSITION","MIGRATED_WITHOUT_POSITION","no_real_mf_account_eu_regulator","no_real_cr_non_eu_regulator","AddDerivAccount","AddOptionsAccount","setPerformanceValue","is_cfd_accounts_supported","is_mt5_list_loaded","onGetAccount","isNakala","existing_account","market_type","category","onOpenNakala","ListingContainer","title","CompareAccount","CFDsDescription","NakalaLinkedBanner","style","paddingTop","map","index","_existing_account$tra","list_size","track_account_subtitle","tracking_name","has_mt5_account_status","landing_company_short","TradingAppCard","client_kyc_status","availability","clickable_icon","is_new","sub_title","short_code_and_region","key","has_divider","getHasDivider","onAction","e","_e$currentTarget","button_name","currentTarget","mt5_acc_auth_status","selected_mt5_jurisdiction","PlatformLoader","Fragment","existing_accounts","has_existing_accounts","track_account_name","concat","formatMoney","currency","display_balance","display_login","_e$currentTarget2","login","_e$currentTarget3","ResetPasswordIntent","group","server","current_list","children","props","_objectWithoutProperties","_excluded","reset_password_intent","localStorage","getItem","reset_password_type","test","_getMtCompanies$title","_getMtCompanies","_reset_password_inten2","split","getMtCompanies","_current_list$login","_current_list","_getMtCompanies$title2","_getMtCompanies2","_split2","Object","keys","pop","_objectSpread","CFDResetPasswordModal","_ref2","email","is_logged_in","is_cfd_reset_password_modal_enabled","setCFDPasswordResetModal","useCfdStore","location","hash","_React$useState2","error_code","undefined","has_error","error_message","is_finished","changed_password_type","state","setState","clearAddressBar","removeItem","validatePassword","values","errors","max_length","DXTRADE","validLength","new_password","min","max","validPassword","validMT5Password","getErrorMessages","password","min_number","max_number","toLowerCase","resetPassword","password_type","actions","setSubmitting","request","account_id","verification_code","WS","tradingPlatformInvestorPasswordReset","then","response","_response$error","error","code","message","replaceState","pathname","search","getIsListFetched","is_invalid_investor_token","Modal","is_open","toggleModal","onMount","redirectToLogin","getLanguage","should_header_stick_body","is_fullscreen","_ref3","Formik","initialValues","validate","onSubmit","_ref4","handleSubmit","isSubmitting","handleChange","handleBlur","touched","autoComplete","PasswordMeter","input","custom_feedback_messages","password_warnings","_ref5","has_warning","PasswordInput","label","onChange","onBlur","value","required","hint","as","align","FormSubmitButton","is_center","large","account_type","useStores","VerificationDocsListModal","AccountTransferModal","RegulatorsCompareModal","WalletsMigrationFailed","WalletsUpgradeModal","WalletsEUUpgradeModal","CFDServerErrorDialog","CFDPasswordModal","CFDServerMaintenanceModal","MT5AccountUnavailableModal","CFDTopUpDemoModal","MT5TradeModal","CFDPasswordManagerModal","MT5MigrationModal","ResetTradingPasswordModal","CTraderTransferModal","SetupRealAccountOrGoToDemoModal","store","is_eu_country","is_trading_experience_incomplete","is_virtual","_modules$cfd","is_mt5_trade_modal_visible","toggleMT5TradeModal","getRealSyntheticAccountsExistingData","getRealFinancialAccountsExistingData","getRealSwapfreeAccountsExistingData","has_cfd_error","mt5_migration_error","is_mt5_password_invalid_format_modal_visible","is_cfd_password_modal_enabled","is_cfd_success_dialog_enabled","is_sent_email_modal_enabled","is_ctrader_transfer_modal_visible","is_server_maintenance_modal_visible","is_account_unavailable_modal_visible","enableApp","disableApp","is_reset_trading_password_modal_visible","setResetTradingPasswordModalOpen","is_top_up_virtual_open","is_top_up_virtual_success","is_mt5_migration_modal_open","should_show_assessment_complete_modal","is_complete_user_profile_modal_open","is_account_transfer_modal_open","is_real_wallets_upgrade_on","is_verification_docs_list_modal_visible","is_regulators_compare_modal_visible","is_wallet_migration_failed","is_setup_real_account_or_go_to_demo_modal_visible","is_visible","selected_login","selected_account","selected_account_group","selected_server","password_manager","setPasswordManager","is_tnc_needed","useIsTNCNeeded","togglePasswordManagerModal","prev_state","existing_accounts_data","acc_type","current_list_keys","startsWith","list_item","enabled","filter","reduce","_acc","cur","trading_platform_dxtrade_password_reset","trading_platform_mt5_password_reset","should_show_cfd_password_modal","url_action_param","URLSearchParams","useLocation","should_show_wallets_non_eu_upgrade_modal","should_show_wallets_eu_upgrade_modal","onPasswordManager","toggleResetTradingPasswordModal","is_modal_open","_regeneratorRuntime","t","r","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","isArray","_arrayWithHoles","_iterableToArrayLimit","_arrayLikeToArray","toString","from","_unsupportedIterableToArray","_nonIterableRest","AccountTypeDropdown","selectAccountType","setPrevAccountType","current_language","classNames","Dropdown","classNameIcon","classNameDisplay","list","getAccountTypes","_callee","_context","startPerformanceEventTimer","target","_next","_throw","_x","dxtrade_accounts_list","mt5_login_list","ctrader_accounts_list","cfd_accounts","_toConsumableArray","useCFDAllAccounts","is_maltainvest","all","demo","useCFDDemoAccounts","real","useCFDRealAccounts","current_fiat_currency","is_crypto","default_currency","platform_real_accounts","usePlatformAccounts","non_crypto_accounts","currency_if_is_crypto","accounts","total_assets_real_currency","useRealTotalAssetCurrency","_useExchangeRate","useExchangeRate","handleSubscription","getExchangeRate","balance","total","new_base","new_target","new_rate","AssetSummary","pushDataLayer","gtm","is_logging_in","is_mt5_allowed","is_populating_account_list","is_populating_dxtrade_account_list","is_populating_ctrader_account_list","_modules$cashier","cashier","account_transfer","general_store","is_transfer_confirm","_usePlatformAccounts","platform_demo_account","_useCFDAccounts","useCFDAccounts","cfd_real_accounts","cfd_demo_accounts","is_still_waiting_for_loading_accounts","platform_real_balance","useTotalAccountBalance","cfd_real_balance","cfd_demo_balance","useTotalAssetCurrency","exchange_rates","real_total_balance","demo_total_balance","has_active_related_deriv_account","eu_account","cr_account","eu_mt5_allowed_total_assets","should_show_loader","isRatesLoaded","TotalAssetsLoader","Popover","alignment","zIndex","is_bubble_hover_enabled","BalanceText","underline_style","SwitcherItem","is_selected","_extends","RegulatorSwitcher","toggleRegulatorsCompareModal","RegulationsSwitcherLoader","region_availability","region","selectRegion","has_maltainvest_account","handleTabItemClick","is_low_risk_cr_real_account","LOW_RISK_CR_NON_EU","active_index","setActiveIndex","Tabs","onTabItemClick","top","is_scrollable","is_overflow_hidden","OptionsAndMultipliersListing","available_platforms","low_risk_cr_non_eu","low_risk_cr_eu","high_risk_cr","HIGH_RISK_CR","cr_demo","CR_DEMO","OptionsTitle","OptionsDescription","is_deriv_platform","available_platform","AfterSignupFlow","is_from_signup_account","setIsFromSignupAccount","has_active_real_account","setIsSetupRealAccountOrGoToDemoModalVisible","_useContentFlag","useContentFlag","is_cr_demo","is_eu_demo","direct_to_real_account_creation","show_setup_real_or_go_demo","Jurisdiction","SVG","MALTA_INVEST","_statement$count","_statement$transactio","statement","count","transactions","hasDeposited","tx","hasTransferred","amount","isLoaded","e_book_show_way","e_books_url","e_book_from_landing","lang","is_banner_shows","setIsBannerShows","analytics_data","banner_name","id","LabelPairedCircleChevronDownXlBoldIcon","href","EN","rel","LabelPairedXmarkLgBoldIcon","SessionStore","remove","FR","PT","ES","VI","Analytics","getFeatureValue","includes","BookBannerTemplate","RealAccountCreationBanner","DepositNowBanner","TradersHubBanners","is_low_risk","_useStoreHasAccountDe","useStoreHasAccountDeposited","should_add_empty_div_for_get_started_trading_banner_clever_tap","should_show_real_account_creation_banner","should_show_deposit_now_banner","BookBanner","WalletsBanner","is_account_to_be_closed_by_residence","account_time_of_closure","InlineMessage","variant","date","formatDate","OrderedPlatformSections","_ref$is_cfd_visible","is_cfd_visible","_ref$is_options_and_m","is_options_and_multipliers_visible","_useStore$traders_hub","TradersHub","_useStore2","Notifications","notification_messages_ui","is_single_logging_in","is_account_setting_loaded","website_status","is_eu_real","selected_platform_type","setTogglePlatformType","traders_hub_ref","can_show_notify","checkServerMaintenance","eu_title","getPlatformToggleOptions","platform_toggle_options","platform_toggle_options_eu","should_show_cfd_section","desktopContent","mobileTabletContent","ButtonToggle","buttons_arr","has_rounded_button","is_traders_hub","ButtonToggleLoader","BusinessClosureBanner","Div100vhContainer","height_offset","ref","MainTitleBar","ModalManager","Disclaimer","CTRADER","CFD","CFDS","CATEGORY","DEMO","REAL","MARKET_TYPE","SYNTHETIC","GAMING","FINANCIAL","ALL","PRODUCT","SWAPFREE","ZEROSPREAD","DERIVX","STP","GOLD","MOBILE_PLATFORMS","IOS","HAUWEI","ANDROID","DESKTOP_PLATFORMS","WINDOWS","LINUX","MACOS","getDxCompanies","all_config","leverage","short_title","synthetic_config","financial_config","dxtrade_account_type","synthetic","financial","dxtrade","mt5_account_type","getCTraderCompanies","ctrader_account_type","financial_title","financial_demo_title","financial_demo_title_eu","financial_demo_short_title","financial_title_eu","financial_stp_config","all_swap_free_svg","all_zero_spread_bvi","ctrader","financial_demo","synthetic_svg","financial_svg","financial_stp","synthetic_bvi","synthetic_v","financial_bvi","financial_fx","financial_v","getFormattedJurisdictionCode","jurisdiction_code","formatted_label","BVI","LABUAN","VANUATU","toUpperCase","is_low_risk_cr_non_eu","is_low_risk_cr_eu","is_high_risk_cr","EU_DEMO","subscribeToExchangeRate","unsubscribe","unsubscribeFromExchangeRate","unsubscribeAll","unsubscribeFromAllExchangeRates","deriv_com_url","supported_domains","domain_url_initial","hostname","domain_url","deriv_urls","freeze","DERIV_HOST_NAME","DERIV_COM_PRODUCTION","DERIV_COM_PRODUCTION_EU","DERIV_COM_STAGING","DERIV_APP_PRODUCTION","DERIV_APP_STAGING","HUB_PRODUCTION","HUB_STAGING","SMARTTRADER_PRODUCTION","SMARTTRADER_STAGING","P2P_PRODUCTION","P2P_STAGING","BOT_PRODUCTION","BOT_STAGING","getPlatformFromUrl","domain","resolutions","is_staging_deriv_app","is_deriv_app","is_test_link","is_test_deriv_app","is_staging","localize_language","url_lang","i18n_language","base_link","getPlatformSettings","platform_key","domain_name","allowed_config_data","config_data","host","getDomainUrl","LocalStorageUtils","getValue","URLUtils","getQueryParameter","DBot","DTrader","DXtrade","DMT5","SmartTrader","DerivGO","NAKALA_INFO_BASEURL","PRODUCTION","STAGING","selectedAccount","found","company","acc","_acc$landing_company_","landing_company_name","getMT5Account","loginId","nakalaServerInfo","setNakalaServerInfo","getNakalaServerInfo","is_nakala_enabled","_response$data","isProductionApp","apiUrl","axios","data","server_name","t0","console","account_settings","landing_company_shortcode","tnc_status","show_eu_related_content","svg_accounts_to_migrate","eligible_to_migrate","no_of_svg_accounts_to_migrate","is_eligible_for_svg_to_bvi_migration","_account$eligible_to_","is_eligible_for_svg_to_vanuatu_migration","_account$eligible_to_2","getEligibleAccountToMigrate","eligible_account_to_migrate_label","eligible_svg_to_bvi_derived_accounts","_account$eligible_to_3","eligible_svg_to_bvi_financial_accounts","_account$eligible_to_4","eligible_svg_to_vanuatu_derived_accounts","_account$eligible_to_5","eligible_svg_to_vanuatu_financial_accounts","_account$eligible_to_6","has_derived_mt5_to_migrate","has_derived_and_financial_mt5","setData","fetchData","send","trading_platform_status","_data$find","wallet_migration_state","startWalletMigration","resetWalletMigration","is_ineligible","is_migrated","is_wallet_migration_request_is_in_progress","startMigration","resetMigration"],"sourceRoot":""}