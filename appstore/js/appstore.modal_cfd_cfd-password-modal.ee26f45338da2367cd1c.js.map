{"version":3,"file":"appstore/js/appstore.modal_cfd_cfd-password-modal.ee26f45338da2367cd1c.js","mappings":"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","sources":["webpack://@deriv/appstore/@deriv/account/webpack/universalModuleDefinition","webpack://@deriv/appstore/@deriv/node_modules/object-assign/index.js","webpack://@deriv/appstore/@deriv/node_modules/react/cjs/react-jsx-runtime.production.min.js","webpack://@deriv/appstore/@deriv/node_modules/react/jsx-runtime.js","webpack://@deriv/appstore/@deriv/account/external umd \"@deriv-com/translations\"","webpack://@deriv/appstore/@deriv/account/external umd \"@deriv/components\"","webpack://@deriv/appstore/@deriv/account/external umd \"@deriv/shared\"","webpack://@deriv/appstore/@deriv/account/external umd \"@deriv/utils\"","webpack://@deriv/appstore/@deriv/account/external umd \"react\"","webpack://@deriv/appstore/@deriv/node_modules/@deriv-com/ui/dist/_commonjsHelpers-BkfeUUK-.js","webpack://@deriv/appstore/@deriv/node_modules/@deriv-com/ui/dist/index-EY1gwl5O.js","webpack://@deriv/appstore/@deriv/node_modules/@deriv-com/ui/dist/hooks/useDevice.js","webpack://@deriv/appstore/@deriv/account/webpack/bootstrap","webpack://@deriv/appstore/@deriv/account/webpack/runtime/define property getters","webpack://@deriv/appstore/@deriv/account/webpack/runtime/hasOwnProperty shorthand","webpack://@deriv/appstore/@deriv/account/Components/sent-email-modal/index.ts","webpack://@deriv/appstore/@deriv/account/Components/sent-email-modal/sent-email-modal.tsx","webpack://@deriv/appstore/../cfd/src/Components/cfd-account-copy.tsx","webpack://@deriv/appstore/../cfd/src/Components/specbox.tsx","webpack://@deriv/appstore/../cfd/src/Components/success-dialog/success-dialog.tsx","webpack://@deriv/appstore/../cfd/src/Containers/account-nakala-modal/account-nakala-modal.tsx","webpack://@deriv/appstore/../cfd/src/Components/migration-success-modal/migration-success-modal-content.tsx","webpack://@deriv/appstore/../cfd/src/Components/migration-success-modal/migration-success-modal.tsx","webpack://@deriv/appstore/../cfd/src/Components/migration-success-modal/index.tsx","webpack://@deriv/appstore/../cfd/src/Containers/cfd-enter-password-modal-title.tsx","webpack://@deriv/appstore/../cfd/src/Containers/cfd-password-modal.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@deriv-com/translations\"), require(\"@deriv/components\"), require(\"@deriv/shared\"), require(\"@deriv/utils\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@deriv-com/translations\", \"@deriv/components\", \"@deriv/shared\", \"@deriv/utils\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@deriv/account\"] = factory(require(\"@deriv-com/translations\"), require(\"@deriv/components\"), require(\"@deriv/shared\"), require(\"@deriv/utils\"), require(\"react\"));\n\telse\n\t\troot[\"@deriv/account\"] = factory(root[\"@deriv-com/translations\"], root[\"@deriv/components\"], root[\"@deriv/shared\"], root[\"@deriv/utils\"], root[\"react\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_com_translations__, __WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_utils__, __WEBPACK_EXTERNAL_MODULE_react__) => {\nreturn ","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/** @license React v17.0.2\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';require(\"object-assign\");var f=require(\"react\"),g=60103;exports.Fragment=60107;if(\"function\"===typeof Symbol&&Symbol.for){var h=Symbol.for;g=h(\"react.element\");exports.Fragment=h(\"react.fragment\")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=\"\"+k);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_com_translations__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_utils__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;","var u = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction f(e) {\n  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, \"default\") ? e.default : e;\n}\nfunction l(e) {\n  if (e.__esModule) return e;\n  var r = e.default;\n  if (typeof r == \"function\") {\n    var t = function o() {\n      return this instanceof o ? Reflect.construct(r, arguments, this.constructor) : r.apply(this, arguments);\n    };\n    t.prototype = r.prototype;\n  } else t = {};\n  return Object.defineProperty(t, \"__esModule\", { value: !0 }), Object.keys(e).forEach(function(o) {\n    var n = Object.getOwnPropertyDescriptor(e, o);\n    Object.defineProperty(t, o, n.get ? n : {\n      enumerable: !0,\n      get: function() {\n        return e[o];\n      }\n    });\n  }), t;\n}\nexport {\n  l as a,\n  u as c,\n  f as g\n};\n","import { useState as d, useLayoutEffect as m, useEffect as u, useRef as l } from \"react\";\nimport { c as a } from \"./_commonjsHelpers-BkfeUUK-.js\";\nvar v = typeof a == \"object\" && a && a.Object === Object && a, E = typeof self == \"object\" && self && self.Object === Object && self;\nv || E || Function(\"return this\")();\nvar f = typeof window < \"u\" ? m : u;\nfunction L(t, s, o, i) {\n  const c = l(s);\n  f(() => {\n    c.current = s;\n  }, [s]), u(() => {\n    const n = window;\n    if (!(n && n.addEventListener))\n      return;\n    const r = (e) => {\n      c.current(e);\n    };\n    return n.addEventListener(t, r, i), () => {\n      n.removeEventListener(t, r, i);\n    };\n  }, [t, o, i]);\n}\nvar h = typeof window > \"u\";\nfunction O(t, {\n  defaultValue: s = !1,\n  initializeWithValue: o = !0\n} = {}) {\n  const i = (e) => h ? s : window.matchMedia(e).matches, [c, n] = d(() => o ? i(t) : s);\n  function r() {\n    n(i(t));\n  }\n  return f(() => {\n    const e = window.matchMedia(t);\n    return r(), e.addListener ? e.addListener(r) : e.addEventListener(\"change\", r), () => {\n      e.removeListener ? e.removeListener(r) : e.removeEventListener(\"change\", r);\n    };\n  }, [t]), c;\n}\nfunction g(t, s, o = \"mousedown\", i = {}) {\n  L(\n    o,\n    (c) => {\n      const n = c.target;\n      if (!n || !n.isConnected)\n        return;\n      (Array.isArray(t) ? t.filter((e) => !!e.current).every((e) => e.current && !e.current.contains(n)) : t.current && !t.current.contains(n)) && s(c);\n    },\n    void 0,\n    i\n  );\n}\nexport {\n  g as a,\n  O as u\n};\n","import { u as t } from \"../index-EY1gwl5O.js\";\nconst d = () => {\n  const i = t(\"(min-width: 1280px)\"), a = t(\"(max-width: 600px)\"), n = t(\n    \"(min-width: 601px) and (max-width: 1279px)\"\n  ), e = t(\n    \"(min-width: 601px) and (max-width: 1279px) and (orientation: portrait)\"\n  ), o = t(\n    \"(max-width: 1279px) and (orientation: landscape)\"\n  );\n  return {\n    /** returns Larger screen tablets [min-width: 1280px] */\n    isDesktop: i,\n    /**  returns Smaller screen tablets [max-width: 600px] */\n    isMobile: a,\n    /** returns Larger screen phones and smaller screen desktop [min-width: 601px and max-width: 1279px] */\n    isTablet: n,\n    /** returns tablet screen with portrait orientation [min-width: 601px and max-width: 1279px and orientation: portrait] */\n    isTabletPortrait: e,\n    /** returns mobile or medium screens in landscape orientation [max-width: 1279px and orientation: landscape] */\n    isMobileOrTabletLandscape: o\n  };\n};\nexport {\n  d as useDevice\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import SentEmailModal from './sent-email-modal';\n\nexport default SentEmailModal;\n","import { ReactElement } from 'react';\nimport { Localize, useTranslations, localize } from '@deriv-com/translations';\nimport { Div100vhContainer, Icon, MobileDialog, Modal, SendEmailTemplate, Text, Popover } from '@deriv/components';\nimport { getPlatformSettings, CFD_PLATFORMS } from '@deriv/shared';\nimport { useDevice } from '@deriv-com/ui';\nimport { Chat } from '@deriv/utils';\n\ntype TSentEmailModal = {\n    identifier_title: string;\n    is_modal_when_mobile?: boolean;\n    is_open: boolean;\n    has_live_chat?: boolean;\n    onClickSendEmail: (prop?: string) => void;\n    onClose: () => void;\n};\n\ntype TNoEmailContentItem = {\n    key: string;\n    icon: string;\n    content: string | ReactElement;\n};\n\nconst getNoEmailContentStrings = (): TNoEmailContentItem[] => {\n    return [\n        {\n            key: 'email_spam',\n            icon: 'IcEmailSpam',\n            content: localize('The email is in your spam folder (Sometimes things get lost there).'),\n        },\n        {\n            key: 'wrong_email',\n            icon: 'IcEmail',\n            content: localize(\n                'You accidentally gave us another email address (Usually a work or a personal one instead of the one you meant).'\n            ),\n        },\n        {\n            key: 'wrong_typo',\n            icon: 'IcEmailTypo',\n            content: localize('The email address you entered had a mistake or typo (happens to the best of us).'),\n        },\n        {\n            key: 'email_firewall',\n            icon: 'IcEmailFirewall',\n            content: localize(\n                'We can’t deliver the email to this address (Usually because of firewalls or filtering).'\n            ),\n        },\n    ];\n};\n\nconst SentEmailModal = ({\n    identifier_title,\n    is_modal_when_mobile = false,\n    is_open,\n    has_live_chat = false,\n    onClickSendEmail,\n    onClose,\n}: TSentEmailModal) => {\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    const getSubtitle = () => {\n        let subtitle: string | ReactElement = '';\n        switch (identifier_title) {\n            case CFD_PLATFORMS.DXTRADE:\n                subtitle = (\n                    <Localize\n                        i18n_default_text='Please click on the link in the email to change your <0>{{platform_name_dxtrade}}</0> password.'\n                        components={[<span className='send-email-template__subtitle-platform' key={0} />]}\n                        values={{ platform_name_dxtrade: getPlatformSettings('dxtrade').name }}\n                    />\n                );\n                break;\n            case CFD_PLATFORMS.MT5:\n                subtitle = localize('Please click on the link in the email to change your Deriv MT5 password.');\n                break;\n            case 'Google':\n            case 'Facebook':\n                subtitle = localize(\n                    'Check your {{ identifier_title }} account email and click the link in the email to proceed.',\n                    { identifier_title }\n                );\n                break;\n            case 'Change_Email':\n                subtitle = localize('Check your email and click the link in the email to proceed.');\n                break;\n            default:\n                subtitle = localize('Please click on the link in the email to reset your password.');\n                break;\n        }\n        return subtitle;\n    };\n\n    const onLiveChatClick = () => {\n        onClose();\n        Chat.open();\n    };\n\n    const live_chat = has_live_chat ? (\n        <Localize\n            i18n_default_text=\"Still didn't get the email? Please contact us via <0>live chat.</0>\"\n            components={[\n                <span className='send-email-template__footer-live-chat' key={0} onClick={onLiveChatClick}>\n                    <Popover\n                        className='send-email-template__footer-live-chat__link'\n                        classNameBubble='help-centre__tooltip'\n                        alignment='top'\n                        message={localize('Live chat')}\n                        zIndex='9999'\n                    />\n                </span>,\n            ]}\n        />\n    ) : null;\n\n    const sent_email_template: ReactElement = (\n        <SendEmailTemplate\n            className='sent-email'\n            subtitle={getSubtitle()}\n            title={localize('We’ve sent you an email')}\n            lbl_no_receive={localize(\"Didn't receive the email?\")}\n            txt_resend={localize('Resend email')}\n            txt_resend_in={localize('Resend email in')}\n            onClickSendEmail={onClickSendEmail}\n            live_chat={live_chat}\n        >\n            {getNoEmailContentStrings().map(item => (\n                <div className='sent-email__content' key={item.key}>\n                    <Icon icon={item.icon} size={32} />\n                    <Text size='xxs' as='p'>\n                        {item.content}\n                    </Text>\n                </div>\n            ))}\n        </SendEmailTemplate>\n    );\n\n    if (!isDesktop && !is_modal_when_mobile) {\n        return (\n            <MobileDialog\n                portal_element_id='modal_root'\n                title={localize('We’ve sent you an email')}\n                wrapper_classname='mt5-email-sent'\n                visible={is_open}\n                onClose={onClose}\n                has_content_scroll\n            >\n                {sent_email_template}\n            </MobileDialog>\n        );\n    }\n\n    return (\n        <Modal\n            className={'sent-email__modal'}\n            is_open={is_open}\n            has_close_icon\n            should_header_stick_body\n            title=''\n            toggleModal={onClose}\n            width='440px'\n        >\n            <Div100vhContainer\n                className='account__scrollbars_container-wrapper'\n                is_disabled={isDesktop}\n                height_offset='80px'\n            >\n                <Modal.Body>\n                    <div\n                        onClick={onClose}\n                        className='send-email-template__close'\n                        data-testid='dt_send_email_template_close'\n                    >\n                        <Icon icon='IcCross' />\n                    </div>\n                    {sent_email_template}\n                </Modal.Body>\n            </Div100vhContainer>\n        </Modal>\n    );\n};\n\nexport default SentEmailModal;\n","import React from 'react';\nimport { Clipboard } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isMobile } from '@deriv/shared';\nimport { TCFDAccountCopy } from './props.types';\n\nconst CFDAccountCopy = ({ text, className }: TCFDAccountCopy) => {\n    return (\n        <div className={className} data-testid='cfd_account_copy_main_div'>\n            <Clipboard\n                text_copy={text}\n                info_message={isMobile() ? '' : localize('copy')}\n                success_message={localize('copied!')}\n                popoverAlignment={isMobile() ? 'left' : 'bottom'}\n            />\n        </div>\n    );\n};\n\nexport { CFDAccountCopy };\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Text } from '@deriv/components';\n\nimport { CFDAccountCopy } from './cfd-account-copy';\n\nexport type TSpecBoxProps = {\n    value?: string;\n    is_bold?: boolean;\n    is_broker?: boolean;\n};\n\nconst SpecBox = ({ value, is_bold, is_broker }: TSpecBoxProps) => (\n    <div className='cfd-trade-modal__spec-box '>\n        <Text\n            size='xs'\n            weight={is_bold ? 'bold' : ''}\n            className={classNames('cfd-trade-modal__spec-text', { 'cfd-trade-modal__spec-text-broker': is_broker })}\n        >\n            {value}\n        </Text>\n        <CFDAccountCopy text={value} className='cfd-trade-modal__spec-copy' />\n    </div>\n);\n\nexport default SpecBox;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Button, Icon, Modal, Text } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\n\ntype TSuccessDialogProps = {\n    is_open: boolean;\n    toggleModal: () => void;\n    onCancel?: () => void;\n    onSubmit?: () => void;\n    classNameMessage?: string;\n    message: string | React.ReactElement;\n    icon: React.ReactElement;\n    icon_size?: string;\n    text_submit?: string;\n    text_cancel?: string;\n    heading?: string | React.ReactElement;\n    title?: string;\n    icon_type?: string;\n    is_medium_button?: boolean;\n    has_close_icon: boolean;\n    width?: string;\n    has_cancel?: boolean;\n    has_submit?: boolean;\n};\n\nconst SuccessDialog = ({\n    classNameMessage = '',\n    has_cancel = false,\n    has_submit = true,\n    icon,\n    message,\n    onCancel,\n    onSubmit,\n    heading,\n    icon_size = 'large',\n    text_submit,\n    text_cancel,\n    is_open,\n    toggleModal,\n    title,\n    has_close_icon,\n    width = '',\n    is_medium_button,\n}: TSuccessDialogProps) => {\n    return (\n        <Modal\n            className='cfd-success-dialog'\n            is_open={is_open}\n            toggleModal={toggleModal}\n            has_close_icon={has_close_icon}\n            small={!title}\n            title={title}\n            width={width}\n        >\n            <Modal.Body>\n                <div\n                    className={classNames('success-change__icon-area', {\n                        'success-change__icon-area--large': icon_size === 'large',\n                        'success-change__icon-area--xlarge': icon_size === 'xlarge',\n                    })}\n                    data-testid='dt_cfd_success_modal_icon_wrapper'\n                >\n                    {icon}\n                    <Icon\n                        className='bottom-right-overlay'\n                        icon='IcCheckmarkCircle'\n                        custom_color='var(--status-success)'\n                        size={24}\n                    />\n                </div>\n                {!heading ? (\n                    <Text as='h2' weight='bold' size='s' className='dc-modal-header__title'>\n                        <Localize i18n_default_text='Success!' />\n                    </Text>\n                ) : (\n                    <React.Fragment>{heading}</React.Fragment>\n                )}\n\n                {React.isValidElement(message) && message}\n                {!React.isValidElement(message) && <p className={classNameMessage}>{message}</p>}\n            </Modal.Body>\n            <Modal.Footer>\n                {has_cancel && onCancel && (\n                    <Button\n                        onClick={onCancel}\n                        has_effect\n                        text={text_cancel || localize('Maybe later')}\n                        secondary\n                        {...(is_medium_button ? { medium: true } : { large: true })}\n                    />\n                )}\n                {has_submit && onSubmit && (\n                    <Button\n                        has_effect\n                        onClick={onSubmit}\n                        text={text_submit}\n                        primary\n                        {...(is_medium_button ? { medium: true } : { large: true })}\n                    />\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default SuccessDialog;\n","import React, { useEffect } from 'react';\nimport Cookies from 'js-cookie';\n\nimport { Button, Icon, Text } from '@deriv/components';\nimport { isDesktop } from '@deriv/shared';\nimport { observer } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\n\nimport SpecBox from '../../Components/specbox';\n\nimport './account-nakala-modal.scss';\n\ninterface CFDDerivNakalaModalProps {\n    onclickAction: () => void;\n}\n\nconst ModalInfo = () => {\n    return (\n        <React.Fragment>\n            <div className='nakala-modal-maintenance'>\n                <div className='nakala-modal-maintenance_icon'>\n                    <Icon icon='IcInfoYellow' />\n                </div>\n                <Text size='xxxs'>\n                    <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.' />\n                </Text>\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst CFDDerivNakalaInfo = (props: CFDDerivNakalaModalProps) => {\n    return (\n        <React.Fragment>\n            <div className='cfd-nakala-modal'>\n                <div className='cfd-nakala-modal__logo-container'>\n                    <div className='cfd-nakala-modal__logo'>\n                        <Icon icon='IcRebrandingDerivNakala' size={64} />\n                    </div>\n                </div>\n\n                <div className='cfd-nakala-modal__description'>\n                    <Text as='p' size='s'>\n                        <Localize i18n_default_text='Follow top global traders and copy their strategies.' />\n                    </Text>\n                </div>\n\n                <div className='cfd-nakala-modal__getting-started'>\n                    <Text as='h3' weight='bold' size='s'>\n                        <Localize i18n_default_text='Getting started with Deriv Nakala' />\n                    </Text>\n\n                    <div className='cfd-nakala-modal__steps'>\n                        <div className='cfd-nakala-modal__step'>\n                            <div className='cfd-nakala-modal__step-number'>\n                                <Text weight='bold' color='colored-background'>\n                                    1\n                                </Text>\n                            </div>\n                            <Text size='xs'>\n                                <Localize i18n_default_text='Open an MT5 Standard account on our trading platform.' />\n                            </Text>\n                        </div>\n\n                        <div className='cfd-nakala-modal__step'>\n                            <div className='cfd-nakala-modal__step-number'>\n                                <Text weight='bold' color='colored-background'>\n                                    2\n                                </Text>\n                            </div>\n                            <Text size='xs'>\n                                <Localize i18n_default_text='Download the Nakala app and create your account.' />\n                            </Text>\n                        </div>\n                        <div className='cfd-nakala-modal__step'>\n                            <div className='cfd-nakala-modal__step-number'>\n                                <Text weight='bold' color='colored-background'>\n                                    3\n                                </Text>\n                            </div>\n                            <Text size='xs'>\n                                <Localize i18n_default_text='Link your MT5 account in the Deriv Nakala app.' />\n                            </Text>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className={`cfd-nakala-modal__footer ${!isDesktop() && 'cfd-nakala-modal__footer--mobile'}`}>\n                <Button type='button' onClick={props.onclickAction} primary large>\n                    <Localize i18n_default_text='Next' />\n                </Button>\n            </div>\n        </React.Fragment>\n    );\n};\n\ninterface TCFDDerivNakalaLinkAccountProps {\n    isSuccess?: boolean;\n    nakalaInfo: {\n        loginId: string | null;\n        serverName: string | null;\n    };\n}\n\nexport const CFDDerivNakalaLinkAccount = observer((props: TCFDDerivNakalaLinkAccountProps) => {\n    const { isSuccess = false, nakalaInfo } = props;\n\n    const manageNakalaCookie = () => {\n        const nakalaLinkedCookie = 'nakala_linked';\n\n        const nakalaLinkedCookieExist = Cookies.get(nakalaLinkedCookie);\n        if (nakalaLinkedCookieExist) return;\n\n        const nakalaLinkedCookieValue = 'true';\n        const nakalaLinkedCookieExpiry = 365; // days\n\n        Cookies.set(nakalaLinkedCookie, nakalaLinkedCookieValue, {\n            domain: '.deriv.com',\n            expires: nakalaLinkedCookieExpiry,\n        });\n    };\n\n    const isDesktopDevice = isDesktop();\n\n    useEffect(() => {\n        isDesktopDevice && manageNakalaCookie();\n    }, [isDesktopDevice]);\n\n    const onClickOpenApp = () => {\n        manageNakalaCookie();\n        window.open('https://onelink.to/uuuxmw', '_blank');\n    };\n\n    return (\n        <React.Fragment>\n            <div className='cfd-nakala-modal'>\n                <div className='cfd-nakala-modal__logo-container'>\n                    <div className='cfd-nakala-modal__logo'>\n                        <Icon icon='IcRebrandingNakalaMt5Linked' className='linked' />\n                    </div>\n                </div>\n\n                {isSuccess && (\n                    <div className='cfd-nakala-modal__title'>\n                        <Text as='h3' weight='bold' align='center'>\n                            <Localize i18n_default_text='Your MT5 Standard account is ready' />\n                        </Text>\n                    </div>\n                )}\n\n                <div className='cfd-nakala-modal__steps cfd-nakala-modal__steps--with-line'>\n                    <div className='cfd-nakala-modal__step'>\n                        <div className='cfd-nakala-modal__step-number'>\n                            <Text weight='bold' color='colored-background'>\n                                1\n                            </Text>\n                        </div>\n                        <div className='cfd-nakala-modal__step-content'>\n                            <Text as='p'>\n                                <Localize i18n_default_text='To copy trade, create your Deriv Nakala account in the mobile app. ' />\n                                {isDesktopDevice && (\n                                    <Localize i18n_default_text='Scan the below QR to download the mobile app.' />\n                                )}\n                            </Text>\n                        </div>\n                    </div>\n\n                    {isDesktopDevice && (\n                        <div className='cfd-nakala-modal__qr-section'>\n                            <div className='cfd-nakala-modal__qr-section-code'>\n                                <Icon icon='IcRebrandingNakalaQrCode' height={120} width={120} />\n                            </div>\n                        </div>\n                    )}\n\n                    <div className='cfd-nakala-modal__step'>\n                        <div className='cfd-nakala-modal__step-number'>\n                            <Text weight='bold' color='colored-background'>\n                                2\n                            </Text>\n                        </div>\n                        <div className='cfd-nakala-modal__step-content'>\n                            <Text as='p'>\n                                <Localize i18n_default_text='Then, link your MT5 Standard account using these details and your MT5 password:' />\n                            </Text>\n                        </div>\n                    </div>\n                </div>\n\n                <div className='cfd-nakala-modal__login-specs'>\n                    <div className='cfd-nakala-modal__login-specs-item'>\n                        <Text className='cfd-nakala-modal--paragraph'>{localize('Server')}</Text>\n                        <SpecBox is_bold value={nakalaInfo.serverName ?? ''} />\n                    </div>\n                    <div className='cfd-nakala-modal__login-specs-item'>\n                        <Text className='cfd-nakala-modal--paragraph'>{localize('Account no.')}</Text>\n                        <SpecBox is_bold value={nakalaInfo.loginId ?? ''} />\n                    </div>\n                    <ModalInfo />\n                </div>\n\n                <div className='cfd-nakala-modal__help-section'>\n                    <Text size='xs'>\n                        {localize('Need help?')}{' '}\n                        <a href='https://deriv.copytrade-resource.com/' target='_blank' rel='noreferrer'>\n                            {localize('Check the guide')}\n                        </a>\n                    </Text>\n                </div>\n            </div>\n            {!isDesktopDevice && (\n                <div className={`cfd-nakala-modal__footer cfd-nakala-modal__footer--info-mobile`}>\n                    <Button type='button' onClick={onClickOpenApp} primary large>\n                        <Localize i18n_default_text='Open Deriv Nakala mobile app' />\n                    </Button>\n                </div>\n            )}\n        </React.Fragment>\n    );\n});\nexport default CFDDerivNakalaInfo;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { InlineMessage, Text, Button, Modal, Icon } from '@deriv/components';\nimport { Jurisdiction, CFD_PLATFORMS, getCFDPlatformNames, getFormattedJurisdictionCode } from '@deriv/shared';\n\ntype TMigrationSuccessModalContent = {\n    icon?: string;\n    eligible_account_to_migrate: string;\n    closePopupModal: () => void;\n    jurisdiction_market_name: Array<string>;\n};\n\nconst MigrationSuccessModalContent = observer(\n    ({\n        icon,\n        eligible_account_to_migrate,\n        jurisdiction_market_name,\n        closePopupModal,\n    }: TMigrationSuccessModalContent) => {\n        const { ui } = useStore();\n        const { is_mobile } = ui;\n\n        const platform = getCFDPlatformNames(CFD_PLATFORMS.MT5);\n        const text_size = is_mobile ? 'xxs' : 'xs';\n        const information_text_size = is_mobile ? 'xxxs' : 'xxs';\n        const getFormattedAccounts = () =>\n            jurisdiction_market_name.length > 1\n                ? {\n                      type_1: jurisdiction_market_name[0],\n                      type_2: jurisdiction_market_name[1],\n                  }\n                : {\n                      type_1: jurisdiction_market_name[0],\n                  };\n        return (\n            <div className='cfd-success-dialog-migration__modal-content'>\n                <Modal.Body className={classNames('cfd-success-dialog-migration__body')}>\n                    <div className='cfd-success-dialog-migration__icon-area'>\n                        {icon && <Icon icon={icon} size={128} />}\n                    </div>\n                    <div>\n                        <Text as='h2' weight='bold' className='cfd-success-dialog-migration__title'>\n                            <Localize i18n_default_text='Upgrade complete' />\n                        </Text>\n                        <div className='cfd-success-dialog-migration__content-wrapper'>\n                            <Text size={text_size} as='p' align='center'>\n                                {jurisdiction_market_name.length > 1 ? (\n                                    <Localize\n                                        i18n_default_text='Start trading with your new <0>{{platform}} {{type_1}}</0> and <0>{{type_2}} {{eligible_account_to_migrate}}</0> accounts.'\n                                        values={{\n                                            platform,\n                                            eligible_account_to_migrate,\n                                            ...getFormattedAccounts(),\n                                        }}\n                                        components={[<strong key={0} />]}\n                                    />\n                                ) : (\n                                    <Localize\n                                        i18n_default_text='Start trading with your new <0>{{platform}} {{type_1}} {{eligible_account_to_migrate}}</0> account.'\n                                        values={{\n                                            platform,\n                                            eligible_account_to_migrate,\n                                            ...getFormattedAccounts(),\n                                        }}\n                                        components={[<strong key={0} />]}\n                                    />\n                                )}\n                            </Text>\n                            <div className='cfd-success-dialog-migration__inline-msg'>\n                                <InlineMessage\n                                    type='information'\n                                    size='sm'\n                                    title={\n                                        <Localize\n                                            i18n_default_text='Important: Your <0>{{platform}} {{existing_account}}</0> account.'\n                                            values={{\n                                                platform,\n                                                existing_account: getFormattedJurisdictionCode(Jurisdiction.SVG),\n                                            }}\n                                            components={[<strong key={0} />]}\n                                        />\n                                    }\n                                    message={\n                                        <Text\n                                            as='ul'\n                                            size={information_text_size}\n                                            className={'cfd-success-dialog-migration__body-bullets--list'}\n                                        >\n                                            <li>\n                                                <Localize i18n_default_text=\"You can manage your existing positions, but you can't start a new trade.\" />\n                                            </li>\n                                            <li>\n                                                <Localize i18n_default_text=\"We'll close accounts with no open positions after 60 days.\" />\n                                            </li>\n                                        </Text>\n                                    }\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer has_separator className='cfd-success-dialog-migration-footer'>\n                    <Button has_effect onClick={closePopupModal} primary large>\n                        <Localize i18n_default_text='OK' />\n                    </Button>\n                </Modal.Footer>\n            </div>\n        );\n    }\n);\n\nexport default MigrationSuccessModalContent;\n","import React from 'react';\nimport { Modal, PageOverlay } from '@deriv/components';\nimport { Jurisdiction, getFormattedJurisdictionMarketTypes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { getFormattedJurisdictionCode } from '../../Stores/Modules/CFD/Helpers/cfd-config';\n\nimport { useCfdStore } from '../../Stores/Modules/CFD/Helpers/useCfdStores';\nimport MigrationSuccessModalContent from './migration-success-modal-content';\n\ntype TMigrationSuccessModal = {\n    is_open: boolean;\n    closeModal: () => void;\n};\n\nconst MigrationSuccessModal = observer(({ is_open, closeModal }: TMigrationSuccessModal) => {\n    const { ui } = useStore();\n    const { is_mobile, setMT5MigrationModalEnabled } = ui;\n    const { migrated_mt5_accounts, setIsFromMt5MigrationModal } = useCfdStore();\n\n    const has_migrated_mt5_accounts = !!migrated_mt5_accounts.length;\n    const eligible_account_to_migrate = getFormattedJurisdictionCode(\n        migrated_mt5_accounts.map(account => Object.values(account?.to_account ?? {})?.[0])?.[0]\n    );\n\n    const jurisdiction_market_name = migrated_mt5_accounts.map(account =>\n        getFormattedJurisdictionMarketTypes(Object.keys(account?.to_account ?? {})?.[0])\n    );\n\n    const closeMigrationModals = () => {\n        setIsFromMt5MigrationModal(false);\n        setMT5MigrationModalEnabled(false);\n        closeModal();\n    };\n\n    const getMigrationIcon = () => {\n        if (has_migrated_mt5_accounts) {\n            const to_acc = Object.values(migrated_mt5_accounts[0]?.to_account)?.[0] || '';\n            if (migrated_mt5_accounts?.length === 1) {\n                switch (to_acc) {\n                    case Jurisdiction.BVI:\n                        return 'IcMt5Bvi';\n                    case Jurisdiction.VANUATU:\n                        return 'IcMt5Vanuatu';\n                    default:\n                        return '';\n                }\n            } else {\n                switch (to_acc) {\n                    case Jurisdiction.BVI:\n                        return 'IcMt5StandardFinancialBvi';\n                    case Jurisdiction.VANUATU:\n                        return 'IcMt5StandardFinancialVanuatu';\n                    default:\n                        return '';\n                }\n            }\n        }\n    };\n\n    const ModalContent = () => (\n        <MigrationSuccessModalContent\n            closePopupModal={closeMigrationModals}\n            icon={getMigrationIcon()}\n            eligible_account_to_migrate={eligible_account_to_migrate}\n            jurisdiction_market_name={jurisdiction_market_name}\n        />\n    );\n\n    return is_mobile ? (\n        <PageOverlay\n            is_open={is_open}\n            header_classname='cfd-success-dialog-migration'\n            portal_id='deriv_app'\n            header=' '\n            onClickClose={closeMigrationModals}\n        >\n            <ModalContent />\n        </PageOverlay>\n    ) : (\n        <Modal\n            className='cfd-success-dialog-migration'\n            is_open={is_open}\n            toggleModal={closeMigrationModals}\n            has_close_icon\n            title=' '\n            width='58.8rem'\n            should_header_stick_body={false}\n        >\n            <ModalContent />\n        </Modal>\n    );\n});\n\nexport default MigrationSuccessModal;\n","import MigrationSuccessModal from './migration-success-modal';\n\nexport default MigrationSuccessModal;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { getCFDPlatformLabel, getCFDPlatformNames } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { CATEGORY, CFD_PLATFORMS } from '../Helpers/cfd-config';\n\ntype TCFDEnterPasswordModalTitleProps = { platform: typeof CFD_PLATFORMS[keyof typeof CFD_PLATFORMS] };\n\nconst CFDEnterPasswordModalTitle = observer(({ platform }: TCFDEnterPasswordModalTitleProps) => {\n    const {\n        modules: { cfd },\n    } = useStore();\n    const { account_title, account_type } = cfd;\n\n    const getAccountCardTitle = () => {\n        switch (platform) {\n            case CFD_PLATFORMS.CTRADER:\n            case CFD_PLATFORMS.DXTRADE:\n                return account_type.category === CATEGORY.REAL ? 'Real' : '';\n            default:\n                return account_title;\n        }\n    };\n\n    return (\n        <Text size='xs' className='dc-modal__container_cfd-password-modal__account-title'>\n            {platform === CFD_PLATFORMS.MT5 ? (\n                <Localize\n                    i18n_default_text='Enter your {{platform}} password to add an {{platform}} {{account}} account.'\n                    values={{\n                        platform: getCFDPlatformNames(platform),\n                        account: getAccountCardTitle(),\n                    }}\n                />\n            ) : (\n                <Localize\n                    i18n_default_text='Enter your {{platform}} password to add a {{platform}} {{account}} account.'\n                    values={{\n                        platform: getCFDPlatformLabel(platform),\n                        account: getAccountCardTitle(),\n                    }}\n                />\n            )}\n        </Text>\n    );\n});\n\nexport default CFDEnterPasswordModalTitle;\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport classNames from 'classnames';\nimport { Formik, FormikErrors, FormikHelpers } from 'formik';\n\nimport { SentEmailModal } from '@deriv/account';\nimport {\n    Div100vhContainer,\n    FormSubmitButton,\n    Icon,\n    MobileDialog,\n    Modal,\n    MultiStep,\n    PageOverlay,\n    PasswordInput,\n    PasswordMeter,\n    Text,\n} from '@deriv/components';\nimport {\n    getCFDPlatformLabel,\n    getCFDPlatformNames,\n    getErrorMessages,\n    makeLazyLoader,\n    moduleLoader,\n    validLength,\n    validMT5Password,\n    validPassword,\n    WS,\n} from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\n\nimport MigrationSuccessModal from '../Components/migration-success-modal';\nimport SuccessDialog from '../Components/success-dialog/success-dialog';\nimport { CATEGORY, CFD_PLATFORMS } from '../Helpers/cfd-config';\nimport { getDxCompanies, getMtCompanies, TDxCompanies, TMtCompanies } from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nimport CFDDerivNakalaInfo, { CFDDerivNakalaLinkAccount } from './account-nakala-modal/account-nakala-modal';\nimport CFDEnterPasswordModalTitle from './cfd-enter-password-modal-title';\n\nimport '../sass/cfd.scss';\nimport { useIsEnabledNakala } from '@deriv/hooks';\n\nconst MT5CreatePassword = makeLazyLoader(\n    () => moduleLoader(() => import('./mt5-create-password/mt5-create-password')),\n    () => <div />\n)();\n\nconst CfdPasswordModalTnc = makeLazyLoader(\n    () => moduleLoader(() => import('./cfd-password-modal-tnc')),\n    () => <div />\n)();\n\nconst CFDPasswordChange = makeLazyLoader(\n    () => moduleLoader(() => import('./cfd-password-change')),\n    () => <div />\n)();\n\nconst CFDPasswordSuccessIcon = makeLazyLoader(\n    () => moduleLoader(() => import('./cfd-password-success-icon')),\n    () => <div />\n)();\n\nconst CFDPasswordChangeContent = makeLazyLoader(\n    () => moduleLoader(() => import('./cfd-password-change-content')),\n    () => <div />\n)();\n\nconst ChangePasswordConfirmation = makeLazyLoader(\n    () => moduleLoader(() => import('./cfd-change-password-confirmation')),\n    () => <div />\n)();\n\nexport type TCFDPasswordFormValues = { password: string };\n\ntype TOnSubmitPassword = (values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) => void;\n\ntype TPasswordModalHeaderProps = {\n    should_set_trading_password: boolean;\n    is_password_reset_error: boolean;\n    platform: string;\n    is_nakala_info: boolean;\n    has_mt5_account?: boolean;\n};\n\ntype TCFDPasswordFormReusedProps = {\n    platform: (typeof CFD_PLATFORMS)[keyof typeof CFD_PLATFORMS];\n    error_message: string;\n    validatePassword: (values: TCFDPasswordFormValues) => FormikErrors<TCFDPasswordFormValues>;\n};\n\ntype TCFDCreatePasswordProps = TCFDPasswordFormReusedProps & {\n    password: string;\n    onSubmit: TOnSubmitPassword;\n    need_tnc: boolean;\n};\n\ntype TCFDCreatePasswordFormProps = TCFDPasswordFormReusedProps & {\n    has_mt5_account: boolean;\n    submitPassword: TOnSubmitPassword;\n    need_tnc: boolean;\n};\n\ntype TMultiStepRefProps = {\n    goNextStep: () => void;\n    goPrevStep: () => void;\n};\n\ntype TCFDPasswordFormProps = TCFDPasswordFormReusedProps & {\n    closeModal: () => void;\n    error_type?: string;\n    form_error?: string;\n    has_mt5_account: boolean;\n    is_dxtrade_allowed: boolean;\n    onCancel: () => void;\n    onForgotPassword: () => void;\n    should_set_trading_password: boolean;\n    submitPassword: TOnSubmitPassword;\n    account_type: {\n        type: string;\n        category: string;\n    };\n};\n\ntype TCFDPasswordModalProps = {\n    error_type?: string;\n    form_error?: string;\n    platform: (typeof CFD_PLATFORMS)[keyof typeof CFD_PLATFORMS];\n};\n\nconst PasswordModalHeader = ({\n    should_set_trading_password,\n    is_password_reset_error,\n    platform,\n    is_nakala_info,\n}: TPasswordModalHeaderProps) => {\n    const { isDesktop } = useDevice();\n    const is_mt5 = platform === CFD_PLATFORMS.MT5;\n\n    const element = !isDesktop ? 'p' : 'span';\n\n    const style = !isDesktop\n        ? {\n              padding: '2rem',\n          }\n        : {};\n\n    if (is_nakala_info) {\n        return (\n            <Text as={element} line_height='m' weight='bold' size={!isDesktop ? 'xs' : 's'} align='center'>\n                <Localize i18n_default_text='Deriv Nakala' />\n            </Text>\n        );\n    }\n\n    if (is_mt5 && !is_password_reset_error) {\n        const platform_name = getCFDPlatformNames(platform);\n        return (\n            <Text as={element} line_height='m' weight='bold' size={!isDesktop ? 'xs' : 's'} align='center'>\n                {should_set_trading_password ? (\n                    <Localize\n                        i18n_default_text='Create an {{platform_name}} account'\n                        values={{\n                            platform_name,\n                        }}\n                    />\n                ) : (\n                    <Localize\n                        i18n_default_text='Add an {{platform_name}} account'\n                        values={{\n                            platform_name,\n                        }}\n                    />\n                )}\n            </Text>\n        );\n    }\n\n    return (\n        <Text styles={style} as={element} line_height='m' weight='bold' size='s' align='center'>\n            {!should_set_trading_password && !is_password_reset_error && (\n                <Localize\n                    i18n_default_text='Enter your {{platform}} password'\n                    values={{\n                        platform: getCFDPlatformLabel(platform),\n                    }}\n                />\n            )}\n            {is_password_reset_error && <Localize i18n_default_text='Too many attempts' />}\n        </Text>\n    );\n};\n\nconst getCancelButtonLabel = ({\n    should_set_trading_password,\n    error_type,\n    isDesktop,\n}: Pick<TCFDPasswordFormProps, 'should_set_trading_password' | 'error_type'> & { isDesktop: boolean }) => {\n    if (should_set_trading_password && error_type !== 'PasswordReset') {\n        return isDesktop ? null : localize('Cancel');\n    }\n\n    return localize('Forgot password?');\n};\n\nconst handlePasswordInputChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    handleChange: (el: React.ChangeEvent<HTMLInputElement>) => void,\n    validateForm: (values?: TCFDPasswordFormValues) => Promise<FormikErrors<TCFDPasswordFormValues>>,\n    setFieldTouched: (field: string, isTouched?: boolean, shouldValidate?: boolean) => void\n) => {\n    handleChange(e);\n    validateForm().then(() => {\n        setFieldTouched('password', true);\n    });\n};\n\nconst CreatePassword = ({ password, platform, validatePassword, onSubmit, error_message }: TCFDCreatePasswordProps) => {\n    return (\n        <Formik\n            initialValues={{\n                password,\n            }}\n            enableReinitialize\n            validate={validatePassword}\n            onSubmit={onSubmit}\n        >\n            {({\n                errors,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                setFieldTouched,\n                touched,\n                values,\n                validateForm,\n            }) => (\n                <form onSubmit={handleSubmit}>\n                    <div\n                        className='cfd-password-modal__content dc-modal__container_cfd-password-modal__body cfd-password-modal__create-password-content'\n                        data-testid='dt_create_password'\n                    >\n                        <Icon icon='IcDxtradeOnePassword' width='122' height='108' />\n                        <Text\n                            size='s'\n                            align='center'\n                            weight='bold'\n                            className='cfd-password-modal__create-password-title'\n                        >\n                            <Localize\n                                i18n_default_text='Create a {{platform}} password'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <Text size='xs' align='center' className='cfd-password-modal__create-password-description'>\n                            <Localize\n                                i18n_default_text='You can use this password for all your {{platform}} accounts.'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <div className='input-element'>\n                            <PasswordMeter\n                                input={values.password}\n                                has_error={!!(touched.password && errors.password)}\n                                custom_feedback_messages={getErrorMessages().password_warnings}\n                            >\n                                {() => (\n                                    <PasswordInput\n                                        autoComplete='new-password'\n                                        label={localize('{{platform}} password', {\n                                            platform: getCFDPlatformLabel(platform),\n                                        })}\n                                        error={\n                                            (touched.password && errors.password) ||\n                                            (values.password.length === 0 ? error_message : '')\n                                        }\n                                        name='password'\n                                        value={values.password}\n                                        onBlur={handleBlur}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                            handlePasswordInputChange(e, handleChange, validateForm, setFieldTouched);\n                                        }}\n                                        data_testId={`dt_${platform}_password`}\n                                    />\n                                )}\n                            </PasswordMeter>\n                        </div>\n                        <FormSubmitButton\n                            is_disabled={!values.password || Object.keys(errors).length > 0}\n                            is_loading={isSubmitting}\n                            label={localize('Create {{platform}} password', {\n                                platform: getCFDPlatformLabel(platform),\n                            })}\n                            is_center={platform !== CFD_PLATFORMS.MT5}\n                        />\n                    </div>\n                </form>\n            )}\n        </Formik>\n    );\n};\n\nconst CFDCreatePasswordForm = ({\n    has_mt5_account,\n    platform,\n    error_message,\n    validatePassword,\n    submitPassword,\n    need_tnc,\n}: TCFDCreatePasswordFormProps) => {\n    const multi_step_ref = React.useRef<TMultiStepRefProps>();\n    const [password, setPassword] = React.useState('');\n\n    const onSubmit: TOnSubmitPassword = (values, actions) => {\n        if (platform === CFD_PLATFORMS.MT5 && has_mt5_account) {\n            setPassword(values.password);\n            multi_step_ref.current?.goNextStep();\n        } else {\n            submitPassword(values, actions);\n        }\n    };\n\n    const steps = [\n        {\n            component:\n                platform === CFD_PLATFORMS.MT5 ? (\n                    <MT5CreatePassword\n                        password={password}\n                        platform={platform}\n                        error_message={error_message}\n                        validatePassword={validatePassword}\n                        onSubmit={onSubmit}\n                        need_tnc={need_tnc}\n                    />\n                ) : (\n                    <CreatePassword\n                        password={password}\n                        platform={platform}\n                        error_message={error_message}\n                        validatePassword={validatePassword}\n                        onSubmit={onSubmit}\n                        need_tnc={need_tnc}\n                    />\n                ),\n        },\n        {\n            component: (\n                <ChangePasswordConfirmation\n                    className='cfd-password-modal__change-password-confirmation'\n                    platform={platform}\n                    onConfirm={(_values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) =>\n                        submitPassword({ password }, actions)\n                    }\n                    onCancel={() => multi_step_ref.current?.goPrevStep()}\n                />\n            ),\n        },\n    ];\n\n    return <MultiStep ref={multi_step_ref} steps={steps} />;\n};\n\nconst CFDPasswordForm = observer(\n    ({\n        closeModal,\n        error_message,\n        error_type,\n        form_error,\n        has_mt5_account,\n        onCancel,\n        onForgotPassword,\n        platform,\n        should_set_trading_password,\n        submitPassword,\n        validatePassword,\n        account_type,\n    }: TCFDPasswordFormProps) => {\n        const { isDesktop } = useDevice();\n        const { jurisdiction_selected_shortcode } = useCfdStore();\n        const [checked, setChecked] = React.useState(false);\n        const need_tnc =\n            jurisdiction_selected_shortcode !== 'svg' &&\n            account_type.category === CATEGORY.REAL &&\n            platform === CFD_PLATFORMS.MT5;\n\n        const button_label = React.useMemo(() => {\n            if (error_type === 'PasswordReset') {\n                return localize('Try later');\n            }\n            return localize('Add account');\n        }, [error_type]);\n\n        const has_cancel_button = (isDesktop ? !should_set_trading_password : true) || error_type === 'PasswordReset';\n\n        const cancel_button_label = getCancelButtonLabel({ should_set_trading_password, error_type, isDesktop });\n\n        const handleCancel = () => {\n            if (!has_cancel_button) {\n                return undefined;\n            }\n            if (should_set_trading_password) {\n                return onCancel();\n            }\n\n            return onForgotPassword();\n        };\n\n        if (error_type === 'PasswordReset') {\n            return (\n                <React.Fragment>\n                    <div className='cfd-password-reset'>\n                        <div className='cfd-password-modal__content cfd-password-modal__content--password-reset'>\n                            <Text as='p' line_height='24' size='xs'>\n                                <Localize i18n_default_text='Please try again in a minute.' />\n                            </Text>\n                        </div>\n                        <Formik onSubmit={closeModal} initialValues={{}}>\n                            {({ handleSubmit }) => (\n                                <form onSubmit={handleSubmit}>\n                                    <FormSubmitButton\n                                        has_cancel={has_cancel_button}\n                                        cancel_label={cancel_button_label}\n                                        onCancel={handleCancel}\n                                        is_absolute={!isDesktop}\n                                        label={button_label}\n                                    />\n                                </form>\n                            )}\n                        </Formik>\n                    </div>\n                </React.Fragment>\n            );\n        }\n\n        if (should_set_trading_password) {\n            return (\n                <CFDCreatePasswordForm\n                    platform={platform}\n                    error_message={error_message}\n                    validatePassword={validatePassword}\n                    submitPassword={submitPassword}\n                    has_mt5_account={has_mt5_account}\n                    need_tnc={need_tnc}\n                />\n            );\n        }\n        // enter password modal\n\n        return (\n            <Formik\n                initialValues={{\n                    password: '',\n                }}\n                enableReinitialize\n                validate={validatePassword}\n                onSubmit={submitPassword}\n            >\n                {({\n                    errors,\n                    isSubmitting,\n                    handleBlur,\n                    handleChange,\n                    handleSubmit,\n                    setFieldTouched,\n                    touched,\n                    values,\n                    validateForm,\n                    isValid,\n                }) => (\n                    <form onSubmit={handleSubmit}>\n                        <div className='cfd-password-modal__content dc-modal__container_cfd-password-modal__body'>\n                            <CFDEnterPasswordModalTitle platform={platform} />\n                            <div className='input-element'>\n                                <PasswordInput\n                                    autoComplete='new-password'\n                                    label={localize('{{platform}} password', {\n                                        platform: getCFDPlatformLabel(platform),\n                                    })}\n                                    error={\n                                        (touched.password && errors.password) ||\n                                        (values.password.length === 0 ? error_message : '')\n                                    }\n                                    name='password'\n                                    value={values.password}\n                                    onBlur={handleBlur}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                        handlePasswordInputChange(e, handleChange, validateForm, setFieldTouched);\n                                    }}\n                                    data_testId={`dt_${platform}_password`}\n                                />\n                            </div>\n                            {error_type === 'PasswordError' && (\n                                <Text size='xs' as='p' className='dc-modal__container_mt5-password-modal__hint'>\n                                    <Localize\n                                        i18n_default_text='Hint: You may have entered your Deriv password, which is different from your {{platform}} password.'\n                                        values={{\n                                            platform: getCFDPlatformLabel(platform),\n                                        }}\n                                    />\n                                </Text>\n                            )}\n                            {account_type.category === CATEGORY.REAL && platform === CFD_PLATFORMS.MT5 && (\n                                <CfdPasswordModalTnc\n                                    className='cfd-password-modal-tnc--bottom'\n                                    platform={platform}\n                                    checked={checked}\n                                    onCheck={() => setChecked(prev => !prev)}\n                                    need_tnc={need_tnc}\n                                />\n                            )}\n                        </div>\n                        <FormSubmitButton\n                            is_disabled={!values.password || !isValid || (need_tnc && !checked)}\n                            has_cancel={has_cancel_button}\n                            cancel_label={cancel_button_label}\n                            onCancel={handleCancel}\n                            is_absolute={!isDesktop}\n                            is_loading={isSubmitting}\n                            label={button_label}\n                            is_center={should_set_trading_password}\n                            form_error={form_error}\n                        />\n                    </form>\n                )}\n            </Formik>\n        );\n    }\n);\n\nconst CFDPasswordModal = observer(({ form_error, platform }: TCFDPasswordModalProps) => {\n    const { isDesktop, isMobileOrTabletLandscape } = useDevice();\n    const isMobileOrTabletPortrait = !isDesktop && !isMobileOrTabletLandscape;\n    const { client, traders_hub, ui } = useStore();\n\n    const {\n        email,\n        account_status,\n        is_logged_in,\n        is_populating_mt5_account_list,\n        is_dxtrade_allowed,\n        mt5_login_list,\n        updateAccountStatus,\n        updateMT5Status,\n    } = client;\n    const { show_eu_related_content, is_eu_user, toggleAccountTransferModal, combined_cfd_mt5_accounts } = traders_hub;\n    const { is_mt5_migration_modal_enabled, setMT5MigrationModalEnabled, is_mt5_migration_modal_open } = ui;\n\n    const {\n        account_type,\n        disableCFDPasswordModal,\n        error_message,\n        error_type,\n        getAccountStatus,\n        has_cfd_error,\n        is_cfd_success_dialog_enabled,\n        is_cfd_password_modal_enabled,\n        setError,\n        setCFDSuccessDialog,\n        submitMt5Password,\n        submitCFDPassword,\n        new_account_response,\n        product,\n        setMigratedMT5Accounts,\n        is_mt5_password_changed_modal_visible,\n        is_mt5_password_invalid_format_modal_visible,\n        setIsMt5PasswordInvalidFormatModalVisible,\n        is_sent_email_modal_enabled,\n        setSentEmailModalStatus,\n        is_nakala_banner_visible,\n        setNakalaBannerVisible,\n    } = useCfdStore();\n\n    const history = useHistory();\n\n    const [is_password_modal_exited, setPasswordModalExited] = React.useState(true);\n    const has_mt5_account = Boolean(mt5_login_list?.length);\n    const should_set_trading_password =\n        Array.isArray(account_status?.status) &&\n        account_status.status.includes(\n            platform === CFD_PLATFORMS.MT5 ? 'mt5_password_not_set' : 'dxtrade_password_not_set'\n        );\n    const is_password_error = error_type === 'PasswordError';\n    const is_password_reset = error_type === 'PasswordReset';\n    const is_incorrect_mt5_password_format_error =\n        error_type === 'InvalidTradingPlatformPasswordFormat' || error_type === 'IncorrectMT5PasswordFormat';\n\n    const [new_password_value, setNewPasswordValue] = React.useState('');\n    const [is_nakala_info_visible, setIsNakalaInfoVisible] = React.useState(is_nakala_banner_visible);\n\n    const mt5_trade_account = combined_cfd_mt5_accounts.find(account => account.product === 'standard');\n    const { nakalaServerInfo, loginId } = useIsEnabledNakala([mt5_trade_account]);\n\n    // Usecase: Added this timeout to render the Password Change modal after the password modal is closed.\n    // It is to avoid the flickering of the modal.\n    React.useEffect(() => {\n        let timeout: NodeJS.Timeout;\n        if (is_incorrect_mt5_password_format_error) {\n            timeout = setTimeout(() => {\n                setIsMt5PasswordInvalidFormatModalVisible(true);\n            }, 500);\n        }\n\n        return () => clearTimeout(timeout);\n    }, [is_incorrect_mt5_password_format_error, setIsMt5PasswordInvalidFormatModalVisible]);\n\n    React.useEffect(() => {\n        if (is_logged_in) {\n            updateMT5Status();\n            updateAccountStatus();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const validatePassword = (values: TCFDPasswordFormValues) => {\n        const errors: FormikErrors<TCFDPasswordFormValues> = {};\n        const max_length = platform === CFD_PLATFORMS.MT5 && should_set_trading_password ? 16 : 25;\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: max_length,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: max_length,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        } else if (\n            platform === CFD_PLATFORMS.MT5 &&\n            should_set_trading_password &&\n            !validMT5Password(values.password)\n        ) {\n            errors.password = localize(\n                'Please include at least 1 special character such as ( _ @ ? ! / # ) in your password.'\n            );\n        }\n        if (values.password?.toLowerCase() === email.toLowerCase()) {\n            errors.password = localize('Your password cannot be the same as your email address.');\n        }\n        return errors;\n    };\n\n    const closeDialogs = () => {\n        setCFDSuccessDialog(false);\n        if (is_mt5_migration_modal_enabled) setMT5MigrationModalEnabled(false);\n        setMigratedMT5Accounts([]);\n        setError(false);\n    };\n\n    const closeModal = () => {\n        updateMT5Status();\n        closeDialogs();\n        disableCFDPasswordModal();\n    };\n\n    const onCloseNakalaSuccessModal = () => {\n        setNakalaBannerVisible(false);\n        updateMT5Status();\n        closeDialogs();\n        disableCFDPasswordModal();\n    };\n\n    const closeOpenSuccess = () => {\n        disableCFDPasswordModal();\n        closeDialogs();\n        if (account_type.category === CATEGORY.REAL) {\n            toggleAccountTransferModal();\n        }\n    };\n\n    const handleForgotPassword = () => {\n        closeModal();\n        let redirect_to = platform === CFD_PLATFORMS.MT5 ? 1 : 2;\n\n        // if account type is real convert redirect_to from 1 or 2 to 10 or 20\n        // and if account type is demo convert redirect_to from 1 or 2 to 11 or 21\n        if (account_type.category === CATEGORY.REAL) {\n            redirect_to = Number(`${redirect_to}0`);\n        } else if (account_type.category === CATEGORY.DEMO) {\n            redirect_to = Number(`${redirect_to}1`);\n        }\n\n        const password_reset_code =\n            platform === CFD_PLATFORMS.MT5\n                ? 'trading_platform_mt5_password_reset'\n                : 'trading_platform_dxtrade_password_reset';\n        WS.verifyEmail(email, password_reset_code, {\n            url_parameters: {\n                redirect_to,\n            },\n        });\n        setSentEmailModalStatus(true);\n    };\n\n    const submitPassword: TOnSubmitPassword = (values, actions) => {\n        if (platform === CFD_PLATFORMS.MT5) {\n            submitMt5Password(\n                {\n                    ...values,\n                },\n                actions\n            );\n        } else {\n            (values as TCFDPasswordFormValues & { platform: string }).platform = platform;\n            submitCFDPassword(values, actions);\n        }\n    };\n\n    const should_show_password =\n        is_cfd_password_modal_enabled &&\n        !is_cfd_success_dialog_enabled &&\n        (!has_cfd_error || is_password_error || is_password_reset);\n\n    const should_show_success_modals = !has_cfd_error && is_cfd_success_dialog_enabled && is_password_modal_exited;\n\n    const should_show_success = should_show_success_modals && !is_mt5_migration_modal_enabled;\n\n    const should_show_migration_success =\n        should_show_success_modals &&\n        is_mt5_migration_modal_enabled &&\n        !is_populating_mt5_account_list &&\n        !is_mt5_migration_modal_open;\n\n    const should_show_sent_email_modal = is_sent_email_modal_enabled && is_password_modal_exited;\n\n    const should_show_password_modal = React.useMemo(() => {\n        if (should_show_password) {\n            return should_set_trading_password ? true : isDesktop;\n        }\n        return false;\n    }, [should_set_trading_password, should_show_password]);\n\n    const should_show_password_dialog = React.useMemo(() => {\n        if (should_show_password) {\n            if (!should_set_trading_password) return !isDesktop;\n        }\n        return false;\n    }, [isDesktop, should_set_trading_password, should_show_password]);\n\n    const success_modal_submit_label = React.useMemo(() => {\n        if (account_type.category === CATEGORY.REAL) {\n            return localize('Transfer now');\n        }\n        return localize('Continue');\n    }, [account_type]);\n\n    const success_modal_cancel_label = React.useMemo(() => {\n        if (is_eu_user && account_type.category === 'real' && platform === CFD_PLATFORMS.MT5) {\n            return localize('Maybe later');\n        }\n        return '';\n    }, [platform, account_type, is_eu_user]);\n\n    const getSuccssMessage = () => {\n        const { category, type } = account_type;\n        if (!category && !type) return '';\n\n        const category_label = category === CATEGORY.REAL ? localize('real') : localize('demo');\n        let type_label = '';\n        switch (platform) {\n            case CFD_PLATFORMS.MT5:\n                type_label = getMtCompanies(show_eu_related_content, product)[category as keyof TMtCompanies][\n                    type as keyof TMtCompanies['demo' | 'real']\n                ].short_title;\n                break;\n            case CFD_PLATFORMS.DXTRADE:\n                type_label =\n                    getDxCompanies()[category as keyof TDxCompanies][type as keyof TDxCompanies['demo' | 'real']]\n                        .short_title;\n                break;\n            default:\n                type_label = '';\n                break;\n        }\n\n        const accountTypes = () => {\n            if (platform === CFD_PLATFORMS.DXTRADE || platform === CFD_PLATFORMS.CTRADER) {\n                return '';\n            }\n            return type_label;\n        };\n\n        if (category === CATEGORY.REAL) {\n            return (\n                <React.Fragment>\n                    {platform === CFD_PLATFORMS.DXTRADE || platform === CFD_PLATFORMS.CTRADER ? (\n                        <Localize\n                            i18n_default_text='Congratulations, you have successfully created your <0/>{{category}} {{platform}} {{type}} account. To start trading, <1 />transfer funds <2 />from your Deriv account into this account.'\n                            values={{\n                                type: accountTypes(),\n                                platform: getCFDPlatformLabel(platform),\n                                category: category_label,\n                            }}\n                            components={[\n                                <br key={0} />,\n                                platform === CFD_PLATFORMS.CTRADER && <br key={1} />,\n                                platform === CFD_PLATFORMS.DXTRADE && <br key={2} />,\n                            ]}\n                        />\n                    ) : (\n                        <React.Fragment>\n                            <Localize\n                                i18n_default_text='Your Deriv MT5 {{type}} account is ready. '\n                                values={{\n                                    type: accountTypes(),\n                                }}\n                            />\n                            <Localize i18n_default_text='Enable trading with your first transfer.' />\n                        </React.Fragment>\n                    )}\n                </React.Fragment>\n            );\n        }\n\n        if (platform === CFD_PLATFORMS.MT5) {\n            return (\n                <Localize\n                    i18n_default_text='Your demo {{deriv}} {{type}} account is ready.'\n                    values={{\n                        type: accountTypes(),\n                        deriv: 'Deriv MT5',\n                    }}\n                />\n            );\n        }\n\n        return (\n            <Localize\n                i18n_default_text='Congratulations, you have successfully created your <0/>{{category}} {{platform}} {{type}} account. '\n                values={{\n                    type: accountTypes(),\n                    platform: is_eu_user ? '' : getCFDPlatformLabel(platform),\n                    category: category_label,\n                }}\n                components={[<br key={0} />]}\n            />\n        );\n    };\n\n    const handleCFdPasswordModal = () => {\n        if (is_nakala_banner_visible && is_nakala_info_visible) {\n            return <CFDDerivNakalaInfo onclickAction={() => setIsNakalaInfoVisible(false)} />;\n        }\n        return cfd_password_form;\n    };\n\n    const cfd_password_form = (\n        <CFDPasswordForm\n            closeModal={closeModal}\n            error_type={error_type}\n            error_message={error_type !== 'InvalidTradingPlatformPasswordFormat' ? error_message : ''}\n            has_mt5_account={has_mt5_account}\n            form_error={form_error}\n            should_set_trading_password={should_set_trading_password}\n            validatePassword={validatePassword}\n            onForgotPassword={handleForgotPassword}\n            submitPassword={submitPassword}\n            platform={platform}\n            is_dxtrade_allowed={is_dxtrade_allowed}\n            onCancel={closeModal}\n            account_type={account_type}\n        />\n    );\n\n    const password_modal = (\n        <Modal\n            className={classNames('cfd-password-modal', {\n                'cfd-password-modal__mt5': platform === CFD_PLATFORMS.MT5 && should_set_trading_password,\n            })}\n            has_close_icon\n            is_open={should_show_password_modal}\n            toggleModal={closeModal}\n            should_header_stick_body\n            renderTitle={() => (\n                <PasswordModalHeader\n                    should_set_trading_password={should_set_trading_password}\n                    is_password_reset_error={is_password_reset}\n                    platform={platform}\n                    is_nakala_info={is_nakala_info_visible}\n                />\n            )}\n            onUnmount={() => getAccountStatus(platform)}\n            onExited={() => setPasswordModalExited(true)}\n            onEntered={() => setPasswordModalExited(false)}\n            width='auto'\n        >\n            {handleCFdPasswordModal()}\n        </Modal>\n    );\n\n    const password_modal_mobile = (\n        <MobileDialog\n            has_full_height\n            portal_element_id='modal_root'\n            visible={should_show_password_modal}\n            onClose={closeModal}\n            wrapper_classname='cfd-password-modal cfd-password-modal__mt5'\n            renderTitle={() => (\n                <PasswordModalHeader\n                    should_set_trading_password={should_set_trading_password}\n                    is_password_reset_error={is_password_reset}\n                    platform={platform}\n                    is_nakala_info={is_nakala_info_visible}\n                />\n            )}\n        >\n            {handleCFdPasswordModal()}\n        </MobileDialog>\n    );\n\n    const password_dialog = (\n        <MobileDialog\n            has_full_height\n            portal_element_id='modal_root'\n            visible={should_show_password_dialog}\n            onClose={closeModal}\n            wrapper_classname='cfd-password-modal'\n            renderTitle={() => (\n                <PasswordModalHeader\n                    should_set_trading_password={should_set_trading_password}\n                    has_mt5_account={has_mt5_account}\n                    is_password_reset_error={is_password_reset}\n                    platform={platform}\n                    is_nakala_info={is_nakala_info_visible}\n                />\n            )}\n        >\n            {handleCFdPasswordModal()}\n        </MobileDialog>\n    );\n\n    const is_mt5_password_format_invalid_desktop = (\n        <Modal\n            className='cfd-password-modal'\n            has_close_icon\n            is_open={is_mt5_password_invalid_format_modal_visible}\n            toggleModal={closeModal}\n            should_header_stick_body\n            title={localize('Deriv MT5 latest password requirements')}\n            width='auto'\n        >\n            <CFDPasswordChange\n                error_type={error_type}\n                error_message={error_message}\n                form_error={form_error}\n                should_set_trading_password={should_set_trading_password}\n                setNewPasswordValue={setNewPasswordValue}\n                validatePassword={validatePassword}\n                onForgotPassword={handleForgotPassword}\n                platform={CFD_PLATFORMS.MT5}\n                onCancel={closeModal}\n            />\n        </Modal>\n    );\n\n    const is_mt5_password_format_invalid = (\n        <MobileDialog\n            has_full_height\n            portal_element_id='modal_root'\n            visible={is_mt5_password_invalid_format_modal_visible}\n            onClose={closeModal}\n            wrapper_classname='cfd-password-modal cfd-password-change__wrapper'\n            header_classname='cfd-password-change__header'\n            renderTitle={() => localize('Deriv MT5 latest password requirements')}\n        >\n            <CFDPasswordChange\n                error_type={error_type}\n                error_message={error_message}\n                form_error={form_error}\n                should_set_trading_password={should_set_trading_password}\n                setNewPasswordValue={setNewPasswordValue}\n                validatePassword={validatePassword}\n                onForgotPassword={handleForgotPassword}\n                platform={CFD_PLATFORMS.MT5}\n                onCancel={closeModal}\n            />\n        </MobileDialog>\n    );\n\n    const success_mt5_nakala_modal = () => {\n        if (isDesktop) {\n            return (\n                <Modal\n                    className={classNames('cfd-password-modal')}\n                    has_close_icon\n                    hasfull_height={isDesktop ? undefined : true}\n                    is_open={should_show_success && is_nakala_banner_visible}\n                    toggleModal={onCloseNakalaSuccessModal}\n                    should_header_stick_body={false}\n                    renderTitle={() => localize('Deriv Nakala')}\n                    width={isDesktop ? '485px' : '100%'}\n                >\n                    <CFDDerivNakalaLinkAccount isSuccess nakalaInfo={{ loginId, serverName: nakalaServerInfo }} />\n                </Modal>\n            );\n        }\n        return (\n            <PageOverlay\n                is_open={should_show_success && is_nakala_banner_visible}\n                portal_id='deriv_app'\n                onClickClose={onCloseNakalaSuccessModal}\n                header_classname='cfd-trade-modal__mobile-title'\n                header=' '\n            >\n                <Div100vhContainer className='cfd-trade-modal__mobile-view-wrapper' height_offset='80px'>\n                    <CFDDerivNakalaLinkAccount isSuccess nakalaInfo={{ loginId, serverName: nakalaServerInfo }} />\n                </Div100vhContainer>\n            </PageOverlay>\n        );\n    };\n\n    const invalid_mt5_password_modal = isMobileOrTabletPortrait\n        ? is_mt5_password_format_invalid\n        : is_mt5_password_format_invalid_desktop;\n\n    return (\n        <React.Fragment>\n            {platform === CFD_PLATFORMS.MT5 && !isDesktop && password_modal_mobile}\n            {password_modal}\n            {password_dialog}\n            {is_nakala_banner_visible && success_mt5_nakala_modal()}\n            <SuccessDialog\n                is_open={should_show_success && !is_nakala_banner_visible}\n                toggleModal={closeModal}\n                onCancel={closeModal}\n                onSubmit={closeOpenSuccess}\n                classNameMessage='cfd-password-modal__message'\n                message={getSuccssMessage()}\n                icon={\n                    <CFDPasswordSuccessIcon\n                        platform={platform}\n                        type={account_type.type}\n                        show_eu_related_content={show_eu_related_content}\n                        product={product}\n                    />\n                }\n                icon_size='xlarge'\n                text_submit={success_modal_submit_label}\n                text_cancel={success_modal_cancel_label}\n                has_cancel={account_type.category === CATEGORY.REAL}\n                has_close_icon={false}\n                width='auto'\n                is_medium_button={!isDesktop}\n            />\n            <MigrationSuccessModal is_open={should_show_migration_success} closeModal={closeModal} />\n            <SentEmailModal\n                is_open={should_show_sent_email_modal}\n                identifier_title='trading_password'\n                onClose={() => setSentEmailModalStatus(false)}\n                onClickSendEmail={handleForgotPassword}\n            />\n            {is_incorrect_mt5_password_format_error && invalid_mt5_password_modal}\n            {is_mt5_password_changed_modal_visible && (\n                <CFDPasswordChangeContent closeModal={closeModal} password_value={new_password_value} />\n            )}\n        </React.Fragment>\n    );\n});\n\nexport default CFDPasswordModal;\n"],"names":["t","self","e","i","o","r","a","Object","getOwnPropertySymbols","prototype","hasOwnProperty","propertyIsEnumerable","exports","assign","String","getOwnPropertyNames","fromCharCode","map","join","split","forEach","keys","n","s","TypeError","l","arguments","length","c","call","d","Symbol","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","key","ref","__self","__source","defaultProps","$$typeof","type","props","_owner","current","jsx","jsxs","react","Y","globalThis","_typeof","window","global","Function","useLayoutEffect","useEffect","_ref","undefined","_ref$defaultValue","defaultValue","_ref$initializeWithVa","initializeWithValue","matchMedia","matches","_ref3","_slicedToArray","useState","addListener","addEventListener","removeListener","removeEventListener","isDesktop","isMobile","isTablet","isTabletPortrait","isMobileOrTabletLandscape","defineProperty","enumerable","get","h","m","u","p","f","_ref4","identifier_title","_ref4$is_modal_when_m","is_modal_when_mobile","is_open","_ref4$has_live_chat","has_live_chat","onClickSendEmail","onClose","useTranslations","localize","Localize","i18n_default_text","components","className","onClick","Chat","open","children","Popover","classNameBubble","alignment","message","zIndex","SendEmailTemplate","subtitle","CFD_PLATFORMS","DXTRADE","values","platform_name_dxtrade","getPlatformSettings","name","MT5","title","lbl_no_receive","txt_resend","txt_resend_in","live_chat","icon","content","Icon","size","Text","as","Modal","has_close_icon","should_header_stick_body","toggleModal","width","Div100vhContainer","is_disabled","height_offset","Body","MobileDialog","portal_element_id","wrapper_classname","visible","has_content_scroll","module","require","define","CFDAccountCopy","text","React","Clipboard","text_copy","info_message","success_message","popoverAlignment","value","is_bold","is_broker","weight","classNames","_ref$classNameMessage","classNameMessage","_ref$has_cancel","has_cancel","_ref$has_submit","has_submit","onCancel","onSubmit","heading","_ref$icon_size","icon_size","text_submit","text_cancel","_ref$width","is_medium_button","small","custom_color","Footer","Button","_extends","has_effect","secondary","medium","large","primary","ModalInfo","CFDDerivNakalaLinkAccount","observer","_nakalaInfo$serverNam","_nakalaInfo$loginId","_props$isSuccess","isSuccess","nakalaInfo","manageNakalaCookie","nakalaLinkedCookie","Cookies","set","domain","expires","isDesktopDevice","align","color","height","SpecBox","serverName","loginId","href","target","rel","concat","onclickAction","eligible_account_to_migrate","jurisdiction_market_name","closePopupModal","is_mobile","useStore","ui","platform","getCFDPlatformNames","text_size","information_text_size","getFormattedAccounts","type_1","type_2","_objectSpread","InlineMessage","existing_account","getFormattedJurisdictionCode","Jurisdiction","SVG","has_separator","_migrated_mt5_account","closeModal","setMT5MigrationModalEnabled","_useCfdStore","useCfdStore","migrated_mt5_accounts","setIsFromMt5MigrationModal","has_migrated_mt5_accounts","account","_Object$values","_account$to_account","to_account","_Object$keys","_account$to_account2","getFormattedJurisdictionMarketTypes","closeMigrationModals","getMigrationIcon","_Object$values2","_migrated_mt5_account2","to_acc","BVI","VANUATU","ModalContent","MigrationSuccessModalContent","PageOverlay","header_classname","portal_id","header","onClickClose","cfd","modules","account_title","account_type","getAccountCardTitle","CTRADER","category","CATEGORY","REAL","getCFDPlatformLabel","should_set_trading_password","is_nakala_info","_useDevice","padding","line_height","is_mt5","is_password_reset_error","platform_name","getCancelButtonLabel","setFieldTouched","CreatePassword","validatePassword","error_message","createElement","initialValues","password","enableReinitialize","validate","isSubmitting","handleBlur","handleChange","handleSubmit","touched","validateForm","has_error","custom_feedback_messages","getErrorMessages","password_warnings","PasswordInput","error","onBlur","onChange","handlePasswordInputChange","data_testId","is_center","_ref5","submitPassword","need_tnc","useRef","_React$useState2","_multi_step_ref$curre","setPassword","multi_step_ref","steps","component","onConfirm","actions","CFDPasswordForm","error_type","form_error","_ref6","has_mt5_account","onForgotPassword","useDevice","_useDevice2","jurisdiction_selected_shortcode","checked","_React$useState4","button_label","useMemo","cancel_button_label","handleCancel","has_cancel_button","cancel_label","is_absolute","label","_ref8","isValid","onCheck","setChecked","is_loading","_useDevice3","isMobileOrTabletPortrait","client","traders_hub","email","account_status","is_logged_in","is_populating_mt5_account_list","is_dxtrade_allowed","mt5_login_list","updateAccountStatus","updateMT5Status","show_eu_related_content","is_eu_user","toggleAccountTransferModal","combined_cfd_mt5_accounts","is_mt5_migration_modal_enabled","is_mt5_migration_modal_open","_useCfdStore2","disableCFDPasswordModal","getAccountStatus","has_cfd_error","is_cfd_success_dialog_enabled","is_cfd_password_modal_enabled","setError","setCFDSuccessDialog","submitMt5Password","submitCFDPassword","new_account_response","product","setMigratedMT5Accounts","is_mt5_password_invalid_format_modal_visible","is_mt5_password_changed_modal_visible","setIsMt5PasswordInvalidFormatModalVisible","is_sent_email_modal_enabled","setSentEmailModalStatus","is_nakala_banner_visible","setNakalaBannerVisible","_React$useState6","_React$useState5","is_password_modal_exited","setPasswordModalExited","isArray","is_password_reset","is_incorrect_mt5_password_format_error","_React$useState7","_React$useState8","new_password_value","_React$useState10","_React$useState9","is_nakala_info_visible","setIsNakalaInfoVisible","_useIsEnabledNakala","mt5_trade_account","nakalaServerInfo","setTimeout","min","max","max_length","errors","min_number","_values$password","validPassword","closeDialogs","redirect_to","Number","password_reset_code","should_show_migration_success","should_show_success_modals","should_show_sent_email_modal","should_show_password_modal","should_show_password","password_modal","renderTitle","onUnmount","onExited","onEntered","handleCFdPasswordModal","has_full_height","should_show_password_dialog","setNewPasswordValue","handleForgotPassword","is_mt5_password_format_invalid","success_mt5_nakala_modal","should_show_success","onCloseNakalaSuccessModal","getSuccssMessage","category_label","type_label","getMtCompanies","getDxCompanies","short_title","accountTypes","SentEmailModal","password_value","CFDPasswordModal"],"sourceRoot":""}