{"version":3,"file":"appstore/js/appstore.modal_verification-docs-list-modal.d7e9b020cf5fe62de4ad.js","mappings":";sPA+BA,QAtBqB,WACjB,IAAQA,GAAWC,EAAAA,EAAAA,KAAXD,OACRE,GAA0CC,EAAAA,EAAAA,KAAlCC,EAAiBF,EAAjBE,kBAAmBC,EAAUH,EAAVG,WAC3BC,GACIC,EAAAA,EAAAA,KADIC,EAA+BF,EAA/BE,gCAAiCC,EAAuBH,EAAvBG,wBAAyBC,EAAgBJ,EAAhBI,iBAAkBC,EAA2BL,EAA3BK,4BAIpF,OAFqBX,EAAbY,WAESC,EAAAA,cAAcC,IACpB,CACHC,aAAcN,EACdO,kBAAmBR,EACbE,aAAgB,EAAhBA,EAAkBM,kBAClBL,aAA2B,EAA3BA,EAA6BK,kBACnCC,WAAYN,aAA2B,EAA3BA,EAA6BO,WAG1C,CACHH,aAAcX,EACdY,kBAAmBX,EAE3B,gkCC6HA,SAhGiBc,EAAAA,EAAAA,WAAS,SAAAC,GAA4D,IAAzDC,EAAED,EAAFC,GAAIC,EAAIF,EAAJE,KAAMC,EAAMH,EAANG,OAAQL,EAASE,EAATF,UAAWM,EAAKJ,EAALI,MACtDC,EA9BmB,SAACF,GACpB,OAAQA,GACJ,KAAKG,EAAAA,kBAAkBC,SACnB,MAAO,CACHL,KAAMM,IAAAA,cAACC,EAAAA,SAAQ,CAACC,kBAAkB,aAClCC,KAAM,eACNC,UAAW,MAEnB,KAAKN,EAAAA,kBAAkBO,QACnB,MAAO,CACHX,KAAMM,IAAAA,cAACC,EAAAA,SAAQ,CAACC,kBAAkB,cAClCC,KAAM,eACNC,UAAW,MAEnB,KAAKN,EAAAA,kBAAkBQ,SACvB,KAAKR,EAAAA,kBAAkBS,UACnB,MAAO,CACHb,KAAMM,IAAAA,cAACC,EAAAA,SAAQ,CAACC,kBAAkB,WAClCC,KAAM,cACNC,UAAW,MAEnB,QACI,MAAO,CACHV,KAAM,GACNS,KAAM,IAGtB,CAG0EK,CAAeb,GAAvEc,EAAUZ,EAAhBH,KAAwBgB,EAAUb,EAAhBM,KAA6BQ,EAAUd,EAArBO,UAC5CQ,GAA4CvC,EAAAA,EAAAA,KAApCwC,EAAMD,EAANC,OAAQzC,EAAMwC,EAANxC,OAAQ0C,EAAWF,EAAXE,YAAaC,EAAEH,EAAFG,GAC7BC,GAAaC,EAAAA,EAAAA,KAAbD,SACAE,EAAaL,EAAbK,SACAC,EAA0B/C,EAA1B+C,sBACAC,EAA6BN,EAA7BM,yBACFC,GAAUC,EAAAA,EAAAA,cACVC,EAAuB5B,IAAWG,EAAAA,kBAAkBC,SAGxDyB,EAAAC,GAFyEC,EAAAA,EAAAA,GAA6B,CACpGC,YAAa,mCACf,GAFKC,EAA6BJ,EAAA,GAAEK,EAAiCL,EAAA,GAGjEM,EAAoBC,EAAAA,GAAkBC,SAAiB,iBACvDC,EAAWC,EAAAA,GAASC,kBAAkB,QACtCC,EAAgBN,GAAqBG,GAAY,KAEjDI,EAAkB,SAACC,GAAqB,IAAAC,EACpCC,EAAM,IAAIC,IAAIH,GAEdI,EAA0C,QAA5BH,EADF,IAAII,gBAAgBC,SAASC,QACdC,IAAI,mBAAW,IAAAP,EAAAA,EAAIQ,OAAOC,eAAeC,QAAQ,mBAI5EC,EAAS,CACXlE,SAJa0D,QAAAA,EAAmBvB,EAAwB,gBAAkB,YAK1EgC,aAJiB7D,EAKjB8D,MAAOC,EAAAA,GAAeC,WACtBC,KAAMnB,EACNoB,QAAQC,EAAAA,EAAAA,gBACRC,MAAOxC,KAOX,OAJAyC,OAAOC,QAAQV,GAAQW,SAAQ,SAAAC,GAAkB,IAAAC,EAAAtC,EAAAqC,EAAA,GAAhBE,EAAGD,EAAA,GAAEE,EAAKF,EAAA,GACvCvB,EAAI0B,aAAaC,OAAOH,EAAKC,EACjC,IAEOzB,EAAI4B,UACf,EA4BA,OACIpE,IAAAA,cAAA,OACIqE,UAAWC,IAAW,kDAAmD,CACrE,4DAA6D/C,IAEjEgD,QA/BY,WAChB,IAAIhD,EAIJ,GADAH,GAAyB,GACd,aAAP3B,GAAqBE,GACjBkC,GAAqCD,EAD7C,CAEQ,IAAM4C,EACS,SAAX7E,GAAgC,aAAXA,EAAwB8E,EAAAA,oBAAsBC,EAAAA,2BACvE3B,OAAOH,SAAS+B,QAAQtC,EAAgBmC,GAGhD,KACW,YAAP/E,GAAoBE,IACpBiF,aAAaC,QAAQ,iBAAkBC,OAAOnF,IAC1CkC,GAAqCD,GACrCmB,OAAOH,SAAS+B,QAAQtC,EAAgB0C,EAAAA,uBAIrC,QAAPtF,GACAsB,EAAGiE,mBAAmB,0BAE1B3D,EAAQ4D,KAAKrF,GACjB,GASQI,IAAAA,cAACkF,EAAAA,KAAI,CAACC,KAAMnE,EAAW,MAAQ,KAAMoE,YAAY,KAAKC,OAAO,QACzDrF,IAAAA,cAACC,EAAAA,SAAQ,CAACC,kBAAmBR,KAEhCC,IAAWG,EAAAA,kBAAkBwF,MAAgB,QAAP7F,GAA2B,IAAXE,EACnDK,IAAAA,cAACuF,EAAAA,EAAoC,CAACC,KAAK,0BAE3CxF,IAAAA,cAAA,OAAKqE,UAAU,sCACXrE,IAAAA,cAACyF,EAAAA,YAAW,CACRC,eAAgB/F,EAChBQ,KAAMO,EACNhB,KAAMe,EACNL,UAAWO,EACX0D,UAAU,+CAEdrE,IAAAA,cAACuF,EAAAA,EAAoC,CACjClB,UAAU,2CACVmB,KAAMjE,EAAuB,yBAA2B,2BAMhF,ICtIA,IAAMoE,GAAmCpG,EAAAA,EAAAA,WAAS,WAC9C,IACcP,GACVX,EAAAA,EAAAA,KADAD,OAAUY,SAENgC,GAAaC,EAAAA,EAAAA,KAAbD,SACR4E,EAA0CC,IAAlCzG,EAAiBwG,EAAjBxG,kBAAmBC,EAAUuG,EAAVvG,WACnBT,GAAoCD,EAAAA,EAAAA,KAApCC,gCACR,IAAKQ,EAAmB,OAAO,KAC/B,IAAQ0G,EAAoD1G,EAApD0G,WAAYC,EAAwC3G,EAAxC2G,WAAYC,EAA4B5G,EAA5B4G,UAC1BC,EAAmC,IADmB7G,EAAjB8G,cACiB,IAAdF,EAExCG,EAAkB,CACpBL,GAAc,CACVrG,GAAI,WACJC,KAAM,oBACNC,OAAQmG,EACRxG,UAAWD,EACXO,MAAOwG,EAAAA,OAAOC,mBAElBN,GAAc,CACVtG,GAAI,UACJC,KAAM,mBACNC,OAAQoG,EACRzG,UAAWD,EACXO,MAAOwG,EAAAA,OAAOE,kBAElBL,GAAmB,CACfxG,GAAI,MACJC,KAAM,yBACNC,OAAQqG,EACRpG,MAAOwG,EAAAA,OAAOG,uBAEpBC,OAAOC,SAET,OACIzG,IAAAA,cAAA,OAAKqE,UAAU,yCACXrE,IAAAA,cAAC0G,EAAAA,KAAI,CAACvG,KAAK,+BAA+BgF,KAAM,MAChDnF,IAAAA,cAACkF,EAAAA,KAAI,CAACC,KAAMnE,EAAW,MAAQ,KAAMoE,YAAY,KAAKuB,MAAM,UACvD3H,IAAaC,EAAAA,cAAcC,KAAQN,EAGhCoB,IAAAA,cAACC,EAAAA,SAAQ,CAACC,kBAAkB,qCAF5BF,IAAAA,cAACC,EAAAA,SAAQ,CAACC,kBAAkB,0FAKpCF,IAAAA,cAAA,OAAKqE,UAAU,8CACV8B,EAAMS,KAAI,SAAAC,GAAI,OACX7G,IAAAA,cAAC8G,EAAQ,CACL9C,IAAK6C,EAAKpH,GACVA,GAAIoH,EAAKpH,GACTC,KAAMmH,EAAKnH,KACXC,OAAQkH,EAAKlH,OACbL,UAAWuH,EAAKvH,UAChBM,MAAOiH,EAAKjH,OACd,KAKtB,IAyCA,MCnHA,GD4EkCL,EAAAA,EAAAA,WAAS,WACvC,IAAAwH,GAAgC1I,EAAAA,EAAAA,KAAxByC,EAAWiG,EAAXjG,YAAa1C,EAAM2I,EAAN3I,OACb4I,EAAsElG,EAAtEkG,wCAAyC5F,EAA6BN,EAA7BM,yBACzCpC,EAAaZ,EAAbY,SACAJ,GAAoCD,EAAAA,EAAAA,KAApCC,gCACAoC,GAAaC,EAAAA,EAAAA,KAAbD,SACFiG,EAAW,WAAH,OACVjI,IAAaC,EAAAA,cAAcC,KAAQN,EAG/BoB,IAAAA,cAACC,EAAAA,SAAQ,CAACC,kBAAkB,0BAF5BF,IAAAA,cAACC,EAAAA,SAAQ,CAACC,kBAAkB,yBAG/B,EACL,OACIF,IAAAA,cAACkH,EAAAA,SAAQ,CAACC,SAAUnH,IAAAA,cAACoH,EAAAA,SAAQ,OACvBpG,EAYEhB,IAAAA,cAACqH,EAAAA,aAAY,CACTC,kBAAkB,YAClBC,MAAON,IACPO,QAASR,EACTS,QAAS,WAAF,OAAQrG,GAAyB,EAAM,GAE9CpB,IAAAA,cAAC2F,EAAgC,OAjBrC3F,IAAAA,cAAC0H,EAAAA,MAAK,CACFC,QAASX,EACTY,YAAa,WAAF,OAAQxG,GAAyB,EAAM,EAClDmG,MAAON,IACPY,MAAM,QACNC,0BAA0B,EAC1BC,gBAAc,GAEd/H,IAAAA,cAAC2F,EAAgC,OAcrD,mUElHAqC,EAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAxE,OAAAyE,UAAAC,EAAAF,EAAAG,eAAAC,EAAA5E,OAAA6E,gBAAA,SAAAN,EAAAD,EAAAE,GAAAD,EAAAD,GAAAE,EAAAlE,KAAA,EAAAwE,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAf,EAAAD,EAAAE,GAAA,OAAAxE,OAAA6E,eAAAN,EAAAD,EAAA,CAAAhE,MAAAkE,EAAAe,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAlB,EAAAD,EAAA,KAAAgB,EAAA,aAAAf,GAAAe,EAAA,SAAAf,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAkB,EAAAnB,EAAAD,EAAAE,EAAAE,GAAA,IAAAI,EAAAR,GAAAA,EAAAG,qBAAAkB,EAAArB,EAAAqB,EAAAX,EAAAhF,OAAA4F,OAAAd,EAAAL,WAAAS,EAAA,IAAAW,EAAAnB,GAAA,WAAAE,EAAAI,EAAA,WAAA1E,MAAAwF,EAAAvB,EAAAC,EAAAU,KAAAF,CAAA,UAAAe,EAAAxB,EAAAD,EAAAE,GAAA,WAAAwB,KAAA,SAAAC,IAAA1B,EAAA2B,KAAA5B,EAAAE,GAAA,OAAAD,GAAA,OAAAyB,KAAA,QAAAC,IAAA1B,EAAA,EAAAD,EAAAoB,KAAAA,EAAA,IAAAS,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAZ,IAAA,UAAAa,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAApB,EAAAoB,EAAA1B,GAAA,8BAAA2B,EAAA3G,OAAA4G,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAArC,GAAAE,EAAAwB,KAAAW,EAAA7B,KAAA0B,EAAAG,GAAA,IAAAE,EAAAN,EAAAhC,UAAAkB,EAAAlB,UAAAzE,OAAA4F,OAAAc,GAAA,SAAAM,EAAAzC,GAAA,0BAAArE,SAAA,SAAAoE,GAAAgB,EAAAf,EAAAD,GAAA,SAAAC,GAAA,YAAA0C,QAAA3C,EAAAC,EAAA,gBAAA2C,EAAA3C,EAAAD,GAAA,SAAA6C,EAAA3C,EAAAI,EAAAE,EAAAE,GAAA,IAAAE,EAAAa,EAAAxB,EAAAC,GAAAD,EAAAK,GAAA,aAAAM,EAAAc,KAAA,KAAAZ,EAAAF,EAAAe,IAAAE,EAAAf,EAAA9E,MAAA,OAAA6F,GAAA,UAAAiB,EAAAjB,IAAAzB,EAAAwB,KAAAC,EAAA,WAAA7B,EAAA+C,QAAAlB,EAAAmB,SAAAC,MAAA,SAAAhD,GAAA4C,EAAA,OAAA5C,EAAAO,EAAAE,EAAA,aAAAT,GAAA4C,EAAA,QAAA5C,EAAAO,EAAAE,EAAA,IAAAV,EAAA+C,QAAAlB,GAAAoB,MAAA,SAAAhD,GAAAa,EAAA9E,MAAAiE,EAAAO,EAAAM,EAAA,aAAAb,GAAA,OAAA4C,EAAA,QAAA5C,EAAAO,EAAAE,EAAA,IAAAA,EAAAE,EAAAe,IAAA,KAAAzB,EAAAI,EAAA,gBAAAtE,MAAA,SAAAiE,EAAAG,GAAA,SAAA8C,IAAA,WAAAlD,GAAA,SAAAA,EAAAE,GAAA2C,EAAA5C,EAAAG,EAAAJ,EAAAE,EAAA,WAAAA,EAAAA,EAAAA,EAAA+C,KAAAC,EAAAA,GAAAA,GAAA,aAAA1B,EAAAxB,EAAAE,EAAAE,GAAA,IAAAE,EAAAuB,EAAA,gBAAArB,EAAAE,GAAA,GAAAJ,IAAAyB,EAAA,MAAAoB,MAAA,mCAAA7C,IAAA0B,EAAA,cAAAxB,EAAA,MAAAE,EAAA,OAAA1E,MAAAiE,EAAAmD,MAAA,OAAAhD,EAAAiD,OAAA7C,EAAAJ,EAAAuB,IAAAjB,IAAA,KAAAE,EAAAR,EAAAkD,SAAA,GAAA1C,EAAA,KAAAE,EAAAyC,EAAA3C,EAAAR,GAAA,GAAAU,EAAA,IAAAA,IAAAmB,EAAA,gBAAAnB,CAAA,cAAAV,EAAAiD,OAAAjD,EAAAoD,KAAApD,EAAAqD,MAAArD,EAAAuB,SAAA,aAAAvB,EAAAiD,OAAA,IAAA/C,IAAAuB,EAAA,MAAAvB,EAAA0B,EAAA5B,EAAAuB,IAAAvB,EAAAsD,kBAAAtD,EAAAuB,IAAA,gBAAAvB,EAAAiD,QAAAjD,EAAAuD,OAAA,SAAAvD,EAAAuB,KAAArB,EAAAyB,EAAA,IAAAK,EAAAX,EAAAzB,EAAAE,EAAAE,GAAA,cAAAgC,EAAAV,KAAA,IAAApB,EAAAF,EAAAgD,KAAApB,EAAAF,EAAAM,EAAAT,MAAAM,EAAA,gBAAAjG,MAAAoG,EAAAT,IAAAyB,KAAAhD,EAAAgD,KAAA,WAAAhB,EAAAV,OAAApB,EAAA0B,EAAA5B,EAAAiD,OAAA,QAAAjD,EAAAuB,IAAAS,EAAAT,IAAA,YAAA4B,EAAAvD,EAAAE,GAAA,IAAAE,EAAAF,EAAAmD,OAAA/C,EAAAN,EAAAW,SAAAP,GAAA,GAAAE,IAAAL,EAAA,OAAAC,EAAAoD,SAAA,eAAAlD,GAAAJ,EAAAW,SAAA,SAAAT,EAAAmD,OAAA,SAAAnD,EAAAyB,IAAA1B,EAAAsD,EAAAvD,EAAAE,GAAA,UAAAA,EAAAmD,SAAA,WAAAjD,IAAAF,EAAAmD,OAAA,QAAAnD,EAAAyB,IAAA,IAAAiC,UAAA,oCAAAxD,EAAA,aAAA6B,EAAA,IAAAzB,EAAAiB,EAAAnB,EAAAN,EAAAW,SAAAT,EAAAyB,KAAA,aAAAnB,EAAAkB,KAAA,OAAAxB,EAAAmD,OAAA,QAAAnD,EAAAyB,IAAAnB,EAAAmB,IAAAzB,EAAAoD,SAAA,KAAArB,EAAA,IAAAvB,EAAAF,EAAAmB,IAAA,OAAAjB,EAAAA,EAAA0C,MAAAlD,EAAAF,EAAA6D,YAAAnD,EAAA1E,MAAAkE,EAAA4D,KAAA9D,EAAA+D,QAAA,WAAA7D,EAAAmD,SAAAnD,EAAAmD,OAAA,OAAAnD,EAAAyB,IAAA1B,GAAAC,EAAAoD,SAAA,KAAArB,GAAAvB,GAAAR,EAAAmD,OAAA,QAAAnD,EAAAyB,IAAA,IAAAiC,UAAA,oCAAA1D,EAAAoD,SAAA,KAAArB,EAAA,UAAA+B,EAAA/D,GAAA,IAAAD,EAAA,CAAAiE,OAAAhE,EAAA,SAAAA,IAAAD,EAAAkE,SAAAjE,EAAA,SAAAA,IAAAD,EAAAmE,WAAAlE,EAAA,GAAAD,EAAAoE,SAAAnE,EAAA,SAAAoE,WAAArH,KAAAgD,EAAA,UAAAsE,EAAArE,GAAA,IAAAD,EAAAC,EAAAsE,YAAA,GAAAvE,EAAA0B,KAAA,gBAAA1B,EAAA2B,IAAA1B,EAAAsE,WAAAvE,CAAA,UAAAuB,EAAAtB,GAAA,KAAAoE,WAAA,EAAAJ,OAAA,SAAAhE,EAAArE,QAAAoI,EAAA,WAAAQ,OAAA,YAAAhC,EAAAxC,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAE,EAAAF,EAAAU,GAAA,GAAAR,EAAA,OAAAA,EAAA0B,KAAA5B,GAAA,sBAAAA,EAAA8D,KAAA,OAAA9D,EAAA,IAAAyE,MAAAzE,EAAA0E,QAAA,KAAApE,GAAA,EAAAE,EAAA,SAAAsD,IAAA,OAAAxD,EAAAN,EAAA0E,QAAA,GAAAtE,EAAAwB,KAAA5B,EAAAM,GAAA,OAAAwD,EAAA9H,MAAAgE,EAAAM,GAAAwD,EAAAV,MAAA,EAAAU,EAAA,OAAAA,EAAA9H,MAAAiE,EAAA6D,EAAAV,MAAA,EAAAU,CAAA,SAAAtD,EAAAsD,KAAAtD,CAAA,YAAAoD,UAAAd,EAAA9C,GAAA,2BAAAkC,EAAA/B,UAAAgC,EAAA7B,EAAAmC,EAAA,eAAAzG,MAAAmG,EAAAjB,cAAA,IAAAZ,EAAA6B,EAAA,eAAAnG,MAAAkG,EAAAhB,cAAA,IAAAgB,EAAAyC,YAAA3D,EAAAmB,EAAArB,EAAA,qBAAAd,EAAA4E,oBAAA,SAAA3E,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAA4E,YAAA,QAAA7E,IAAAA,IAAAkC,GAAA,uBAAAlC,EAAA2E,aAAA3E,EAAA8E,MAAA,EAAA9E,EAAA+E,KAAA,SAAA9E,GAAA,OAAAvE,OAAAsJ,eAAAtJ,OAAAsJ,eAAA/E,EAAAkC,IAAAlC,EAAAgF,UAAA9C,EAAAnB,EAAAf,EAAAa,EAAA,sBAAAb,EAAAE,UAAAzE,OAAA4F,OAAAmB,GAAAxC,CAAA,EAAAD,EAAAkF,MAAA,SAAAjF,GAAA,OAAA+C,QAAA/C,EAAA,EAAAyC,EAAAE,EAAAzC,WAAAa,EAAA4B,EAAAzC,UAAAS,GAAA,0BAAAZ,EAAA4C,cAAAA,EAAA5C,EAAAmF,MAAA,SAAAlF,EAAAC,EAAAE,EAAAE,EAAAE,QAAA,IAAAA,IAAAA,EAAA4E,SAAA,IAAA1E,EAAA,IAAAkC,EAAAxB,EAAAnB,EAAAC,EAAAE,EAAAE,GAAAE,GAAA,OAAAR,EAAA4E,oBAAA1E,GAAAQ,EAAAA,EAAAoD,OAAAb,MAAA,SAAAhD,GAAA,OAAAA,EAAAmD,KAAAnD,EAAAjE,MAAA0E,EAAAoD,MAAA,KAAApB,EAAAD,GAAAzB,EAAAyB,EAAA3B,EAAA,aAAAE,EAAAyB,EAAA/B,GAAA,0BAAAM,EAAAyB,EAAA,qDAAAzC,EAAAqF,KAAA,SAAApF,GAAA,IAAAD,EAAAtE,OAAAuE,GAAAC,EAAA,WAAAE,KAAAJ,EAAAE,EAAAlD,KAAAoD,GAAA,OAAAF,EAAAoF,UAAA,SAAAxB,IAAA,KAAA5D,EAAAwE,QAAA,KAAAzE,EAAAC,EAAAqF,MAAA,GAAAtF,KAAAD,EAAA,OAAA8D,EAAA9H,MAAAiE,EAAA6D,EAAAV,MAAA,EAAAU,CAAA,QAAAA,EAAAV,MAAA,EAAAU,CAAA,GAAA9D,EAAAwC,OAAAA,EAAAjB,EAAApB,UAAA,CAAA0E,YAAAtD,EAAAiD,MAAA,SAAAxE,GAAA,QAAAwF,KAAA,OAAA1B,KAAA,OAAAN,KAAA,KAAAC,MAAAxD,EAAA,KAAAmD,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAA1B,IAAA1B,EAAA,KAAAoE,WAAAzI,QAAA0I,IAAAtE,EAAA,QAAAE,KAAA,WAAAA,EAAAuF,OAAA,IAAArF,EAAAwB,KAAA,KAAA1B,KAAAuE,OAAAvE,EAAAwF,MAAA,WAAAxF,GAAAD,EAAA,EAAA0F,KAAA,gBAAAvC,MAAA,MAAAnD,EAAA,KAAAoE,WAAA,GAAAE,WAAA,aAAAtE,EAAAyB,KAAA,MAAAzB,EAAA0B,IAAA,YAAAiE,IAAA,EAAAlC,kBAAA,SAAA1D,GAAA,QAAAoD,KAAA,MAAApD,EAAA,IAAAE,EAAA,cAAA2F,EAAAzF,EAAAE,GAAA,OAAAI,EAAAgB,KAAA,QAAAhB,EAAAiB,IAAA3B,EAAAE,EAAA4D,KAAA1D,EAAAE,IAAAJ,EAAAmD,OAAA,OAAAnD,EAAAyB,IAAA1B,KAAAK,CAAA,SAAAA,EAAA,KAAA+D,WAAAK,OAAA,EAAApE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAA6D,WAAA/D,GAAAI,EAAAF,EAAA+D,WAAA,YAAA/D,EAAAyD,OAAA,OAAA4B,EAAA,UAAArF,EAAAyD,QAAA,KAAAuB,KAAA,KAAA5E,EAAAR,EAAAwB,KAAApB,EAAA,YAAAM,EAAAV,EAAAwB,KAAApB,EAAA,iBAAAI,GAAAE,EAAA,SAAA0E,KAAAhF,EAAA0D,SAAA,OAAA2B,EAAArF,EAAA0D,UAAA,WAAAsB,KAAAhF,EAAA2D,WAAA,OAAA0B,EAAArF,EAAA2D,WAAA,SAAAvD,GAAA,QAAA4E,KAAAhF,EAAA0D,SAAA,OAAA2B,EAAArF,EAAA0D,UAAA,YAAApD,EAAA,MAAAqC,MAAA,kDAAAqC,KAAAhF,EAAA2D,WAAA,OAAA0B,EAAArF,EAAA2D,WAAA,KAAAR,OAAA,SAAA1D,EAAAD,GAAA,QAAAE,EAAA,KAAAmE,WAAAK,OAAA,EAAAxE,GAAA,IAAAA,EAAA,KAAAI,EAAA,KAAA+D,WAAAnE,GAAA,GAAAI,EAAA2D,QAAA,KAAAuB,MAAApF,EAAAwB,KAAAtB,EAAA,oBAAAkF,KAAAlF,EAAA6D,WAAA,KAAA3D,EAAAF,EAAA,OAAAE,IAAA,UAAAP,GAAA,aAAAA,IAAAO,EAAAyD,QAAAjE,GAAAA,GAAAQ,EAAA2D,aAAA3D,EAAA,UAAAE,EAAAF,EAAAA,EAAA+D,WAAA,UAAA7D,EAAAgB,KAAAzB,EAAAS,EAAAiB,IAAA3B,EAAAQ,GAAA,KAAA6C,OAAA,YAAAS,KAAAtD,EAAA2D,WAAAlC,GAAA,KAAA6D,SAAApF,EAAA,EAAAoF,SAAA,SAAA7F,EAAAD,GAAA,aAAAC,EAAAyB,KAAA,MAAAzB,EAAA0B,IAAA,gBAAA1B,EAAAyB,MAAA,aAAAzB,EAAAyB,KAAA,KAAAoC,KAAA7D,EAAA0B,IAAA,WAAA1B,EAAAyB,MAAA,KAAAkE,KAAA,KAAAjE,IAAA1B,EAAA0B,IAAA,KAAA0B,OAAA,cAAAS,KAAA,kBAAA7D,EAAAyB,MAAA1B,IAAA,KAAA8D,KAAA9D,GAAAiC,CAAA,EAAA8D,OAAA,SAAA9F,GAAA,QAAAD,EAAA,KAAAqE,WAAAK,OAAA,EAAA1E,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAmE,WAAArE,GAAA,GAAAE,EAAAiE,aAAAlE,EAAA,YAAA6F,SAAA5F,EAAAqE,WAAArE,EAAAkE,UAAAE,EAAApE,GAAA+B,CAAA,kBAAAhC,GAAA,QAAAD,EAAA,KAAAqE,WAAAK,OAAA,EAAA1E,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAmE,WAAArE,GAAA,GAAAE,EAAA+D,SAAAhE,EAAA,KAAAG,EAAAF,EAAAqE,WAAA,aAAAnE,EAAAsB,KAAA,KAAApB,EAAAF,EAAAuB,IAAA2C,EAAApE,EAAA,QAAAI,CAAA,QAAA6C,MAAA,0BAAA6C,cAAA,SAAAhG,EAAAE,EAAAE,GAAA,YAAAkD,SAAA,CAAA3C,SAAA6B,EAAAxC,GAAA6D,WAAA3D,EAAA6D,QAAA3D,GAAA,cAAAiD,SAAA,KAAA1B,IAAA1B,GAAAgC,CAAA,GAAAjC,CAAA,UAAAiG,EAAA7F,EAAAH,EAAAD,EAAAE,EAAAI,EAAAI,EAAAE,GAAA,QAAAJ,EAAAJ,EAAAM,GAAAE,GAAAE,EAAAN,EAAAxE,KAAA,OAAAoE,GAAA,YAAAJ,EAAAI,EAAA,CAAAI,EAAA4C,KAAAnD,EAAAa,GAAAsE,QAAArC,QAAAjC,GAAAmC,KAAA/C,EAAAI,EAAA,CAkEA,QA1CuC,WACnC,IAAA3H,GAIIvC,EAAAA,EAAAA,KAHAwC,EAAMD,EAANC,OACWsN,EAAGvN,EAAdwN,QAAWD,IACIE,EAAqBzN,EAApCE,YAAeuN,sBAEXC,EAAiFzN,EAAjFyN,eAAgBC,EAAiE1N,EAAjE0N,oCAAqCC,EAA4B3N,EAA5B2N,wBAE7DxO,IAAAA,WAAgB,WACY,SAAAyO,IAjChC,IAAApG,EAmCS,OAnCTA,EAiCgCL,IAAAgF,MAAxB,SAAA0B,IAAA,OAAA1G,IAAAqB,MAAA,SAAAsF,GAAA,cAAAA,EAAAlB,KAAAkB,EAAA5C,MAAA,cAAA4C,EAAA5C,KAAA,EACUyC,IAAyB,wBAAAG,EAAAf,OAAA,GAAAc,EAAA,IADXD,EAjChC,eAAAvG,EAAA,KAAAD,EAAA2G,UAAA,WAAAvB,SAAA,SAAAlF,EAAAI,GAAA,IAAAI,EAAAN,EAAAwG,MAAA3G,EAAAD,GAAA,SAAA6G,EAAAzG,GAAA6F,EAAAvF,EAAAR,EAAAI,EAAAuG,EAAAC,EAAA,OAAA1G,EAAA,UAAA0G,EAAA1G,GAAA6F,EAAAvF,EAAAR,EAAAI,EAAAuG,EAAAC,EAAA,QAAA1G,EAAA,CAAAyG,OAAA,OAmCSL,EAAAI,MAAA,KAAAD,UAAA,EAHiB,WACMH,EAAAI,MAAC,KAADD,UAAA,CAGxBI,EACJ,GAAG,CAACR,IAEJ,IApCoB7O,EAoCZsP,EAA6Cd,EAA7Cc,gCAAiCC,EAAYf,EAAZe,QACnCC,EAAkBb,EAAe9H,QACnC,SAAA4I,GAAO,OACHA,EAAQC,wBAA0BJ,GAClCG,EAAQF,UAAYA,GACpBE,EAAQE,eAAiBjB,CAAqB,IAEhDkB,EAAmBhB,EAAoC/H,QACzD,SAAA4I,GAAO,OACHA,EAAQ9P,YAAc2P,GACtBG,EAAQF,UAAYA,GACgB,SAApCE,EAAQI,uBAAkC,IAG5C5Q,EAAkCuQ,GAAmBxL,OAAO2J,KAAK6B,GAAiBxC,OAAS,EAE3F7N,EAAmBF,EAAkCuQ,EAAgB,GAAK,KAGhF,MAAO,CACHvQ,gCAAAA,EACAE,iBAAAA,EACAD,wBAL4BC,SAAAA,EAAkBa,OApDnC,kBADKA,EAqDsDb,aAAgB,EAAhBA,EAAkBa,QAnDjF8P,EAAAA,mBAAmBC,OACR,yBAAX/P,EACA8P,EAAAA,mBAAmBpP,QACR,uBAAXV,EACA8P,EAAAA,mBAAmBE,wBADvB,EAgD+F,KAMlG5Q,4BALiCH,EAAwD,KAAtB2Q,EAAiB,GAO5F","sources":["webpack://@deriv/appstore/../hooks/src/useGetStatus.ts","webpack://@deriv/appstore/./src/components/modals/verification-docs-list-modal/ListItem.tsx","webpack://@deriv/appstore/./src/components/modals/verification-docs-list-modal/verification-docs-list-modal.tsx","webpack://@deriv/appstore/./src/components/modals/verification-docs-list-modal/index.ts","webpack://@deriv/appstore/../hooks/src/useIsSelectedMT5AccountCreated.ts"],"sourcesContent":["import { useStore } from '@deriv/stores';\nimport useGetMFAccountStatus from './useGetMFAccountStatus';\nimport useIsSelectedMT5AccountCreated from './useIsSelectedMT5AccountCreated';\nimport { CFD_PLATFORMS } from '@deriv/shared';\n\n/** A custom hook to fetch the status badge value and client_kyc_status for MF account and MT5 account \nMF account status is fetched from useGetMFAccountStatus\nMT5 account status is fetched from useIsSelectedMT5AccountCreated\n*/\nconst useGetStatus = () => {\n    const { common } = useStore();\n    const { mf_account_status, kyc_status } = useGetMFAccountStatus();\n    const { is_selected_MT5_account_created, existing_account_status, existing_account, available_account_to_create } =\n        useIsSelectedMT5AccountCreated();\n    const { platform } = common;\n\n    if (platform === CFD_PLATFORMS.MT5) {\n        return {\n            status_badge: existing_account_status,\n            client_kyc_status: is_selected_MT5_account_created\n                ? existing_account?.client_kyc_status\n                : available_account_to_create?.client_kyc_status,\n            short_code: available_account_to_create?.shortcode,\n        };\n    }\n    return {\n        status_badge: mf_account_status,\n        client_kyc_status: kyc_status,\n    };\n};\n\nexport default useGetStatus;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { observer, useStore } from '@deriv/stores';\nimport { LabelPairedChevronRightMdRegularIcon } from '@deriv/quill-icons';\nimport { useGrowthbookGetFeatureValue } from '@deriv/hooks';\nimport { Localize } from '@deriv/translations';\nimport { Text, StatusBadge } from '@deriv/components';\nimport {\n    ACCOUNTS_OS_POI_STATUS_URL,\n    ACCOUNTS_OS_POI_URL,\n    ACCOUNTS_OS_POA_URL,\n    AUTH_STATUS_CODES,\n    getSocketURL,\n} from '@deriv/shared';\nimport { useDevice } from '@deriv-com/ui';\nimport { LocalStorageUtils, URLUtils, WebSocketUtils } from '@deriv-com/utils';\nimport './verification-docs-list-modal.scss';\n\ntype TListItemProps = {\n    id: string;\n    text: string;\n    shortcode?: string;\n    status?: string | number;\n    route: string;\n};\n\ntype TAuthStatusCodes = (typeof AUTH_STATUS_CODES)[keyof typeof AUTH_STATUS_CODES];\n\nconst getBadgeStatus = (status: TAuthStatusCodes) => {\n    switch (status) {\n        case AUTH_STATUS_CODES.VERIFIED:\n            return {\n                text: <Localize i18n_default_text='Verified' />,\n                icon: 'IcMt5Success',\n                icon_size: '18',\n            };\n        case AUTH_STATUS_CODES.PENDING:\n            return {\n                text: <Localize i18n_default_text='In review' />,\n                icon: 'IcMt5Pending',\n                icon_size: '12',\n            };\n        case AUTH_STATUS_CODES.REJECTED:\n        case AUTH_STATUS_CODES.SUSPECTED:\n            return {\n                text: <Localize i18n_default_text='Failed' />,\n                icon: 'IcMt5Failed',\n                icon_size: '18',\n            };\n        default:\n            return {\n                text: '',\n                icon: '',\n            };\n    }\n};\n\nconst ListItem = observer(({ id, text, status, shortcode, route }: TListItemProps) => {\n    const { text: badge_text, icon: badge_icon, icon_size: badge_size } = getBadgeStatus(status);\n    const { client, common, traders_hub, ui } = useStore();\n    const { isMobile } = useDevice();\n    const { getToken } = client;\n    const { is_from_tradershub_os } = common;\n    const { setVerificationModalOpen } = traders_hub;\n    const history = useHistory();\n    const is_document_verified = status === AUTH_STATUS_CODES.VERIFIED;\n    const [shouldRedirectToAccountsOSApp, isRedirectToAccountsOSAppFFLoaded] = useGrowthbookGetFeatureValue({\n        featureFlag: 'redirect_to_poi_in_accounts_os',\n    });\n    const localize_language = LocalStorageUtils.getValue<string>('i18n_language');\n    const url_lang = URLUtils.getQueryParameter('lang');\n    const i18n_language = localize_language || url_lang || 'en';\n\n    const getFormattedURL = (url_link: string) => {\n        const url = new URL(url_link);\n        const urlParams = new URLSearchParams(location.search);\n        const platformConfig = urlParams.get('platform') ?? window.sessionStorage.getItem('config.platform');\n        const platform = platformConfig ?? (is_from_tradershub_os ? 'tradershub_os' : 'deriv_app');\n        const jurisdiction = shortcode;\n\n        const params = {\n            platform,\n            jurisdiction,\n            appid: WebSocketUtils.getAppId(),\n            lang: i18n_language,\n            server: getSocketURL(),\n            token: getToken(),\n        };\n\n        Object.entries(params).forEach(([key, value]) => {\n            url.searchParams.append(key, value);\n        });\n\n        return url.toString();\n    };\n\n    const onClickItem = () => {\n        if (is_document_verified) {\n            return;\n        }\n        setVerificationModalOpen(false);\n        if (id === 'identity' && status) {\n            if (isRedirectToAccountsOSAppFFLoaded && shouldRedirectToAccountsOSApp) {\n                const redirect_url =\n                    status === 'none' || status === 'required' ? ACCOUNTS_OS_POI_URL : ACCOUNTS_OS_POI_STATUS_URL;\n                window.location.replace(getFormattedURL(redirect_url));\n                return;\n            }\n        }\n        if (id === 'address' && status) {\n            localStorage.setItem('mt5_poa_status', String(status));\n            if (isRedirectToAccountsOSAppFFLoaded && shouldRedirectToAccountsOSApp) {\n                window.location.replace(getFormattedURL(ACCOUNTS_OS_POA_URL));\n                return;\n            }\n        }\n        if (id === 'tax') {\n            ui.setFieldRefToFocus('employment-tax-section');\n        }\n        history.push(route);\n    };\n\n    return (\n        <div\n            className={classNames('verification-docs-list-modal__content-list-item', {\n                'verification-docs-list-modal__content-list-item--disabled': is_document_verified,\n            })}\n            onClick={onClickItem}\n        >\n            <Text size={isMobile ? 'xxs' : 'xs'} line_height='xl' weight='bold'>\n                <Localize i18n_default_text={text} />\n            </Text>\n            {status === AUTH_STATUS_CODES.NONE || (id === 'tax' && status === 0) ? (\n                <LabelPairedChevronRightMdRegularIcon fill='var(--text-prominent)' />\n            ) : (\n                <div className='verification-docs-list-modal__card'>\n                    <StatusBadge\n                        account_status={status}\n                        icon={badge_icon}\n                        text={badge_text}\n                        icon_size={badge_size}\n                        className='verification-docs-list-modal__status-badge'\n                    />\n                    <LabelPairedChevronRightMdRegularIcon\n                        className='verification-docs-list-modal__card--icon'\n                        fill={is_document_verified ? 'var(--text-disabled-1)' : 'var(--text-prominent)'}\n                    />\n                </div>\n            )}\n        </div>\n    );\n});\n\nexport default ListItem;\n","import React, { Suspense } from 'react';\nimport { useDevice } from '@deriv-com/ui';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { Text, Modal, UILoader, MobileDialog, Icon } from '@deriv/components';\nimport { routes, CFD_PLATFORMS } from '@deriv/shared';\nimport { useGetStatus, useIsSelectedMT5AccountCreated } from '@deriv/hooks';\nimport ListItem from './ListItem';\nimport './verification-docs-list-modal.scss';\n\ntype TItems = {\n    id: string;\n    text: string;\n    shortcode?: string;\n    status: string | number;\n    route: string;\n};\n\nconst VerificationDocsListModalContent = observer(() => {\n    const {\n        common: { platform },\n    } = useStore();\n    const { isMobile } = useDevice();\n    const { client_kyc_status, short_code } = useGetStatus();\n    const { is_selected_MT5_account_created } = useIsSelectedMT5AccountCreated();\n    if (!client_kyc_status) return null;\n    const { poi_status, poa_status, valid_tin, required_tin } = client_kyc_status;\n    const is_tin_required = required_tin === 1 && valid_tin === 0;\n\n    const items: TItems[] = [\n        poi_status && {\n            id: 'identity',\n            text: 'Proof of identity',\n            status: poi_status,\n            shortcode: short_code,\n            route: routes.proof_of_identity,\n        },\n        poa_status && {\n            id: 'address',\n            text: 'Proof of address',\n            status: poa_status,\n            shortcode: short_code,\n            route: routes.proof_of_address,\n        },\n        is_tin_required && {\n            id: 'tax',\n            text: 'Additional information',\n            status: valid_tin,\n            route: routes.financial_assessment,\n        },\n    ].filter(Boolean) as TItems[];\n\n    return (\n        <div className='verification-docs-list-modal__content'>\n            <Icon icon='IcDerivLightUserVerification' size={128} />\n            <Text size={isMobile ? 'xxs' : 'xs'} line_height='xl' align='center'>\n                {platform === CFD_PLATFORMS.MT5 && !is_selected_MT5_account_created ? (\n                    <Localize i18n_default_text='Confirm your details to open the account. After verification, you can begin trading.' />\n                ) : (\n                    <Localize i18n_default_text='Your account needs verification.' />\n                )}\n            </Text>\n            <div className='verification-docs-list-modal__content-list'>\n                {items.map(item => (\n                    <ListItem\n                        key={item.id}\n                        id={item.id}\n                        text={item.text}\n                        status={item.status}\n                        shortcode={item.shortcode}\n                        route={item.route}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n});\n\nconst VerificationDocsListModal = observer(() => {\n    const { traders_hub, common } = useStore();\n    const { is_verification_docs_list_modal_visible, setVerificationModalOpen } = traders_hub;\n    const { platform } = common;\n    const { is_selected_MT5_account_created } = useIsSelectedMT5AccountCreated();\n    const { isMobile } = useDevice();\n    const getTitle = () =>\n        platform === CFD_PLATFORMS.MT5 && !is_selected_MT5_account_created ? (\n            <Localize i18n_default_text='Complete your profile' />\n        ) : (\n            <Localize i18n_default_text='Verification required' />\n        );\n    return (\n        <Suspense fallback={<UILoader />}>\n            {!isMobile ? (\n                <Modal\n                    is_open={is_verification_docs_list_modal_visible}\n                    toggleModal={() => setVerificationModalOpen(false)}\n                    title={getTitle()}\n                    width='44rem'\n                    should_header_stick_body={false}\n                    has_close_icon\n                >\n                    <VerificationDocsListModalContent />\n                </Modal>\n            ) : (\n                <MobileDialog\n                    portal_element_id='deriv_app'\n                    title={getTitle()}\n                    visible={is_verification_docs_list_modal_visible}\n                    onClose={() => setVerificationModalOpen(false)}\n                >\n                    <VerificationDocsListModalContent />\n                </MobileDialog>\n            )}\n        </Suspense>\n    );\n});\n\nexport default VerificationDocsListModal;\n","import VerificationDocsListModal from './verification-docs-list-modal';\n\nexport default VerificationDocsListModal;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport { MT5_ACCOUNT_STATUS } from '@deriv/shared';\n\nconst getStatusBadge = (status: string) => {\n    if (status === 'proof_failed') {\n        return MT5_ACCOUNT_STATUS.FAILED;\n    } else if (status === 'verification_pending') {\n        return MT5_ACCOUNT_STATUS.PENDING;\n    } else if (status === 'needs_verification') {\n        return MT5_ACCOUNT_STATUS.NEEDS_VERIFICATION;\n    }\n};\n\n/**\n * Custom React hook to check if the selected MT5 account has been created.\n *\n * @returns {Object} An object containing the following properties:\n *\n * - `is_selected_MT5_account_created` (boolean): Indicates whether the selected MT5 account has been created.\n * - `existing_account` (Object | null): If the selected account is created, contains the MT5 account details; otherwise `null`.\n * - `existing_account_status` (string | null): Status of the created account (e.g., 'failed', 'pending', 'needs_verification'), or `null` if no account is created.\n * - `available_account_to_create` (Object | null): The account available to create for the selected product. Will be `null` if an account is already created.\n */\n\nconst useIsSelectedMT5AccountCreated = () => {\n    const {\n        client,\n        modules: { cfd },\n        traders_hub: { selected_account_type },\n    } = useStore();\n    const { mt5_login_list, trading_platform_available_accounts, updateMT5AccountDetails } = client;\n\n    React.useEffect(() => {\n        async function fetchData() {\n            await updateMT5AccountDetails();\n        }\n        fetchData();\n    }, [updateMT5AccountDetails]);\n\n    const { jurisdiction_selected_shortcode, product } = cfd;\n    const created_account = mt5_login_list.filter(\n        account =>\n            account.landing_company_short === jurisdiction_selected_shortcode &&\n            account.product === product &&\n            account.account_type === selected_account_type\n    );\n    const selected_account = trading_platform_available_accounts.filter(\n        account =>\n            account.shortcode === jurisdiction_selected_shortcode &&\n            account.product === product &&\n            account.is_default_jurisdiction === 'true'\n    );\n\n    const is_selected_MT5_account_created = created_account && Object.keys(created_account).length > 0;\n\n    const existing_account = is_selected_MT5_account_created ? created_account[0] : null;\n    const existing_account_status = existing_account?.status ? getStatusBadge(existing_account?.status) : null;\n    const available_account_to_create = !is_selected_MT5_account_created ? selected_account[0] : null;\n    return {\n        is_selected_MT5_account_created,\n        existing_account,\n        existing_account_status,\n        available_account_to_create,\n    };\n};\n\nexport default useIsSelectedMT5AccountCreated;\n"],"names":["common","useStore","_useGetMFAccountStatu","useGetMFAccountStatus","mf_account_status","kyc_status","_useIsSelectedMT5Acco","useIsSelectedMT5AccountCreated","is_selected_MT5_account_created","existing_account_status","existing_account","available_account_to_create","platform","CFD_PLATFORMS","MT5","status_badge","client_kyc_status","short_code","shortcode","observer","_ref","id","text","status","route","_getBadgeStatus","AUTH_STATUS_CODES","VERIFIED","React","Localize","i18n_default_text","icon","icon_size","PENDING","REJECTED","SUSPECTED","getBadgeStatus","badge_text","badge_icon","badge_size","_useStore","client","traders_hub","ui","isMobile","useDevice","getToken","is_from_tradershub_os","setVerificationModalOpen","history","useHistory","is_document_verified","_useGrowthbookGetFeat2","_slicedToArray","useGrowthbookGetFeatureValue","featureFlag","shouldRedirectToAccountsOSApp","isRedirectToAccountsOSAppFFLoaded","localize_language","LocalStorageUtils","getValue","url_lang","URLUtils","getQueryParameter","i18n_language","getFormattedURL","url_link","_urlParams$get","url","URL","platformConfig","URLSearchParams","location","search","get","window","sessionStorage","getItem","params","jurisdiction","appid","WebSocketUtils","getAppId","lang","server","getSocketURL","token","Object","entries","forEach","_ref2","_ref3","key","value","searchParams","append","toString","className","classNames","onClick","redirect_url","ACCOUNTS_OS_POI_URL","ACCOUNTS_OS_POI_STATUS_URL","replace","localStorage","setItem","String","ACCOUNTS_OS_POA_URL","setFieldRefToFocus","push","Text","size","line_height","weight","NONE","LabelPairedChevronRightMdRegularIcon","fill","StatusBadge","account_status","VerificationDocsListModalContent","_useGetStatus","useGetStatus","poi_status","poa_status","valid_tin","is_tin_required","required_tin","items","routes","proof_of_identity","proof_of_address","financial_assessment","filter","Boolean","Icon","align","map","item","ListItem","_useStore2","is_verification_docs_list_modal_visible","getTitle","Suspense","fallback","UILoader","MobileDialog","portal_element_id","title","visible","onClose","Modal","is_open","toggleModal","width","should_header_stick_body","has_close_icon","_regeneratorRuntime","e","t","r","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","cfd","modules","selected_account_type","mt5_login_list","trading_platform_available_accounts","updateMT5AccountDetails","_fetchData","_callee","_context","arguments","apply","_next","_throw","fetchData","jurisdiction_selected_shortcode","product","created_account","account","landing_company_short","account_type","selected_account","is_default_jurisdiction","MT5_ACCOUNT_STATUS","FAILED","NEEDS_VERIFICATION"],"sourceRoot":""}