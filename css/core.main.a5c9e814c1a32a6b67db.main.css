@import url(https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap);
@import url(https://fonts.googleapis.com/css?family=IBM+Plex+Sans:300,400,500,700&display=swap&subset=cyrillic,cyrillic-ext,latin-ext,vietnamese);
@import url(https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap);
@import url(https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap);
@import url(https://fonts.googleapis.com/css?family=IBM+Plex+Sans:300,400,500,700&display=swap&subset=cyrillic,cyrillic-ext,latin-ext,vietnamese);
@import url(https://fonts.googleapis.com/css?family=IBM+Plex+Sans:300,400,500,700&display=swap&subset=cyrillic,cyrillic-ext,latin-ext,vietnamese);
@import url(https://fonts.googleapis.com/css?family=IBM+Plex+Sans:300,400,500,700&display=swap&subset=cyrillic,cyrillic-ext,latin-ext,vietnamese);
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.callback {
  font-family: Ubuntu, sans-serif;
  height: 100vh;
  width: 100vw;
  background-repeat: no-repeat;
  background-position: center;
  position: relative;
  align-items: center;
  background: #fff;
}

.callback__content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100%;
  gap: 40px;
}

.callback__title {
  color: #000;
  font-size: 24px;
  text-align: center;
  font-weight: 700;
  margin: 0;
}

.callback__button {
  border: 1px solid #000000;
  border-radius: 16px;
  font-weight: 700;
  font-size: 16px;
  line-height: 24px;
  text-align: center;
  background: inherit;
  color: #000;
  max-height: 48px;
}

.callback__button:hover {
  background: inherit;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-icon {
  --fill-color1: var(--text-general);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: var(--general-section-1);
  --fill-color4: var(--icon-grey-background);
  --fill-color5: var(--text-prominent);
}

.dc-icon--disabled {
  --fill-color1: var(--text-disabled);
  --fill-color2: var(--text-disabled);
}

.dc-icon--active {
  --fill-color1: #ffffff;
  --fill-color2: #ffffff;
}

.dc-icon--green {
  --fill-color1: var(--text-profit-success);
  --fill-color2: var(--text-profit-success);
  --fill-color3: #ffffff;
}

.dc-icon--red {
  --fill-color1: var(--text-loss-danger);
  --fill-color2: var(--text-loss-danger);
  --fill-color3: #ffffff;
}

.dc-icon--secondary {
  --fill-color1: var(--text-less-prominent);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: #ffffff;
}

.dc-icon--brand {
  --fill-color1: var(--brand-red-coral);
  --fill-color2: var(--brand-secondary);
  --fill-color3: #ffffff;
}

.dc-icon--black {
  --fill-color1: var(--icon-black-plus);
}

.dc-icon--orange {
  --fill-color1: var(--status-warning);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/* @define dc-accordion */
.dc-accordion__wrapper {
  /* postcss-bem-linter: ignore */
}

.dc-accordion__wrapper > div:last-child {
  border-bottom-right-radius: 4px;
  border-bottom-left-radius: 4px;
  border-bottom-width: 1px;
}

.dc-accordion__item {
  border: 1px solid var(--general-section-1);
  border-bottom-width: 0;
  color: var(--text-general);
  font-size: 1.4rem;
}

.dc-accordion__item--first {
  border-top-right-radius: 4px;
  border-top-left-radius: 4px;
}

.dc-accordion__item--open .dc-accordion__item-header {
  border-bottom: 1px solid var(--general-section-1);
}

.dc-accordion__item--open .dc-accordion__item-content {
  display: block;
}

.dc-accordion__item--close .dc-accordion__item-content {
  display: none;
}

.dc-accordion__item-header {
  cursor: pointer;
  line-height: 1.43;
  padding: 8px 16px;
}

.dc-accordion__item-header-icon {
  vertical-align: middle;
  /* postcss-bem-linter: ignore */
}

[dir="ltr"] .dc-accordion__item-header-icon-wrapper {
  float: right;
  padding-left: 16px;
}

[dir="rtl"] .dc-accordion__item-header-icon-wrapper {
  float: left;
  padding-right: 16px;
}

.dc-accordion__item-header-icon path,
.dc-accordion__item-header-icon rect {
  fill: var(--text-general);
}

.dc-accordion__item-content {
  padding: 16px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-field {
  position: absolute;
  top: 4.1rem;
  font-size: var(--text-size-xxs);
  line-height: 1.25;
}

[dir="ltr"] .dc-field {
  text-align: left !important;
}

[dir="rtl"] .dc-field {
  text-align: right !important;
}

[dir="ltr"] .dc-field--error {
  text-align: left;
}

[dir="rtl"] .dc-field--error {
  text-align: right;
}

.dc-field--error {
  font-size: 1.2rem;
  color: var(--text-loss-danger);
  font-weight: 400;
  text-transform: none;
  line-height: 1.25;
  line-height: 1;
}

[dir="ltr"] .dc-field--error {
  padding-left: 1.1rem;
}

[dir="rtl"] .dc-field--error {
  padding-right: 1.1rem;
}

[dir="ltr"] .dc-field--warn {
  text-align: left;
}

[dir="rtl"] .dc-field--warn {
  text-align: right;
}

.dc-field--warn {
  padding-top: 0.4rem;
  font-size: 1.2rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  line-height: 1.25;
  color: #999999;
}

[dir="ltr"] .dc-field--warn {
  padding-left: 1.2rem;
}

[dir="rtl"] .dc-field--warn {
  padding-right: 1.2rem;
}

.dc-input__footer .dc-field {
  position: relative;
  top: auto;
  top: initial;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-input {
  position: relative;
  width: 100%;
  display: flex;
  flex-direction: column;
  margin-bottom: 3.2rem;
  line-height: 1.43;
}

.dc-input:hover:not(.dc-input--disabled) {
  border-color: var(--border-hover);
}

.dc-input[focus-within] {
  border-color: var(--brand-secondary);
}

.dc-input:focus-within {
  border-color: var(--brand-secondary);
}

.dc-input[focus-within]:hover {
  border-color: var(--brand-secondary);
}

.dc-input:focus-within:hover {
  border-color: var(--brand-secondary);
}

.dc-input--bottom-label-active {
  margin-bottom: 0;
  margin-bottom: initial;
}

.dc-input--bottom-label-active.dc-input--error {
  margin-bottom: calc(5rem - 12px);
}

.dc-input__bottom-label {
  margin-bottom: calc(3.2rem - 12px);
}

[dir="ltr"] .dc-input__bottom-label {
  margin-left: 1.2rem;
}

[dir="rtl"] .dc-input__bottom-label {
  margin-right: 1.2rem;
}

.dc-input--disabled {
  border-color: var(--border-normal);
}

.dc-input--disabled .dc-datepicker__display-text {
  color: var(--text-less-prominent);
}

@media (max-width: 992px) {
  .dc-input--error {
    margin-bottom: 5rem;
  }
}

.dc-input--error label {
  color: var(--brand-red-coral) !important;
}

.dc-input--error ::-moz-placeholder {
  color: var(--text-loss-danger) !important;
  opacity: 1 !important;
}

.dc-input--error ::placeholder {
  color: var(--text-loss-danger) !important;
  opacity: 1 !important;
}

.dc-input__container {
  display: flex;
  align-items: center;
  border-radius: 4px;
  border: 1px solid var(--border-normal);
  padding: 0.5rem 1.2rem;
  height: 4rem;
}

.dc-input__container:hover:not(.dc-input--disabled) {
  border-color: var(--general-disabled);
}

.dc-input__container[focus-within] {
  border-color: var(--brand-secondary);
}

.dc-input__container:focus-within {
  border-color: var(--brand-secondary);
}

.dc-input__container[focus-within]:hover {
  border-color: var(--brand-secondary);
}

.dc-input__container:focus-within:hover {
  border-color: var(--brand-secondary);
}

.dc-input__container--error {
  border-color: var(--brand-red-coral) !important;
}

.dc-input__container--disabled {
  border-color: var(--general-disabled);
}

.dc-input__field {
  background: none;
  color: var(--text-prominent);
  font-size: var(--text-size-xs);
  width: 100%;
  height: 100%;
  min-width: 0;
  /* Not empty fields */
  /* To get rid of ugly chrome autofill shadow dom-applied background color */
}

.dc-input__field::-moz-placeholder {
  line-height: 1.5;
  opacity: 0;
  -moz-transition: opacity 0.25s;
  transition: opacity 0.25s;
  /* To vertically align placeholder in Firefox */
}

.dc-input__field::placeholder {
  line-height: 1.5;
  opacity: 0;
  transition: opacity 0.25s;
  /* To vertically align placeholder in Firefox */
}

@-moz-document url-prefix("") {
  .dc-input__field::-moz-placeholder {
    line-height: 1.25;
  }
  .dc-input__field::placeholder {
    line-height: 1.25;
  }
}

.dc-input__field--placeholder-visible::-moz-placeholder {
  opacity: 0.4;
}

.dc-input__field--placeholder-visible::placeholder {
  opacity: 0.4;
}

.dc-input__field:focus, .dc-input__field:not(:focus):not([value=""]) {
  outline: none;
}

.dc-input__field:focus ~ label, .dc-input__field:not(:focus):not([value=""]) ~ label {
  transform: translate(0, -1.8rem) scale(0.75);
  padding: 0 4px;
}

.dc-input__field:disabled {
  -webkit-text-fill-color: var(--text-less-prominent);
  opacity: 1;
  color: var(--text-less-prominent);
  /* stylelint-disable */
  /* stylelint-enable */
}

.dc-input__field:disabled ~ label {
  color: var(--text-less-prominent) !important;
}

.dc-input__field:disabled ~ svg .color1-fill {
  fill: var(--text-less-prominent);
}

@media not all and (min-resolution: 0.001dpcm) {
  @supports (-webkit-appearance: none) {
    .dc-input__field:disabled {
      color: var(--text-prominent);
    }
  }
}

.dc-input__field:focus {
  outline: none;
}

.dc-input__field:focus ~ label {
  color: var(--brand-secondary);
}

.dc-input__field:focus::-moz-placeholder {
  opacity: 0.4;
}

.dc-input__field:focus::placeholder {
  opacity: 0.4;
}

.dc-input__field:not(.dc-input--no-placeholder):not(:focus):not([value=""]) ~ label {
  color: var(--text-general);
}

.dc-input__field[type=number]::-webkit-inner-spin-button, .dc-input__field[type=number]::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.dc-input__field[type=number] {
  -moz-appearance: textfield;
}

.dc-input__field[type=textarea] {
  height: 9.6rem;
  border: none;
  resize: none;
}

.dc-input__field[type=textarea] ~ .dc-field--error {
  top: 10rem;
}

.dc-input__field:-webkit-autofill {
  -webkit-box-shadow: 0 0 0 30px var(--fill-normal) inset !important;
  -webkit-text-fill-color: var(--text-prominent) !important;
}

.dc-input__field:-webkit-autofill {
  border-radius: 4px;
}

.dc-input__field:-webkit-autofill:hover, .dc-input__field:-webkit-autofill:focus, .dc-input__field:-webkit-autofill:active {
  -webkit-box-shadow: 0 0 0 30px var(--fill-normal) inset !important;
}

.dc-input__field::-ms-reveal {
  display: none;
}

.dc-input__textarea:not(.dc-input--no-placeholder):not(:focus):empty ~ label {
  transform: none;
  color: var(--text-less-prominent);
  padding: 0 4px;
}

.dc-input__leading-icon {
  top: 1rem;
  position: absolute;
  pointer-events: none;
  cursor: text;
  font-size: var(--text-size-xs);
}

[dir="ltr"] .dc-input__leading-icon {
  margin-left: 1rem;
  left: 0;
}

[dir="rtl"] .dc-input__leading-icon {
  margin-right: 1rem;
  right: 0;
}

.dc-input__leading-icon.symbols {
  top: 0.9rem;
}

[dir="ltr"] .dc-input__leading-icon.symbols + .dc-input__field {
  padding-left: 4rem;
}

[dir="rtl"] .dc-input__leading-icon.symbols + .dc-input__field {
  padding-right: 4rem;
}

[dir="ltr"] .dc-input__leading-icon.symbols--usdc + .dc-input__field, [dir="ltr"] .dc-input__leading-icon.symbols--ust + .dc-input__field {
  padding-left: 4.8rem;
}

[dir="rtl"] .dc-input__leading-icon.symbols--usdc + .dc-input__field, [dir="rtl"] .dc-input__leading-icon.symbols--ust + .dc-input__field {
  padding-right: 4.8rem;
}

.dc-input__trailing-icon {
  font-size: var(--text-size-xs);
}

[dir="ltr"] .dc-input__trailing-icon {
  right: 0;
}

[dir="rtl"] .dc-input__trailing-icon {
  left: 0;
}

.dc-input__trailing-icon.symbols {
  top: 0.9rem;
}

[dir="ltr"] .dc-input__trailing-icon.symbols + .dc-input__field {
  padding-right: 4rem;
}

[dir="rtl"] .dc-input__trailing-icon.symbols + .dc-input__field {
  padding-left: 4rem;
}

.dc-input__trailing-icon.symbols--usd {
  top: 1rem;
  position: absolute;
}

[dir="ltr"] .dc-input__trailing-icon.symbols--usd {
  right: 1.1rem;
}

[dir="rtl"] .dc-input__trailing-icon.symbols--usd {
  left: 1.1rem;
}

[dir="ltr"] .dc-input__trailing-icon.symbols--usdc + .dc-input__field, [dir="ltr"] .dc-input__trailing-icon.symbols--ust + .dc-input__field {
  padding-right: 4.8rem;
}

[dir="rtl"] .dc-input__trailing-icon.symbols--usdc + .dc-input__field, [dir="rtl"] .dc-input__trailing-icon.symbols--ust + .dc-input__field {
  padding-left: 4.8rem;
}

.dc-input__label {
  white-space: nowrap;
  color: var(--text-less-prominent);
  font-size: var(--text-size-xs);
  background-color: var(--general-main-1);
  position: absolute;
  pointer-events: none;
  top: 1.1rem;
  transition: 0.25s ease all;
  text-overflow: ellipsis;
  overflow: hidden;
  max-width: calc(100% - 1.4rem);
}

[dir="ltr"] .dc-input__label {
  left: 1.1rem;
  transform-origin: top left;
}

[dir="rtl"] .dc-input__label {
  right: 1.1rem;
  transform-origin: top right;
}

.dc-input:not(.dc-input--no-placeholder) .dc-input:not(.dc-input--no-placeholder) __label {
  color: var(--text-general);
  transition: 0.25s ease all;
  transform: translateZ(0);
}

[dir="ltr"] .dc-input__hint {
  margin: 0.1rem 0 -1.9rem 1.3rem;
}

[dir="rtl"] .dc-input__hint {
  margin: 0.1rem 1.3rem -1.9rem 0;
}

.dc-input__hint--relative {
  position: relative;
  top: auto;
  top: initial;
}

[dir="ltr"] .dc-input__hint--relative {
  margin-left: 1.2rem;
}

[dir="rtl"] .dc-input__hint--relative {
  margin-right: 1.2rem;
}

.dc-input__counter {
  color: var(--text-less-prominent);
  font-size: 1.2rem;
}

[dir="ltr"] .dc-input__counter {
  margin-left: 1.2rem;
}

[dir="rtl"] .dc-input__counter {
  margin-right: 1.2rem;
}

.dc-input--no-placeholder label {
  transform: translate(0, -1.8rem) scale(0.75);
  color: var(--text-prominent);
  padding: 0 4px;
  background-color: var(--fill-normal);
}

.dc-input__footer {
  display: flex;
  flex-direction: row;
  margin-bottom: -1.6rem;
}

[dir="ltr"] .dc-input__footer > :not(.dc-input__counter) {
  margin-right: 1.2rem;
}

[dir="rtl"] .dc-input__footer > :not(.dc-input__counter) {
  margin-left: 1.2rem;
}

[dir="ltr"] .dc-input__footer > .dc-input__counter {
  margin-left: auto;
}

[dir="rtl"] .dc-input__footer > .dc-input__counter {
  margin-right: auto;
}

.dc-input__wrapper {
  margin-bottom: 1.6rem;
}

[dir="ltr"] .dc-input__input-group {
  border-right-style: none;
  border-radius: 4px 0 0 4px;
}

[dir="rtl"] .dc-input__input-group {
  border-left-style: none;
  border-radius: 0 4px 4px 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-text {
  font-size: var(--text-size);
  color: var(--text-color);
  line-height: var(--text-lh);
  font-weight: var(--text-weight);
  text-align: var(--text-align);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.amount-input-wrapper {
  display: flex;
  flex-direction: column;
  padding: 0.8rem;
  height: auto;
}

.amount-input-container {
  position: relative;
  height: 2.8rem;
}

.amount-input-container .dc-input__field {
  color: var(--text-general);
}

.amount-input-container--error .dc-input__field {
  color: var(--text-loss-danger);
  -webkit-text-fill-color: var(--text-loss-danger);
}

.amount-input-container--disabled .dc-input__field {
  color: var(--text-disabled-1);
}

@media (min-width: 320px) and (max-width: 767px) {
  .amount-input-container {
    height: 2.4rem;
  }
}

.amount-input {
  position: absolute;
  border: none;
  flex: 1;
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%;
}

.amount-input input {
  font-size: var(--text-size-sm);
  font-weight: var(--text-weight-bold);
}

@media (min-width: 320px) and (max-width: 767px) {
  .amount-input input {
    font-size: var(--text-size-s);
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-dropdown-list {
  position: absolute;
  margin-top: 4px;
  border-radius: 4px;
  z-index: 1;
  box-shadow: 0 4px 6px 0 rgba(0, 0, 0, 0.24);
  transform-origin: top;
  transition: transform 0.25s ease, opacity 0.25s linear;
  transform: scale(1, 0);
  cursor: pointer;
  background-color: var(--state-normal);
}

.dc-dropdown-list--enter, .dc-dropdown-list--exit {
  transform: scale(1, 0);
  opacity: 0;
}

.dc-dropdown-list--enter-done {
  transform: scale(1, 1);
  opacity: 1;
}

.dc-dropdown-list__group-header {
  padding: 0.6rem;
  font-size: 1.4rem;
  font-weight: bold;
  color: var(--brand-red-coral);
  height: 3.6rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.dc-dropdown-list__item {
  min-height: 40px;
  display: flex;
  align-items: center;
  padding: 1rem 1.6rem;
  font-size: 1.4rem;
  color: var(--text-general);
}

.dc-dropdown-list__item:hover {
  background-color: var(--state-hover);
}

.dc-dropdown-list__item--active {
  background-color: var(--state-active);
}

[dir="ltr"] .dc-dropdown-list__item-icon {
  margin-right: 8px;
}

[dir="rtl"] .dc-dropdown-list__item-icon {
  margin-left: 8px;
}

.dc-dropdown-list__item--disabled {
  color: var(--text-disabled);
  cursor: not-allowed;
}

.dc-dropdown-list__separator {
  display: flex;
  width: calc(100% - 3.2rem);
  border-bottom: 1px solid var(--border-normal);
  margin: 1.6rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-autocomplete {
  width: 100%;
  position: relative;
}

.dc-autocomplete__trailing-icon {
  position: absolute;
  pointer-events: none;
  cursor: text;
  transition: transform 0.2s ease;
  transform: rotate(0deg);
  transform-origin: 50% 45%;
}

[dir="ltr"] .dc-autocomplete__trailing-icon {
  right: 0;
  margin-right: 1.1rem;
}

[dir="rtl"] .dc-autocomplete__trailing-icon {
  left: 0;
  margin-left: 1.1rem;
}

[dir="ltr"] .dc-autocomplete__trailing-icon--opened {
  transform: rotate(-180deg);
}

[dir="rtl"] .dc-autocomplete__trailing-icon--opened {
  transform: rotate(180deg);
}

.dc-autocomplete__trailing-icon--disabled {
  --fill-color1: var(--text-less-prominent) !important;
}

.dc-autocomplete__trailing-icon .color1-fill {
  fill: var(--text-less-prominent);
}

.dc-autocomplete .dc-input {
  margin-bottom: 0;
}

.dc-autocomplete .dc-input--error .dc-autocomplete__trailing-icon .color1-fill {
  fill: var(--text-loss-danger);
}

.dc-autocomplete .dc-input__field {
  white-space: nowrap;
  text-overflow: ellipsis;
}

.dc-autocomplete .dc-dropdown-list {
  box-shadow: 0 8px 16px 0 var(--shadow-menu);
  background: var(--general-main-2);
}

.dc-autocomplete:focus, .dc-autocomplete[focus-within], .dc-autocomplete:active {
  outline: 0;
}

.dc-autocomplete:focus, .dc-autocomplete:focus-within, .dc-autocomplete:active {
  outline: 0;
}

.dc-autocomplete:focus .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete[focus-within] .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete:active .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill {
  fill: var(--brand-secondary);
}

.dc-autocomplete:focus .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete:focus-within .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete:active .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill {
  fill: var(--brand-secondary);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.skeleton {
  width: 100%;
  height: 100%;
  background-color: var(--semantic-color-monochrome-surface-normal-lowest);
  border-radius: var(--semantic-borderRadius-md);
}

.skeleton.animated {
  animation: var(--motion-duration-moderate) ease-out alternate infinite pulsate;
}

@keyframes pulsate {
  to {
    background-color: var(--semantic-color-monochrome-surface-normal-low);
  }
}

.skeleton.icon {
  width: var(--size-generic-md);
  height: var(--size-generic-md);
}

.skeleton-paragraph {
  display: flex;
  flex-direction: column;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define barspinner */
.barspinner {
  margin: auto;
  width: 6rem;
  height: 2rem;
  white-space: nowrap;
}

.barspinner__rect {
  margin: 0.4rem;
  border-radius: 20px;
  height: 60%;
  width: 0.6rem;
  display: inline-block;
  animation: sk-stretchdelay 1.2s infinite ease-in-out;
}

.barspinner__rect--1 {
  animation-delay: -1.2s;
}

.barspinner__rect--2 {
  animation-delay: -1.1s;
}

.barspinner__rect--3 {
  animation-delay: -1s;
}

.barspinner__rect--4 {
  animation-delay: -0.9s;
}

.barspinner__rect--5 {
  animation-delay: -0.8s;
}

.barspinner--dark .barspinner__rect {
  background-color: var(--brand-secondary);
}

@keyframes sk-stretchdelay {
  0%, 40%, 100% {
    transform: scaleY(1);
  }

  20% {
    transform: scaleY(2);
  }
}
/** @define initial-loader */
.initial-loader {
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  display: flex;
  background: transparent;
}

.initial-loader--fullscreen {
  width: 100vw;
  height: 100vh;
}

@media (min-width: 1024px) {
  .initial-loader--fullscreen {
    height: calc(100vh - 48px - 36px);
  }
}

@media (min-width: 320px) and (max-width: 767px) {
  .initial-loader--fullscreen {
    height: calc(100vh - 48px);
  }
}

.initial-loader__barspinner {
  margin: 5rem auto;
}

.initial-loader__barspinner--rect {
  background-color: var(--brand-secondary);
}

.loading-dtrader-v2__trade, .loading-dtrader-v2__positions, .loading-dtrader-v2__contract-details {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.loading-dtrader-v2__trade {
  background-color: var(--semantic-color-slate-solid-surface-frame-mid);
  padding: 0 var(--core-spacing-400);
  gap: var(--semantic-spacing-general-sm);
  position: relative;
  overflow-x: hidden;
}

.loading-dtrader-v2__trade .skeleton-box,
.loading-dtrader-v2__trade .skeleton-box__trade-types,
.loading-dtrader-v2__trade .skeleton-box__trade-params,
.loading-dtrader-v2__trade .skeleton-box__chart {
  display: flex;
  flex-direction: column;
  border-radius: var(--semantic-borderRadius-md);
  background-color: var(--component-modal-bg);
}

[dir="ltr"] .loading-dtrader-v2__trade .skeleton-box__trade-types,[dir="ltr"] 
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-types,[dir="ltr"] 
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-types,[dir="ltr"] 
.loading-dtrader-v2__trade .skeleton-box__chart__trade-types {
  left: calc(-1 * var(--semantic-spacing-general-sm));
}

[dir="rtl"] .loading-dtrader-v2__trade .skeleton-box__trade-types,[dir="rtl"] 
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-types,[dir="rtl"] 
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-types,[dir="rtl"] 
.loading-dtrader-v2__trade .skeleton-box__chart__trade-types {
  right: calc(-1 * var(--semantic-spacing-general-sm));
}

.loading-dtrader-v2__trade .skeleton-box__trade-types,
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-types,
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-types,
.loading-dtrader-v2__trade .skeleton-box__chart__trade-types {
  position: relative;
  width: 100vw;
  flex-direction: row;
  flex-wrap: nowrap;
  border-radius: 0;
  border-radius: initial;
  padding: var(--semantic-spacing-general-sm) var(--semantic-spacing-general-md);
  gap: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__trade .skeleton-box__trade-types .skeleton,
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-types .skeleton,
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-types .skeleton,
.loading-dtrader-v2__trade .skeleton-box__chart__trade-types .skeleton {
  flex-shrink: 0;
}

.loading-dtrader-v2__trade .skeleton-box__market,
.loading-dtrader-v2__trade .skeleton-box__trade-types__market,
.loading-dtrader-v2__trade .skeleton-box__trade-params__market,
.loading-dtrader-v2__trade .skeleton-box__chart__market {
  padding: 0 var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__trade .skeleton-box__trade-params,
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-params,
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-params,
.loading-dtrader-v2__trade .skeleton-box__chart__trade-params {
  padding: var(--semantic-spacing-general-md);
  gap: var(--semantic-spacing-general-md);
}

.loading-dtrader-v2__trade .skeleton-box__trade-params-row,
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-params-row,
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-params-row,
.loading-dtrader-v2__trade .skeleton-box__chart__trade-params-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.loading-dtrader-v2__trade .skeleton-box__trade-params-column,
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-params-column,
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-params-column,
.loading-dtrader-v2__trade .skeleton-box__chart__trade-params-column {
  display: flex;
  flex-direction: column;
  gap: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__trade .skeleton-box__chart,
.loading-dtrader-v2__trade .skeleton-box__trade-types__chart,
.loading-dtrader-v2__trade .skeleton-box__trade-params__chart,
.loading-dtrader-v2__trade .skeleton-box__chart__chart {
  min-height: 400px;
  padding: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__positions {
  width: 100%;
  background-color: var(--semantic-color-slate-solid-surface-frame-mid);
}

.loading-dtrader-v2__positions .skeleton-box__filters, .loading-dtrader-v2__positions .skeleton-box__total-pnl-or-date {
  display: flex;
  gap: var(--semantic-spacing-gap-md);
  margin: var(--semantic-spacing-gap-md) 0;
  padding: 0 var(--semantic-spacing-gap-md);
}

.loading-dtrader-v2__positions .skeleton-box__tabs {
  display: flex;
  background-color: var(--component-modal-bg);
  width: 100%;
  justify-content: space-around;
  padding: 1.3rem 0;
}

.loading-dtrader-v2__positions .skeleton-box__total-pnl-or-date {
  justify-content: space-between;
}

.loading-dtrader-v2__positions .skeleton-box__contract-cards {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: var(--semantic-spacing-gap-md);
  padding: 0 var(--semantic-spacing-gap-md);
}

.loading-dtrader-v2__contract-details {
  background-color: var(--semantic-color-slate-solid-surface-frame-mid);
  padding: var(--core-spacing-400);
  gap: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__contract-details .skeleton-box,
.loading-dtrader-v2__contract-details .skeleton-box__chart,
.loading-dtrader-v2__contract-details .skeleton-box__details {
  display: flex;
  flex-direction: column;
  border-radius: var(--semantic-borderRadius-md);
  background-color: var(--component-modal-bg);
}

.loading-dtrader-v2__contract-details .skeleton-box__chart,
.loading-dtrader-v2__contract-details .skeleton-box__chart__chart,
.loading-dtrader-v2__contract-details .skeleton-box__details__chart {
  min-height: 360px;
  padding: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__contract-details .skeleton-box__details,
.loading-dtrader-v2__contract-details .skeleton-box__chart__details,
.loading-dtrader-v2__contract-details .skeleton-box__details__details {
  padding: var(--semantic-spacing-general-md);
  gap: var(--semantic-spacing-general-md);
}

.loading-dtrader-v2__contract-details .skeleton-box__details-row,
.loading-dtrader-v2__contract-details .skeleton-box__chart__details-row,
.loading-dtrader-v2__contract-details .skeleton-box__details__details-row {
  display: flex;
  justify-content: space-between;
  padding-top: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__contract-details .skeleton-box__details-row:first-child,
.loading-dtrader-v2__contract-details .skeleton-box__chart__details-row:first-child,
.loading-dtrader-v2__contract-details .skeleton-box__details__details-row:first-child {
  padding-top: 0;
  padding-top: initial;
}

.loading-dtrader-v2__contract-details .skeleton-box__details-row:not(:last-child),
.loading-dtrader-v2__contract-details .skeleton-box__chart__details-row:not(:last-child),
.loading-dtrader-v2__contract-details .skeleton-box__details__details-row:not(:last-child) {
  border-bottom: 1px solid var(--semantic-color-monochrome-border-normal-mid);
  padding-bottom: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__contract-details .skeleton-box__details-column,
.loading-dtrader-v2__contract-details .skeleton-box__chart__details-column,
.loading-dtrader-v2__contract-details .skeleton-box__details__details-column {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: var(--semantic-spacing-general-2xs);
}

.loading-dtrader-v2__contract-card {
  width: 100%;
  height: 10.4rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  gap: var(--semantic-spacing-gap-md);
  flex-shrink: 0;
  padding: var(--semantic-spacing-general-md);
  border-radius: var(--semantic-borderRadius-md);
  background-color: var(--component-modal-bg);
}

.loading-dtrader-v2__contract-card .details,
.loading-dtrader-v2__contract-card .status-and-profit {
  display: flex;
  gap: var(--core-spacing-400);
  align-items: center;
}

.loading-dtrader-v2__contract-card .status-and-profit {
  justify-content: space-between;
}

.loading-dtrader-v2__contract-card .title {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  gap: var(--semantic-spacing-general-xs);
}

.loading-dtrader-v2__contract-card .stake {
  align-self: flex-end;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-btn {
  text-transform: none !important;
}
.dc-btn {
  vertical-align: middle;
  align-items: center;
  justify-content: center;
  touch-action: manipulation;
  cursor: pointer;
  white-space: nowrap;
  padding: 0 1.6rem;
  display: inline-flex;
  border: 0;
  height: 3.2rem;
  border-radius: 4px;
  transition: all 0.2s cubic-bezier(0.65, 0.05, 0.36, 1);
  outline: 0;
  position: relative;
  text-decoration: none;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: transparent;
  /*
   * Text will be transformed to sentence case in JS
   * text-transform is declared in .dc-btn instead of .dc-btn__text
   * to ensure consistency (even for children) as per styleguide
   */
  /* TODO: confirm this button with designer are we still using this? */
  /* TODO: confirm this button with designer are we still using this? */
  /* postcss-bem-linter: ignore */
}

.dc-btn__toggle {
  height: auto;
  padding: 0.8rem 2.5rem;
}

.dc-btn__text, .dc-btn__icon {
  display: flex;
  pointer-events: none;
}

.dc-btn__icon {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: inherit;
  text-align: center;
  line-height: 1.5;
  color: var(--text-general);
  pointer-events: none;
}

[dir="ltr"] .dc-btn__icon {
  padding-right: 0.8rem;
}

[dir="rtl"] .dc-btn__icon {
  padding-left: 0.8rem;
}

[dir="ltr"] .dc-btn__icon--circle {
  padding-right: 0;
}

[dir="rtl"] .dc-btn__icon--circle {
  padding-left: 0;
}

.dc-btn:not([disabled]):hover {
  text-decoration: none;
}

.dc-btn__rounded {
  border-radius: 24px;
}

.dc-btn--plus {
  height: 2.4rem !important;
  border: 1px solid var(--border-hover) !important;
  padding: 0 !important;
}

.dc-btn--plus {
  width: 2.4rem;
  background: inherit;
  background-repeat: no-repeat;
  background-position: center;
}

.dc-btn--circle {
  width: 3.2rem !important;
}

.dc-btn--circle {
  height: 3.2rem;
  border-radius: 50%;
}

.dc-btn--circular {
  border-radius: 100px;
}

.dc-btn--transparent {
  background: transparent;
}

.dc-btn--primary {
  background: var(--button-primary-default);
  color: var(--text-colored-background);
}

.dc-btn--primary:hover:not([disabled]) {
  background: var(--button-primary-hover);
}

.dc-btn--primary:active:not([disabled]) {
  background: var(--button-primary-default);
}

.dc-btn--primary:disabled, .dc-btn--primary[disabled] {
  cursor: not-allowed !important;
}

.dc-btn--primary:disabled, .dc-btn--primary[disabled] {
  opacity: 0.32;
}

.dc-btn--primary .dc-btn__text,
.dc-btn--primary .dc-btn__icon {
  color: var(--text-colored-background);
}

.dc-btn--primary__light {
  background: var(--button-primary-light-default);
}

.dc-btn--primary__light:hover:not([disabled]) {
  background: var(--button-primary-light-hover);
}

.dc-btn--primary__light:active:not([disabled]) {
  background: var(--button-primary-light-default);
}

.dc-btn--primary__light:disabled, .dc-btn--primary__light[disabled] {
  cursor: not-allowed !important;
}

.dc-btn--primary__light:disabled, .dc-btn--primary__light[disabled] {
  opacity: 0.32;
}

.dc-btn--primary__light .dc-btn__text,
.dc-btn--primary__light .dc-btn__icon {
  color: var(--brand-red-coral);
}

.dc-btn--secondary {
  background: transparent;
  border: 1px solid var(--button-secondary-default);
}

.dc-btn--secondary:hover:not([disabled]) {
  background: var(--button-secondary-hover);
}

.dc-btn--secondary:active:not([disabled]) {
  border: 1px solid var(--button-secondary-default);
}

.dc-btn--secondary:disabled, .dc-btn--secondary[disabled] {
  cursor: not-allowed !important;
}

.dc-btn--secondary:disabled, .dc-btn--secondary[disabled] {
  opacity: 0.32;
}

.dc-btn--secondary .dc-btn__text,
.dc-btn--secondary .dc-btn__icon {
  color: var(--text-prominent);
}

.dc-btn--tertiary {
  background: var(--button-tertiary-default);
}

.dc-btn--tertiary:hover:not([disabled]) {
  background: var(--button-tertiary-hover);
}

.dc-btn--tertiary:active:not([disabled]) {
  background: var(--button-tertiary-default);
}

.dc-btn--tertiary .dc-btn__text,
.dc-btn--tertiary .dc-btn__icon {
  color: var(--brand-red-coral);
}

.dc-btn--tertiary:disabled, .dc-btn--tertiary[disabled] {
  cursor: not-allowed !important;
}

.dc-btn--tertiary:disabled, .dc-btn--tertiary[disabled] {
  opacity: 0.32;
}

.dc-btn--alternate {
  background: var(--button-tertiary-default);
  border: 2px solid var(--button-primary-default);
}

.dc-btn--alternate:hover:not([disabled]) {
  background: var(--button-primary-default);
}

.dc-btn--alternate:hover:not([disabled]) .dc-btn__text {
  color: var(--text-colored-background);
}

.dc-btn--alternate .dc-btn__text,
.dc-btn--alternate .dc-btn__icon {
  color: var(--brand-red-coral);
}

.dc-btn--green {
  background: var(--status-success);
}

.dc-btn--green:hover:not([disabled]) {
  background: var(--transparent-success);
}

.dc-btn--green:active:not([disabled]) {
  background: var(--status-success);
}

.dc-btn--green .dc-btn__text,
.dc-btn--green .dc-btn__icon {
  color: var(--text-colored-background);
}

.dc-btn--black {
  background: var(--button-get-started-bg);
}

.dc-btn--black:hover:not([disabled]) {
  opacity: 0.7;
}

.dc-btn--black:active:not([disabled]) {
  opacity: 0.7;
}

.dc-btn--black .dc-btn__text,
.dc-btn--black .dc-btn__icon {
  color: var(--general-main-1);
}

.dc-btn__small {
  height: 2.4rem;
  min-width: 4.8rem;
  border-width: 1px;
}

.dc-btn__small .dc-btn__text {
  font-size: 1.2rem;
}

.dc-btn__medium {
  height: 3.2rem;
  min-width: 5.6rem;
  border-width: 1px;
}

.dc-btn__medium .dc-btn__text {
  font-size: 1.4rem;
}

.dc-btn__large {
  height: 4rem;
  min-width: 6.4rem;
  border-width: 2px;
}

.dc-btn__large .dc-btn__text {
  font-size: 1.4rem;
}

.dc-btn__wide {
  width: 100%;
  height: 4rem;
}

.dc-btn__effect:focus:not(:active):after {
  content: "";
  position: absolute;
  top: -0.1em;
  left: -0.1em;
  bottom: -0.1em;
  right: -0.1em;
  border-radius: inherit;
  border: 0 solid var(--brand-secondary);
  opacity: 0.4;
  animation: buttonEffect 0.4s;
  animation-fill-mode: forwards;
  display: block;
}

.dc-btn__group {
  white-space: nowrap;
}

[dir="ltr"] .dc-btn__group .dc-btn + .dc-btn {
  margin-left: 8px;
}

[dir="rtl"] .dc-btn__group .dc-btn + .dc-btn {
  margin-right: 8px;
}

[dir="ltr"] .dc-btn__button-group {
  border-radius: 0 4px 4px 0;
}

[dir="rtl"] .dc-btn__button-group {
  border-radius: 4px 0 0 4px;
}

.dc-btn .initial-loader--btn {
  background-color: transparent;
  background-color: initial;
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.dc-btn .initial-loader--btn .initial-loader__barspinner--rect {
  background-color: var(--text-colored-background);
}

[dir="ltr"] .dc-btn .initial-loader--btn .barspinner {
  margin: 0.6rem 4px 0 -4px;
}

[dir="rtl"] .dc-btn .initial-loader--btn .barspinner {
  margin: 0.6rem -4px 0 4px;
}

.dc-btn .initial-loader--btn .barspinner__rect {
  height: 35%;
}

@keyframes buttonEffect {
  to {
    opacity: 0;
    top: -0.6em;
    left: -0.6em;
    bottom: -0.6em;
    right: -0.6em;
    border-width: 6px;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-badge {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  color: #ffffff;
}

.dc-badge--contained {
  border: none;
}

.dc-badge--bordered {
  border: 1px solid var(--text-prominent);
  color: var(--text-prominent);
}

.dc-badge--blue {
  background-color: #377cfc;
}

.dc-badge--orange {
  background-color: #ff6444;
}

.dc-badge--red {
  background-color: #ff444f;
}

.dc-badge--gray {
  background-color: #d6dadb;
}

.dc-badge--full-rounded {
  border-radius: 2px;
}

[dir="ltr"] .dc-badge--two-rounded {
  border-bottom-left-radius: 8px;
  border-top-right-radius: 8px;
}

[dir="rtl"] .dc-badge--two-rounded {
  border-bottom-right-radius: 8px;
  border-top-left-radius: 8px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-button-menu */
.dc-button-menu {
  display: flex;
  justify-content: center;
  width: 100%;
  position: relative;
}

.dc-button-menu__button:first-child {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}

[dir="ltr"] .dc-button-menu__button:last-child {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}

[dir="rtl"] .dc-button-menu__button:last-child {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}

.dc-button-menu__button {
  margin: 0;
  border: none;
  border-radius: 0px;
  width: 50%;
  background-color: var(--state-normal);
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.dc-button-menu__button .dc-btn__text {
  display: contents;
}

@media (min-width: 1024px) {
  .dc-button-menu__button:hover:not(.dc-button-menu__button--active) {
    background-color: var(--state-hover) !important;
  }
}

[dir="ltr"] .dc-button-menu__button span {
  text-align: left;
}

[dir="rtl"] .dc-button-menu__button span {
  text-align: right;
}

.dc-button-menu__button span {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: inherit;
  line-height: 1.5;
  color: var(--text-general);
}

.dc-button-menu__button--active {
  background-color: var(--state-active) !important;
}

.dc-button-menu__button--active {
  cursor: auto;
  cursor: initial;
}

[dir="ltr"] .dc-button-menu__button--active span {
  text-align: left;
}

[dir="rtl"] .dc-button-menu__button--active span {
  text-align: right;
}

.dc-button-menu__button--active span {
  font-size: 1.4rem;
  color: var(--text-colored-background);
  font-weight: 700;
  text-transform: inherit;
  line-height: 1.5;
  color: var(--text-prominent);
}

.dc-button-menu__toggle {
  margin: 0;
  border: none;
  border-radius: 6px;
  width: 50%;
  background-color: var(--general-section-1);
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.dc-button-menu__toggle .dc-btn__text {
  display: contents;
}

@media (min-width: 1024px) {
  .dc-button-menu__toggle:hover:not(.dc-button-menu__button--active) {
    background-color: var(--state-hover) !important;
  }
}

[dir="ltr"] .dc-button-menu__toggle span {
  text-align: left;
}

[dir="rtl"] .dc-button-menu__toggle span {
  text-align: right;
}

.dc-button-menu__toggle span {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: inherit;
  line-height: 1.5;
  color: var(--text-less-prominent);
}

.dc-button-menu__toggle--active {
  background-color: var(--state-normal) !important;
}

.dc-button-menu__toggle--active {
  cursor: auto;
  cursor: initial;
}

[dir="ltr"] .dc-button-menu__toggle--active span {
  text-align: left;
}

[dir="rtl"] .dc-button-menu__toggle--active span {
  text-align: right;
}

.dc-button-menu__toggle--active span {
  font-size: 1.4rem;
  color: var(--text-colored-background);
  font-weight: 700;
  text-transform: inherit;
  line-height: 1.5;
  color: var(--text-prominent);
}

[dir="ltr"] .dc-button-menu__counter {
  margin-left: 0.4rem;
}

[dir="rtl"] .dc-button-menu__counter {
  margin-right: 0.4rem;
}

.dc-button-menu__wrapper {
  position: relative;
  border-radius: 4px;
  width: 100%;
  background-color: var(--state-normal);
  display: flex;
}

.dc-button-menu__wrapper .dc-button-menu__button, .dc-button-menu__wrapper .dc-button-menu__button--active {
  background-color: rgba(0, 0, 0, 0) !important;
}

.dc-button-menu__wrapper .dc-button-menu__button, .dc-button-menu__wrapper .dc-button-menu__button--active {
  z-index: 1;
  padding: 0.8rem 0.6rem;
  white-space: normal;
}

.dc-button-menu__wrapper .dc-button-menu__button .dc-btn__text, .dc-button-menu__wrapper .dc-button-menu__button--active .dc-btn__text {
  line-height: normal;
}

.dc-button-menu__wrapper .dc-button-menu__button:nth-last-child(2) {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}

.dc-button-menu--highlight {
  display: block;
  position: absolute;
  content: "";
  height: 100%;
  top: 0;
  left: 0;
  z-index: 0;
  transition: transform 0.25s ease;
  pointer-events: none;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-icon, .dc-popover__target__icon .info:hover {
  --fill-color1: var(--text-general);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: var(--general-section-1);
  --fill-color4: var(--icon-grey-background);
  --fill-color5: var(--text-prominent);
}

.dc-icon--disabled, .dc-popover__target__icon--disabled .info:hover, .dc-popover__target__icon--disabled .info {
  --fill-color1: var(--text-disabled);
  --fill-color2: var(--text-disabled);
}

.dc-icon--active {
  --fill-color1: #ffffff;
  --fill-color2: #ffffff;
}

.dc-icon--green {
  --fill-color1: var(--text-profit-success);
  --fill-color2: var(--text-profit-success);
  --fill-color3: #ffffff;
}

.dc-icon--red {
  --fill-color1: var(--text-loss-danger);
  --fill-color2: var(--text-loss-danger);
  --fill-color3: #ffffff;
}

.dc-icon--secondary, .dc-popover__target__icon .info {
  --fill-color1: var(--text-less-prominent);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: #ffffff;
}

.dc-icon--brand {
  --fill-color1: var(--brand-red-coral);
  --fill-color2: var(--brand-secondary);
  --fill-color3: #ffffff;
}

.dc-icon--black {
  --fill-color1: var(--icon-black-plus);
}

.dc-icon--orange {
  --fill-color1: var(--status-warning);
}

.dc-popover__wrapper {
  position: relative;
}

.dc-popover__container {
  position: absolute;
  left: 0;
  top: 0;
  width: 280px;
}

.dc-popover__container-relative {
  position: relative;
}

.dc-popover__target__icon .counter {
  color: var(--brand-red-coral);
  font-size: 10px;
  font-weight: bold;
  line-height: 1.4em;
  position: absolute;
  top: 50%;
  transform: translateY(-65%);
}

.dc-popover__bubble {
  font-size: 1.2rem;
  color: var(--text-colored-background);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.25;
  cursor: help;
  position: relative;
  padding: 0.8rem;
  max-width: 31.7rem;
  border-radius: 4px;
  display: flex;
  flex-direction: row;
  background: var(--general-active);
  color: var(--text-prominent);
  z-index: 1;
}

.dc-popover__bubble__icon {
  flex-grow: 1;
  padding-top: 3px;
}

[dir="ltr"] .dc-popover__bubble__icon {
  margin-right: 0.7em;
}

[dir="rtl"] .dc-popover__bubble__icon {
  margin-left: 0.7em;
}

.dc-popover__bubble__text {
  flex-grow: 2;
}

[dir="ltr"] .dc-popover__bubble__text {
  direction: ltr;
}

[dir="rtl"] .dc-popover__bubble__text {
  direction: rtl;
}

.dc-popover__bubble--error {
  background-color: var(--status-danger);
}

[dir="ltr"] .dc-popover__bubble--error {
  direction: ltr;
}

[dir="rtl"] .dc-popover__bubble--error {
  direction: rtl;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-popover__trade-params {
    max-width: calc(100vw - 6.7rem);
  }
}

.mobile-widget__item-popover,
.accu-info-display__popover {
  max-width: 28rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .accu-info-display__popover {
    max-width: 33rem;
  }

  [dir="ltr"] .accu-info-display__popover {
    margin-right: 1rem;
  }

  [dir="rtl"] .accu-info-display__popover {
    margin-left: 1rem;
  }
}

.react-tiny-popover-container--disabled-pointer-event {
  pointer-events: none;
}

.react-tiny-popover-cursor-option {
  cursor: pointer;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-calendar */
.dc-calendar {
  outline: 0;
  border-radius: 5px;
  z-index: 999;
  box-sizing: border-box;
  font-size: 1rem;
  background: var(--general-main-2);
  box-shadow: 0 2px 8px 0 var(--shadow-menu);
}

.dc-calendar__header, .dc-calendar__footer {
  position: relative;
  display: flex;
  align-items: center;
  height: 5rem;
  border-radius: 5px;
  padding: 1.6rem;
  box-sizing: border-box;
}

.dc-calendar__header {
  justify-content: center;
}

[dir="ltr"] .dc-calendar__footer :last-child:not(:only-child),
[dir="ltr"] .dc-calendar__footer .dc-calendar__btn--today {
  margin-left: auto;
}

[dir="rtl"] .dc-calendar__footer :last-child:not(:only-child),
[dir="rtl"] .dc-calendar__footer .dc-calendar__btn--today {
  margin-right: auto;
}

.dc-calendar__body {
  border-top: 0.1rem solid var(--general-section-2);
  border-bottom: 0.1rem solid var(--general-section-2);
}

.dc-calendar__body--date, .dc-calendar__body--month, .dc-calendar__body--year, .dc-calendar__body--decade {
  display: grid;
  grid-gap: 1.2rem;
  padding: 0.8rem 2rem;
}

.dc-calendar__body--date .dc-calendar__cell, .dc-calendar__body--month .dc-calendar__cell, .dc-calendar__body--year .dc-calendar__cell, .dc-calendar__body--decade .dc-calendar__cell {
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 5px;
}

.dc-calendar__body--date {
  grid-template-columns: repeat(7, 2.4rem);
  grid-auto-rows: 2.4rem;
}

.dc-calendar__body--date .dc-calendar__cell {
  width: 100%;
  height: 100%;
}

.dc-calendar__body--month, .dc-calendar__body--year, .dc-calendar__body--decade {
  grid-template-columns: repeat(3, minmax(7.2rem, 1fr));
  grid-auto-rows: minmax(4.2rem, auto);
}

.dc-calendar__body--month .dc-calendar__cell, .dc-calendar__body--year .dc-calendar__cell, .dc-calendar__body--decade .dc-calendar__cell {
  width: 5.6rem;
  height: 3.2rem;
}

.dc-calendar__body--month .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled), .dc-calendar__body--year .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled), .dc-calendar__body--decade .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled) {
  color: var(--text-general);
}

.dc-calendar__body--decade .dc-calendar__cell {
  width: 100%;
}

.dc-calendar__icon {
  cursor: pointer;
}

[dir="ltr"] .dc-calendar__icon {
  right: 5%;
}

[dir="rtl"] .dc-calendar__icon {
  left: 5%;
}

.dc-calendar__icon--today:hover {
  cursor: pointer;
}

.dc-calendar__btn {
  text-align: center;
  padding: 0 0.2rem;
  font-weight: bold;
  cursor: pointer;
  border: none;
  outline: none;
  background: none;
}

.dc-calendar__btn--disabled {
  cursor: default;
  transition: none;
}

.dc-calendar__btn--disabled .dc-calendar__icon {
  cursor: default;
}

.dc-calendar__btn--is-hidden {
  display: none;
}

[dir="ltr"] .dc-calendar__btn--select {
  text-align: left;
}

[dir="rtl"] .dc-calendar__btn--select {
  text-align: right;
}

.dc-calendar__btn--select {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  line-height: 1.5;
  color: var(--text-prominent);
}

.dc-calendar__btn--prev-year, .dc-calendar__btn--next-year, .dc-calendar__btn--prev-month, .dc-calendar__btn--next-month {
  position: absolute;
  padding: 0 0.5em;
  height: 1.4em;
}

[dir="ltr"] .dc-calendar__btn--prev-year {
  left: 7%;
}

[dir="rtl"] .dc-calendar__btn--prev-year {
  right: 7%;
}

[dir="ltr"] .dc-calendar__btn--next-year {
  right: 7%;
}

[dir="rtl"] .dc-calendar__btn--next-year {
  left: 7%;
}

[dir="ltr"] .dc-calendar__btn--prev-month {
  left: 14%;
}

[dir="rtl"] .dc-calendar__btn--prev-month {
  right: 14%;
}

[dir="ltr"] .dc-calendar__btn--next-month {
  right: 14%;
}

[dir="rtl"] .dc-calendar__btn--next-month {
  left: 14%;
}

[dir="ltr"] .dc-calendar__cell {
  text-align: left;
}

[dir="rtl"] .dc-calendar__cell {
  text-align: right;
}

.dc-calendar__cell {
  font-size: 1.2rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  line-height: 1.25;
  align-self: center;
  justify-self: center;
  position: relative;
  cursor: pointer;
  color: var(--text-general);
  box-sizing: border-box;
}

.dc-calendar__cell--hover {
  color: var(--text-general);
  background: var(--state-hover);
}

.dc-calendar__cell:nth-child(7n):before {
  padding: 0;
  border-radius: 4px;
}

.dc-calendar__cell:nth-child(7n+1):before {
  border-radius: 4px;
}

[dir="ltr"] .dc-calendar__cell:nth-child(7n+1):before {
  left: 0;
}

[dir="rtl"] .dc-calendar__cell:nth-child(7n+1):before {
  right: 0;
}

.dc-calendar__cell:nth-child(7n+1):after {
  content: none;
}

[dir="ltr"] .dc-calendar__cell--bold {
  text-align: left;
}

[dir="rtl"] .dc-calendar__cell--bold {
  text-align: right;
}

.dc-calendar__cell--bold {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  line-height: 1.5;
  color: var(--text-prominent);
}

.dc-calendar__cell--disabled:not(.dc-calendar__cell--today):not(.dc-calendar__cell--between), .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--between) {
  color: var(--text-disabled);
  transition: none;
  cursor: default;
}

.dc-calendar__cell--is-hidden {
  display: none;
}

.dc-calendar__cell--today {
  font-weight: bold;
  color: var(--text-prominent);
  border: 1px solid var(--state-active);
}

.dc-calendar__cell--today-duration {
  background: var(--state-active);
}

.dc-calendar__cell--active {
  font-weight: bold;
  color: var(--text-prominent);
  background: var(--state-active);
}

.dc-calendar__cell--active:hover {
  background: var(--state-active);
}

.dc-calendar__cell--active-duration {
  background: var(--state-active);
}

.dc-calendar__cell--active-duration:after {
  position: absolute;
  content: "";
  width: 100%;
  top: 0;
  z-index: -1;
  height: 100%;
  background: var(--state-active);
}

[dir="ltr"] .dc-calendar__cell--active-duration:after {
  right: 50%;
  padding-left: 1rem;
}

[dir="rtl"] .dc-calendar__cell--active-duration:after {
  left: 50%;
  padding-right: 1rem;
}

.dc-calendar__cell--between {
  font-weight: bold;
  color: var(--text-prominent);
  background: var(--state-active);
}

.dc-calendar__cell--between-hover:before {
  position: absolute;
  content: "";
  width: 100%;
  z-index: -2;
  height: 100%;
  background: var(--state-hover);
}

[dir="ltr"] .dc-calendar__cell--between-hover:before {
  padding-left: 3.2rem;
}

[dir="rtl"] .dc-calendar__cell--between-hover:before {
  padding-right: 3.2rem;
}

.dc-calendar__cell--between:hover {
  background: var(--state-active);
}

.dc-calendar__cell--between:before {
  position: absolute;
  content: "";
  width: 100%;
  z-index: -1;
  height: 100%;
  background: var(--state-active);
}

[dir="ltr"] .dc-calendar__cell--between:before {
  padding-left: 3.2rem;
}

[dir="rtl"] .dc-calendar__cell--between:before {
  padding-right: 3.2rem;
}

.dc-calendar__cell-tooltip {
  position: absolute;
  display: inline-grid;
  cursor: pointer;
  height: 0;
  top: 0;
  justify-content: center;
  width: 100%;
}

[dir="ltr"] .dc-calendar__cell-tooltip {
  left: 0;
}

[dir="rtl"] .dc-calendar__cell-tooltip {
  right: 0;
}

.dc-calendar__cell-tooltip-icon {
  margin-top: 0.1rem;
  display: inherit;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
[dir="ltr"] .dc-card {
  text-align: left;
}
[dir="rtl"] .dc-card {
  text-align: right;
}
.dc-card {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  line-height: 1.5;
  border: 1px solid var(--border-normal);
  padding: 1.6rem;
  border-radius: 4px;
}

.dc-card__wrapper {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: auto;
  margin: 1.6rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-carousel {
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.dc-carousel--mt5 {
  justify-content: initial;
}

.dc-carousel__container {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
}

.dc-carousel__box {
  overflow: hidden;
}

.dc-carousel__box--mt5 {
  margin: 0 -1.4rem;
}

.dc-carousel__wrapper {
  display: flex;
  flex-direction: row;
  transition: transform 0.3s linear;
  width: -moz-fit-content;
  width: fit-content;
  padding: 0.5rem 0;
  height: 100%;
}

.dc-carousel__wrapper--mt5 {
  padding-top: 0;
  padding-top: initial;
}

.dc-carousel__card {
  display: flex;
  flex-direction: column;
  padding-bottom: 0.8rem;
}

.dc-carousel__nav {
  align-items: center;
  box-sizing: border-box;
  display: flex;
  width: 100%;
  padding: 0 2.4rem;
  overflow: hidden;
  margin-bottom: 2.4rem;
  justify-content: space-between;
}

.dc-carousel__nav--upper {
  margin-bottom: 0;
}

.dc-carousel__nav-list {
  display: inline-block;
  text-align: center;
  margin: 0 auto;
  position: relative;
}

.dc-carousel__nav--lower {
  margin-bottom: 0;
}

.dc-carousel__nav-item {
  width: 0.8rem;
  height: 0.8rem;
  border-radius: 50%;
  display: inline-block;
  margin: 0 0.8rem;
  cursor: pointer;
}

.dc-carousel__nav-item--active {
  position: absolute;
  top: 0;
  cursor: auto;
  cursor: initial;
  transition: transform 0.3s linear;
}

[dir="ltr"] .dc-carousel__nav-item--active {
  left: 0;
}

[dir="rtl"] .dc-carousel__nav-item--active {
  right: 0;
}

.dc-carousel__icon {
  cursor: pointer;
}

.dc-carousel__icon--left {
  position: relative;
}

[dir="ltr"] .dc-carousel__icon--left {
  right: 5.2rem;
}

[dir="rtl"] .dc-carousel__icon--left {
  left: 5.2rem;
}

.dc-carousel__icon--mt5 {
  background: var(--icon-grey-background);
  width: 6rem;
  height: 6rem;
  border-radius: 50%;
  transform: scale(0.5);
  line-height: 6rem;
  text-align: center;
  justify-content: space-between;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.cfd-compare-accounts-carousel {
  position: relative;
  --slide-spacing: 1rem;
  --slide-size: 50%;
  --slide-height: 19rem;
  overflow: hidden;
}

.cfd-compare-accounts-carousel__viewport {
  width: 100%;
  height: 100%;
}

@media (max-width: 1279px) {
  .cfd-compare-accounts-carousel__viewport {
    padding-bottom: 6rem;
  }
}

.cfd-compare-accounts-carousel__container {
  backface-visibility: hidden;
  display: flex;
  touch-action: pan-y;
  flex-direction: row;
  max-height: auto;
  margin: 1.6rem;
  transition: transform 0s ease-in-out;
}

@media (max-width: 1279px) {
  .cfd-compare-accounts-carousel__container {
    justify-content: safe center;
  }
}

.cfd-compare-accounts-carousel__slide {
  flex: 0 0 var(--slide-size);
  min-width: 0;
  position: relative;
}

[dir="ltr"] .cfd-compare-accounts-carousel__slide {
  padding-left: var(--slide-spacing);
}

[dir="rtl"] .cfd-compare-accounts-carousel__slide {
  padding-right: var(--slide-spacing);
}

.cfd-compare-accounts-carousel__slide__img {
  display: block;
  height: var(--slide-height);
  width: 100%;
  -o-object-fit: cover;
     object-fit: cover;
}

.cfd-compare-accounts-carousel__button {
  background-color: var(--general-main-1);
  z-index: 1;
  color: var(--background-site);
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  top: 50%;
  cursor: pointer;
  width: 4rem;
  height: 4rem;
  border: 1px solid var(--general-background-main);
  border-radius: 50%;
  box-shadow: 0px 0px 24px rgba(0, 0, 0, 0.08), 0px 24px 24px rgba(0, 0, 0, 0.08);
}

[dir="ltr"] .cfd-compare-accounts-carousel__button--prev {
  left: 1.6rem;
}

[dir="rtl"] .cfd-compare-accounts-carousel__button--prev {
  right: 1.6rem;
}

[dir="ltr"] .cfd-compare-accounts-carousel__button--next {
  right: 1.6rem;
}

[dir="rtl"] .cfd-compare-accounts-carousel__button--next {
  left: 1.6rem;
}

.cfd-compare-accounts-carousel__button:disabled {
  opacity: 0.3;
  display: none;
}

.cfd-compare-accounts-carousel__button__svg {
  width: 50%;
  height: 35%;
}

@media (min-width: 320px) and (max-width: 767px) {
  .cfd-compare-accounts-carousel__button {
    display: none;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-clipboard {
  cursor: pointer;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-checkbox {
  display: flex;
  justify-content: flex-start;
  cursor: pointer;
  align-items: center;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: transparent;
}

.dc-checkbox__input {
  display: none;
}

.dc-checkbox__box {
  outline: none !important;
}

.dc-checkbox__box {
  display: flex;
  width: 16px;
  height: 16px;
  transition: 0.3s ease-in-out;
  flex-shrink: 0;
  margin: 0 8px;
  border-radius: 2px;
  align-self: center;
  box-sizing: border-box;
  border: 2px solid var(--text-less-prominent);
}

.dc-checkbox__box--active {
  border: none;
  background-color: var(--brand-red-coral);
}

.dc-checkbox--active {
  border: none;
  background-color: var(--brand-red-coral);
}

.dc-checkbox--disabled {
  cursor: not-allowed !important;
}

.dc-checkbox--disabled {
  opacity: 0.5;
}

.dc-checkbox--grey-disabled {
  background-color: var(--checkbox-disabled-grey);
}

.dc-checkbox__label--error {
  color: var(--text-loss-danger) !important;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-checklist {
  max-width: 400px;
}

.dc-checklist__item {
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: solid 1px var(--border-normal);
  padding: 12px;
}

[dir="ltr"] .dc-checklist__item-text {
  text-align: left;
}

[dir="rtl"] .dc-checklist__item-text {
  text-align: right;
}

.dc-checklist__item-text {
  max-width: 80%;
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  line-height: 1.5;
}

.dc-checklist__item-status {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 32px;
  height: 32px;
}

.dc-checklist__item-status--action {
  cursor: pointer;
  background-color: var(--brand-red-coral);
  border-radius: 4px;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
}

.dc-checklist__item-status--disabled {
  pointer-events: none;
}

.dc-checklist__item-status--button {
  width: auto;
}

.dc-checklist__item--disabled {
  opacity: 0.5;
  pointer-events: none;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-circular-progress {
  position: relative;
  line-height: 0;
  width: -moz-fit-content;
  width: fit-content;
}

.dc-circular-progress__bar {
  transform-origin: 50% 50%;
  transition: stroke-dashoffset 1s;
  stroke: var(--brand-secondary);
}

[dir="ltr"] .dc-circular-progress__bar {
  transform: scaleX(-1) rotate(-90deg);
}

[dir="rtl"] .dc-circular-progress__bar {
  transform: scaleX(-1) rotate(90deg);
}

.dc-circular-progress__bar--warning {
  stroke: var(--status-warning);
}

.dc-circular-progress__bar--danger {
  stroke: var(--status-danger);
}

[dir="ltr"] .dc-circular-progress--clockwise {
  transform: rotate(-90deg);
}

[dir="rtl"] .dc-circular-progress--clockwise {
  transform: rotate(90deg);
}

.dc-circular-progress__icon {
  position: absolute;
  width: 1.6rem;
  height: 100%;
  top: 50%;
}

[dir="ltr"] .dc-circular-progress__icon {
  left: 50%;
  transform: translate(-50%, -50%);
}

[dir="rtl"] .dc-circular-progress__icon {
  right: 50%;
  transform: translate(50%, -50%);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** Slideout Animation */
@keyframes SlideIn {
  from {
    opacity: 0;
    max-height: 0;
  }

  to {
    opacity: 1;
    height: auto;
    max-height: 100vh;
  }
}

@keyframes SlideOut {
  from {
    opacity: 1;
    max-height: 100vh;
  }

  to {
    opacity: 0;
    max-height: 0;
  }
}

.dc-collapsible {
  padding: 0.8rem;
  border-radius: 0.4rem;
  background-color: var(--general-section-1);
}

.dc-collapsible--has-collapsible-btn {
  padding-top: 0;
}

.dc-collapsible--has-title {
  padding-bottom: 0;
}

.dc-collapsible__button {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 32px;
}

.dc-collapsible__button--handle {
  align-items: baseline;
  height: 3.8rem;
}

.dc-collapsible__icon {
  transition: transform 0.3s ease-in-out;
}

.dc-collapsible__icon--handle {
  width: 4rem;
  height: 0.4rem;
  margin-top: 0.8rem;
  border-radius: 0.2rem;
  background-color: var(--general-active);
}

[dir="ltr"] .dc-collapsible__icon--top {
  transform: rotate(180deg);
}

[dir="rtl"] .dc-collapsible__icon--top {
  transform: rotate(-180deg);
}

.dc-collapsible__icon--top.dc-collapsible__icon--is-open {
  transform: rotate(0deg);
}

[dir="ltr"] .dc-collapsible__icon--bottom.dc-collapsible__icon--is-open {
  transform: rotate(180deg);
}

[dir="rtl"] .dc-collapsible__icon--bottom.dc-collapsible__icon--is-open {
  transform: rotate(-180deg);
}

.dc-collapsible__item--collapsed {
  margin: 0 !important;
  margin: initial !important;
  padding: 0 !important;
  padding: initial !important;
}

.dc-collapsible__item--collapsed {
  opacity: 0;
  max-height: 0;
  overflow: hidden;
}

[dir="ltr"] .dc-collapsible__title {
  margin-left: 0;
  margin-right: auto;
}

[dir="rtl"] .dc-collapsible__title {
  margin-right: 0;
  margin-left: auto;
}

.dc-collapsible .trade-container__fieldset {
  flex: 1;
}

.dc-collapsible .trade-container__fieldset .dc-button-menu__wrapper {
  height: 4rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
.dc-content-expander__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.dc-content-expander__select-arrow .color1-fill {
  fill: var(--text-general);
}

.dc-content-expander__select-arrow .color1-stroke {
  stroke: var(--text-general);
}

.dc-content-expander__select-arrow .color2-fill {
  fill: none;
}

.dc-content-expander__select-arrow .color2-stroke {
  stroke: none;
}
.active.dc-content-expander__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.active.dc-content-expander__select-arrow .color1-fill {
  fill: var(--text-prominent);
}

.active.dc-content-expander__select-arrow .color1-stroke {
  stroke: var(--text-prominent);
}

.active.dc-content-expander__select-arrow .color2-fill {
  fill: none;
}

.active.dc-content-expander__select-arrow .color2-stroke {
  stroke: none;
}
.disabled.dc-content-expander__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.disabled.dc-content-expander__select-arrow .color1-fill {
  fill: var(--text-disabled);
}

.disabled.dc-content-expander__select-arrow .color1-stroke {
  stroke: var(--text-disabled);
}

.disabled.dc-content-expander__select-arrow .color2-fill {
  fill: none;
}

.disabled.dc-content-expander__select-arrow .color2-stroke {
  stroke: none;
}
.white.dc-content-expander__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.white.dc-content-expander__select-arrow .color1-fill {
  fill: var(--text-prominent);
}

.white.dc-content-expander__select-arrow .color1-stroke {
  stroke: var(--text-prominent);
}
.border_hover_color.dc-content-expander__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.border_hover_color.dc-content-expander__select-arrow .color1-fill {
  fill: var(--text-prominent);
}

.border_hover_color.dc-content-expander__select-arrow .color1-stroke {
  stroke: var(--text-prominent);
}
.secondary.dc-content-expander__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.secondary.dc-content-expander__select-arrow .color1-fill {
  fill: var(--text-less-prominent);
}

.secondary.dc-content-expander__select-arrow .color1-stroke {
  stroke: var(--text-less-prominent);
}

/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-content-expander {
  cursor: pointer;
  display: flex;
  align-items: center;
  padding: 0 0.8rem;
  height: 4rem;
  position: relative;
}

.dc-content-expander__content {
  transition: opacity 0.25s linear;
}

.dc-content-expander__content--enter {
  opacity: 0;
}

.dc-content-expander__content--enter-done {
  opacity: 1;
}

.dc-content-expander__content--exit {
  opacity: 0;
}

.dc-content-expander__title {
  display: block;
}

[dir="ltr"] .dc-content-expander__title {
  padding-right: 0.8rem;
}

[dir="rtl"] .dc-content-expander__title {
  padding-left: 0.8rem;
}

.dc-content-expander__title--spaced {
  flex: 1;
}

[dir="ltr"] .dc-content-expander--expanded .dc-content-expander__select-arrow {
  transform: rotate(180deg);
}

[dir="rtl"] .dc-content-expander--expanded .dc-content-expander__select-arrow {
  transform: rotate(-180deg);
}

.dc-content-expander--expanded .dc-content-expander__select-arrow--invert {
  transform: rotate(0deg);
}

.dc-content-expander__select-arrow {
  pointer-events: none;
  transform: rotate(0);
  transform-origin: 50% 45%;
  transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
}

[dir="ltr"] .dc-content-expander__select-arrow--invert {
  transform: rotate(180deg);
}

[dir="rtl"] .dc-content-expander__select-arrow--invert {
  transform: rotate(-180deg);
}

.dc-content-expander__wrapper {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-counter {
  align-items: center;
  background: var(--status-danger);
  border-radius: 0.8rem;
  color: var(--text-colored-background);
  display: inline-flex;
  font-size: 1rem;
  font-weight: bold;
  justify-content: center;
  line-height: 1;
  padding: 3px 5px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.composite-checkbox {
  border-radius: 0.4rem;
  border: 1px solid var(--border-normal);
  padding: 1.6rem;
  height: 100%;
  cursor: pointer;
}

.composite-checkbox__description {
  margin: 1.2rem 0 0;
}

.composite-checkbox:hover:not(.composite-checkbox--active) {
  border: 1px solid var(--border-hover);
}

.composite-checkbox--active {
  border: 1px solid var(--border-active);
}

[dir="ltr"] .composite-checkbox .dc-checkbox__box {
  margin-left: 0;
}

[dir="rtl"] .composite-checkbox .dc-checkbox__box {
  margin-right: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-progress-slider */
.dc-progress-slider {
  position: relative;
  width: 100%;
  padding: 0;
  padding: initial;
  box-sizing: border-box;
  margin: 8px 0;
  border-bottom: 1px solid var(--general-section-1);
}

.dc-progress-slider--completed {
  border-bottom: 1px solid var(--general-section-6);
  margin: 0.4rem 0 0.8rem;
}

.dc-progress-slider__track {
  background: var(--text-disabled);
  position: relative;
  margin: 2px 0 8px;
  height: 6px;
  width: 100%;
  border-radius: 8px;
}

.dc-progress-slider__ticks {
  position: relative;
}

.dc-progress-slider__ticks-wrapper {
  position: relative;
  margin: 2px 0 8px;
  height: 6px;
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}

.dc-progress-slider__ticks-step {
  height: 6px;
  width: 100%;
  margin: 0 2px;
  position: relative;
  background: var(--state-hover);
}

.dc-progress-slider__ticks-step:before {
  position: absolute;
  content: "";
  transition: transform 0.25s ease-in;
  transform: scale3d(0, 1, 1);
  top: 0;
  height: 6px;
  width: 100%;
  background-color: var(--brand-secondary);
}

[dir="ltr"] .dc-progress-slider__ticks-step:before {
  transform-origin: left;
  left: 0;
}

[dir="rtl"] .dc-progress-slider__ticks-step:before {
  transform-origin: right;
  right: 0;
}

.dc-progress-slider__ticks-step--marked:before {
  transform: scale3d(1, 1, 1);
}

[dir="ltr"] .dc-progress-slider__ticks-step:first-child {
  margin-left: 0;
}

[dir="rtl"] .dc-progress-slider__ticks-step:first-child {
  margin-right: 0;
}

[dir="ltr"] .dc-progress-slider__ticks-step:last-child {
  margin-right: 0;
}

[dir="rtl"] .dc-progress-slider__ticks-step:last-child {
  margin-left: 0;
}

[dir="ltr"] .dc-progress-slider__ticks-step:first-child, [dir="ltr"] .dc-progress-slider__ticks-step:first-child:before {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}

[dir="rtl"] .dc-progress-slider__ticks-step:first-child, [dir="rtl"] .dc-progress-slider__ticks-step:first-child:before {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}

[dir="ltr"] .dc-progress-slider__ticks-step:last-child, [dir="ltr"] .dc-progress-slider__ticks-step:last-child:before {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}

[dir="rtl"] .dc-progress-slider__ticks-step:last-child, [dir="rtl"] .dc-progress-slider__ticks-step:last-child:before {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}

.dc-progress-slider__ticks-caption {
  display: flex;
  justify-content: space-between;
}

.dc-progress-slider__line {
  background: var(--state-hover);
  position: absolute;
  top: 0;
  height: 100%;
  border-radius: 8px;
  pointer-events: none;
  transition: width 0.3s;
}

[dir="ltr"] .dc-progress-slider__line {
  left: 0;
}

[dir="rtl"] .dc-progress-slider__line {
  right: 0;
}

.dc-progress-slider__line--ticks {
  height: 2px;
}

.dc-progress-slider__line--green {
  background: var(--status-success) !important;
}

.dc-progress-slider__line--yellow {
  background: var(--status-warning) !important;
}

.dc-progress-slider__line--red {
  background: var(--status-danger) !important;
}

.dc-progress-slider__infinite-loader {
  position: relative;
  height: 4px;
  display: block;
  width: 100%;
  background-color: var(--state-hover);
  border-radius: 2px;
  background-clip: padding-box;
  margin: 0.5rem 0 1rem;
  overflow: hidden;
}

.dc-progress-slider__infinite-loader--indeterminate {
  background-color: var(--state-active);
}

.dc-progress-slider__infinite-loader--indeterminate:before, .dc-progress-slider__infinite-loader--indeterminate:after {
  content: "";
  position: absolute;
  background-color: inherit;
  top: 0;
  bottom: 0;
  will-change: left, right;
}

[dir="ltr"] .dc-progress-slider__infinite-loader--indeterminate:before, [dir="ltr"] .dc-progress-slider__infinite-loader--indeterminate:after {
  left: 0;
}

[dir="rtl"] .dc-progress-slider__infinite-loader--indeterminate:before, [dir="rtl"] .dc-progress-slider__infinite-loader--indeterminate:after {
  right: 0;
}

.dc-progress-slider__infinite-loader--indeterminate:before {
  animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
}

.dc-progress-slider__infinite-loader--indeterminate:after {
  animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
  animation-delay: 1.15s;
}

@keyframes indeterminate {
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
}

@keyframes indeterminate-short {
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define .dc-currency-badge */
.dc-currency-badge {
  align-self: flex-start;
  padding: 0.3rem;
  background-color: #85acb0;
  border-radius: 4px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-tick-progress {
  display: grid;
  grid-gap: 0.8rem;
}

.dc-tick-progress__tick {
  border-radius: 50%;
  width: 0.8rem;
  height: 0.8rem;
  background-color: var(--fill-disabled);
}

.dc-tick-progress__tick--on {
  background-color: var(--brand-secondary);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-progress-slider-mobile {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.dc-progress-slider-mobile__timer {
  margin: 0.2rem auto;
}

.dc-progress-slider-mobile__infinite-loader {
  position: relative;
  height: 4px;
  display: block;
  width: 100%;
  background-color: var(--state-hover);
  border-radius: 2px;
  background-clip: padding-box;
  margin: 0.5rem 0 1rem;
  overflow: hidden;
}

.dc-progress-slider-mobile__infinite-loader--indeterminate {
  background-color: var(--state-active);
}

.dc-progress-slider-mobile__infinite-loader--indeterminate:before, .dc-progress-slider-mobile__infinite-loader--indeterminate:after {
  content: "";
  position: absolute;
  background-color: inherit;
  top: 0;
  bottom: 0;
  will-change: left, right;
}

[dir="ltr"] .dc-progress-slider-mobile__infinite-loader--indeterminate:before, [dir="ltr"] .dc-progress-slider-mobile__infinite-loader--indeterminate:after {
  left: 0;
}

[dir="rtl"] .dc-progress-slider-mobile__infinite-loader--indeterminate:before, [dir="rtl"] .dc-progress-slider-mobile__infinite-loader--indeterminate:after {
  right: 0;
}

.dc-progress-slider-mobile__infinite-loader--indeterminate:before {
  animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
}

.dc-progress-slider-mobile__infinite-loader--indeterminate:after {
  animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
  animation-delay: 1.15s;
}

@keyframes indeterminate {
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
}

@keyframes indeterminate-short {
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-contract-card-dialog; weak */
.dc-contract-card-dialog {
  position: fixed;
  display: grid;
  background: var(--general-main-2);
  border-radius: 4px;
  box-shadow: 0 4px 8px 2px var(--shadow-menu);
  transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1), opacity 0.25s linear;
  padding: 1.6rem;
  width: 240px;
  z-index: 99;
}

.dc-contract-card-dialog--enter-done {
  opacity: 1;
  transform: translate3d(0, 0, 0);
}

.dc-contract-card-dialog--enter, .dc-contract-card-dialog--exit {
  opacity: 0;
}

[dir="ltr"] .dc-contract-card-dialog--enter, [dir="ltr"] .dc-contract-card-dialog--exit {
  transform: translate3d(-20px, 0, 0);
}

[dir="rtl"] .dc-contract-card-dialog--enter, [dir="rtl"] .dc-contract-card-dialog--exit {
  transform: translate3d(20px, 0, 0);
}

@media (max-width: 1279px) {
  .dc-contract-card-dialog__input {
    border-bottom: 1px solid var(--border-disabled);
    padding: 1rem 1.6rem;
  }

  .dc-contract-card-dialog__input .dc-popover {
    padding: 0.6rem 1rem;
  }
}

.dc-contract-card-dialog__input .dc-input-wrapper__input {
  border: 1px solid var(--border-normal);
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}

.dc-contract-card-dialog__input--currency {
  position: absolute;
  height: 3.2rem;
  align-items: center;
  justify-content: center;
  display: flex;
  background: transparent;
  border-color: transparent;
  z-index: 2;
  color: inherit;
}

[dir="ltr"] .dc-contract-card-dialog__input--currency {
  right: 4rem;
}

[dir="rtl"] .dc-contract-card-dialog__input--currency {
  left: 4rem;
}

.dc-contract-card-dialog__input--currency--symbol {
  padding-bottom: 0.2rem;
}

.dc-contract-card-dialog__input--currency:before {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.5;
  color: inherit;
}

.dc-contract-card-dialog__popover {
  margin-top: -50%;
}

.dc-contract-card-dialog__popover--accumulator {
  margin-top: -20%;
}
.dc-contract-card-dialog__popover-bubble {
  /* postcss-bem-linter: ignore */
}

.dc-contract-card-dialog__popover-bubble .dc-checkbox {
  margin-top: 0.8rem;
  /* postcss-bem-linter: ignore */
}

.dc-contract-card-dialog__popover-bubble .dc-checkbox__label {
  font-size: inherit;
}

.dc-contract-card-dialog__button {
  margin-top: 0.8rem;
}

.dc-contract-card-dialog__button .dc-btn {
  width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card-dialog__button .dc-btn {
    flex: 1;
    height: 4rem;
    margin: 0 1.6rem;
  }
}

.dc-contract-card-dialog__form {
  display: grid;
  flex: 1;
}

@media (max-width: 1279px) {
  .dc-contract-card-dialog__form {
    grid-template-rows: auto auto 1fr;
    margin: 0 0 1.6rem;
  }

  .dc-contract-card-dialog__form--no-stop-loss {
    grid-template-rows: auto 1fr;
  }
}

@media (min-width: 1280px) {
  .dc-contract-card-dialog__form {
    grid-gap: 0.8rem;
  }
}

[dir="ltr"] .dc-contract-card-dialog__form .dc-checkbox__box {
  margin-left: 0;
}

[dir="rtl"] .dc-contract-card-dialog__form .dc-checkbox__box {
  margin-right: 0;
}

.dc-contract-card-dialog__total-profit {
  height: 3.6rem;
  padding: 1.6rem;
  border-bottom: 1px solid var(--border-disabled);
  color: var(--text-general);
  display: flex;
  align-items: center;
  justify-content: space-between;
  font-size: 1.4rem;
}

/** @define dc-contract-card-dialog-toggle; */
.dc-contract-card-dialog-toggle {
  all: unset;
  position: absolute;
  display: flex;
  justify-content: end;
  width: calc(100% + 0.4rem);
  height: calc(100% + 0.4rem);
  right: 0.4rem;
  top: -0.4rem;
  border: 1px solid var(--general-section-1);
  border-radius: 4px;
}

@media (max-width: 1279px) {
  .dc-contract-card-dialog-toggle {
    width: 100%;
  }
}

.dc-contract-card-dialog-toggle__icon {
  float: right;
  margin: 3px;
}

.dc-contract-card-dialog-toggle:hover:not(:disabled):not(.dc-contract-card-dialog-toggle--disabled) {
  cursor: pointer;
  border-color: var(--button-secondary-default);
}

@media (min-width: 601px) and (max-width: 1279px) {
  .dc-mobile-dialog__contract-update {
    max-width: 568px;
    margin: 0 auto;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */

.dc-tooltip {
  text-decoration: none;
  font-size: inherit;
  color: var(--text-prominent);
}

.dc-tooltip:before {
  background: var(--status-default);
}

.dc-tooltip:after, .dc-tooltip[data-tooltip-pos=top]:after {
  border-top-color: var(--status-default);
}

.dc-tooltip[data-tooltip-pos=right]:after {
  border-top-color: transparent;
  border-right-color: var(--status-default);
}

.dc-tooltip[data-tooltip-pos=left]:after {
  border-top-color: transparent;
  border-left-color: var(--status-default);
}

.dc-tooltip[data-tooltip-pos=bottom]:after {
  border-top-color: transparent;
  border-bottom-color: var(--status-default);
}

.dc-tooltip__balloon-icon {
  position: absolute;
  top: 0;
  left: -319px;
  z-index: 999;
  opacity: 0;
  transition: opacity 0.3s;
  pointer-events: none;
}

.dc-tooltip__balloon-icon--show {
  transition: opacity 0.3s 0.2s;
  opacity: 1;
}

.dc-tooltip[data-tooltip] {
  cursor: auto;
  cursor: initial;
  display: block;
}

.dc-tooltip[data-tooltip]:before {
  background: var(--status-default);
}

.dc-tooltip[data-tooltip]:after, .dc-tooltip[data-tooltip][data-tooltip-pos=top]:after {
  border-top-color: var(--status-default);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=right]:after {
  border-top-color: transparent;
  border-right-color: var(--status-default);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=left]:after {
  border-top-color: transparent;
  border-left-color: var(--status-default);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=bottom]:after {
  border-top-color: transparent;
  border-bottom-color: var(--status-default);
}

.dc-tooltip[data-tooltip]:hover:after, .dc-tooltip[data-tooltip]:hover:before {
  opacity: 0.96;
  pointer-events: auto;
  transform: translate(-50%, 0);
}

.dc-tooltip[data-tooltip]:before, .dc-tooltip[data-tooltip]:after {
  opacity: 0;
  pointer-events: none;
  transition: all 0.18s ease-out 0.18s;
  bottom: 100%;
  left: 50%;
  position: absolute;
  z-index: 1;
  transform: translate(-50%, 1em);
  transform-origin: top;
}

[dir="ltr"] .dc-tooltip[data-tooltip]:before {
  text-align: left;
}

[dir="rtl"] .dc-tooltip[data-tooltip]:before {
  text-align: right;
}

.dc-tooltip[data-tooltip]:before {
  font-size: 1.2rem;
  color: var(--text-colored-background);
  font-weight: 400;
  text-transform: none;
  line-height: 1.25;
  line-height: 1.5;
  text-decoration: none;
  letter-spacing: normal;
  border-radius: 4px;
  content: attr(data-tooltip);
  padding: 0.7em;
  margin-bottom: 10px;
  width: -moz-max-content;
  width: max-content;
  width: 220px;
  max-width: 280px;
}

.dc-tooltip[data-tooltip]:after {
  border: solid transparent;
  content: "";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
  border-width: 6px;
  margin-bottom: -2px;
}

.dc-tooltip[data-tooltip][data-tooltip-pos=right]:before, .dc-tooltip[data-tooltip][data-tooltip-pos=right]:after {
  bottom: auto;
  left: 100%;
  top: 50%;
  transform: translate(-1em, -50%);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=right]:before {
  margin-left: 1em;
}

.dc-tooltip[data-tooltip][data-tooltip-pos=right]:hover:after, .dc-tooltip[data-tooltip][data-tooltip-pos=right]:hover:before {
  transform: translate(0, -50%);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=left]:before, .dc-tooltip[data-tooltip][data-tooltip-pos=left]:after {
  bottom: auto;
  left: auto;
  right: 100%;
  top: 50%;
  transform: translate(1em, -50%);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=left]:before {
  /*rtl:ignore*/
  margin-right: 1em;
}

.dc-tooltip[data-tooltip][data-tooltip-pos=left]:hover:after, .dc-tooltip[data-tooltip][data-tooltip-pos=left]:hover:before {
  transform: translate(0, -50%);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=bottom]:before, .dc-tooltip[data-tooltip][data-tooltip-pos=bottom]:after {
  bottom: auto;
  left: 50%;
  top: 100%;
  transform: translate(-50%, -1em);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=bottom]:before {
  margin-top: 1.1em;
}

.dc-tooltip[data-tooltip][data-tooltip-pos=bottom]:hover:after, .dc-tooltip[data-tooltip][data-tooltip-pos=bottom]:hover:before {
  transform: translate(-50%, 0);
}

.dc-tooltip--with-label[data-tooltip]:before, .dc-tooltip--with-label[data-tooltip]:after {
  margin-top: 1em;
}

.dc-tooltip--error[data-tooltip]:before {
  background: var(--status-danger);
}

.dc-tooltip--error[data-tooltip]:after, .dc-tooltip--error[data-tooltip][data-tooltip-pos=top]:after {
  border-top-color: var(--status-danger);
}

.dc-tooltip--error[data-tooltip][data-tooltip-pos=right]:after {
  border-top-color: transparent;
  border-right-color: var(--status-danger);
}

.dc-tooltip--error[data-tooltip][data-tooltip-pos=left]:after {
  border-top-color: transparent;
  border-left-color: var(--status-danger);
}

.dc-tooltip--error[data-tooltip][data-tooltip-pos=bottom]:after {
  border-top-color: transparent;
  border-bottom-color: var(--status-danger);
}

.dc-tooltip--error[data-tooltip]:after, .dc-tooltip--error[data-tooltip]:before, .dc-tooltip--error[data-tooltip][data-tooltip-pos=left]:after, .dc-tooltip--error[data-tooltip][data-tooltip-pos=left]:before {
  opacity: 0.96;
  pointer-events: auto;
  transform: translate(0, -50%);
}

.dc-tooltip--error[data-tooltip]:before, .dc-tooltip--error[data-tooltip][data-tooltip-pos=left]:before {
  width: 180px;
}

.dc-tooltip--error-secondary[data-tooltip]:before {
  background: var(--status-danger);
}

.dc-tooltip--error-secondary[data-tooltip]:after, .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos=top]:after {
  border-top-color: var(--status-danger);
}

.dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos=right]:after {
  border-top-color: transparent;
  border-right-color: var(--status-danger);
}

.dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos=left]:after {
  border-top-color: transparent;
  border-left-color: var(--status-danger);
}

.dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos=bottom]:after {
  border-top-color: transparent;
  border-bottom-color: var(--status-danger);
}

.dc-tooltip--error-secondary[data-tooltip]:after, .dc-tooltip--error-secondary[data-tooltip]:before, .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos=left]:after, .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos=left]:before {
  opacity: 0.96;
  pointer-events: auto;
  transform: translate(0, -50%);
  top: 55%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
.dc-input-wrapper__icon,
button.dc-input-wrapper__icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.dc-input-wrapper__icon .color1-fill,
button.dc-input-wrapper__icon .color1-fill {
  fill: var(--text-general);
}

.dc-input-wrapper__icon .color1-stroke,
button.dc-input-wrapper__icon .color1-stroke {
  stroke: var(--text-general);
}

.dc-input-wrapper__icon .color2-fill,
button.dc-input-wrapper__icon .color2-fill {
  fill: none;
}

.dc-input-wrapper__icon .color2-stroke,
button.dc-input-wrapper__icon .color2-stroke {
  stroke: none;
}
.active.dc-input-wrapper__icon,
button.active.dc-input-wrapper__icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.active.dc-input-wrapper__icon .color1-fill,
button.active.dc-input-wrapper__icon .color1-fill {
  fill: var(--text-prominent);
}

.active.dc-input-wrapper__icon .color1-stroke,
button.active.dc-input-wrapper__icon .color1-stroke {
  stroke: var(--text-prominent);
}

.active.dc-input-wrapper__icon .color2-fill,
button.active.dc-input-wrapper__icon .color2-fill {
  fill: none;
}

.active.dc-input-wrapper__icon .color2-stroke,
button.active.dc-input-wrapper__icon .color2-stroke {
  stroke: none;
}
.disabled.dc-input-wrapper__icon,
button.disabled.dc-input-wrapper__icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.disabled.dc-input-wrapper__icon .color1-fill,
button.disabled.dc-input-wrapper__icon .color1-fill {
  fill: var(--text-disabled);
}

.disabled.dc-input-wrapper__icon .color1-stroke,
button.disabled.dc-input-wrapper__icon .color1-stroke {
  stroke: var(--text-disabled);
}

.disabled.dc-input-wrapper__icon .color2-fill,
button.disabled.dc-input-wrapper__icon .color2-fill {
  fill: none;
}

.disabled.dc-input-wrapper__icon .color2-stroke,
button.disabled.dc-input-wrapper__icon .color2-stroke {
  stroke: none;
}
.white.dc-input-wrapper__icon,
button.white.dc-input-wrapper__icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.white.dc-input-wrapper__icon .color1-fill,
button.white.dc-input-wrapper__icon .color1-fill {
  fill: var(--text-prominent);
}

.white.dc-input-wrapper__icon .color1-stroke,
button.white.dc-input-wrapper__icon .color1-stroke {
  stroke: var(--text-prominent);
}
.border_hover_color.dc-input-wrapper__icon,
button.border_hover_color.dc-input-wrapper__icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.border_hover_color.dc-input-wrapper__icon .color1-fill,
button.border_hover_color.dc-input-wrapper__icon .color1-fill {
  fill: var(--text-prominent);
}

.border_hover_color.dc-input-wrapper__icon .color1-stroke,
button.border_hover_color.dc-input-wrapper__icon .color1-stroke {
  stroke: var(--text-prominent);
}
.secondary.dc-input-wrapper__icon,
button.secondary.dc-input-wrapper__icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.secondary.dc-input-wrapper__icon .color1-fill,
button.secondary.dc-input-wrapper__icon .color1-fill {
  fill: var(--text-less-prominent);
}

.secondary.dc-input-wrapper__icon .color1-stroke,
button.secondary.dc-input-wrapper__icon .color1-stroke {
  stroke: var(--text-less-prominent);
}

/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-input-field; weak */
.dc-input-field {
  margin: 0.8rem 0 0;
  position: relative;
}

[dir="ltr"] .dc-input-field__label {
  text-align: left;
}

[dir="rtl"] .dc-input-field__label {
  text-align: right;
}

.dc-input-field__label {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  line-height: 1.5;
  color: var(--text-general);
  margin-bottom: 0.2rem;
  display: inline-block;
  text-align: center;
  width: 100%;
}

.dc-input-field .inline-icon {
  position: absolute;
  top: 8px;
  z-index: 1;
  cursor: pointer;
}

[dir="ltr"] .dc-input-field .inline-icon {
  left: 8px;
}

[dir="rtl"] .dc-input-field .inline-icon {
  right: 8px;
}

[dir="ltr"] .dc-input-field__helper {
  text-align: left;
}

[dir="rtl"] .dc-input-field__helper {
  text-align: right;
}

.dc-input-field__helper {
  font-size: 1.2rem;
  color: var(--text-less-prominent);
  font-weight: 300;
  text-transform: none;
  line-height: 1.25;
}

/** @define dc-input-wrapper */
.dc-input-wrapper,
button.dc-input-wrapper {
  position: relative;
}

.dc-input-wrapper__input::-ms-clear,
button.dc-input-wrapper__input::-ms-clear {
  display: none;
}

.dc-input-wrapper__button,
button.dc-input-wrapper__button {
  position: absolute !important;
}

.dc-input-wrapper__button,
button.dc-input-wrapper__button {
  z-index: 1;
  top: 2px;
  height: 28px;
  border: none;
  padding: 0;
  margin: 0;
  margin: initial;
  min-width: 3.2rem;
  border-radius: 3px;
  background-color: transparent;
  background-color: initial;
  display: flex;
  justify-content: center;
  align-items: center;
}

.dc-input-wrapper__button--increment,
button.dc-input-wrapper__button--increment {
  right: 2px;
}

.dc-input-wrapper__button--decrement,
button.dc-input-wrapper__button--decrement {
  left: 2px;
}

.dc-input-wrapper__button:hover,
button.dc-input-wrapper__button:hover {
  background: var(--state-hover);
  cursor: pointer;
}

.dc-input-wrapper__button:disabled:hover,
button.dc-input-wrapper__button:disabled:hover {
  cursor: not-allowed;
  background: transparent;
}

.dc-input-wrapper--disabled,
button.dc-input-wrapper--disabled {
  pointer-events: none;
  color: var(--text-disabled);
}

.dc-input-wrapper--inline,
button.dc-input-wrapper--inline {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

/** @define input */
.input {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.5;
  list-style: none;
  position: relative;
  display: inline-block;
  width: 100%;
  height: 32px;
  border-radius: 4px;
  transition: transform 0.3s;
  background-color: var(--fill-normal);
  border: 1px solid var(--fill-normal);
  color: var(--text-prominent);
}

[dir="ltr"] .input {
  padding-left: 0.8rem;
}

[dir="rtl"] .input {
  padding-right: 0.8rem;
}

.input[type=checkbox] {
  font-size: 1.2rem;
  cursor: pointer;
  display: inline-block;
  vertical-align: middle;
  width: 16px;
  height: 16px;
  border-radius: 0;
  padding: 0;
  background-color: var(--general-section-1);
  border: 1px solid var(--text-less-prominent);
}

.input[type=checkbox]:active {
  border-radius: 0;
  box-shadow: none;
  border-color: var(--brand-red-coral);
}

.input[type=checkbox]:hover {
  border-color: var(--border-hover);
}

.input[type=checkbox]:focus {
  border-radius: 0;
  box-shadow: none;
  border-color: var(--border-active);
}

.input[type=checkbox]:checked {
  background: var(--brand-red-coral);
  border-color: var(--brand-red-coral);
}

.input[type=checkbox]:checked:after {
  display: inline-block;
}

.input[type=checkbox]:checked:hover {
  border-color: var(--brand-red-coral);
}

.input[type=checkbox]::-ms-check {
  background: transparent;
  border-color: transparent;
  color: #ffffff;
}

[dir="ltr"] .input[type=checkbox]:after {
  text-align: left;
}

[dir="rtl"] .input[type=checkbox]:after {
  text-align: right;
}

.input[type=checkbox]:after {
  font-size: 1.2rem;
  color: var(--text-colored-background);
  font-weight: 400;
  text-transform: none;
  line-height: 1.25;
  content: "L";
  position: absolute;
  top: -10%;
  display: none;
}

[dir="ltr"] .input[type=checkbox]:after {
  transform: scaleX(-1) rotate(-40deg);
  left: 25%;
}

[dir="rtl"] .input[type=checkbox]:after {
  transform: scaleX(-1) rotate(40deg);
  right: 25%;
}

.input:not([type=range]) {
  touch-action: manipulation;
}

.input[readonly] {
  cursor: pointer;
}

.input::-moz-placeholder {
  border-color: var(--border-normal);
}

.input::placeholder {
  border-color: var(--border-normal);
}

.input:hover, .input-hover, .dc-input-wrapper__button:hover ~ .dc-input-wrapper__input,
button.dc-input-wrapper__button:hover ~ .dc-input-wrapper__input {
  border-color: var(--border-hover);
}

.input:active, .input:focus {
  outline: 0;
  border-radius: 4px;
  border-color: var(--border-active);
  color: var(--text-prominent);
}

.input--has-inline-prefix {
  border-radius: 4px !important;
}

[dir="ltr"] .input--has-inline-prefix {
  padding-right: 40px !important;
}

[dir="rtl"] .input--has-inline-prefix {
  padding-left: 40px !important;
}

.input--error {
  border: 1px solid #e31c4b !important;
}

.input--error {
  color: #e31c4b;
}

.input:disabled {
  color: var(--text-disabled);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-input-wrapper */
.dc-input-wrapper {
  position: relative;
}

.dc-input-wrapper--inline {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-themed-scrollbars */
.dc-themed-scrollbars {
  overflow-y: auto;
  overflow-x: hidden;
  position: relative;
  scroll-behavior: smooth;
  /* Firefox only */
  scrollbar-color: var(--state-active) var(--general-main-1);
  scrollbar-width: thin;
}

.dc-themed-scrollbars__autohide::-webkit-scrollbar-thumb {
  display: none;
}

.dc-themed-scrollbars__autohide--is-hovered::-webkit-scrollbar-thumb {
  display: inline;
  display: initial;
}

.dc-themed-scrollbars--has-horizontal {
  overflow-x: auto;
}

.dc-themed-scrollbars--hidden-scrollbar::-webkit-scrollbar {
  display: none !important;
}

.dc-themed-scrollbars--only-horizontal {
  overflow-y: hidden;
  overflow-x: auto;
}

.dc-themed-scrollbars--only-horizontal-overlay {
  overflow-y: hidden;
  overflow-x: overlay;
}

.dc-themed-scrollbars-wrapper {
  display: flex;
  justify-content: space-between;
  margin-bottom: -3rem;
  padding-bottom: 3rem;
  white-space: nowrap;
}

.dc-themed-scrollbars-wrapper li {
  display: inline-block;
  box-sizing: border-box;
  padding: 0 3rem;
  vertical-align: middle;
  width: auto;
  width: initial;
  height: 40px;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-themed-scrollbars-wrapper li {
    padding: 0 1.1rem;
  }
}

.dc-themed-scrollbars::-webkit-scrollbar {
  width: 5px;
  height: 5px;
  background-color: transparent;
  border-radius: 10px;
}

.dc-themed-scrollbars::-webkit-scrollbar-track {
  background-color: transparent;
}

.dc-themed-scrollbars::-webkit-scrollbar-thumb {
  border-radius: 10px;
  background-color: var(--state-active);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-mobile-dialog; weak */
.dc-mobile-dialog {
  box-sizing: border-box;
  position: fixed;
  top: 0;
  width: 100vw;
  height: 100vh;
  z-index: 999;
  overflow: auto;
  transition: opacity 0.2s;
  opacity: 0;
  pointer-events: none;
  background: var(--fill-normal);
}

[dir="ltr"] .dc-mobile-dialog {
  left: 0;
}

[dir="rtl"] .dc-mobile-dialog {
  right: 0;
}

.dc-mobile-dialog--enter, .dc-mobile-dialog--exit {
  opacity: 0;
  pointer-events: none;
}

.dc-mobile-dialog--enter .dc-mobile-dialog__content, .dc-mobile-dialog--exit .dc-mobile-dialog__content {
  transform: scale(0);
}

.dc-mobile-dialog--enter .dc-mobile-dialog__header, .dc-mobile-dialog--exit .dc-mobile-dialog__header {
  transform: translateY(-100%);
}

.dc-mobile-dialog--enter-done {
  opacity: 1;
  pointer-events: auto;
}

.dc-mobile-dialog--enter-done .dc-mobile-dialog__content {
  transform: scale(1);
}

.dc-mobile-dialog--enter-done .dc-mobile-dialog__header {
  transform: translateY(0);
}

.dc-mobile-dialog__content {
  margin-top: 0.4rem;
  box-sizing: border-box;
  position: relative;
  padding-top: 3.6rem;
  z-index: 1;
  background: var(--fill-normal);
  transition: all 0.2s ease-out;
}

.dc-mobile-dialog__content--is-full-height {
  height: calc(100% - 0.4rem);
}

.dc-mobile-dialog__content > div {
  height: 100%;
}

.dc-mobile-dialog__header {
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  position: fixed;
  top: 0;
  padding: 1rem;
  height: 48px;
  z-index: 4;
  background: var(--fill-normal);
  transition: all 0.2s ease-out;
  transition-delay: 0.2s;
  border-bottom: 1px solid var(--border-disabled);
}

.dc-mobile-dialog__container--has-scroll {
  overflow-x: hidden;
  overflow-y: auto;
}

.dc-mobile-dialog__container--has-info-banner .dc-mobile-dialog__header {
  position: relative;
  top: auto;
  top: initial;
  z-index: auto;
  z-index: initial;
  background: transparent none repeat 0 0 / auto auto padding-box border-box scroll;
  background: initial;
}

.dc-mobile-dialog__container--has-info-banner .dc-mobile-dialog__header-wrapper {
  position: sticky;
  top: 0;
  z-index: 4;
  background: var(--fill-normal);
  width: 100%;
  border-bottom: 0.01rem solid transparent;
}

.dc-mobile-dialog__container--has-info-banner .dc-mobile-dialog__header-wrapper .inline-message__information {
  margin: 1.6rem 0.8rem -0.8rem;
}

.dc-mobile-dialog__container--has-info-banner .dc-mobile-dialog__header-wrapper .learn-more {
  height: 5rem;
  width: calc(100% - 1.6rem);
  margin: 1.6rem 0.8rem 0.8rem;
  padding: 1.6rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border: none;
  background-color: var(--general-section-1);
  cursor: pointer;
  border-radius: 4px;
}

.dc-mobile-dialog__container--has-info-banner .dc-mobile-dialog__content {
  margin-top: 0;
  margin-top: initial;
  padding-top: 0;
  padding-top: initial;
}

.dc-mobile-dialog__footer {
  position: fixed;
  width: 100%;
  bottom: 0px;
  z-index: 4;
}

.dc-mobile-dialog__title {
  margin: 0;
}

[dir="ltr"] .dc-mobile-dialog__title {
  padding: 1.2rem 1.2rem 1.2rem 0.4rem;
}

[dir="rtl"] .dc-mobile-dialog__title {
  padding: 1.2rem 0.4rem 1.2rem 1.2rem;
}

.dc-mobile-dialog__close-btn-icon {
  --fill-color1: var(--text-prominent) !important;
}

.dc-mobile-dialog__close-btn-icon {
  margin: 1.2rem 0.4rem;
  width: 1.6rem;
  height: 1.6rem;
  /* postcss-bem-linter: ignore */
}
@charset "UTF-8";
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-result */
.dc-result__content {
  display: flex;
  justify-items: center;
  align-items: center;
  flex-direction: column;
  gap: 0.4rem;
}

.dc-result__caption {
  text-transform: capitalize;
  font-size: 1.4em;
  font-weight: bold;
  display: flex;
  justify-content: center;
  align-items: center;
  transition: opacity 0.25s ease;
  gap: 0.4rem;
}

.dc-result__caption--won {
  color: var(--text-profit-success);
}

.dc-result__caption--lost {
  color: var(--text-loss-danger);
}

.dc-result__caption-wrapper {
  cursor: pointer;
  width: 100%;
  height: calc(100% - 24px);
  text-decoration: none;
  position: absolute;
  top: 24px;
  z-index: 2;
  display: flex;
  justify-content: center;
  align-items: center;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-result__caption {
    pointer-events: none;
  }
}

.dc-result__close-btn {
  position: absolute;
  top: 2px;
  right: 8px;
  cursor: pointer;
  visibility: visible;
}

.dc-result__close-btn:after {
  content: "×";
  font-size: 24px;
  font-weight: 300;
  color: var(--text-general);
}

.dc-result__positions-overlay {
  max-width: 218px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-contract-card {
  box-sizing: border-box;
  border-radius: 4px;
  display: flex;
  flex-direction: column;
  text-decoration: none;
  position: relative;
  padding: 0.8rem;
  background-color: var(--general-main-1);
  color: var(--text-prominent);
  padding-bottom: 0.8rem;
}

.dc-contract-card:before {
  content: "";
  position: absolute;
  border-radius: 4px;
  height: 52px;
  width: 100%;
  top: 0;
}

[dir="ltr"] .dc-contract-card:before {
  left: 0;
}

[dir="rtl"] .dc-contract-card:before {
  right: 0;
}

.dc-contract-card--green:before {
  background-image: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));
}

.dc-contract-card--red:before {
  background-image: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));
}

.dc-contract-card--loss {
  color: var(--text-loss-danger);
}

.dc-contract-card--profit {
  color: var(--text-profit-success);
}

.dc-contract-card__grid {
  display: grid;
  grid-template-rows: 1fr auto;
  grid-gap: 4px;
  min-height: 4rem;
}

.dc-contract-card__grid-underlying-trade {
  grid-template-columns: 1fr 1fr;
  width: 100%;
}

@media (min-width: 1280px) {
  .dc-contract-card__grid-underlying-trade--trader {
    grid-template-columns: 1.2fr 1fr;
  }
}

.dc-contract-card__grid-underlying-trade--trader--accumulator {
  grid-gap: 1px;
}

@media (min-width: 1280px) {
  .dc-contract-card__grid-underlying-trade--trader--accumulator {
    display: flex;
  }
}

.dc-contract-card__grid-underlying-trade--trader--sold {
  padding-top: 1rem;
}

.dc-contract-card__grid-underlying-trade--mobile {
  grid-template-columns: 1fr 1fr 25%;
}

.dc-contract-card__grid-profit-payout {
  grid-template-columns: 1fr 1fr;
  padding: 8px 0;
  border-radius: 4px;
  margin-left: -4px;
  margin-right: -4px;
  background: var(--general-hover);
}

.dc-contract-card__grid-label {
  font-size: 1rem;
  align-self: flex-start;
  text-transform: none;
  line-height: 1.5;
  color: var(--text-general);
  white-space: nowrap;
}

.dc-contract-card__grid-value {
  font-size: 1.2rem;
  font-weight: bold;
  align-self: flex-start;
  line-height: 1.5;
}

.dc-contract-card__grid-items {
  grid-template-columns: 1fr 1fr;
  grid-gap: 0.8rem 0.4rem;
  padding: 0.8rem 0;
}

.dc-contract-card__result {
  position: absolute;
  top: 0;
  width: 100%;
  height: calc(100% - 1rem);
  border-radius: 4px;
  z-index: 2;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var(--overlay-inside-dialog);
}

.dc-contract-card__result--won, .dc-contract-card__result--won:after {
  background-image: var(--gradient-success);
}

.dc-contract-card__result--lost, .dc-contract-card__result--lost:after {
  background-image: var(--gradient-danger);
}

.dc-contract-card__result--lg {
  max-height: 100%;
}

[dir="ltr"] .dc-contract-card__result:hover {
  background: 0 !important;
}

[dir="rtl"] .dc-contract-card__result:hover {
  background: 100% !important;
}

.dc-contract-card__result:hover .dc-result__content {
  opacity: 0;
}

.dc-contract-card__result:after {
  top: 0;
  width: 100%;
  height: 100%;
  border-radius: 4px;
  z-index: 2;
}

[dir="ltr"] .dc-contract-card__result:after {
  left: 0;
}

[dir="rtl"] .dc-contract-card__result:after {
  right: 0;
}

.dc-contract-card__result--enter, .dc-contract-card__result--exit {
  opacity: 0;
}

.dc-contract-card__result--enter-done {
  opacity: 1;
}

.dc-contract-card__wrapper {
  margin: 0 1em;
  min-width: 218px;
  max-width: 238px;
  width: -moz-min-content;
  width: min-content;
  border-radius: 4px;
  transition: transform 0.25s ease, opacity 0.25s linear;
  position: relative;
  background: var(--general-main-1);
}

.dc-contract-card__wrapper .currency-badge {
  margin-bottom: 5px;
}

.dc-contract-card__wrapper--active:before {
  content: "";
  top: -1px;
  width: calc(100% + 2px);
  height: calc(100% + 2px);
  position: absolute;
  box-shadow: 0 4px 6px 0 rgba(0, 0, 0, 0.24);
  border-radius: 4px;
  pointer-events: none;
}

[dir="ltr"] .dc-contract-card__wrapper--active:before {
  left: -1px;
}

[dir="rtl"] .dc-contract-card__wrapper--active:before {
  right: -1px;
}

.dc-contract-card__wrapper--enter-done {
  opacity: 1;
  transform: translateY(0);
}

.dc-contract-card__wrapper--enter, .dc-contract-card__wrapper--exit {
  opacity: 0;
  transform: translateY(-16px);
}

.dc-contract-card .purchase-price-container,
.dc-contract-card .potential-payout-container {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
}

.dc-contract-card .purchase-price__label,
.dc-contract-card .potential-payout__label {
  font-size: 1rem;
  align-self: flex-start;
  text-transform: none;
  margin-bottom: 4px;
  color: var(--text-general);
  white-space: nowrap;
}

.dc-contract-card .purchase-price__value,
.dc-contract-card .potential-payout__value {
  font-size: 1em;
  font-weight: bold;
  align-self: flex-start;
}

[dir="ltr"] .dc-contract-card .potential-payout-container {
  padding-left: 4px;
}

[dir="rtl"] .dc-contract-card .potential-payout-container {
  padding-right: 4px;
}

.dc-contract-card .potential-payout-price__value {
  font-size: 1em;
  font-weight: bold;
  align-self: flex-start;
}

.dc-contract-card__separator {
  width: 100%;
  border-top: 1px solid var(--general-section-1);
  margin: 4px 0 0;
}

.dc-contract-card__underlying-name {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  font-weight: bold;
  font-size: 1.2em;
  max-width: 18rem;
  min-width: 10rem;
}

.dc-contract-card__underlying-name--accumulator {
  max-width: 10rem;
}

.dc-contract-card__type {
  font-size: 1.2em;
  display: flex;
  justify-content: flex-start;
  font-weight: bold;
  /* postcss-bem-linter: ignore */
}

.dc-contract-card__type .category-type .color1-fill {
  fill: var(--brand-red-coral) !important;
}

.dc-contract-card__type .category-type .color2-fill {
  fill: var(--brand-secondary) !important;
}

.dc-contract-card__symbol {
  margin-left: 0.4rem;
}

.dc-contract-card__symbol--smarttrader-contract {
  width: 7rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card__symbol--smarttrader-contract {
    width: auto;
    width: initial;
  }
}

.dc-contract-card__header {
  display: flex;
  justify-content: space-evenly;
  flex-direction: column;
  margin: 0.5em 0.2em;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card__header {
    margin: 0 8px;
  }
}

.dc-contract-card__body {
  border-radius: 4px;
  width: 100%;
  padding: 0.8rem 0.4rem;
  color: var(--text-prominent);
  display: flex;
}

.dc-contract-card__body-wrapper {
  width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card__body {
    padding: 0 8px;
  }

  .dc-contract-card__body-wrapper {
    display: flex;
  }
}

.dc-contract-card-items-wrapper {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-areas: "stake current-stake" "deal-cancel-fee limit-order-info" "buy-price limit-order-info";
  grid-gap: 0.8rem 0.4rem;
  flex: 1;
  margin-top: 0.5rem;
}

.dc-contract-card-items-wrapper--mobile {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-areas: "stake current-stake limit-order-info" "deal-cancel-fee buy-price limit-order-info";
  grid-gap: 0.8rem 0.4rem;
  flex: 1;
  padding: 0.4rem 0;
}

.dc-contract-card-items-wrapper--mobile .dc-contract-card-items-wrapper-group .dc-contract-card-item:first-child {
  margin-bottom: 0.8rem;
}

.dc-contract-card-items-wrapper--has-progress-slider {
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-areas: "stake current-stake date-expiry" "deal-cancel-fee buy-price date-expiry" "limit-order-info limit-order-info date-expiry";
}

.dc-contract-card-items-wrapper--has-progress-slider .dc-contract-card__limit-order-info {
  grid-template-columns: 1fr 1fr;
}

.dc-contract-card-items-wrapper--has-progress-slider .dc-contract-card__stop-loss {
  order: initial !important;
}

@media (min-width: 320px) and (max-width: 767px) {
  [dir="ltr"] .dc-contract-card--turbos .dc-contract-card-item__body, [dir="ltr"] .dc-contract-card--lookbacks .dc-contract-card-item__body {
    padding-left: 0;
  }

  [dir="rtl"] .dc-contract-card--turbos .dc-contract-card-item__body, [dir="rtl"] .dc-contract-card--lookbacks .dc-contract-card-item__body {
    padding-right: 0;
  }
}

.dc-contract-card--turbos .dc-contract-card__buy-price, .dc-contract-card--lookbacks .dc-contract-card__buy-price {
  grid-column: 1/1;
  grid-row: 1/1;
  padding: 0.8rem 0 0;
}

.dc-contract-card--turbos .dc-contract-card__contract-value, .dc-contract-card--lookbacks .dc-contract-card__contract-value {
  grid-column: 2/2;
  grid-row: 1/2;
  padding: 0.8rem 0 0;
}

.dc-contract-card--turbos .dc-contract-card__entry-spot, .dc-contract-card--lookbacks .dc-contract-card__entry-spot {
  grid-column: 1/2;
  grid-row: 2/2;
}

.dc-contract-card--turbos .dc-contract-card__barrier-level, .dc-contract-card--lookbacks .dc-contract-card__barrier-level {
  grid-column: 1/1;
  grid-row: 3/3;
}

.dc-contract-card--turbos .dc-contract-card__limit-order-info, .dc-contract-card--lookbacks .dc-contract-card__limit-order-info {
  grid-row: 2/2;
  grid-column: 2/2;
}

.dc-contract-card--turbos .dc-contract-card__status, .dc-contract-card--lookbacks .dc-contract-card__status {
  align-self: center;
  justify-self: center;
  grid-row: 1/3;
  grid-column: 3/3;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card--turbos, .dc-contract-card--lookbacks {
    grid-template-columns: 1fr 1fr 1fr;
  }
}

.dc-contract-card__profit-loss {
  font-size: 1.2em;
  text-align: center;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  font-weight: bold;
}

.dc-contract-card__profit-loss-label {
  font-size: 1em;
  margin-bottom: 4px;
  font-weight: normal;
  white-space: nowrap;
  max-width: 90px;
}

[dir="ltr"] .dc-contract-card__profit-loss--is-crypto {
  margin-left: -6px;
}

[dir="rtl"] .dc-contract-card__profit-loss--is-crypto {
  margin-right: -6px;
}

.dc-contract-card__profit-loss--negative {
  color: var(--text-loss-danger);
}

.dc-contract-card__profit-loss--negative:before {
  content: "-";
  color: inherit;
}

.dc-contract-card__profit-loss--positive {
  color: var(--text-profit-success);
}

.dc-contract-card__profit-loss--positive:before {
  content: "+";
  color: inherit;
}

.dc-contract-card-item__header {
  max-width: calc(100% - 2rem);
  line-height: 1.4;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card-item__header {
    max-width: none;
    max-width: initial;
  }
}

[dir="ltr"] .dc-contract-card-item__body {
  text-align: left;
}

[dir="rtl"] .dc-contract-card-item__body {
  text-align: right;
}

.dc-contract-card-item__body {
  font-size: 1.2rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  line-height: 1.25;
  display: flex;
  align-self: flex-start;
  line-height: 1.5;
}

[dir="ltr"] .dc-contract-card-item__body--is-crypto {
  margin-left: -6px;
}

[dir="rtl"] .dc-contract-card-item__body--is-crypto {
  margin-right: -6px;
}

@media (min-width: 320px) and (max-width: 767px) {
  [dir="ltr"] .dc-contract-card-item__body {
    padding-left: 0.4rem;
  }

  [dir="rtl"] .dc-contract-card-item__body {
    padding-right: 0.4rem;
  }
}

.dc-contract-card-item__body--loss {
  color: var(--text-loss-danger) !important;
}

.dc-contract-card-item__body--loss:before {
  content: "-";
}

.dc-contract-card-item__body--profit {
  color: var(--text-profit-success) !important;
}

.dc-contract-card-item__body--profit:before {
  content: "+";
}

.dc-contract-card-item__total-profit-loss {
  padding: 0.8rem 0.8rem 0;
  border-top: 1px solid var(--general-section-1);
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 0.8rem;
}

.dc-contract-card-item__total-profit-loss .dc-contract-card-item__header,
.dc-contract-card-item__total-profit-loss .dc-contract-card-item__body {
  font-size: 1.4rem;
  line-height: 2rem;
  align-self: center;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card-item__total-profit-loss {
    flex-direction: row;
    justify-content: center;
    grid-column: 1/4;
  }

  [dir="ltr"] .dc-contract-card-item__total-profit-loss-value {
    margin-left: 0.2rem;
  }

  [dir="rtl"] .dc-contract-card-item__total-profit-loss-value {
    margin-right: 0.2rem;
  }
}

.dc-contract-card-item__total-profit-loss-label, .dc-contract-card-item__total-profit-loss-value {
  font-size: 1.4rem;
  line-height: 2rem;
}

.dc-contract-card-item__payout-limit {
  padding: 0.8rem 0 0;
  border-top: 1px solid var(--general-section-1);
  display: flex;
  flex-direction: column;
  align-items: center;
}

.dc-contract-card-item__payout-limit .dc-contract-card-item__body {
  align-self: center;
}

.dc-contract-card-item__footer .lookbacks--note {
  margin-top: 0.4rem;
}

.dc-contract-card__sell-button {
  display: flex;
  align-items: center;
  justify-content: center;
  transition: transform 0.25s ease, opacity 0.25s linear;
  padding-top: 0.4rem;
  margin-top: 0.8rem;
  border-top: 1px solid var(--general-section-1);
  min-height: 4rem;
}

.dc-contract-card__sell-button--positions {
  padding: 0.8rem 0;
  margin: 0 0.8rem;
}

.dc-contract-card__sell-button--enter-done {
  opacity: 1;
}

.dc-contract-card__sell-button--enter, .dc-contract-card__sell-button--exit {
  opacity: 0;
  transform: translateY(-8px);
}

.dc-contract-card__sell-button--has-cancel-btn {
  gap: 0.8rem;
}

.dc-contract-card__sell-button--has-cancel-btn .dc-btn {
  padding: 0 0.5rem;
}

.dc-contract-card__sell-button--has-cancel-btn .dc-btn--cancel {
  width: 100%;
}

.dc-contract-card__sell-button .dc-remaining-time {
  border-radius: 0.4rem;
  font-size: 1.2rem;
}

[dir="ltr"] .dc-contract-card__sell-button .dc-remaining-time {
  margin-left: 0.8rem;
}

[dir="rtl"] .dc-contract-card__sell-button .dc-remaining-time {
  margin-right: 0.8rem;
}

.dc-contract-card__sell-button .dc-btn--sell,
.dc-contract-card__sell-button .dc-btn--cancel {
  height: 2.4rem;
}

.dc-contract-card__sell-button .dc-btn--sell .dc-btn__text,
.dc-contract-card__sell-button .dc-btn--cancel .dc-btn__text {
  font-size: 1.2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-card__sell-button .dc-btn--sell,
  .dc-contract-card__sell-button .dc-btn--cancel {
    height: 3.2rem;
  }
}

.dc-contract-card__indicative--movement {
  width: 16px;
  height: 16px;
}

[dir="ltr"] .dc-contract-card__indicative--movement {
  margin-left: 2px;
}

[dir="rtl"] .dc-contract-card__indicative--movement {
  margin-right: 2px;
}

.dc-contract-card__indicative--movement:after {
  content: "";
  width: 16px;
}

.dc-contract-card__status {
  min-width: 25%;
  display: flex;
  align-items: center;
  justify-content: center;
}

[dir="ltr"] .dc-contract-card__status .result-icon, [dir="ltr"] .dc-contract-card__status--accumulator-mobile-positions .dc-result__icon {
  margin-left: 0.4rem;
}

[dir="rtl"] .dc-contract-card__status .result-icon, [dir="rtl"] .dc-contract-card__status--accumulator-mobile-positions .dc-result__icon {
  margin-right: 0.4rem;
}

.dc-contract-card__limit-order-info {
  grid-area: limit-order-info;
  display: grid;
  grid-gap: 0.4rem 0;
  position: relative;
}

.dc-contract-card__limit-order-info .dc-contract-card__stop-loss {
  padding-bottom: 0.4rem;
}

.dc-contract-card__take-profit {
  position: relative;
}

.dc-contract-card__buy-price {
  grid-area: buy-price;
}

.dc-contract-card__deal-cancel-fee {
  grid-area: deal-cancel-fee;
}

.dc-contract-card__deal-cancel-fee__disabled {
  color: var(--text-disabled-1);
}

.dc-contract-card__deal-cancel-fee__disabled .dc-contract-card-item__body {
  color: inherit;
}

.dc-contract-card__stake {
  grid-area: stake;
}

.dc-contract-card__date-expiry {
  grid-area: date-expiry;
}

.dc-contract-card__date-expiry .dc-contract-card-item__body {
  justify-content: flex-end;
}

.dc-contract-card__current-stake {
  grid-area: current-stake;
}

.dc-contract-card__sell-button-mobile {
  justify-self: center;
  align-self: center;
}

.dc-contract-card__sell-button-mobile .dc-btn--sell {
  height: 3.2rem !important;
}

.dc-contract-card__no-resale-msg {
  font-size: 1.1rem;
}

.dc-contract-card .contract-audit__wrapper {
  padding: 2px 0;
  width: 100%;
}

.dc-contract-card .contract-audit__wrapper--is-open {
  margin-top: 0.5em;
}

.dc-contract-card .contract-audit__toggle {
  margin: 0 0 -0.5em;
  width: 100%;
}

.dc-contract-card .contract-audit__label {
  font-size: 0.8em;
}

[dir="ltr"] .dc-contract-card .contract-audit__label {
  text-align: left;
}

[dir="rtl"] .dc-contract-card .contract-audit__label {
  text-align: right;
}

.dc-contract-card .contract-audit__value {
  font-size: 1em;
}

[dir="ltr"] .dc-contract-card .contract-audit__value {
  text-align: left;
}

[dir="rtl"] .dc-contract-card .contract-audit__value {
  text-align: right;
}

.dc-contract-card .dc-contract-type__type-wrapper {
  width: auto;
  width: initial;
  height: auto;
  height: initial;
}

.guide__menu-container {
  position: relative;
  width: 95%;
  display: flex;
  align-items: center;
  padding: 0;
  margin: 16px auto;
}

.guide__menu-nav {
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 2;
  border: none;
  width: 30px;
  height: 32px;
  border-radius: 50%;
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

[dir="ltr"] .guide__menu-nav--prev {
  margin-right: 8px;
}

[dir="rtl"] .guide__menu-nav--prev {
  margin-left: 8px;
}

[dir="ltr"] .guide__menu-nav--next {
  margin-left: 8px;
}

[dir="rtl"] .guide__menu-nav--next {
  margin-right: 8px;
}

.guide__menu {
  position: relative;
  flex: 1;
  width: -moz-max-content;
  width: max-content;
  display: flex;
  gap: var(--core-spacing-400);
  overflow-x: auto;
  min-height: var(--core-spacing-1600);
  white-space: nowrap;
  scroll-behavior: smooth;
  -ms-overflow-style: none;
  scrollbar-width: none;
}

.guide__menu .quill-chip:hover {
  cursor: pointer;
}

.guide__menu::-webkit-scrollbar {
  display: none;
}

.guide__menu button {
  background-color: transparent;
}

/** @define dc-contract-type */
.dc-contract-type {
  display: flex;
  flex-direction: row;
  align-items: center;
  text-align: center;
}

[dir="ltr"] .dc-contract-type {
  margin-left: -4px;
}

[dir="rtl"] .dc-contract-type {
  margin-right: -4px;
}

.dc-contract-type__type-wrapper {
  margin: 0;
  padding: 0.5em 0.3em;
  display: flex;
  justify-content: center;
  align-items: center;
  /* postcss-bem-linter: ignore */
}

.dc-contract-type__type-wrapper .category-type {
  width: 20px;
  height: 20px;
}

.dc-contract-type__type-label {
  width: 3.8em;
  line-height: 1.5;
  text-align: left;
}

.dc-contract-type__type-label--smarttrader-contract, .dc-contract-type__type-label--multipliers {
  width: 7rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-type__type-label--smarttrader-contract, .dc-contract-type__type-label--multipliers {
    width: 9rem;
  }
}

.dc-contract-type__type-label--lookbacks-contract {
  width: 5rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-contract-type__type-label--lookbacks-contract {
    width: auto;
    width: initial;
  }
}

.dc-contract-type__type-label-trade-param {
  font-size: 1rem;
  line-height: 1rem;
  color: var(--text-less-prominent);
}

/** @define dc-btn; */
.dc-btn--sell {
  width: 100%;
}

/** @define dc-remaining-time; weak */
.dc-remaining-time {
  display: inline;
}

/** @define dc-tick-counter-bar; */
.dc-tick-counter-bar__container {
  grid-column-start: 1;
  grid-column-end: 3;
  position: relative;
  width: 100%;
  padding: 0;
  padding: initial;
  box-sizing: border-box;
  margin: 0.8rem 0;
  border-bottom: 1px solid var(--general-section-1);
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-tick-counter-bar__container {
    display: flex;
    flex-direction: column;
    align-items: center;
    border-bottom: 0;
    border-bottom: initial;
    margin: 0;
    margin: initial;
  }
}

.dc-tick-counter-bar__track {
  height: 1.8rem;
  background: var(--general-section-1);
  border-radius: 4px;
  position: relative;
  margin-bottom: 0.8rem;
  width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-tick-counter-bar__track {
    display: flex;
    flex-direction: column;
    align-items: center;
    border-bottom: 0;
    border-bottom: initial;
    margin: 0.2rem 0 0.4rem;
  }
}

.dc-tick-counter-bar__text {
  position: absolute;
  width: 100%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-datepicker; weak */
.dc-datepicker {
  position: relative;
  display: inline-block;
  width: 100%;
}

.dc-datepicker__container {
  display: flex;
  border: 1px solid var(--border-normal);
  border-radius: 4px;
  align-items: center;
}

.dc-datepicker__container:hover:not(.dc-input--disabled) {
  border-color: var(--border-hover);
}

.dc-datepicker__container[focus-within] {
  border-color: var(--brand-secondary);
}

.dc-datepicker__container:focus-within {
  border-color: var(--brand-secondary);
}

.dc-datepicker__container[focus-within]:hover {
  border-color: var(--brand-secondary);
}

.dc-datepicker__container:focus-within:hover {
  border-color: var(--brand-secondary);
}

.dc-datepicker__container--error {
  border-color: var(--brand-red-coral) !important;
}

.dc-datepicker__container--disabled {
  border-color: var(--general-disabled);
}

@media (max-width: 1279px) {
  .dc-datepicker__container input[type=date]::-webkit-calendar-picker-indicator {
    background: transparent;
    bottom: 0;
    color: transparent;
    cursor: pointer;
    height: auto;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    width: auto;
  }
}

.dc-datepicker__hint {
  position: absolute;
  top: 4.1rem;
}

[dir="ltr"] .dc-datepicker__hint {
  margin-left: 1.3rem;
}

[dir="rtl"] .dc-datepicker__hint {
  margin-right: 1.3rem;
}

.dc-datepicker__hint--relative {
  position: relative;
  top: auto;
  top: initial;
}

[dir="ltr"] .dc-datepicker__hint--relative {
  margin-left: 1.2rem;
}

[dir="rtl"] .dc-datepicker__hint--relative {
  margin-right: 1.2rem;
}

.dc-datepicker__input .dc-input__field {
  width: 100%;
  border-radius: 4px;
  box-sizing: border-box;
  -webkit-appearance: none;
  -moz-appearance: none;
}

.dc-datepicker__input .dc-input__field:hover:not(:disabled) {
  cursor: pointer;
  border-color: var(--border-hover);
}

.dc-datepicker__input .dc-input__field:focus {
  outline: none;
}

.dc-datepicker__input .dc-input__field:active {
  border-color: var(--border-active);
}

.dc-datepicker__input .dc-input__field::-ms-clear {
  display: none;
}

.dc-datepicker__input .dc-input__field::-moz-placeholder {
  /* Fix value placeholder for datepicker for Firefox 19+ */
  line-height: 4rem;
}

.dc-datepicker__input--has-leading-icon .dc-input__field {
  text-align: center;
}

.dc-datepicker .dc-icon {
  margin-bottom: 0.3rem;
}

[dir="ltr"] .dc-datepicker .dc-icon {
  margin-right: -0.2rem;
}

[dir="rtl"] .dc-datepicker .dc-icon {
  margin-left: -0.2rem;
}

.dc-datepicker .dc-icon:not(.dc-icon--disabled) {
  cursor: pointer;
}

.dc-datepicker__picker {
  position: absolute;
  z-index: 2;
  transform: translate3d(0, 0, 0);
  opacity: 1;
}

.dc-datepicker__picker--left-enter, .dc-datepicker__picker--left-exit {
  transform: translate3d(-275px, 0, 0);
  opacity: 0;
}

.dc-datepicker__picker--left-enter-done {
  transform: translate3d(-295px, 0, 0);
  opacity: 1;
}

.dc-datepicker__picker--left-enter-done, .dc-datepicker__picker--left-exit {
  transition: transform 0.25s ease, opacity 0.25s linear;
}

.dc-datepicker__picker--top-enter, .dc-datepicker__picker--top-exit {
  transform: translate3d(0, 0, 0);
  opacity: 0;
}

.dc-datepicker__picker--top-enter-done {
  transform: translate3d(0, -40px, 0);
  opacity: 1;
}

.dc-datepicker__picker--top-enter-done, .dc-datepicker__picker--top-exit {
  transition: transform 0.25s ease, opacity 0.25s linear;
}

.dc-datepicker__picker--bottom-enter, .dc-datepicker__picker--bottom-exit {
  transform: translate3d(0, 0, 0);
  opacity: 0;
}

.dc-datepicker__picker--bottom-enter-done {
  transform: translate3d(0, 40px, 0);
  opacity: 1;
}

.dc-datepicker__picker--bottom-enter-done, .dc-datepicker__picker--bottom-exit {
  transition: transform 0.25s ease, opacity 0.25s linear;
}

@media (max-width: 1279px) {
  .dc-datepicker--hint {
    margin-bottom: 5rem;
  }

  .dc-datepicker__native {
    opacity: 0;
    width: 100%;
    min-width: calc(100% - 1rem);
    position: absolute;
    height: 38px;
  }

  .dc-datepicker__display {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    height: 38px;
    position: relative;
    width: 100%;
    color: var(--text-prominent);
  }

  [dir="ltr"] .dc-datepicker__display {
    padding-left: 1rem;
  }

  [dir="rtl"] .dc-datepicker__display {
    padding-right: 1rem;
  }

  .dc-datepicker__display-text {
    background-color: inherit;
    padding-top: 0.2rem;
  }

  .dc-datepicker__display-text--has-error {
    padding-top: 0;
    padding-top: initial;
  }

  .dc-datepicker__calendar-icon {
    pointer-events: none;
  }

  [dir="ltr"] .dc-datepicker__calendar-icon {
    margin-right: 1rem;
  }

  [dir="rtl"] .dc-datepicker__calendar-icon {
    margin-left: 1rem;
  }

  .dc-datepicker__placeholder {
    color: var(--text-general);
    transform: none;
    transition: transform 0.25s linear;
    position: absolute;
    font-size: 1.4rem;
  }

  [dir="ltr"] .dc-datepicker__placeholder {
    left: 1.3rem;
  }

  [dir="rtl"] .dc-datepicker__placeholder {
    right: 1.3rem;
  }

  .dc-datepicker__placeholder--has-value {
    color: var(--text-general);
    background-color: var(--fill-normal);
  }

  [dir="ltr"] .dc-datepicker__placeholder--has-value {
    transform: translate3d(-14px, -20px, 0px) scale(0.7);
  }

  [dir="rtl"] .dc-datepicker__placeholder--has-value {
    transform: translate3d(14px, -20px, 0px) scale(0.7);
  }

  .dc-datepicker__placeholder--has-error {
    color: var(--brand-red-coral);
  }

  .dc-datepicker__placeholder--is-focused {
    color: var(--brand-secondary);
  }

  .dc-datepicker__error {
    display: flex;
    position: absolute;
    top: 4.5rem;
  }

  [dir="ltr"] .dc-datepicker__error {
    left: 1.3rem;
  }

  [dir="rtl"] .dc-datepicker__error {
    right: 1.3rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define data-list; weak */
.data-list {
  position: relative;
  height: 100%;
  display: flex;
  flex-direction: column;
}

.data-list__body {
  flex: 1;
}

.data-list__body-wrapper {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.data-list__footer {
  width: 100%;
  background: var(--general-main-1);
  border-top: 2px solid var(--border-disabled);
  display: flex;
  align-items: center;
  position: relative;
}

.data-list__item {
  height: inherit;
}

.data-list__item--wrapper {
  height: inherit;
  text-decoration: none;
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: transparent;
}

@media (min-width: 320px) and (max-width: 767px) {
  .data-list__item {
    border-radius: 4px;
  }
}

.data-list__row {
  display: flex;
  flex-direction: row;
  padding: 4px 16px;
  width: 100%;
}

.data-list__row > * {
  flex: 1;
}

.data-list__row-content {
  font-size: 1.4rem;
  line-height: 2rem;
  color: var(--text-general);
}

.data-list__row-cell--amount {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  flex: none;
}

.data-list__row-title {
  font-size: 1.4rem;
  font-weight: bold;
  color: var(--text-prominent);
  line-height: 2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .data-list__row-title {
    font-size: 1.2rem;
  }
}

.data-list__row-divider {
  margin: 0 1.6rem;
}

.data-list__row-divider:after {
  content: "";
  display: block;
  border-top: 1px solid var(--general-main-1);
}

.data-list__row--wrapper:not(.data-list__item--dynamic-height-wrapper) {
  height: 100%;
}

.data-list__row--timer {
  flex: none;
}

.data-list__desc--wrapper {
  height: inherit;
  display: flex;
  text-align: center;
  align-items: center;
  font-size: var(--text-size-xxs);
  color: var(--text-general);
  padding: 1rem;
}

/* stylelint-disable-next-line plugin/selector-bem-pattern */
.ReactVirtualized__List {
  outline: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-data-table */
.dc-data-table {
  display: flex;
  flex-direction: column;
}

/** @define table */
.table {
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: default;
  text-align: center;
  line-height: 1.5;
  color: var(--text-general);
}

.table__cell {
  padding: 0.75em;
  display: flex;
  align-items: center;
}

[dir="ltr"] .table__cell:first-child {
  padding-left: 0;
}

[dir="rtl"] .table__cell:first-child {
  padding-right: 0;
}

[dir="ltr"] .table__cell:last-child {
  padding-right: 0;
}

[dir="rtl"] .table__cell:last-child {
  padding-left: 0;
}

.table__row {
  display: grid;
  grid-auto-rows: max-content;
  padding: 0 1.6em;
  box-sizing: border-box;
  text-decoration: none;
  position: relative;
}

.table__row, .table__row:active, .table__row:visited {
  color: var(--text-general);
}

.table__row--preloader {
  position: absolute;
  top: 0;
  height: 100%;
  max-height: 64px;
  width: 100%;
}

[dir="ltr"] .table__row--preloader {
  left: 0;
}

[dir="rtl"] .table__row--preloader {
  right: 0;
}

[dir="ltr"] .table__row--icon {
  margin-left: 1rem;
}

[dir="rtl"] .table__row--icon {
  margin-right: 1rem;
}

.table__head {
  border-bottom: 2px solid var(--general-section-1);
  height: 52px;
}

.table__head .table__row {
  color: var(--text-prominent);
  height: 100%;
  border-bottom: none;
}

.table__body {
  overflow: hidden;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  flex-basis: 0;
}

.table__body .table__row-link:hover {
  background-color: var(--state-hover);
  cursor: pointer;
}

.table__body .table__row:last-child {
  border-bottom: none;
}

.table__head, .table__foot {
  font-weight: 500;
  white-space: nowrap;
}

.table__foot {
  border-top: 2px solid var(--general-section-1);
}

.table__foot .table__row {
  color: var(--text-general);
  border-bottom: none;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-dialog */
.dc-dialog {
  width: 100vw;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  flex-direction: column;
  z-index: 999;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

.dc-dialog__wrapper {
  position: fixed;
  top: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 999;
  transition: opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
  background-color: var(--overlay-outside-dialog);
}

[dir="ltr"] .dc-dialog__wrapper {
  left: 0;
}

[dir="rtl"] .dc-dialog__wrapper {
  right: 0;
}

.dc-dialog__wrapper--enter, .dc-dialog__wrapper--exit {
  opacity: 0;
}

.dc-dialog__wrapper--enter .dc-dialog__dialog, .dc-dialog__wrapper--exit .dc-dialog__dialog {
  transform: translate3d(0, 50px, 0);
  opacity: 0;
}

.dc-dialog__wrapper--enter-done {
  opacity: 1;
}

.dc-dialog__wrapper--enter-done .dc-dialog__dialog {
  transform: translate3d(0, 0, 0);
  opacity: 1;
}

.dc-dialog__wrapper--has-portal {
  background-color: transparent;
}

.dc-dialog__dialog {
  max-width: 560px;
  max-height: 338px;
  min-width: 440px;
  min-height: 176px;
  margin: 0 15px;
  margin-top: -48px;
  padding: 2.4rem;
  border-radius: 8px;
  box-sizing: border-box;
  display: flex;
  justify-content: space-around;
  flex-direction: column;
  align-items: center;
  box-shadow: 0 2px 8px 0 var(--shadow-menu);
  background-color: var(--general-main-2);
  transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
}

.dc-dialog__header-wrapper {
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.dc-dialog__header-wrapper--end {
  justify-content: flex-end;
}

.dc-dialog__header--title {
  align-self: flex-start;
}

.dc-dialog__header--close {
  cursor: pointer;
}

.dc-dialog__content {
  align-self: flex-start;
  margin-bottom: 2.4rem;
  max-width: calc(440px - 4.8rem);
  width: 100%;
  /* postcss-bem-linter: ignore */
}

.dc-dialog__content .dc-input__label {
  background-color: var(--general-main-2);
}

.dc-dialog__content--centered {
  align-self: center;
}

.dc-dialog__footer {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-dialog__footer {
    flex-wrap: wrap;
    align-items: flex-start;
  }
}

[dir="ltr"] .dc-dialog__button {
  margin-left: 0.8rem;
}

[dir="rtl"] .dc-dialog__button {
  margin-right: 0.8rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-dialog__button:not(:last-child) {
    margin-bottom: 1rem;
  }
}

@media screen and (max-width: 560px) {
  .dc-dialog__dialog {
    min-width: auto;
  }

  .dc-dialog__dialog--has-margin {
    min-width: 0;
    min-width: initial;
    width: calc(100vw - 4.8rem);
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-drawer */
.dc-drawer {
  position: fixed;
  will-change: transform;
  transition: transform 0.3s ease;
  background: var(--general-main-2);
}

.dc-drawer--left {
  display: flex;
  flex-direction: row-reverse;
}

[dir="ltr"] .dc-drawer--left {
  right: calc(100vw - 16px);
}

[dir="rtl"] .dc-drawer--left {
  left: calc(100vw - 16px);
}

.dc-drawer--right {
  display: flex;
  flex-direction: row;
}

[dir="ltr"] .dc-drawer--right {
  left: calc(100vw - 16px);
}

[dir="rtl"] .dc-drawer--right {
  right: calc(100vw - 16px);
}

@media (max-width: 1279px) {
  .dc-drawer {
    width: 100vw !important;
    height: calc(100% - 10.1rem) !important;
    top: calc(100% - 9.8rem) !important;
  }
}

.dc-drawer__container {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
}

[dir="ltr"] .dc-drawer__container--left {
  padding-right: 16px;
}

[dir="rtl"] .dc-drawer__container--left {
  padding-left: 16px;
}

[dir="ltr"] .dc-drawer__container--right {
  padding-left: 16px;
}

[dir="rtl"] .dc-drawer__container--right {
  padding-right: 16px;
}

@media (max-width: 1279px) {
  .dc-drawer__container {
    height: calc(100% - 3.6rem);
  }
}

.dc-drawer__header {
  border-bottom: 1px solid var(--general-section-1);
  line-height: 40px;
  font-weight: 700;
  font-size: 1.6em;
}

.dc-drawer__content {
  flex-grow: 1;
  overflow: auto;
}

.dc-drawer__footer {
  background-color: var(--general-main-2);
  border-top: 1px solid var(--general-section-1);
  line-height: 40px;
  font-weight: 700;
  font-size: 1.6em;
  align-items: center;
}

.dc-drawer__toggle {
  align-items: center;
  border-left: 1px solid var(--border-disabled);
  border-right: 1px solid var(--border-disabled);
  display: flex;
  position: absolute;
  width: 16px;
  height: 100%;
  background-color: var(--general-section-5);
  cursor: pointer;
}

@media (max-width: 1279px) {
  .dc-drawer__toggle {
    position: static;
    position: initial;
    width: 100%;
    height: 3.6rem;
    justify-content: center;
    background-color: var(--general-main-1);
    border-top: solid 1px var(--general-section-1);
  }
}

.dc-drawer__toggle-icon {
  transition: 0.25s ease;
}

.dc-drawer__toggle-icon--left {
  transform: rotate(0);
}

[dir="ltr"] .dc-drawer__toggle-icon--right {
  transform: rotate(180deg);
}

[dir="rtl"] .dc-drawer__toggle-icon--right {
  transform: rotate(-180deg);
}

@media (max-width: 1279px) {
  .dc-drawer__toggle-icon {
    width: 2.5rem;
    height: 0.8rem;
    transform: rotate(0);
  }
}

[dir="ltr"] .dc-drawer__toggle--open > .dc-drawer__toggle-icon--left {
  transform: rotate(180deg);
}

[dir="rtl"] .dc-drawer__toggle--open > .dc-drawer__toggle-icon--left {
  transform: rotate(-180deg);
}

.dc-drawer__toggle--open > .dc-drawer__toggle-icon--right {
  transform: rotate(0);
}

@media (max-width: 1279px) {
  [dir="ltr"] .dc-drawer__toggle--open > .dc-drawer__toggle-icon {
    transform: rotate(180deg);
  }

  [dir="rtl"] .dc-drawer__toggle--open > .dc-drawer__toggle-icon {
    transform: rotate(-180deg);
  }
}

@media (max-width: 1279px) {
  .dc-drawer--open {
    transform: translateY(calc(-100% + 3.6rem));
  }
}
@charset "UTF-8";
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
.dc-dropdown__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.dc-dropdown__select-arrow .color1-fill {
  fill: var(--text-general);
}

.dc-dropdown__select-arrow .color1-stroke {
  stroke: var(--text-general);
}

.dc-dropdown__select-arrow .color2-fill {
  fill: none;
}

.dc-dropdown__select-arrow .color2-stroke {
  stroke: none;
}
.active.dc-dropdown__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.active.dc-dropdown__select-arrow .color1-fill {
  fill: var(--text-prominent);
}

.active.dc-dropdown__select-arrow .color1-stroke {
  stroke: var(--text-prominent);
}

.active.dc-dropdown__select-arrow .color2-fill {
  fill: none;
}

.active.dc-dropdown__select-arrow .color2-stroke {
  stroke: none;
}
.disabled.dc-dropdown__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.disabled.dc-dropdown__select-arrow .color1-fill {
  fill: var(--text-disabled);
}

.disabled.dc-dropdown__select-arrow .color1-stroke {
  stroke: var(--text-disabled);
}

.disabled.dc-dropdown__select-arrow .color2-fill {
  fill: none;
}

.disabled.dc-dropdown__select-arrow .color2-stroke {
  stroke: none;
}
.white.dc-dropdown__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.white.dc-dropdown__select-arrow .color1-fill {
  fill: var(--text-prominent);
}

.white.dc-dropdown__select-arrow .color1-stroke {
  stroke: var(--text-prominent);
}
.border_hover_color.dc-dropdown__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.border_hover_color.dc-dropdown__select-arrow .color1-fill {
  fill: var(--text-prominent);
}

.border_hover_color.dc-dropdown__select-arrow .color1-stroke {
  stroke: var(--text-prominent);
}
.secondary.dc-dropdown__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.secondary.dc-dropdown__select-arrow .color1-fill {
  fill: var(--text-less-prominent);
}

.secondary.dc-dropdown__select-arrow .color1-stroke {
  stroke: var(--text-less-prominent);
}

/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
[dir="ltr"] .dc-dropdown__label{
  left: 0;
}
[dir="rtl"] .dc-dropdown__label{
  right: 0;
}
.dc-dropdown__label {
  position: absolute;
  font-size: var(--text-size-xs);
  z-index: 2;
  color: var(--text-prominent);
  padding: 0 4px;
  background-color: var(--fill-normal);
  pointer-events: none;
  transition: 0.25s ease all;
}

[dir="ltr"] .dc-dropdown__label {
  transform: translate(0.5rem, -1rem) scale(0.75);
}

[dir="rtl"] .dc-dropdown__label {
  transform: translate(-0.5rem, -1rem) scale(0.75);
}

.dc-dropdown__label--clicked {
  color: var(--brand-secondary);
}

.dc-dropdown__display {
  cursor: pointer;
  border-radius: 4px;
  height: 3.2em;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--fill-normal);
  border: 1px solid var(--border-normal);
}

.dc-dropdown__display:hover {
  outline: 0;
  border-color: var(--border-hover);
}

.dc-dropdown__display:active, .dc-dropdown__display:focus {
  outline: 0;
}

.dc-dropdown__display-text {
  display: flex;
  white-space: nowrap;
}

[dir="ltr"] .dc-dropdown__display-text {
  padding-left: 1em;
  padding-right: 2.5em;
}

[dir="rtl"] .dc-dropdown__display-text {
  padding-right: 1em;
  padding-left: 2.5em;
}

.dc-dropdown__display-text--placeholder:after {
  content: attr(placeholder);
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  top: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

[dir="ltr"] .dc-dropdown__display-text--placeholder:after {
  left: 0;
}

[dir="rtl"] .dc-dropdown__display-text--placeholder:after {
  right: 0;
}

.dc-dropdown__display--has-suffix-icon {
  width: 21rem;
  justify-content: start;
}

[dir="ltr"] .dc-dropdown__display--has-suffix-icon {
  padding-left: 3rem;
  padding-right: 0;
}

[dir="rtl"] .dc-dropdown__display--has-suffix-icon {
  padding-right: 3rem;
  padding-left: 0;
}

.dc-dropdown__display--is-left-text {
  justify-content: flex-start;
}

.dc-dropdown__display--is-left-text .dc-dropdown__display-text {
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  display: inline-block;
}

[dir="ltr"] .dc-dropdown__display--is-left-text .dc-dropdown__display-text {
  padding-left: 1.2rem;
}

[dir="rtl"] .dc-dropdown__display--is-left-text .dc-dropdown__display-text {
  padding-right: 1.2rem;
}

.dc-dropdown__display--duration {
  margin-top: 1rem;
}

.dc-dropdown__display--duration .dc-dropdown__display-text {
  color: var(--text-general) !important;
  padding: 0 !important;
}

.dc-dropdown__display--has-symbol {
  justify-content: initial;
}

.dc-dropdown__display--no-border {
  border-color: var(--fill-normal);
}

.dc-dropdown__display-placeholder {
  position: absolute;
  top: 1.2rem;
  pointer-events: none;
  transition: 0.25s ease all;
  transform: translateZ(0);
}

[dir="ltr"] .dc-dropdown__display-placeholder {
  left: 1rem;
  transform-origin: top left;
}

[dir="rtl"] .dc-dropdown__display-placeholder {
  right: 1rem;
  transform-origin: top right;
}

.dc-dropdown__display-placeholder-text {
  padding: 0 4px;
  background: var(--fill-normal);
}

.dc-dropdown__display-placeholder--is-left-text {
  justify-content: flex-start;
}

[dir="ltr"] .dc-dropdown__display-placeholder--is-left-text {
  left: 8px;
}

[dir="rtl"] .dc-dropdown__display-placeholder--is-left-text {
  right: 8px;
}

.dc-dropdown__display-placeholder--is-left-text.dc-dropdown__display-placeholder--is-title {
  transform: translate(0, -1.7rem) scale(0.75);
  padding: 0 2px;
  white-space: nowrap;
}

.dc-dropdown__display-placeholder--is-left-text.dc-dropdown__display-placeholder--is-title .dc-dropdown__display-placeholder-text {
  color: var(--text-general) !important;
}

.dc-dropdown__inner {
  pointer-events: none;
  opacity: 0;
  height: 0;
  width: 0;
}

.dc-dropdown__container {
  position: relative;
}

[dir="ltr"] .dc-dropdown__hint {
  margin-left: 1.2rem;
}

[dir="rtl"] .dc-dropdown__hint {
  margin-right: 1.2rem;
}

.dc-dropdown--no-margin .dc-dropdown__display {
  margin: 0;
}

.dc-dropdown__select-arrow {
  display: inline-block;
  font-style: normal;
  vertical-align: baseline;
  text-rendering: optimizeLegibility;
  position: absolute;
  pointer-events: none;
  top: calc(50% - 7px);
  transition: transform 0.2s ease;
  transform: rotate(0deg);
  transform-origin: 50% 45%;
  font-size: 1.6rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.75;
}

[dir="ltr"] .dc-dropdown__select-arrow {
  right: 12px;
}

[dir="rtl"] .dc-dropdown__select-arrow {
  left: 12px;
}

.dc-dropdown__select-arrow:before {
  content: "⌃";
  display: block;
  height: 0.53em;
}

[dir="ltr"] .dc-dropdown__select-arrow--up {
  transform: rotate(-180deg);
}

[dir="rtl"] .dc-dropdown__select-arrow--up {
  transform: rotate(180deg);
}

.dc-dropdown__select-arrow--error {
  top: 1.4rem;
}

.dc-dropdown:active, .dc-dropdown:focus, .dc-dropdown--show {
  outline: none;
  border-radius: 4px;
}

.dc-dropdown:active .dc-dropdown__select-arrow, .dc-dropdown:focus .dc-dropdown__select-arrow, .dc-dropdown--show .dc-dropdown__select-arrow {
  color: var(--text-general);
}

.dc-dropdown--error {
  margin-bottom: -1.8rem;
}

.dc-dropdown--error .dc-dropdown__display {
  border-color: var(--brand-red-coral) !important;
}

.dc-dropdown--error .dc-dropdown__label {
  color: var(--brand-red-coral) !important;
}

.dc-dropdown--error .dc-dropdown__display-placeholder-text {
  color: var(--brand-red-coral) !important;
}

.dc-dropdown__list {
  bottom: -0.4rem;
  height: 0;
  width: 100%;
  position: absolute;
  transition: transform 0.25s ease, opacity 0.25s linear;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  opacity: 0;
  transform: scale(1, 0);
  z-index: 999;
}

[dir="ltr"] .dc-dropdown__list {
  left: 0;
}

[dir="rtl"] .dc-dropdown__list {
  right: 0;
}

.dc-dropdown__list--enter, .dc-dropdown__list--exit {
  transform: scale(1, 0);
  opacity: 0;
}

.dc-dropdown__list--enter-done {
  transform: scale(1, 1);
  opacity: 1;
}

.dc-dropdown__list--top {
  bottom: auto;
  bottom: initial;
  top: 0.8em;
}

.dc-dropdown__list--left {
  top: -0.1em;
}

.dc-dropdown__list--left--enter, .dc-dropdown__list--left--exit {
  transform: scale(1, 1) translate3d(2em, 0, 0px);
  opacity: 0;
}

.dc-dropdown__list--left--enter-done {
  opacity: 1;
}

.dc-dropdown__list--portal {
  height: auto;
  margin: 0.4rem 0;
}

.dc-dropdown__list--portal .dc-list {
  position: static;
}

.dc-dropdown--left .dc-dropdown__display {
  text-align: center;
}

[dir="ltr"] .dc-dropdown--left .dc-dropdown__display-text {
  padding-left: 0;
  padding-left: initial;
}

[dir="rtl"] .dc-dropdown--left .dc-dropdown__display-text {
  padding-right: 0;
  padding-right: initial;
}

.dc-dropdown--left .dc-dropdown__display-symbol {
  position: relative;
}

[dir="ltr"] .dc-dropdown--left .dc-dropdown__display-symbol {
  right: 0;
  float: right;
  margin-left: auto;
  margin-right: 0.6em;
}

[dir="rtl"] .dc-dropdown--left .dc-dropdown__display-symbol {
  left: 0;
  float: left;
  margin-right: auto;
  margin-left: 0.6em;
}

.dc-dropdown--left .dc-dropdown__select-arrow {
  left: 0.6em;
  right: auto;
  right: initial;
}

.dc-dropdown--show .dc-dropdown__display {
  border: 1px solid var(--border-active);
}

[dir="ltr"] .dc-dropdown--show > .dc-dropdown__select-arrow {
  transform: rotate(-180deg);
}

[dir="rtl"] .dc-dropdown--show > .dc-dropdown__select-arrow {
  transform: rotate(180deg);
}

[dir="ltr"] .dc-dropdown--show > .dc-dropdown__select-arrow--left {
  transform: rotate(-180deg);
}

[dir="rtl"] .dc-dropdown--show > .dc-dropdown__select-arrow--left {
  transform: rotate(180deg);
}

.dc-dropdown--disabled {
  pointer-events: none;
}

.dc-dropdown--disabled .dc-dropdown__display {
  border: 1px solid var(--general-disabled);
}

.dc-dropdown--disabled .dc-dropdown__display-text {
  color: var(--text-less-prominent);
}

.dc-dropdown-container {
  position: relative;
  margin-top: 0.8rem;
  min-width: 15rem;
  width: 100%;
}

.dc-dropdown-container:not(.cfd-personal-details-modal__form *):not(.trade-container__multiplier-dropdown):not(.dc-dropdown--left):not(.contract-type-info__dropdown) {
  margin-top: 0;
  margin-top: initial;
}

.dc-dropdown--has-placeholder .dc-dropdown__display {
  height: 4rem;
}

.dc-dropdown--has-placeholder .dc-dropdown__display .dc-dropdown__display-placeholder-text {
  color: var(--text-less-prominent);
}

.dc-dropdown--has-placeholder .dc-dropdown__display .dc-dropdown__display-placeholder-text-limit-fit {
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  display: inline-block;
  max-width: 36.4rem;
}

.dc-dropdown--has-placeholder .dc-dropdown__display--clicked .dc-dropdown__display-placeholder-text {
  color: var(--brand-secondary) !important;
}

.dc-dropdown--has-placeholder .dc-dropdown__select-arrow {
  top: 12px;
}

[dir="ltr"] .dc-dropdown--has-placeholder .dc-dropdown__select-arrow {
  right: 16px;
}

[dir="rtl"] .dc-dropdown--has-placeholder .dc-dropdown__select-arrow {
  left: 16px;
}

.dc-dropdown--has-suffix-icon {
  margin-top: 0;
  max-width: -moz-fit-content;
  max-width: fit-content;
}

[dir="ltr"] .dc-dropdown--has-suffix-icon {
  margin-left: 1rem;
}

[dir="rtl"] .dc-dropdown--has-suffix-icon {
  margin-right: 1rem;
}

.suffix-icon {
  position: absolute;
  transition: transform 0.2s ease;
  transform: rotate(0deg);
}

[dir="ltr"] .suffix-icon {
  left: 20px;
}

[dir="rtl"] .suffix-icon {
  right: 20px;
}

[dir="ltr"] .suffix-icon--flip {
  transform: rotate(-180deg);
}

[dir="rtl"] .suffix-icon--flip {
  transform: rotate(180deg);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-list {
  position: absolute;
  width: 100%;
  z-index: 2;
  border-radius: 4px;
  box-shadow: 0 8px 16px 0 var(--shadow-menu);
  background: var(--general-main-2);
}

.dc-list--has-suffix-icon {
  width: 21rem;
}

.dc-list--left {
  width: auto;
  width: initial;
}

.dc-list--left .dc-list__item-text,
.dc-list--left .dc-list__item-symbol {
  padding-left: 2.286em;
  padding-right: 2.286em;
  overflow: hidden;
  white-space: nowrap;
  text-align: center;
}

.dc-list--large {
  padding-bottom: 1.6rem;
  max-height: 404px;
}

.dc-list--large .dc-list__label {
  padding: 1.6rem 0.8rem 0.8rem;
  color: var(--text-prominent);
  height: 4rem;
}

.dc-list--large .dc-list__item-text {
  width: calc(100% - 1.6rem);
  padding: 1rem 1.6rem;
  margin: 0 0.8rem;
}

.dc-list--large .dc-list__item:not(.dc-list--large .dc-list__item--disabled):not(.dc-list--large .dc-list__item--selected):hover, .dc-list--large .dc-list__item:not(.dc-list--large .dc-list__item--disabled):not(.dc-list--large .dc-list__item--selected):focus {
  border-radius: 4px;
  width: calc(100% - 1.6rem);
  margin: 0 0.8rem;
}

.dc-list--large .dc-list__item:not(.dc-list--large .dc-list__item--disabled):not(.dc-list--large .dc-list__item--selected):hover .dc-list__item-text, .dc-list--large .dc-list__item:not(.dc-list--large .dc-list__item--disabled):not(.dc-list--large .dc-list__item--selected):focus .dc-list__item-text {
  width: 100%;
  margin: 0;
}

.dc-list--large .dc-list__separator {
  width: 100%;
  border-bottom: 4px solid var(--general-section-2);
  margin: 1.6rem 0 0;
}

.dc-list__label {
  padding: 0.6rem;
  font-size: 1.4rem;
  font-weight: bold;
  color: var(--brand-red-coral);
  height: 3.6rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.dc-list__item {
  width: 100%;
  cursor: pointer;
}

.dc-list__item-text, .dc-list__item-symbol {
  display: flex;
  width: 100%;
  justify-content: center;
  pointer-events: none;
  vertical-align: middle;
  padding: 0.6rem 1.6rem;
}

.dc-list__item-text--left {
  justify-content: flex-start;
}

[dir="ltr"] .dc-list__item-text--left {
  padding-left: 1em;
}

[dir="rtl"] .dc-list__item-text--left {
  padding-right: 1em;
}

.dc-list__item:not(.dc-list__item--disabled):not(.dc-list__item--selected):hover {
  background-color: var(--state-hover);
  color: var(--text-general);
}

[dir="ltr"] .dc-list__item--selected .dc-list__item-text,[dir="ltr"]  .dc-list__item--selected .dc-list__item-symbol,[dir="ltr"]  .dc-list__item--selected .dc-list__item-tooltip {
  text-align: left;
}

[dir="rtl"] .dc-list__item--selected .dc-list__item-text,[dir="rtl"]  .dc-list__item--selected .dc-list__item-symbol,[dir="rtl"]  .dc-list__item--selected .dc-list__item-tooltip {
  text-align: right;
}

.dc-list__item--selected .dc-list__item-text, .dc-list__item--selected .dc-list__item-symbol, .dc-list__item--selected .dc-list__item-tooltip {
  font-size: 1.4rem;
  color: var(--text-colored-background);
  font-weight: 700;
  text-transform: none;
  line-height: 1.5;
  line-height: 1.43;
  color: var(--text-prominent);
  background: var(--state-active);
  border-radius: 4px;
}

.dc-list__item:focus:not(.dc-list__item--disabled) {
  background-color: var(--state-hover);
  color: var(--text-general);
  outline: none;
}

.dc-list__item--disabled {
  color: var(--text-disabled);
  opacity: 0.3;
  cursor: default;
}

.dc-list__item-symbol {
  width: 100%;
  padding: 0.6rem 0;
  margin: 0;
  justify-content: center;
  display: flex;
}

.dc-list__separator {
  display: flex;
  width: calc(100% - 3.2rem);
  border-bottom: 1px solid var(--border-normal);
  margin: 1.6rem;
}

@media not all and (min-resolution: 0.001dpcm) {
  @supports (-webkit-appearance: none) {
    .dc-list {
      /* postcss-bem-linter: ignore */
    }

    .dc-list > div:nth-child(1) .dc-list > div:nth-child(1) {
      overflow-x: hidden !important;
    }

    .dc-list > div:nth-child(1) .dc-list > div:nth-child(1) {
      overflow-y: auto;
      /* postcss-bem-linter: ignore */
      /* postcss-bem-linter: ignore */
    }

    .dc-list > div:nth-child(1) .dc-list > div:nth-child(1)::-webkit-scrollbar {
      -webkit-appearance: none;
    }

    .dc-list > div:nth-child(1) .dc-list > div:nth-child(1) > div:nth-child(1) {
      padding-bottom: 11.5em !important;
    }
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.empty-state {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2.4rem;
}

.empty-state__content {
  display: flex;
  flex-direction: column;
  gap: 0.8rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .empty-state__action .dc-btn__text {
    font-size: var(--text-size-xxs);
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-expansion-panel__header-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  font-weight: bold;
}

.dc-expansion-panel__header-chevron-icon {
  cursor: pointer;
  transition: transform 0.3s ease;
  transform: rotate(0deg);
}

[dir="ltr"] .dc-expansion-panel__header-active .dc-expansion-panel__header-chevron-icon {
  transform: rotate(180deg);
}

[dir="rtl"] .dc-expansion-panel__header-active .dc-expansion-panel__header-chevron-icon {
  transform: rotate(-180deg);
}

.dc-expansion-panel__header-active {
  margin-bottom: 1.6rem;
}

.dc-expansion-panel__content-array {
  display: flex;
  align-items: flex-start;
  justify-content: flex-start;
  font-size: var(--text-size-xxs);
  line-height: 1.5;
}

.dc-expansion-panel__content-chevron-icon {
  margin-left: 4px;
  margin-right: 4px;
  cursor: pointer;
  transition: transform 0.3s ease;
  transform: rotate(0deg);
}

[dir="ltr"] .dc-expansion-panel__content-active .dc-expansion-panel__content-chevron-icon {
  transform: rotate(90deg);
}

[dir="rtl"] .dc-expansion-panel__content-active .dc-expansion-panel__content-chevron-icon {
  transform: rotate(-90deg);
}

[dir="ltr"] .dc-expansion-panel__content-array-item-index {
  margin-right: 4px;
}

[dir="rtl"] .dc-expansion-panel__content-array-item-index {
  margin-left: 4px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-modal; weak */
.dc-modal {
  /** @define dc-modal-header */
  /** @define dc-modal-body */
  /** @define dc-modal-footer; weak */
}

.dc-modal__container {
  display: flex;
  flex-direction: column;
  position: relative;
  overflow: hidden;
  border-radius: 8px;
  transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
  background-color: var(--general-main-2);
  box-shadow: 0 4px 6px 0 var(--shadow-menu);
}

.dc-modal__container--is-vertical-centered {
  transform: translateY(-50%) !important;
}

.dc-modal__container--is-vertical-centered {
  position: absolute;
  top: 50vh;
}

.dc-modal__container--is-vertical-centered .dc-modal__container {
  min-width: 0;
  min-width: initial;
  top: 2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-modal__container--is-vertical-centered {
    width: calc(100vw - 4.8rem) !important;
  }

  [dir="ltr"] .dc-modal__container--is-vertical-centered {
    left: 2.4rem;
  }

  [dir="rtl"] .dc-modal__container--is-vertical-centered {
    right: 2.4rem;
  }
}

.dc-modal__container--is-vertical-top {
  top: 48px;
  position: absolute;
}

@media (max-width: 600px) {
  .dc-modal__container--is-vertical-top {
    width: calc(100vw - 3.2rem) !important;
  }
  .dc-modal__container--is-vertical-top {
    top: 48px;
  }

  [dir="ltr"] .dc-modal__container--is-vertical-top {
    left: 1.6rem;
  }

  [dir="rtl"] .dc-modal__container--is-vertical-top {
    right: 1.6rem;
  }
}

.dc-modal__container--is-vertical-bottom {
  bottom: 36px;
  position: absolute;
}

@media (max-width: 600px) {
  .dc-modal__container--is-vertical-bottom {
    width: calc(100vw - 3.2rem) !important;
  }

  [dir="ltr"] .dc-modal__container--is-vertical-bottom {
    left: 1.6rem;
  }

  [dir="rtl"] .dc-modal__container--is-vertical-bottom {
    right: 1.6rem;
  }
}

.dc-modal__container--hide {
  display: none;
}

.dc-modal__container--enter, .dc-modal__container--exit {
  transform: translateY(50px);
  opacity: 0;
  pointer-events: none;
}

.dc-modal__container--enter-done {
  transform: translateY(0);
  opacity: 1;
  pointer-events: auto;
}

.dc-modal__container--small {
  max-width: 440px;
}

.dc-modal__container--small .dc-modal-header {
  border-bottom: none;
}

.dc-modal__container--is-confirmation-modal .dc-modal-header {
  border-bottom: none;
}

.dc-modal__container--is-confirmation-modal .dc-modal-header__title {
  padding: 2.4rem;
}

.dc-modal__container--is-confirmation-modal .dc-modal-body {
  padding: 0 2.4rem;
}

.dc-modal__container--is-confirmation-modal .dc-modal-footer {
  padding: 2.4rem;
}

@media (min-width: 601px) {
  .dc-modal__container {
    min-width: 440px !important;
    max-height: calc(100vh - 48px - 36px) !important;
  }
}

@media (max-width: 600px) {
  .dc-modal__container {
    max-width: calc(100vw - 3.2rem) !important;
  }
}

@media (max-width: 1279px) {
  .dc-modal__container_sent-email__modal {
    height: 42rem !important;
    overflow-y: scroll !important;
  }
}

.dc-modal-header {
  display: flex;
  justify-content: space-between;
  width: 100%;
  line-height: 24px;
  align-items: center;
}

.dc-modal-header__border-bottom {
  border-bottom: 2px solid var(--general-section-5) !important;
}

[dir="ltr"] .dc-modal-header__icon {
  margin-right: 1rem;
}

[dir="rtl"] .dc-modal-header__icon {
  margin-left: 1rem;
}

.dc-modal-header__icon:hover {
  cursor: pointer;
}

.dc-modal-header__title {
  padding: 1.6rem 2.4rem;
  display: flex;
  align-items: center;
  height: 100%;
}

.dc-modal-header__title:empty {
  padding: 0;
  border: none;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-modal-header__title {
    font-size: 1.4rem;
    padding: 1.6rem;
    line-height: 1.2;
  }
}

.dc-modal-header__section {
  flex-grow: 1;
  padding: 1.6rem;
  line-height: 24px;
  display: flex;
  align-items: center;
}

.dc-modal-header__close {
  display: block;
  cursor: pointer;
  padding: 0.6rem 0.8rem;
  height: 30px;
  width: 32px;
}

[dir="ltr"] .dc-modal-header__close {
  margin: 1.2rem 1.6rem 1.2rem auto;
}

[dir="rtl"] .dc-modal-header__close {
  margin: 1.2rem auto 1.2rem 1.6rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-modal-header__close {
    margin: 0.8rem;
  }
}

.dc-modal-header--is-title-centered {
  justify-content: flex-end;
  position: relative;
}

.dc-modal-header--is-title-centered .dc-modal-header__title {
  justify-content: center;
  width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-modal-header--is-title-centered .dc-modal-header__title {
    position: absolute;
  }
}

.dc-modal-header--is-title-centered .dc-modal-header__close {
  z-index: 1;
}

@media not all and (min-resolution: 0.001dpcm) {
  @supports (-webkit-appearance: none) {
    .dc-modal-header {
      /* postcss-bem-linter: ignore */
      min-height: 4.8rem;
    }
  }
}

.dc-modal-body {
  padding: 2.4rem;
  font-size: 1.4rem;
  line-height: 1.43;
  color: var(--text-prominent);
}

.dc-modal-body:first-child {
  padding-top: 2.4rem;
}

.dc-modal-body__expiration {
  min-height: 12rem;
  padding: 1.6rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-modal-body {
    font-size: 1.2rem;
    padding: 0.8rem 2.4rem;
  }
}

.dc-modal-footer {
  display: flex;
  justify-content: flex-end;
  padding: 1.6rem;
  margin-top: auto;
}

.dc-modal-footer .dc-btn {
  margin: 0 0.8rem;
}

.dc-modal-footer .dc-btn:last-child {
  margin: 0;
}

.dc-modal-footer--separator {
  border-top: 2px solid var(--general-section-1);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.error-modal {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.error-modal .dc-btn {
  margin-top: 2.4rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .error-modal {
    height: calc(100vh - 80px);
  }

  .error-modal .dc-btn {
    width: 100%;
    margin-top: 1.6rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-file-dropzone {
  width: 100%;
  height: 100%;
  border: 1px dashed var(--border-normal);
  border-radius: 4px;
  color: var(--text-prominent);
  text-align: center;
  font-size: 20px;
  font-weight: bold;
  padding: 2rem;
  cursor: pointer;
  position: relative;
}

.dc-file-dropzone__content {
  position: absolute;
  height: 100%;
  width: 100%;
  top: 0;
  display: flex;
  align-items: center;
  justify-content: center;
}

[dir="ltr"] .dc-file-dropzone__content {
  left: 0;
}

[dir="rtl"] .dc-file-dropzone__content {
  right: 0;
}

.dc-file-dropzone__message {
  position: absolute;
  display: block;
  opacity: 1;
  max-width: 168px;
  transform: translate3d(0, 0, 0);
  transition: transform 0.25s ease, opacity 0.15s linear;
  pointer-events: none;
}

.dc-file-dropzone__message--enter-done {
  opacity: 1;
  transform: translate3d(0, 0, 0);
}

.dc-file-dropzone__message--enter {
  opacity: 0;
  transform: translate3d(0, -16px, 0);
}

.dc-file-dropzone__message--enter-active {
  opacity: 1;
  transform: translate3d(0, 0, 0);
}

.dc-file-dropzone__message--exit {
  opacity: 1;
  transform: translate3d(0, 0, 0);
}

.dc-file-dropzone__message--exit-active {
  opacity: 0;
  transform: translate3d(0, -16px, 0);
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-file-dropzone__message {
    max-width: 26rem;
  }
}

.dc-file-dropzone__filename {
  width: 100%;
}

.dc-file-dropzone--has-file {
  border-style: solid;
  border-color: var(--status-success);
  background-color: var(--general-section-1);
}

.dc-file-dropzone--has-error {
  border-style: solid;
  border-color: var(--status-danger);
}

.dc-file-dropzone--has-error .dc-file-dropzone__filename {
  margin-top: -3em;
}

.dc-file-dropzone--is-noclick {
  cursor: auto;
}

.dc-file-dropzone:hover, .dc-file-dropzone:focus {
  outline: 0;
}

.dc-file-dropzone:hover {
  background-color: rgba(0, 0, 0, 0.025);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-form-progress {
  width: 100%;
  position: relative;
}

.dc-form-progress__header {
  align-items: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  margin-bottom: 3.2rem;
}

.dc-form-progress__header > h2 {
  text-transform: none;
  margin: 2rem 0 0;
}

.dc-form-progress__step {
  align-items: center;
  display: flex;
  flex-direction: column;
  height: 6rem;
  width: 134px;
  z-index: 2;
  gap: 1rem;
}

.dc-form-progress__step .identifier {
  border-radius: 50%;
  display: block;
  width: 24px;
  background-color: var(--text-less-prominent);
  border: 1px solid var(--text-less-prominent);
  margin-top: 4px;
}

.dc-form-progress__step .identifier--active {
  background-color: var(--brand-red-coral) !important;
  border: 1px solid var(--brand-red-coral) !important;
}

.dc-form-progress__steps {
  align-items: center;
  display: flex;
  justify-content: center;
  margin-top: 20px;
  position: relative;
}

.dc-form-progress__steps--before {
  bottom: 0;
  content: "";
  left: 0;
  margin: 0 auto; /* this centers the line to the full width specified */
  position: absolute; /* positioning must be absolute here, and relative positioning must be applied to the parent */
  right: 0;
  top: 1.7rem;
  border-top: 2px solid var(--text-less-prominent);
}

.dc-form-progress__steps--after {
  border-top: 2px solid var(--brand-red-coral);
  transition: width 0.3s ease;
}

@media (min-width: 1280px) {
  .dc-form-progress__steps--after {
    bottom: 0;
    content: "";
    margin: 0 auto; /* this centers the line to the full width specified */
    position: absolute; /* positioning must be absolute here, and relative positioning must be applied to the parent */
    top: 1.7rem;
  }

  [dir="ltr"] .dc-form-progress__steps--after {
    left: 0;
  }

  [dir="rtl"] .dc-form-progress__steps--after {
    right: 0;
  }
}

@media (max-width: 1279px) {
  .dc-form-progress__steps--after {
    position: absolute;
    top: 0;
  }
}

.dc-form-progress--initial {
  border-top: 2px solid var(--checkbox-disabled-grey);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-form-submit-button {
  display: flex;
  align-items: center;
  justify-content: flex-end;
  align-self: flex-end;
  background-color: transparent;
}

.dc-form-submit-button:only-child {
  width: 100%;
}

.dc-form-submit-button .dc-btn {
  margin: 0 0.8rem;
}

[dir="ltr"] .dc-form-submit-button .dc-btn:first-child {
  margin-left: 0;
}

[dir="rtl"] .dc-form-submit-button .dc-btn:first-child {
  margin-right: 0;
}

.dc-form-submit-button .dc-btn:last-child {
  margin: 0;
}

.dc-form-submit-button--absolute {
  position: absolute;
  bottom: 0;
  padding: 1.6rem;
  width: 100%;
  background-color: var(--general-main-1);
  border-top: 1px solid var(--general-section-1);
}

[dir="ltr"] .dc-form-submit-button--absolute {
  right: 0;
}

[dir="rtl"] .dc-form-submit-button--absolute {
  left: 0;
}

.dc-form-submit-button--center {
  justify-content: center;
  width: 100%;
  height: 100%;
}

.dc-form-submit-button--center .btn {
  min-width: 9rem;
}

.dc-form-submit-button--error {
  text-transform: none;
}

@media (max-width: 1279px) {
  .dc-form-submit-button--absolute {
    top: auto;
    top: initial;
    bottom: 0;
    position: fixed;
    padding: 1.6rem;
    border-top: 2px solid var(--general-disabled);
    max-height: 70px;
    width: 100%;
    justify-content: center;
  }

  [dir="ltr"] .dc-form-submit-button--absolute {
    left: 0;
  }

  [dir="rtl"] .dc-form-submit-button--absolute {
    right: 0;
  }

  .dc-form-submit-button--absolute .dc-btn {
    height: 40px;
    width: 100%;
    max-width: 30rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-form-submit-error-message; weak */
.dc-form-submit-error-message {
  display: flex;
  align-items: center;
  flex: 1;
}

[dir="ltr"] .dc-form-submit-error-message {
  margin-right: auto;
}

[dir="rtl"] .dc-form-submit-error-message {
  margin-left: auto;
}

[dir="ltr"] .dc-form-submit-error-message p {
  padding-left: 0.8rem;
}

[dir="rtl"] .dc-form-submit-error-message p {
  padding-right: 0.8rem;
}

@media (max-width: 1279px) {
  .dc-form-submit-error-message p {
    line-height: 20px;
  }
}

@media (max-width: 1279px) {
  .dc-form-submit-error-message {
    padding: 0 1.6rem 1rem;
    position: absolute;
    bottom: 7rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-form-cancel-button {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  align-self: flex-start;
}

.dc-form-cancel-button:only-child {
  width: 100%;
}

.dc-form-cancel-button .dc-btn {
  margin: 0 0.8rem;
}

[dir="ltr"] .dc-form-cancel-button .dc-btn:first-child {
  margin-left: 0;
}

[dir="rtl"] .dc-form-cancel-button .dc-btn:first-child {
  margin-right: 0;
}

.dc-form-cancel-button .dc-btn:last-child {
  margin: 0;
}

.dc-form-cancel-button--absolute {
  bottom: 0;
  position: absolute;
  padding: 1.6rem;
}

[dir="ltr"] .dc-form-cancel-button--absolute {
  left: 0;
}

[dir="rtl"] .dc-form-cancel-button--absolute {
  right: 0;
}

.dc-form-cancel-button--center {
  justify-content: center;
  width: 100%;
  height: 100%;
}

.dc-form-cancel-button--center .btn {
  min-width: 9rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-form-cancel-button--absolute {
    background-color: var(--general-section-2);
    top: auto;
    top: initial;
    bottom: 0;
    position: absolute;
    padding: 1.6rem;
    border-top: 2px solid var(--general-disabled);
    max-height: 70px;
    width: 100%;
  }

  [dir="ltr"] .dc-form-cancel-button--absolute {
    left: 0;
  }

  [dir="rtl"] .dc-form-cancel-button--absolute {
    right: 0;
  }

  .dc-form-cancel-button--absolute .dc-btn {
    height: 40px;
    width: 100%;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.gradient-background {
  position: relative;
  width: 100%;
  overflow: hidden;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
}

.gradient-background__container {
  position: relative;
  width: 100%;
  max-width: 128rem;
  display: flex;
  align-items: center;
}

.gradient-background__primary {
  position: absolute;
  aspect-ratio: 1;
  width: 45.8%;
  opacity: 1;
  filter: blur(400px);
}

[dir="ltr"] .gradient-background__primary {
  right: -1.9%;
}

[dir="rtl"] .gradient-background__primary {
  left: -1.9%;
}

@media (min-width: 320px) and (max-width: 767px) {
  .gradient-background__primary {
    width: 111%;
    top: 30%;
    opacity: 0.8;
    filter: blur(200px);
  }

  [dir="ltr"] .gradient-background__primary {
    right: -30%;
  }

  [dir="rtl"] .gradient-background__primary {
    left: -30%;
  }
}

.gradient-background__secondary {
  position: absolute;
  aspect-ratio: 1;
  transform: translateY(-48%);
  width: 23%;
  top: 0;
  opacity: 1;
  filter: blur(140px);
}

[dir="ltr"] .gradient-background__secondary {
  right: -11%;
}

[dir="rtl"] .gradient-background__secondary {
  left: -11%;
}

@media (min-width: 320px) and (max-width: 767px) {
  .gradient-background__secondary {
    width: 62%;
    top: -10%;
    opacity: 0.8;
    filter: blur(100px);
  }

  [dir="ltr"] .gradient-background__secondary {
    right: -33%;
  }

  [dir="rtl"] .gradient-background__secondary {
    left: -33%;
  }
}

.gradient-background__tertiary {
  position: absolute;
  transform: translateY(-54%);
  aspect-ratio: 1;
  width: 28%;
  top: 0;
  opacity: 1;
  filter: blur(240px);
}

[dir="ltr"] .gradient-background__tertiary {
  left: -15%;
}

[dir="rtl"] .gradient-background__tertiary {
  right: -15%;
}

@media (min-width: 320px) and (max-width: 767px) {
  .gradient-background__tertiary {
    width: 71%;
    top: 10%;
    opacity: 0.8;
    filter: blur(200px);
  }

  [dir="ltr"] .gradient-background__tertiary {
    left: -35%;
  }

  [dir="rtl"] .gradient-background__tertiary {
    right: -35%;
  }
}

.gradient-background__children {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  justify-content: center;
  align-items: center;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.gradient-background-two-point {
  width: 100%;
  height: 100%;
  position: relative;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  gap: 50%;
  overflow: hidden;
}

.gradient-background-two-point__primary {
  height: 100%;
  aspect-ratio: 1;
}

.gradient-background-two-point__secondary {
  height: 120%;
  aspect-ratio: 1;
}

.gradient-background-two-point__children {
  position: absolute;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-hint-box {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-size: var(--text-size-xxxs);
  line-height: 1.4rem;
  padding: 8px;
  border-radius: 4px;
}

.dc-hint-box--inline {
  margin-top: 0.8rem;
  display: flex;
  align-items: flex-start;
  gap: 0.8rem;
}

.dc-hint-box--inline-message > p {
  padding-bottom: 0 !important;
}

[dir="ltr"] .dc-hint-box--inline-icon {
  margin-right: 0;
}

[dir="rtl"] .dc-hint-box--inline-icon {
  margin-left: 0;
}

.dc-hint-box--info {
  background-color: var(--transparent-info);
}

.dc-hint-box--warn {
  background-color: var(--status-warning-transparent);
}

.dc-hint-box--danger {
  background-color: var(--transparent-danger);
}

[dir="ltr"] .dc-hint-box__icon {
  margin-right: 8px;
}

[dir="rtl"] .dc-hint-box__icon {
  margin-left: 8px;
}

.dc-hint-box__message {
  color: var(--text-prominent);
}

.hint-box-layout {
  display: grid;
  grid-template-columns: auto 1fr;
  align-items: flex-start;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-horizontal-swipe {
  display: flex;
}

.dc-horizontal-swipe--left {
  display: flex;
  position: absolute;
}

[dir="ltr"] .dc-horizontal-swipe--left {
  left: 0;
}

[dir="rtl"] .dc-horizontal-swipe--left {
  right: 0;
}

.dc-horizontal-swipe--main {
  background: var(--general-main-1);
  transition: 0.5s ease-in-out;
  width: 100vw;
  z-index: 1000;
}

.dc-horizontal-swipe--right {
  display: flex;
  position: absolute;
}

[dir="ltr"] .dc-horizontal-swipe--right {
  right: 0;
}

[dir="rtl"] .dc-horizontal-swipe--right {
  left: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.inline-message {
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  padding: 0.8rem;
  gap: 0.8rem;
  border-radius: 4px;
  height: -moz-min-content;
  height: min-content;
}

@media (min-width: 768px) {
  .inline-message__lg {
    padding: 1.6rem;
    gap: 1.6rem;
    border-radius: 8px;
  }
}

.inline-message__warning {
  background: rgba(255, 173, 58, 0.16);
}

.inline-message__information {
  background: rgba(55, 124, 252, 0.16);
}

.inline-message__announcement {
  background: rgba(75, 180, 179, 0.16);
}

.inline-message__error {
  background: rgba(236, 63, 63, 0.16);
}

.inline-message__icon__sm {
  margin-top: 0.1rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .inline-message__icon__sm {
    margin-top: 0;
  }
}

.inline-message__icon__md {
  margin-top: 0.2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .inline-message__icon__md {
    margin-top: 0.1rem;
  }
}

@media (min-width: 320px) and (max-width: 767px) {
  .inline-message__icon__lg {
    margin-top: 0.2rem;
  }
}

.inline-message__messages {
  display: flex;
  flex-direction: column;
  flex: 1;
  align-self: stretch;
}

.inline-message__messages__xs {
  margin-top: 0.1rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .inline-message__messages__xs {
    margin-top: 0.2rem;
  }
}

@media (min-width: 320px) and (max-width: 767px) {
  .inline-message__messages__sm {
    margin-top: 0.1rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-label {
  font-size: 14px;
  font-weight: bold;
  height: 24px;
  line-height: 20px;
  border-radius: 12px;
  padding: 2px 8px;
  margin: 0 2px;
  position: relative;
  /* TODO: change all :after to normal background color once styleguide ready */
}

.dc-label:after {
  opacity: 0.16;
  content: "";
  width: 100%;
  height: 100%;
  top: 0;
  position: absolute;
  border-radius: 12px;
}

[dir="ltr"] .dc-label:after {
  left: 0;
}

[dir="rtl"] .dc-label:after {
  right: 0;
}

.dc-label--general--default {
  color: var(--status-default);
}

.dc-label--general--default:after {
  background-color: var(--status-default);
}

.dc-label--general--adjustment {
  color: var(--status-adjustment);
}

.dc-label--general--adjustment:after {
  background-color: var(--status-adjustment);
}

.dc-label--general--danger {
  color: var(--status-danger);
}

.dc-label--general--danger:after {
  background-color: var(--status-danger);
}

.dc-label--general--warn {
  color: var(--status-warning);
}

.dc-label--general--warn:after {
  background-color: var(--status-warning);
}

.dc-label--general--success {
  color: var(--status-success);
}

.dc-label--general--success:after {
  background-color: var(--status-success);
}

.dc-label--general--transfer {
  color: var(--status-transfer);
}

.dc-label--general--transfer:after {
  background-color: var(--status-transfer);
}

.dc-label--general--default-invert {
  color: var(--status-less-prominent);
}

.dc-label--general--default-invert:after {
  background-color: var(--status-less-prominent);
}

.dc-label--general--success-invert {
  color: var(--text-colored-background);
  background-color: var(--status-success);
}

.dc-label--general--warn-invert {
  color: var(--text-colored-background);
  background-color: var(--status-warning);
}

.dc-label--general--info {
  color: var(--status-info);
}

.dc-label--general--info:after {
  background-color: var(--status-info);
}

.dc-label--large {
  height: 28px;
  border-radius: 20px;
  margin: 0 2px;
  font-size: 16px;
}

[dir="ltr"] .dc-label--large {
  padding: 4px 8px 4px 4px;
}

[dir="rtl"] .dc-label--large {
  padding: 4px 4px 4px 8px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-linear-progress; weak */
.dc-linear-progress {
  display: flex;
  height: 4px;
  justify-content: flex-start;
  align-items: flex-start;
  flex-direction: column;
  position: absolute;
  bottom: 0;
  width: 100%;
}

[dir="ltr"] .dc-linear-progress {
  left: 0;
}

[dir="rtl"] .dc-linear-progress {
  right: 0;
}

.dc-linear-progress__bar {
  height: 100%;
  transition: width 0.5s cubic-bezier(0.62, 0.01, 0.51, 0.95);
  background-color: var(--brand-red-coral);
}

.dc-linear-progress__countdown {
  position: absolute;
  bottom: 1rem;
  font-size: 12px;
  color: var(--brand-red-coral);
  font-weight: bold;
}

[dir="ltr"] .dc-linear-progress__countdown {
  left: 1rem;
}

[dir="rtl"] .dc-linear-progress__countdown {
  right: 1rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
.dc-mobile-drawer__header-close {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.dc-mobile-drawer__header-close .color1-fill {
  fill: var(--text-prominent);
}

.dc-mobile-drawer__header-close .color1-stroke {
  stroke: var(--text-prominent);
}
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/* @define dc-mobile-drawer; weak */
@keyframes openDrawer {
  0% {
    transform: translateX(-100%);
  }

  60%, 100% {
    transform: translateX(0);
  }

  80% {
    transform: translateX(-5%);
  }
}

@keyframes openRtlDrawer {
  0% {
    transform: translateX(100%);
  }

  60%, 100% {
    transform: translateX(0);
  }

  80% {
    transform: translateX(5%);
  }
}

@keyframes closeDrawer {
  0% {
    transform: translateX(0);
  }

  100% {
    transform: translateX(-100%);
  }
}

@keyframes closeRtlDrawer {
  0% {
    transform: translateX(0);
  }

  100% {
    transform: translateX(100%);
  }
}

.dc-mobile-drawer {
  position: absolute;
  top: 0;
  will-change: transform;
  animation-name: openDrawer;
  animation-duration: 0.4s;
  animation-fill-mode: forwards;
  z-index: 10000;
}

[dir="ltr"] .dc-mobile-drawer {
  left: 0;
  transform: translateX(-100%);
}

[dir="rtl"] .dc-mobile-drawer {
  right: 0;
  transform: translateX(100%);
}

[dir=rtl] .dc-mobile-drawer {
  animation-name: openRtlDrawer;
}

.dc-mobile-drawer__container {
  display: flex;
  flex-direction: column;
  position: relative;
  overflow: hidden;
  background-color: var(--general-main-2);
  box-shadow: 0 16px 16px 0 var(--shadow-menu), 0 0 16px 0 var(--shadow-menu);
}

.dc-mobile-drawer-header__title--pre-appstore {
  display: flex;
  justify-content: space-between;
}

.dc-mobile-drawer__header {
  display: flex;
  width: 100%;
  height: 50px;
  z-index: 4;
  line-height: 24px;
  align-items: center;
  border-bottom: 1px solid var(--general-section-2);
}

.dc-mobile-drawer__header--right {
  flex-direction: row-reverse;
}

.dc-mobile-drawer__header-title {
  padding: 1.2rem 1.6rem;
  height: 40px;
  width: 100%;
  display: flex;
  align-items: center;
}

[dir="ltr"] .dc-mobile-drawer__header-title {
  border-left: 1px solid var(--general-section-2);
}

[dir="rtl"] .dc-mobile-drawer__header-title {
  border-right: 1px solid var(--general-section-2);
}

.dc-mobile-drawer__header-section {
  flex-grow: 1;
  padding: 1.6rem;
  line-height: 24px;
  display: flex;
  align-items: center;
}

.dc-mobile-drawer__header-close {
  display: flex;
  align-items: center;
  cursor: pointer;
  padding: 0.6rem 1.2rem;
  height: inherit;
  width: 40px;
}

.dc-mobile-drawer__header-wrapper {
  display: flex;
  width: 100%;
  justify-content: space-between;
  transition: all 0.2s;
}

.dc-mobile-drawer__subheader {
  display: flex;
  height: 72px;
  min-height: 72px;
  border-bottom: 1px solid var(--general-section-2);
  justify-content: center;
  align-items: center;
  margin-bottom: 1.8rem;
  position: absolute;
  width: 100%;
  background: var(--general-main-2);
  z-index: 1;
}

.dc-mobile-drawer__subheader--hidden {
  visibility: hidden;
}

.dc-mobile-drawer__submenu-back {
  width: 16px;
  height: 16px;
}

[dir="ltr"] .dc-mobile-drawer__submenu-back {
  margin-right: 16px;
}

[dir="rtl"] .dc-mobile-drawer__submenu-back {
  margin-left: 16px;
}

[dir=rtl] .dc-mobile-drawer__submenu-back {
  rotate: 180deg;
}

.dc-mobile-drawer__submenu-toggle {
  display: flex;
  height: 5.6rem;
  align-items: center;
}

[dir="ltr"] .dc-mobile-drawer__submenu-toggle {
  padding: 0 1.6rem 0 4.8rem;
}

[dir="rtl"] .dc-mobile-drawer__submenu-toggle {
  padding: 0 4.8rem 0 1.6rem;
}

.dc-mobile-drawer__submenu-toggle--hidden {
  visibility: hidden;
  height: 0;
  padding: 0;
}

.dc-mobile-drawer__submenu-toggle-icon {
  width: 16px;
  height: 16px;
}

[dir="ltr"] .dc-mobile-drawer__submenu-toggle-icon {
  margin-right: 16px;
}

[dir="rtl"] .dc-mobile-drawer__submenu-toggle-icon {
  margin-left: 16px;
}

.dc-mobile-drawer__submenu-toggle-suffix-icon {
  width: 16px;
  height: 16px;
}

[dir="ltr"] .dc-mobile-drawer__submenu-toggle-suffix-icon {
  margin-left: auto;
}

[dir="rtl"] .dc-mobile-drawer__submenu-toggle-suffix-icon {
  margin-right: auto;
}

[dir=rtl] .dc-mobile-drawer__submenu-toggle-suffix-icon {
  rotate: 180deg;
}

.dc-mobile-drawer__submenu-list {
  background: var(--general-main-2);
  position: absolute;
  z-index: 2;
  transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
  width: 100%;
  height: 100%;
  top: 0;
  overflow: auto;
}

[dir="ltr"] .dc-mobile-drawer__submenu-list {
  left: 0;
}

[dir="rtl"] .dc-mobile-drawer__submenu-list {
  right: 0;
}

.dc-mobile-drawer__submenu-list[\:has\(.settings-language__language-container\)] {
  z-index: 7;
}

.dc-mobile-drawer__submenu-list:has(.settings-language__language-container) {
  z-index: 7;
}

.dc-mobile-drawer__submenu-list--enter, .dc-mobile-drawer__submenu-list--exit {
  opacity: 0;
  pointer-events: none;
}

[dir="ltr"] .dc-mobile-drawer__submenu-list--enter, [dir="ltr"] .dc-mobile-drawer__submenu-list--exit {
  transform: translateX(-100%);
}

[dir="rtl"] .dc-mobile-drawer__submenu-list--enter, [dir="rtl"] .dc-mobile-drawer__submenu-list--exit {
  transform: translateX(100%);
}

.dc-mobile-drawer__submenu-list--enter-done {
  transform: translateX(0);
  opacity: 1;
  pointer-events: auto;
}

.dc-mobile-drawer__submenu-list--has-subheader {
  height: 100%;
}

.dc-mobile-drawer__submenu-list-title {
  display: flex;
  align-items: center;
}

[dir="ltr"] .dc-mobile-drawer__submenu-list-title {
  padding: 2rem 0 3.2rem 3.2rem;
}

[dir="rtl"] .dc-mobile-drawer__submenu-list-title {
  padding: 2rem 3.2rem 3.2rem 0;
}

.dc-mobile-drawer__submenu-section {
  display: flex;
  padding-bottom: 3.2rem;
  flex-direction: column;
}

[dir="ltr"] .dc-mobile-drawer__submenu-section {
  padding-left: 5.6rem;
}

[dir="rtl"] .dc-mobile-drawer__submenu-section {
  padding-right: 5.6rem;
}

.dc-mobile-drawer__submenu-section-title {
  display: flex;
  align-items: center;
}

[dir="ltr"] .dc-mobile-drawer__submenu-section-title-text {
  padding-left: 1.6rem;
}

[dir="rtl"] .dc-mobile-drawer__submenu-section-title-text {
  padding-right: 1.6rem;
}

[dir="ltr"] .dc-mobile-drawer__submenu-section-content {
  padding-left: 4.8rem;
}

[dir="rtl"] .dc-mobile-drawer__submenu-section-content {
  padding-right: 4.8rem;
}

.dc-mobile-drawer__submenu-section-content .header__menu-mobile-link {
  padding-top: 1.6rem;
}

.dc-mobile-drawer__submenu-section-content .header__menu-mobile-link--disabled {
  opacity: 0.32;
  pointer-events: none;
}

.dc-mobile-drawer__body {
  font-size: 1.4rem;
  height: 100%;
  padding-top: 8.8rem;
  line-height: 1.5;
  color: var(--text-prominent);
  overflow-y: auto;
  overflow-x: hidden;
}

.dc-mobile-drawer__body.no-padding {
  padding-top: 0;
}

.dc-mobile-drawer__body.tradershub-os-header {
  padding-top: 2.4rem;
}

.dc-mobile-drawer__item {
  font-size: 1.4rem;
  line-height: 1.5;
  height: 5.6rem;
  color: var(--text-prominent);
  display: flex;
  justify-content: flex-start;
  align-items: center;
}

[dir="ltr"] .dc-mobile-drawer__item {
  padding: 0 1.6rem 0 4.8rem;
}

[dir="rtl"] .dc-mobile-drawer__item {
  padding: 0 4.8rem 0 1.6rem;
}

.dc-mobile-drawer__footer {
  display: flex;
  height: 36px;
  z-index: 4;
  border-top: 1px solid var(--general-section-2);
  justify-content: flex-start;
  align-items: center;
  padding: 1.6rem;
}

.dc-mobile-drawer__footer--servertime {
  justify-content: center;
  align-items: center;
  border-top: 1px solid var(--general-section-2);
}

.dc-mobile-drawer__overlay {
  z-index: 9999 !important;
  background-color: var(--overlay-outside-dialog) !important;
}

.dc-mobile-drawer.exit {
  animation: closeDrawer 0.3s;
}

[dir=rtl] .dc-mobile-drawer.exit {
  animation: closeRtlDrawer 0.3s;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-mobile-full-page-modal {
  height: calc(100% - 48px - 48px);
  position: fixed;
  z-index: 6;
  width: 100%;
  top: calc(48px + 48px);
  background: var(--general-main-1);
  max-height: 100%;
  overflow-y: scroll;
}

[dir="ltr"] .dc-mobile-full-page-modal {
  left: 0px;
}

[dir="rtl"] .dc-mobile-full-page-modal {
  right: 0px;
}

.dc-mobile-full-page-modal--flex {
  display: flex;
  flex-direction: column;
  flex: 1;
}

.dc-mobile-full-page-modal--popup {
  height: calc(100% - 48px - 1px);
  top: calc(48px - 1px);
}

.dc-mobile-full-page-modal__header {
  align-items: center;
  display: flex;
  flex-direction: row;
  padding: 1.6rem;
  flex: 0;
}

.dc-mobile-full-page-modal__header--border-bottom {
  border-bottom: 2px solid var(--general-section-2);
}

.dc-mobile-full-page-modal__header-return {
  display: flex;
  align-items: center;
}

[dir="ltr"] .dc-mobile-full-page-modal__header-return {
  margin-right: 1.6rem;
}

[dir="rtl"] .dc-mobile-full-page-modal__header-return {
  margin-left: 1.6rem;
}

.dc-mobile-full-page-modal__header-text {
  display: flex;
  flex-direction: row;
}

.dc-mobile-full-page-modal__header-trailing-icon {
  align-items: center;
  display: flex;
}

[dir="ltr"] .dc-mobile-full-page-modal__header-trailing-icon {
  margin-left: auto;
}

[dir="rtl"] .dc-mobile-full-page-modal__header-trailing-icon {
  margin-right: auto;
}

.dc-mobile-full-page-modal__body {
  display: flex;
  flex: 1;
  min-height: 0;
  overflow-y: auto;
}

.dc-mobile-full-page-modal__footer {
  border-top: 2px solid var(--general-section-1);
  display: flex;
  flex-direction: row;
  justify-content: flex-end;
  margin-top: auto;
  padding: 1.6rem;
}

.dc-mobile-full-page-modal__footer-parent {
  border-top: 1px solid var(--general-section-2);
  padding: 0.8rem 1.6rem;
  background-color: var(--general-main-1);
}

.dc-mobile-full-page-modal form {
  height: 100%;
}

.dc-mobile-full-page-modal .dc-page-overlay__content {
  position: fixed;
  top: calc(48px + 48px);
  width: 100%;
  height: 100%;
}

.dc-mobile-full-page-modal .dc-page-overlay__header {
  position: fixed;
  top: 48px;
  width: 100%;
  height: 48px;
}

.dc-mobile-full-page-modal .dc-tabs {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.dc-mobile-full-page-modal .dc-tabs__list {
  width: 100%;
  height: 4rem;
}

.dc-mobile-full-page-modal .dc-tabs__item {
  width: 50%;
}

.dc-mobile-full-page-modal .dc-tabs__content {
  height: calc(100% - 40px);
  z-index: 5;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define multi-step; weak */
.multi-step {
  width: inherit;
  height: inherit;
}

.multi-step__header {
  display: flex;
  align-items: center;
  margin: 2.4rem 1.6rem;
}

.multi-step__btn {
  display: flex;
  font-size: 1.4rem;
  font-weight: bold;
  cursor: pointer;
  color: var(--text-general);
}

[dir="ltr"] .multi-step__btn-icon {
  margin-right: 8px;
}

[dir="rtl"] .multi-step__btn-icon {
  margin-left: 8px;
}

.multi-step__btn-icon .color1-fill {
  fill: var(--text-general);
}

.multi-step__component {
  width: 100%;
  height: 100%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
@keyframes dc-news-ticker {
  0% {
    transform: translate3d(100%, 0, 0);
  }

  100% {
    transform: translate3d(-100%, 0, 0);
  }
}

@keyframes dc-news-ticker-2 {
  0% {
    transform: translate3d(0, 0, 0);
  }

  100% {
    transform: translate3d(-200%, 0, 0);
  }
}

.dc-news-ticker {
  display: flex;
  white-space: nowrap;
  overflow: hidden;
}

.dc-news-ticker__children {
  animation-iteration-count: infinite;
  animation-name: dc-news-ticker;
  animation-timing-function: linear;
  will-change: transform;
}

.dc-news-ticker__children:nth-child(2) {
  animation-name: dc-news-ticker-2;
}

.dc-news-ticker__item {
  display: inline-block;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/* S: Steps
   N: Number
   B: Backspace
   O: Ok
   Z: Zero
 */
.dc-numpad {
  box-sizing: border-box;
  display: grid;
  grid-gap: 0.3rem;
  grid-template-columns: repeat(4, 1fr);
}

.dc-numpad--is-regular {
  grid-template-areas: "np np np np" "r3 r3 r3 b" "r2 r2 r2 b" "r1 r1 r1 o" "z z z o";
  grid-template-columns: min-content min-content min-content minmax(48px, 1fr);
  max-width: -moz-min-content;
  max-width: min-content;
}

.dc-numpad--is-currency {
  grid-template-areas: "np np np np" "r3 r3 r3 b" "r2 r2 r2 b" "r1 r1 r1 o" "z z p o";
  grid-template-columns: min-content min-content min-content minmax(48px, 1fr);
  max-width: -moz-min-content;
  max-width: min-content;
}

.dc-numpad__input-area {
  display: grid;
  grid-area: np;
  grid-template-areas: "dc inp inp nc";
  grid-template-columns: min-content 1fr 1fr min-content;
}

.dc-numpad__decrement {
  grid-area: dc;
}

[dir="ltr"] .dc-numpad__decrement {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

[dir="rtl"] .dc-numpad__decrement {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

.dc-numpad__increment {
  grid-area: nc;
}

[dir="ltr"] .dc-numpad__increment {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

[dir="rtl"] .dc-numpad__increment {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.dc-numpad__increment, .dc-numpad__decrement {
  width: 48px;
  height: 48px;
}

.dc-numpad__input-field, .dc-numpad__increment, .dc-numpad__decrement {
  background-color: var(--general-section-2);
  color: var(--text-prominent);
}

.dc-numpad__input-field {
  margin: 0 !important;
}

.dc-numpad__input-field {
  grid-area: inp;
  padding: 0;
  border: none;
  border-radius: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.6rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  text-align: center;
  line-height: 1.75;
  color: var(--text-prominent);
}

.dc-numpad__input-field input {
  padding: 0;
  max-height: 48px;
}

.dc-numpad__input-field--has-error {
  color: var(--status-danger);
  font-weight: bold;
}

[dir="ltr"] .dc-numpad__number {
  text-align: left;
}

[dir="rtl"] .dc-numpad__number {
  text-align: right;
}

.dc-numpad__number {
  border-radius: 2.4rem;
  background-color: var(--general-section-2);
  width: 48px;
  height: 48px;
  font-size: 1.6rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  line-height: 1.75;
  color: var(--text-prominent);
}

[dir="ltr"] .dc-numpad__number {
  text-align: left !important;
}

[dir="rtl"] .dc-numpad__number {
  text-align: right !important;
}

.dc-numpad__number--is-disabled, .dc-numpad__number[disabled] {
  background-color: var(--general-disabled) !important;
}

.dc-numpad__number--is-disabled, .dc-numpad__number[disabled] {
  pointer-events: none;
  touch-action: none;
}

.dc-numpad__number--r3 {
  grid-row: 2/2;
}

.dc-numpad__number--r2 {
  grid-row: 3/3;
}

.dc-numpad__number--r1 {
  grid-row: 4/4;
}

.dc-numpad__number--zero {
  width: 100% !important;
}

.dc-numpad__number--zero {
  grid-area: z;
}

.dc-numpad__number--is-left-aligned {
  width: 100%;
}

[dir="ltr"] .dc-numpad__number--is-left-aligned {
  text-align: left;
  padding: 0 0 0 4px;
}

[dir="rtl"] .dc-numpad__number--is-left-aligned {
  text-align: right;
  padding: 0 4px 0 0;
}

.dc-numpad__dot {
  grid-area: p;
}

.dc-numpad__bkspace {
  grid-area: b;
}

.dc-numpad__bkspace button {
  height: 100%;
}

.dc-numpad__ok {
  grid-area: o;
}

.dc-numpad__ok button {
  height: 100%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.open-livechat__link {
  background: transparent;
  border: none;
  margin: 0;
  padding: 0;
  color: var(--brand-red-coral);
}

.open-livechat__link:hover {
  text-decoration: underline;
  cursor: pointer;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-page-error */
.dc-page-error__container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: calc(100vh - 84px);
}

@media (min-width: 1024px) {
  [dir="ltr"] .dc-page-error__container--left {
    justify-content: left;
  }

  [dir="rtl"] .dc-page-error__container--left {
    justify-content: right;
  }
}

@media screen and (max-width: 1024px) {
  .dc-page-error__container {
    flex-wrap: wrap;
  }
}

.dc-page-error__box {
  background: var(--general-main-1);
  border: var(--general-main-1);
  padding: 2rem;
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  justify-content: center;
  /* postcss-bem-linter: ignore */
}

@media (min-width: 1024px) {
  .dc-page-error__box--left {
    align-items: start;
  }
}

@media screen and (min-width: 1008px) {
  .dc-page-error__box {
    max-width: calc(100vw - 45%);
  }
}

.dc-page-error__box .inline-icon {
  margin: 0 auto;
}

.dc-page-error__message {
  font-size: 1.6rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.75;
  max-width: 502px;
  margin: 1.6rem 0 2.4rem;
}

.dc-page-error__message-wrapper {
  display: flex;
  justify-content: center;
}

@media (min-width: 1024px) {
  [dir="ltr"] .dc-page-error__message-wrapper--left {
    justify-content: left;
  }

  [dir="rtl"] .dc-page-error__message-wrapper--left {
    justify-content: right;
  }
}

.dc-page-error__message-wrapper--left .dc-page-error__message-paragraph:not(:last-child) {
  margin-bottom: 1.6rem;
  max-width: 38rem;
}

@media (min-width: 1024px) {
  [dir="ltr"] .dc-page-error__message--left {
    text-align: left;
  }

  [dir="rtl"] .dc-page-error__message--left {
    text-align: right;
  }
}

.dc-page-error__btn {
  min-width: 14rem;
  margin: 1rem;
}

.dc-page-error__btn-wrapper {
  display: flex;
  justify-content: center;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-page-error__btn {
    margin: 0 0 1.6rem;
  }

  .dc-page-error__btn-wrapper {
    flex-direction: column;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.unhandled-error {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.unhandled-error .dc-btn {
  margin-top: 2.4rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .unhandled-error {
    height: calc(100vh - 80px);
  }

  .unhandled-error .dc-btn {
    width: 100%;
    margin-top: 1.6rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-page-overlay-portal {
  position: absolute;
  height: 100%;
  width: 100%;
  top: 48px;
  transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
  background-color: var(--general-main-2);
  opacity: 0;
}

@media (max-width: 1279px) {
  .dc-page-overlay-portal {
    top: 48px;
  }
}

.dc-page-overlay--enter, .dc-page-overlay--exit {
  transform: translateY(50px);
  opacity: 0;
  pointer-events: none;
}

.dc-page-overlay--enter-done {
  transform: translateY(0);
  opacity: 1;
  pointer-events: auto;
  z-index: 9;
}

.dc-page-overlay__header {
  position: sticky;
  top: 0;
  z-index: 2;
  background-color: var(--general-main-1);
  padding: 0.8rem 2.4rem;
  border-bottom: 1px solid var(--general-section-1);
}

.dc-page-overlay__header-title {
  flex: 1;
  text-align: center;
  font-size: var(--text-size-m);
  color: var(--text-prominent);
  font-weight: bold;
  line-height: 1.5;
}

@media (max-width: 1279px) {
  .dc-page-overlay__header-title {
    font-size: 1.6rem;
  }
}

.dc-page-overlay__header-close {
  cursor: pointer;
  height: 16px;
  position: absolute;
}

[dir="ltr"] .dc-page-overlay__header-close {
  right: 0;
}

[dir="rtl"] .dc-page-overlay__header-close {
  left: 0;
}

.dc-page-overlay__header-close .dc-icon {
  --fill-color1: var(--text-prominent);
}

@media (max-width: 600px) {
  [dir="ltr"] .dc-page-overlay__header-close {
    right: 1.6rem;
  }

  [dir="rtl"] .dc-page-overlay__header-close {
    left: 1.6rem;
  }
}

@media (min-width: 601px) and (max-width: 1279px) {
  [dir="ltr"] .dc-page-overlay__header-close {
    right: 2.4rem;
  }

  [dir="rtl"] .dc-page-overlay__header-close {
    left: 2.4rem;
  }
}

.dc-page-overlay__header-wrapper {
  width: 100%;
  display: flex;
  align-items: center;
}

@media (max-width: 1279px) {
  .dc-page-overlay__header-wrapper {
    height: 100%;
    padding: 0;
  }
}

@media (max-width: 1279px) {
  .dc-page-overlay__header {
    height: 4rem;
    z-index: 3;
    padding: 0;
    margin: 0;
  }
}

.dc-page-overlay__header-tradershub {
  padding: 0.8rem;
}

.dc-page-overlay__content {
  padding: 2.4rem 0 0;
  display: flex;
  background-color: var(--general-main-1);
}

.dc-page-overlay__content-side-note {
  min-width: 256px;
}

[dir="ltr"] .dc-page-overlay__content-side-note {
  margin-left: 2.4rem;
}

[dir="rtl"] .dc-page-overlay__content-side-note {
  margin-right: 2.4rem;
}

@media (max-width: 1279px) {
  .dc-page-overlay__content {
    flex: 1;
    padding: 0;
  }
}

.dc-page-overlay__header-wrapper, .dc-page-overlay__content {
  max-width: 1232px;
  margin: auto;
  position: relative;
}

@media (max-width: 1279px) {
  .dc-page-overlay__header-wrapper, .dc-page-overlay__content {
    width: 100%;
    display: flex;
    justify-content: center;
  }
}

@media (max-width: 1279px) {
  .dc-page-overlay {
    display: flex;
    flex-direction: column;
    height: 100%;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-password-input__visibility-icon {
  cursor: pointer;
  width: 3.5rem;
  height: 95%;
  padding: 0 1rem;
  background-color: var(--general-main-1);
}

[dir="ltr"] input[style*=background] ~ .dc-password-input__visibility-icon {
  right: 2.4rem;
}

[dir="rtl"] input[style*=background] ~ .dc-password-input__visibility-icon {
  left: 2.4rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-password-meter {
  transition: transform 0.25s linear;
  background: var(--status-danger);
  z-index: 2;
}

[dir="ltr"] .dc-password-meter {
  transform-origin: left top;
}

[dir="rtl"] .dc-password-meter {
  transform-origin: right top;
}

.dc-password-meter, .dc-password-meter__bg {
  position: absolute;
  top: 3.5rem;
  height: 4px;
  border-radius: 0 0 3px 3px;
  width: calc(100% - 2px);
}

[dir="ltr"] .dc-password-meter, [dir="ltr"] .dc-password-meter__bg {
  left: 1px;
}

[dir="rtl"] .dc-password-meter, [dir="rtl"] .dc-password-meter__bg {
  right: 1px;
}

.dc-password-meter__bg {
  z-index: 1;
  background: var(--fill-disabled);
}

.dc-password-meter__container {
  position: relative;
}

.dc-password-meter__container .dc-input {
  border-radius: 4px;
}

.dc-password-meter__container .dc-password-meter__warning {
  color: var(--status-warning);
  top: 4.1rem;
}

[dir="ltr"] .dc-password-meter__container .dc-password-meter__warning {
  padding-left: 1.3rem;
}

[dir="rtl"] .dc-password-meter__container .dc-password-meter__warning {
  padding-right: 1.3rem;
}

.dc-password-meter--weak {
  background-color: var(--status-danger);
  z-index: 2;
}

.dc-password-meter--strong {
  background-color: var(--status-success);
  z-index: 2;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-tabs {
  position: relative;
  display: grid;
}

.dc-tabs--top {
  grid-template-rows: auto 1fr;
}

.dc-tabs--100vw {
  width: 100vw;
}

.dc-tabs__list {
  width: 100%;
  line-height: 38px;
  display: flex;
  position: relative;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-tabs__list {
    justify-content: center;
  }
}

.dc-tabs__list--overflow-hidden {
  overflow-y: hidden;
  display: block;
}

.dc-tabs__list--border-bottom {
  border-bottom: 2px solid var(--general-section-1);
}

.dc-tabs__list--top {
  order: 0;
}

.dc-tabs__list--bottom {
  order: 1;
  border-top: 2px solid var(--general-section-1);
}

.dc-tabs__list--center {
  justify-content: center;
  width: -moz-fit-content;
  width: fit-content;
  margin: auto;
}

.dc-tabs__list--center .dc-tabs__item {
  padding: 0 2.2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-tabs__list--fit-content {
    width: -moz-fit-content;
    width: fit-content;
  }
}

.dc-tabs__list--header-fit-content {
  width: -moz-fit-content;
  width: fit-content;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-tabs__list--header-fit-content {
    display: flex;
    justify-content: space-evenly;
  }
}

.dc-tabs__list:not(.dc-tabs__list--header-fit-content) {
  justify-content: center;
}

.dc-tabs__list--full-width {
  width: 100vw;
}

.dc-tabs__item {
  list-style: none;
  font-size: 14px;
  text-align: center;
  white-space: nowrap;
  color: var(--text-general);
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: transparent;
}

.dc-tabs__item__counter {
  margin-top: -2rem;
  vertical-align: middle;
}

[dir="ltr"] .dc-tabs__item__icon {
  padding-right: 0.7rem;
}

[dir="rtl"] .dc-tabs__item__icon {
  padding-left: 0.7rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-tabs__item__icon {
    padding-top: 0.5rem;
  }

  [dir="ltr"] .dc-tabs__item__icon {
    padding-right: 0;
  }

  [dir="rtl"] .dc-tabs__item__icon {
    padding-left: 0;
  }
}

.dc-tabs__item--header-fit-content {
  padding: 0px 29px;
}

.dc-tabs__item--is-hidden {
  display: none;
}

.dc-tabs__item--is-scrollable-and-active {
  position: relative;
}

.dc-tabs__item--is-scrollable-and-active:after {
  border-bottom: 2px solid var(--brand-red-coral);
  content: "";
  position: absolute;
  display: block;
  width: 100%;
}

[dir="ltr"] .dc-tabs__item--is-scrollable-and-active:after {
  left: 0;
}

[dir="rtl"] .dc-tabs__item--is-scrollable-and-active:after {
  right: 0;
}

.dc-tabs__item:not(.dc-tabs__active) {
  cursor: pointer;
  color: var(--text-general);
}

.dc-tabs__item:not(.dc-tabs__item--header-fit-content) {
  width: var(--tab-width);
}

.dc-tabs__active {
  font-weight: 700;
  color: var(--text-prominent);
}

.dc-tabs__active-line {
  display: block;
  position: absolute;
  left: 0;
  height: 2px;
  background: var(--brand-red-coral);
  transition: all ease-in-out 0.3s;
}

.dc-tabs__active-line--top {
  bottom: -2px;
}

.dc-tabs__active-line--bottom {
  top: -2px;
}

.dc-tabs__active-line--is-hidden {
  display: none;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-tabs__active-line--fit-content {
    width: 120px;
  }
}

.dc-tabs__active-line:not(.dc-tabs__active-line--header-fit-content) {
  width: var(--tab-width);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-popup {
  position: relative;
  z-index: 9999;
}

.dc-popup__header {
  display: flex;
  width: 100%;
}

.dc-popup__header-content {
  flex: 1;
}

.dc-popup__header-container {
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.dc-popup__header-close {
  margin-top: -0.3rem;
}

[dir="ltr"] .dc-popup__header-close {
  margin-left: 2.1rem;
  margin-right: -0.3rem;
}

[dir="rtl"] .dc-popup__header-close {
  margin-right: 2.1rem;
  margin-left: -0.3rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-popup__header-close {
    margin-top: 0.5rem;
  }

  [dir="ltr"] .dc-popup__header-close {
    margin-right: 0.5rem;
  }

  [dir="rtl"] .dc-popup__header-close {
    margin-left: 0.5rem;
  }
}

.dc-popup__header-close-icon {
  cursor: pointer;
}

[dir="ltr"] .dc-popup__header-button {
  margin-left: 1.6rem;
}

[dir="rtl"] .dc-popup__header-button {
  margin-right: 1.6rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  [dir="ltr"] .dc-popup__header-button {
    margin-left: 2.2rem;
  }

  [dir="rtl"] .dc-popup__header-button {
    margin-right: 2.2rem;
  }
}

.dc-popup__header-balance {
  display: flex;
  align-items: center;
}

.dc-popup__header-banner {
  background-color: var(--status-warning);
  border-radius: 10rem;
  padding: 0.4rem 0.8rem;
  display: flex;
  align-items: center;
}

@media (min-width: 1024px) {
  .dc-popup__header-banner {
    margin-top: 0.4rem;
  }
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-popup__header-banner {
    background-color: var(--general-main-1);
  }

  [dir="ltr"] .dc-popup__header-banner {
    margin-left: 0.8rem;
  }

  [dir="rtl"] .dc-popup__header-banner {
    margin-right: 0.8rem;
  }
}

.dc-popup__header-big-text {
  margin-top: 2rem;
}

.dc-popup__header-title-container {
  display: flex;
  align-items: center;
}

.dc-popup__body {
  padding: 0;
  flex: 1;
  min-height: 0;
}

.dc-popup__body:first-child {
  padding-top: 0 !important;
}

.dc-popup__body .dc-tabs__content--popup {
  background: var(--general-main-1);
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-popup__body .dc-tabs__list--header--popup {
    overflow-y: hidden;
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }
}

@media (min-width: 320px) and (max-width: 767px) and (min-width: 27.5rem) {
  .dc-popup__body .dc-tabs__list--header--popup {
    overflow-x: hidden;
  }
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-popup__body .dc-tabs__list--header--popup::-webkit-scrollbar {
    display: none; /* Chrome Safari */
  }
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-popup__body .dc-tabs__list--popup {
    height: 5.8rem !important;
  }
}

@media (min-width: 320px) and (max-width: 767px) and (max-width: 27.5rem) {
  .dc-popup__body .dc-tabs__list--popup {
    width: 123% !important;
  }

  [dir="ltr"] .dc-popup__body .dc-tabs__list--popup {
    margin-right: 4.2rem;
  }

  [dir="rtl"] .dc-popup__body .dc-tabs__list--popup {
    margin-left: 4.2rem;
  }
}

.dc-popup__body .dc-tabs__item--popup {
  border-radius: 16px 16px 0px 0px;
  display: flex;
  align-items: center;
  justify-content: center;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-popup__body .dc-tabs__item--popup {
    width: 8.2rem !important;
  }
  .dc-popup__body .dc-tabs__item--popup {
    height: 5.8rem;
    flex-direction: column;
    font-size: 12px;
    box-sizing: border-box;
  }
}

.dc-popup__body .dc-tabs__active--popup {
  background: var(--general-main-1);
}

.dc-popup__body .dc-tabs--popup {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.dc-popup__footer {
  display: flex;
  justify-content: flex-end;
  padding: 1.6rem;
  position: fixed;
  width: 100%;
  bottom: 0;
}

.dc-popup__footer__separator {
  border-top: 2px solid var(--general-section-1);
}

.dc-popup__overlay {
  transition: opacity 0.1s ease-in-out;
  opacity: 0;
  padding: 3.2rem;
  overflow-y: auto;
  background-color: var(--general-main-1);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
}

.dc-popup__overlay:empty {
  display: none;
}

.dc-popup__overlay--enter-done {
  opacity: 0.95;
}

.dc-popup__overlay--exit {
  opacity: 0;
}

.dc-popup__overlay-content {
  max-width: 500px;
}

.dc-popup__overlay-content-header {
  margin-bottom: 0.8rem;
}

.dc-popup__overlay-content-separator {
  height: 1px;
  width: 100%;
  background-color: var(--general-section-1);
}

.dc-popup__overlay-content-list {
  list-style-type: disc;
  margin-top: 2.4rem;
}

[dir="ltr"] .dc-popup__overlay-content-list {
  padding-left: 1.6rem;
}

[dir="rtl"] .dc-popup__overlay-content-list {
  padding-right: 1.6rem;
}

.dc-popup__overlay-content-list li::marker {
  color: var(--text-general);
  font-size: var(--text-size-xs);
}

.dc-popup__overlay-content-list li + li {
  margin-top: 2rem;
}

.dc-popup__overlay-content-button {
  margin-top: 2.4rem;
}

.dc-modal-header--popup {
  height: -moz-fit-content;
  height: fit-content;
  align-items: flex-start;
  flex-grow: 0;
}

.dc-modal-header__title--popup {
  width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-modal-header__title--popup {
    align-items: flex-start;
  }
}

.dc-modal-header__section--popup {
  padding: 2.4rem;
}

[dir="ltr"] .dc-modal-header__section .dc-modal-header__close {
  margin: 2.1rem 2.1rem 0rem 0rem;
}

[dir="rtl"] .dc-modal-header__section .dc-modal-header__close {
  margin: 2.1rem 0rem 0rem 2.1rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-progress-bar */
.dc-progress-bar__container {
  height: 2.4rem;
  width: 12rem;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 1.2rem;
  position: relative;
  overflow: hidden;
}

.dc-progress-bar--danger {
  background-color: var(--status-danger);
}

.dc-progress-bar--warning {
  background-color: var(--status-warning);
}

.dc-progress-bar--normal {
  background-color: var(--status-success);
}

.dc-progress-bar__bar {
  height: 100%;
  position: absolute;
}

[dir="ltr"] .dc-progress-bar__bar {
  left: 0;
}

[dir="rtl"] .dc-progress-bar__bar {
  right: 0;
}

.dc-progress-bar__empty {
  width: 100%;
  position: absolute;
  opacity: 0.16;
  height: 100%;
}

.dc-progress-bar__label {
  z-index: 2;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-progress-bar-tracker {
  display: flex;
  justify-content: center;
  cursor: pointer;
}

.dc-progress-bar-tracker-rectangle {
  width: 2.5rem;
  height: 0.8rem;
  background-color: #ff444f;
  border-radius: 1rem;
}

.dc-progress-bar-tracker-circle {
  width: 0.8rem;
  height: 0.8rem;
  margin: 0 0.4rem;
  border-radius: 50%;
  background-color: var(--fill-normal-1);
}

.dc-progress-bar-tracker-transition {
  transition: all 0.24s linear;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-progress-indicator */
.dc-progress-indicator {
  position: relative;
}

.dc-progress-indicator__container {
  height: 0.4rem;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  position: relative;
  overflow: hidden;
}

.dc-progress-indicator__bar {
  z-index: 2;
  background-color: var(--status-success);
  height: 100%;
  position: absolute;
}

[dir="ltr"] .dc-progress-indicator__bar {
  left: 0;
}

[dir="rtl"] .dc-progress-indicator__bar {
  right: 0;
}

.dc-progress-indicator__empty {
  z-index: 1;
  background-color: var(--general-section-1);
  width: 100%;
  height: 100%;
  position: absolute;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-radio-group {
  display: flex;
  margin-top: 16px;
  flex-direction: row;
  align-items: center;
}

.dc-radio-group__input {
  display: none;
}

[dir="ltr"] .dc-radio-group__item {
  text-align: left;
}

[dir="rtl"] .dc-radio-group__item {
  text-align: right;
}

.dc-radio-group__item {
  display: flex;
  font-size: 1.4rem;
  color: var(--text-prominent);
  font-weight: 400;
  text-transform: none;
  line-height: 1.5;
  cursor: pointer;
  color: var(--text-general);
}

[dir="ltr"] .dc-radio-group__item:not(:last-child) {
  margin-right: 16px;
}

[dir="rtl"] .dc-radio-group__item:not(:last-child) {
  margin-left: 16px;
}

.dc-radio-group__circle {
  border: 2px solid var(--text-general);
  border-radius: 50%;
  box-shadow: 0 0 1px 0 var(--shadow-menu);
  min-width: 16px;
  height: 16px;
  transition: all 0.3s ease-in-out;
  align-self: center;
}

[dir="ltr"] .dc-radio-group__circle {
  margin-right: 8px;
}

[dir="rtl"] .dc-radio-group__circle {
  margin-left: 8px;
}

.dc-radio-group__circle--disabled {
  border-color: var(--border-disabled);
}

.dc-radio-group__circle--selected {
  border-width: 4px;
  border-color: var(--brand-red-coral);
}

.dc-radio-group__circle--error {
  border-color: var(--text-less-prominent);
}

.dc-radio-group__label--disabled {
  color: var(--text-disabled);
}

.dc-radio-group__label--error {
  color: var(--text-loss-danger);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-read-more__toggle {
  color: var(--status-danger);
  font-weight: var(--text-weight-bold);
}

.dc-read-more__dialog {
  text-decoration: underline;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-select-native {
  width: 100%;
  position: relative;
}

.dc-select-native--hide-selected-value {
  width: 40px;
}

[dir="ltr"] .dc-select-native--hide-selected-value {
  margin-left: 10px;
}

[dir="rtl"] .dc-select-native--hide-selected-value {
  margin-right: 10px;
}

.dc-select-native--hide-selected-value .dc-select-native__wrapper {
  width: 40px;
}

.dc-select-native__container {
  border: 1px solid var(--border-normal);
  border-radius: 4px;
  display: flex;
  align-items: center;
}

.dc-select-native__container:hover:not(.dc-input--disabled) {
  border-color: var(--border-hover);
}

.dc-select-native__container[focus-within] {
  border-color: var(--brand-secondary);
}

.dc-select-native__container:focus-within {
  border-color: var(--brand-secondary);
}

.dc-select-native__container[focus-within]:hover {
  border-color: var(--brand-secondary);
}

.dc-select-native__container:focus-within:hover {
  border-color: var(--brand-secondary);
}

.dc-select-native__container--error {
  border-color: var(--brand-red-coral) !important;
}

.dc-select-native__container--disabled {
  border-color: var(--general-disabled);
}

.dc-select-native__wrapper {
  height: 38px;
}

.dc-select-native__wrapper .dc-input {
  margin-bottom: 0px;
}

.dc-select-native__arrow {
  position: absolute;
  top: 1.3rem;
  --fill-color1: var(--text-less-prominent);
}

[dir="ltr"] .dc-select-native__arrow {
  right: 1.3rem;
}

[dir="rtl"] .dc-select-native__arrow {
  left: 1.3rem;
}

.dc-select-native__display {
  height: 38px;
  width: 100%;
  max-width: calc(100vw - 4rem);
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

[dir="ltr"] .dc-select-native__display {
  padding-left: 1.2rem;
}

[dir="rtl"] .dc-select-native__display {
  padding-right: 1.2rem;
}

@media (min-width: 601px) and (max-width: 1279px) {
  .dc-select-native__display {
    max-width: 56.8rem;
  }
}

.dc-select-native__display-text {
  color: var(--text-prominent);
  font-size: 1.4rem;
  white-space: nowrap;
  overflow: hidden;
  max-width: calc(100% - 4rem);
  text-overflow: ellipsis;
  display: block;
  height: 100%;
  line-height: 3.8rem;
}

.dc-select-native__placeholder {
  position: absolute;
  top: 1.1rem;
  pointer-events: none;
  transition: transform 0.25s linear;
  padding: 0 0.4rem;
  font-size: 1.4rem;
  transform: none;
  background-color: var(--fill-normal);
  color: var(--text-less-prominent);
  line-height: 1.43;
  white-space: nowrap;
  max-width: calc(100% - 3.6rem);
  text-overflow: ellipsis;
  overflow: hidden;
}

[dir="ltr"] .dc-select-native__placeholder {
  left: 1.1rem;
  transform-origin: top left;
}

[dir="rtl"] .dc-select-native__placeholder {
  right: 1.1rem;
  transform-origin: top right;
}

.dc-select-native__placeholder--has-value {
  transform: translate(0, -1.8rem) scale(0.75);
  color: var(--text-general);
  max-width: 100%;
}

.dc-select-native__placeholder--hide-top-placeholder {
  transform: translate(0, -1.8rem) scale(0.75);
  color: var(--text-general);
  max-width: 100%;
  display: none;
}

.dc-select-native__picker {
  opacity: 0;
  width: 100%;
  height: 38px;
  top: 0;
  position: absolute;
}

[dir="ltr"] .dc-select-native__picker {
  left: 0;
}

[dir="rtl"] .dc-select-native__picker {
  right: 0;
}

.dc-select-native--disabled .dc-select-native__display-text {
  color: var(--text-less-prominent);
}

.dc-select-native--disabled .dc-select-native__placeholder:not(.dc-select-native__placeholder--has-value) {
  color: var(--text-less-prominent);
}

.dc-select-native--disabled .dc-icon {
  --fill-color1: var(--text-less-prominent);
}

.dc-select-native--error .dc-select-native__placeholder {
  color: var(--brand-red-coral);
}

[dir="ltr"] .dc-select-native__hint {
  margin-left: 1.2rem;
}

[dir="rtl"] .dc-select-native__hint {
  margin-right: 1.2rem;
}

.dc-select-native__suffix-icon {
  position: absolute;
}

[dir="ltr"] .dc-select-native__suffix-icon {
  left: 11px;
}

[dir="rtl"] .dc-select-native__suffix-icon {
  right: 11px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define send-email-template */
.send-email-template {
  padding: 0 16px;
}

.send-email-template__title, .send-email-template__subtitle {
  margin-bottom: 1.6rem;
}

.send-email-template__title-platform, .send-email-template__subtitle-platform {
  white-space: nowrap;
}

.send-email-template__close {
  display: flex;
  justify-content: flex-end;
  padding-bottom: 1.2rem;
  cursor: pointer;
}

.send-email-template__icon {
  margin-bottom: 2.4rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .send-email-template__icon {
    margin-top: 3.2rem;
  }
}

.send-email-template__sent, .send-email-template__cta {
  text-align: center;
}

.send-email-template__cta-btn {
  margin: 3.2rem auto 0;
}

.send-email-template__resend {
  display: grid;
  grid-template-rows: 1fr 1fr 1fr;
  grid-row-gap: 1.6rem;
  max-width: 40rem;
  margin: 2.4rem auto 0;
  color: var(--text-prominent);
  font-size: var(--text-size-xxs);
  line-height: 1.5;
}

.send-email-template__resend .sent-email__content {
  display: grid;
  grid-template-columns: 3.2rem auto;
  grid-gap: 0.8rem;
}

.send-email-template__resend .sent-email__content .inline-icon {
  width: 3.2rem;
  height: 3.2rem;
}

[dir="ltr"] .send-email-template__resend .sent-email__content .inline-icon {
  margin-right: 0.8rem;
}

[dir="rtl"] .send-email-template__resend .sent-email__content .inline-icon {
  margin-left: 0.8rem;
}

.send-email-template__btn {
  margin: 0 auto;
}

.send-email-template-dashboard {
  width: calc(100vw - 33rem);
}

@media (min-width: 320px) and (max-width: 767px) {
  .send-email-template {
    margin-bottom: 1.6rem;
    width: 100%;
  }
}

.send-email-template__footer {
  margin-top: 2.6rem;
}

.send-email-template__footer-live-chat {
  color: var(--text-red);
  cursor: pointer;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.side-note {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 1.6rem;
  background-color: var(--general-section-1);
  border-radius: 8px;
  padding: 1.6rem 2.4rem;
  align-self: stretch;
}

.side-note__content {
  display: flex;
  flex-direction: column;
  gap: 0.8rem;
  align-self: stretch;
}

.side-note__header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 0.8rem;
}

.side-note__action {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 0.4rem;
  cursor: pointer;
}

.side-note__action :hover {
  text-decoration: underline;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.switcher-status-badge__parent {
  display: flex;
}

.switcher-status-badge__container {
  display: flex;
  padding: 2px 7px;
  border-radius: 4px;
  align-items: center;
  white-space: nowrap;
  font-size: var(--text-size-xxs);
}

.switcher-status-badge__container--migrated_with_position, .switcher-status-badge__container--migrated_without_position, .switcher-status-badge__container--under_maintenance, .switcher-status-badge__container--unavailable {
  display: inline-flex;
  border: 1.5px solid var(--status-warning);
  color: var(--status-warning);
  font-size: var(--text-size-xxxs);
  align-items: center;
}

.switcher-status-badge__container--pending {
  height: 2.4rem;
  justify-content: center;
  color: var(--status-warning-dark);
  background-color: var(--status-warning-transparent);
  text-decoration: underline;
  font-weight: bold;
}

.switcher-status-badge__container--needs_verification {
  background-color: var(--status-info-transparent);
  color: var(--status-info);
  text-decoration: underline;
  font-weight: bold;
}

.switcher-status-badge__container--failed, .switcher-status-badge__container--rejected, .switcher-status-badge__container--suspected {
  height: 2.4rem;
  border-color: var(--status-danger);
  color: rgb(196, 0, 0);
  font-weight: bold;
  text-decoration: underline;
  background-color: var(--status-danger-transparent);
}

.switcher-status-badge__container--verified {
  height: 2.4rem;
  margin-top: 0.1rem;
  color: rgb(0, 122, 34);
  background-color: var(--status-success-transparent);
  font-weight: bold;
}

[dir="ltr"] .switcher-status-badge__container--icon {
  padding: 0.1rem 0.5rem 0 0;
}

[dir="rtl"] .switcher-status-badge__container--icon {
  padding: 0.1rem 0 0 0.5rem;
}

[dir="ltr"] .switcher-status-badge__container__arrow {
  padding-left: 1rem;
}

[dir="rtl"] .switcher-status-badge__container__arrow {
  padding-right: 1rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.swipeable-notification {
  width: 100%;
  min-height: 4.8rem;
  border-radius: 4px;
  padding: 0.8rem;
  background-color: #d6dadb;
  display: flex;
  justify-content: space-between;
  text-decoration: none;
}

.swipeable-notification * {
  color: #333333;
}

.swipeable-notification--failure {
  background-color: #fce3e3;
}

.swipeable-notification--success {
  background-color: #cedddf;
}

.swipeable-notification-content {
  align-self: center;
}

.swipeable-notification-time {
  align-self: flex-end;
}

[dir="ltr"] .swipeable-notification-appear, [dir="ltr"] .swipeable-notification-enter {
  transform: translateX(-100vw);
}

[dir="rtl"] .swipeable-notification-appear, [dir="rtl"] .swipeable-notification-enter {
  transform: translateX(100vw);
}

.swipeable-notification-appear-active, .swipeable-notification-enter-active {
  visibility: hidden;
}

.swipeable-notification-appear-done, .swipeable-notification-enter-done {
  visibility: visible;
  transform: translateX(0);
  transition: transform 300ms;
}

.swipeable-notification-exit {
  transform: translateX(0);
}

.swipeable-notification-exit-active, .swipeable-notification-exit-active-left, .swipeable-notification-exit-active-right {
  visibility: hidden;
  transition: all 300ms;
}

[dir="ltr"] .swipeable-notification-exit-active-left, [dir="ltr"] .swipeable-notification-exit-active-left-left, [dir="ltr"] .swipeable-notification-exit-active-right-left {
  transform: translateX(-100vw);
}

[dir="rtl"] .swipeable-notification-exit-active-left, [dir="rtl"] .swipeable-notification-exit-active-left-left, [dir="rtl"] .swipeable-notification-exit-active-right-left {
  transform: translateX(100vw);
}

[dir="ltr"] .swipeable-notification-exit-active-right, [dir="ltr"] .swipeable-notification-exit-active-left-right, [dir="ltr"] .swipeable-notification-exit-active-right-right {
  transform: translateX(100vw);
}

[dir="rtl"] .swipeable-notification-exit-active-right, [dir="rtl"] .swipeable-notification-exit-active-left-right, [dir="rtl"] .swipeable-notification-exit-active-right-right {
  transform: translateX(-100vw);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-swipeable {
  position: relative;
  height: 100%;
}

.dc-swipeable__view {
  display: flex;
  flex-direction: row;
  width: -moz-max-content;
  width: max-content;
  height: inherit;
  position: relative;
}

[dir="ltr"] .dc-swipeable__view {
  transition: left 0.1s linear;
}

[dir="rtl"] .dc-swipeable__view {
  transition: right 0.1s linear;
}

.dc-swipeable__item {
  position: relative;
  display: inline-flex;
  width: 100vw;
}

.dc-swipeable__item--is-disabled .dc-swipeable__view {
  transition: none;
}

[dir="ltr"] .dc-swipeable__item--is-disabled .dc-swipeable__view {
  left: -100vw;
}

[dir="rtl"] .dc-swipeable__item--is-disabled .dc-swipeable__view {
  right: -100vw;
}

.dc-swipeable__nav {
  position: absolute;
  bottom: 0;
  width: 100vw;
  display: flex;
  padding: 1.6rem 0.8rem;
  justify-content: space-between;
  pointer-events: none;
}

.dc-swipeable__nav-elevated {
  bottom: 9rem;
}

.dc-swipeable__nav svg {
  z-index: 3;
}

.dc-swipeable__nav * {
  pointer-events: all;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-relative-datepicker {
  width: 100%;
  text-align: center;
  padding-bottom: 16px;
  position: relative;
}

.dc-relative-datepicker__span {
  width: 100%;
  cursor: pointer;
}

.dc-relative-datepicker__input {
  opacity: 0;
  position: absolute;
  top: 0;
  width: 100%;
  height: 100%;
  z-index: 2;
}

[dir="ltr"] .dc-relative-datepicker__input {
  left: 0;
}

[dir="rtl"] .dc-relative-datepicker__input {
  right: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.search-box {
  margin: 2.4rem 0.8rem;
  width: 24rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .search-box {
    margin: 0;
    width: auto;
  }

  .search-box .dc-input {
    height: 4rem;
  }
}

.search-box__cross-icon {
  cursor: pointer;
}

.search-box__field {
  margin-bottom: 0 !important;
}

.search-box__field {
  text-indent: 2rem;
  height: 4.2rem;
}

.search-box__field ::-moz-placeholder {
  opacity: 0.5;
}

.search-box__field ::placeholder {
  opacity: 0.5;
}

.search-box__field .dc-input {
  justify-content: center;
}

.search-box__field .dc-input__field {
  flex-grow: 1;
  width: auto;
  width: initial;
  text-indent: 2.4rem;
}

[dir="ltr"] .search-box__field .dc-input__field {
  padding-right: 2rem;
}

[dir="rtl"] .search-box__field .dc-input__field {
  padding-left: 2rem;
}

.search-box__field .dc-input__field ::-moz-placeholder {
  opacity: 0.5;
}

.search-box__field .dc-input__field ::placeholder {
  opacity: 0.5;
}

@media (min-width: 320px) and (max-width: 767px) {
  .search-box__field .dc-input__field {
    grid-column: 1;
    width: 100%;
  }

  [dir="ltr"] .search-box__field .dc-input__field {
    margin-left: -1.1rem;
  }

  [dir="rtl"] .search-box__field .dc-input__field {
    margin-right: -1.1rem;
  }
}

.search-box__field .dc-input__leading-icon {
  cursor: pointer;
  top: 31%;
  pointer-events: inherit;
}

[dir="ltr"] .search-box__field .dc-input__leading-icon {
  margin-left: 0.9rem;
}

[dir="rtl"] .search-box__field .dc-input__leading-icon {
  margin-right: 0.9rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .search-box__field .dc-input__leading-icon {
    padding-bottom: 0.1rem;
  }

  [dir="ltr"] .search-box__field .dc-input__leading-icon {
    padding-right: 0.3rem;
  }

  [dir="rtl"] .search-box__field .dc-input__leading-icon {
    padding-left: 0.3rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-table {
  color: var(--text-general);
  background: inherit;
}

.dc-table__row {
  display: grid;
  border-bottom: 1px solid var(--general-section-1);
  height: 100%;
}

.dc-table__row--hover:hover {
  background-color: var(--general-section-1);
  cursor: pointer;
}

.dc-table__header {
  border-bottom: 2px solid var(--general-section-1);
  height: 52px;
}

.dc-table__cell, .dc-table__head {
  font-size: 1.4rem;
  line-height: 1.43;
  display: flex;
  align-items: center;
  white-space: inherit;
  backface-visibility: hidden;
  word-wrap: break-word;
  word-break: break-word;
  word-wrap: break-word;
}

[dir="ltr"] .dc-table__cell, [dir="ltr"] .dc-table__head {
  text-align: left;
}

[dir="rtl"] .dc-table__cell, [dir="rtl"] .dc-table__head {
  text-align: right;
}

.dc-table__cell--right {
  display: flex;
  justify-content: flex-end;
}

.dc-table__cell--fixed {
  position: sticky;
  z-index: 2;
}

[dir="ltr"] .dc-table__cell--fixed {
  left: 0;
}

[dir="rtl"] .dc-table__cell--fixed {
  right: 0;
}

.dc-table__head {
  font-weight: bold;
}

.dc-table__head--right {
  display: flex;
  justify-content: flex-end;
}

.dc-table--scroll .dc-table__header {
  position: sticky;
  top: 0;
  z-index: 3;
}

.dc-table--scrollbar {
  display: block;
}

@supports (-webkit-hyphens: none) {
  .dc-table--scrollbar {
    display: inline;
    display: initial;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-toast; */
.dc-toast {
  width: 100vw;
  transition: transform 0.25s ease, opacity 0.25s linear;
  display: flex;
  justify-content: center;
  align-items: center;
  pointer-events: none;
}

.dc-toast__message {
  max-width: calc(100vw - 3.2rem);
  padding: 0.4rem 0.8rem;
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.5;
  color: var(--text-colored-background);
  border-radius: 4px;
  min-height: 34px;
  display: flex;
  align-items: center;
  pointer-events: all;
}

.dc-toast__error .dc-toast__message {
  background-color: var(--status-danger);
}

.dc-toast__info .dc-toast__message {
  background: var(--status-info);
  font-size: 1.2rem;
  /* iPhone SE screen height fixes due to UI space restrictions */
}

@media only screen and (max-height: 580px) {
  .dc-toast__info .dc-toast__message {
    font-size: 1rem;
  }
}

.dc-toast__notification .dc-toast__message {
  background: var(--general-active);
  padding: 0.9rem 1.2rem;
}

.dc-toast--enter, .dc-toast--exit {
  transform: scale(1, 0);
  opacity: 0;
}

.dc-toast--enter-done {
  transform: scale(1, 1);
  opacity: 1;
}

.dc-toast--blinker .dc-toast__message {
  animation: toast_blinking 0.4s alternate infinite;
}

.dc-toast:not(:first-child) {
  margin-top: 1rem;
}

@keyframes toast_blinking {
  40% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-toggle-switch {
  height: 0;
  width: 0;
  visibility: hidden;
}

.dc-toggle-switch__label {
  display: flex;
  align-items: center;
  cursor: pointer;
  width: 4.9rem;
  height: 2.52rem;
  background: var(--general-disabled);
  border-radius: 4.9rem;
  transition: background-color 0.25s;
}

[dir="ltr"] .dc-toggle-switch__label {
  margin-left: auto;
  margin-right: 1.6rem;
  padding-left: 0.4rem;
}

[dir="rtl"] .dc-toggle-switch__label {
  margin-right: auto;
  margin-left: 1.6rem;
  padding-right: 0.4rem;
}

.dc-toggle-switch__button {
  width: 1.9rem;
  height: 1.9rem;
  border-radius: 1.9rem;
  transition: transform 0.25s;
  background: var(--text-colored-background);
}

.dc-toggle-switch:checked + .dc-toggle-switch__label {
  background: var(--text-profit-success);
}

[dir="ltr"] .dc-toggle-switch:checked + .dc-toggle-switch__label .dc-toggle-switch__button {
  transform: translateX(2.25rem);
}

[dir="rtl"] .dc-toggle-switch:checked + .dc-toggle-switch__label .dc-toggle-switch__button {
  transform: translateX(-2.25rem);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.message-list {
  width: 100%;
  max-width: 63.4rem;
  margin: 0 auto;
  min-height: 3.2rem;
}

.message-list .alert-message {
  display: flex;
  flex-direction: row;
  -moz-column-gap: 0.8rem;
       column-gap: 0.8rem;
  justify-content: flex-start;
  min-height: 3.2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .message-list .alert-message {
    margin: 0;
  }
}

.message-list .alert-message__icon-container {
  position: relative;
}

.message-list .alert-message__icon-container .icon-container__line {
  border: 1px solid var(--border-normal);
  position: absolute;
  height: 100%;
  top: 50%;
}

[dir="ltr"] .message-list .alert-message__icon-container .icon-container__line {
  left: 50%;
  transform: translate(-50%, -50%);
}

[dir="rtl"] .message-list .alert-message__icon-container .icon-container__line {
  right: 50%;
  transform: translate(50%, -50%);
}

.message-list .alert-message__icon-container .icon-container__icon {
  display: flex;
  position: relative;
  margin-top: 0.8rem;
}

.message-list .alert-message__message-container, .message-list .alert-message__button-container {
  display: flex;
  align-items: center;
}

.message-list .alert-message__message-container {
  padding: 0.7rem 0;
}

[dir="ltr"] .message-list .alert-message__button-container {
  margin-left: auto;
}

[dir="rtl"] .message-list .alert-message__button-container {
  margin-right: auto;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-tick-picker {
  width: 100%;
  max-width: 300px;
  height: 328px;
  background-color: inherit;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
}

.dc-tick-picker div {
  display: flex;
}

.dc-tick-picker__calculation {
  margin-bottom: 28px;
  justify-content: space-evenly;
  align-items: center;
}

.dc-tick-picker__calculation .dc-tick-picker__holder {
  color: var(--purchase-main-2);
  flex-direction: column;
  justify-content: center;
  text-align: center;
  margin: 0 1.4rem;
}

.dc-tick-picker__calculation .operator {
  background-color: var(--general-section-2);
  width: 48px;
  height: 48px;
}

.dc-tick-picker__calculation .operator .dc-btn__text {
  transform: scale(2);
}

.dc-tick-picker__submit-wrapper {
  margin-bottom: 1.6rem;
  justify-content: center;
}

.dc-tick-picker__submit-wrapper button {
  background-color: var(--general-section-2);
  height: 48px;
  width: 112px;
}

.dc-tick-picker__submit-wrapper button span {
  color: var(--text-prominent);
  font-size: 1.6rem;
}

.dc-tick-picker__submit-wrapper--is-disabled {
  pointer-events: none;
}

.dc-tick-picker__submit-wrapper--is-disabled .dc-btn {
  background-color: var(--general-disabled);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-timeline__flex {
  display: flex;
  position: relative;
}

[dir="ltr"] .dc-timeline__flex {
  border-left: var(--brand-red-coral) solid 1px;
  margin-left: 1.2rem;
}

[dir="rtl"] .dc-timeline__flex {
  border-right: var(--brand-red-coral) solid 1px;
  margin-right: 1.2rem;
}

[dir="ltr"] .dc-timeline__flex--no-border {
  border-left: 0;
  border-left: initial;
}

[dir="rtl"] .dc-timeline__flex--no-border {
  border-right: 0;
  border-right: initial;
}

.dc-timeline__container {
  margin-top: 4px;
}

[dir="ltr"] .dc-timeline__container {
  margin-left: 20px;
}

[dir="rtl"] .dc-timeline__container {
  margin-right: 20px;
}

.dc-timeline__title {
  max-width: 500px;
}

.dc-timeline__flex--disabled .dc-timeline__title {
  color: #6e6e6e;
}

.dc-timeline__oval {
  width: 24px;
  height: 24px;
  line-height: 2.35rem;
  background-color: var(--brand-red-coral);
  border-radius: 50%;
  text-align: center;
  position: absolute;
}

[dir="ltr"] .dc-timeline__oval {
  margin-right: 8px;
  padding-left: 1px;
  left: -12px;
}

[dir="rtl"] .dc-timeline__oval {
  margin-left: 8px;
  padding-right: 1px;
  right: -12px;
}

.dc-timeline__flex--disabled .dc-timeline__oval {
  background-color: #6e6e6e;
}

.dc-timeline__number {
  position: relative;
}

[dir="ltr"] .dc-timeline__number {
  left: -1px;
}

[dir="rtl"] .dc-timeline__number {
  right: -1px;
}

.dc-timeline__content {
  margin: 16px 0;
  color: var(--text-prominent);
}

.dc-timeline__content:last-of-type {
  margin-bottom: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/* Loading Spinner */
/** @define block-ui */
.block-ui {
  position: absolute;
  z-index: 3;
  top: 0;
  bottom: 0;
  width: calc(100% - 4px);
  height: 100%;
  background: var(--overlay-inside-dialog);
}

[dir="ltr"] .block-ui {
  left: 0.2em;
  right: 0;
}

[dir="rtl"] .block-ui {
  right: 0.2em;
  left: 0;
}

.block-ui__loading {
  position: absolute;
  top: calc(50% - 22px);
  z-index: 11;
}

[dir="ltr"] .block-ui__loading {
  left: calc(50% - 16px);
}

[dir="rtl"] .block-ui__loading {
  right: calc(50% - 16px);
}

.block-ui__loading-spinner {
  position: relative;
  margin: 0 auto;
  width: 4.2em;
}

.block-ui__loading-spinner:before {
  content: "";
  display: block;
  padding-top: 100%;
}

.block-ui__loading-spinner-circular {
  animation: rotate 2s linear infinite;
  height: 100%;
  transform-origin: center center;
  width: 100%;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  margin: auto;
}

.block-ui__loading-spinner-path {
  stroke-dasharray: 1, 200;
  stroke-dashoffset: 0;
  animation: dash 1.5s ease-in-out infinite, colorRed 6s ease-in-out infinite;
  stroke-linecap: round;
}

/* Spinner Loader Animation */
@keyframes rotate {
  100% {
    transform: rotate(360deg);
  }
}

@keyframes dash {
  0% {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -35px;
  }

  100% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -124px;
  }
}

@keyframes colorRed {
  100%, 0% {
    stroke: var(--brand-red-coral);
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-vertical-tab {
  display: flex;
  align-items: flex-start;
  justify-content: flex-start;
  border-radius: 4px;
  height: 100%;
}

.dc-vertical-tab:not(.dc-vertical-tab--floating) {
  background-color: var(--general-section-1);
}

.dc-vertical-tab--floating {
  justify-content: center;
}

.dc-vertical-tab--grid {
  display: grid;
  height: calc(100vh - 48px);
  grid-template-areas: "form-sidebar form-title" "form-sidebar form-content";
  grid-template-rows: 5.2rem auto;
}

.dc-vertical-tab__title {
  grid-area: form-title;
  height: 5rem;
  border-top: 1px solid var(--general-section-1);
}

.dc-vertical-tab__content-container {
  position: relative;
  z-index: 0;
  height: 100%;
  width: 100%;
  display: flex;
  flex-flow: column nowrap;
  flex-grow: 1;
}

.dc-vertical-tab__content-container--has-side-note {
  flex-flow: initial;
}

.dc-vertical-tab--full-screen {
  min-height: calc(100svh - 84px);
  width: 100%;
}

.dc-vertical-tab--full-screen.dc-vertical-tab--floating {
  min-height: calc(100svh - 48px - 36px - 53px - 2.4rem);
}

.dc-vertical-tab:not(.dc-vertical-tab--full-screen):not(.dc-vertical-tab--floating) .dc-vertical-tab__content {
  padding: 2.4rem;
}

.dc-vertical-tab__action-bar {
  width: 100%;
  display: flex;
  flex-flow: row-reverse nowrap;
  justify-content: space-between;
  align-items: center;
  padding: 1.6rem;
  box-sizing: border-box;
}

.dc-vertical-tab__action-bar-wrapper {
  cursor: pointer;
  padding: 0.4rem 0.4rem 0.2rem;
  border-radius: 4px;
}

[dir="ltr"] .dc-vertical-tab__action-bar-wrapper {
  margin-left: auto;
}

[dir="rtl"] .dc-vertical-tab__action-bar-wrapper {
  margin-right: auto;
}

.dc-vertical-tab__action-bar-wrapper:hover {
  background: var(--general-hover);
}

.dc-vertical-tab__tab {
  display: flex;
  min-width: 28%;
  height: 100%;
  flex-direction: column;
  background-color: var(--general-section-1);
  position: relative;
}

[dir="ltr"] .dc-vertical-tab__tab {
  border-radius: 4px 0 0 4px;
}

[dir="rtl"] .dc-vertical-tab__tab {
  border-radius: 0 4px 4px 0;
}

.dc-vertical-tab__tab--floating {
  min-width: 256px;
  padding: 0.8rem;
  border-radius: 8px;
}

.dc-vertical-tab__tab--floating .dc-vertical-tab__header--highlight {
  width: calc(100% - 1.6rem);
  border-radius: 4px;
}

.dc-vertical-tab__tab-meta-wrapper {
  grid-area: form-sidebar;
}

.dc-vertical-tab__tab-meta-wrapper--floating {
  position: sticky;
  top: calc(2.4rem + 41px);
}

.dc-vertical-tab__tab-bottom-note {
  position: sticky;
  margin-top: 1.6rem;
}

.dc-vertical-tab__header-title {
  padding: 1.6rem;
  display: flex;
  align-items: center;
  transition: background-color 0.1s ease-in;
  text-decoration: none;
}

[dir="ltr"] .dc-vertical-tab--grouped .dc-vertical-tab__header {
  padding-left: 4.4rem;
}

[dir="rtl"] .dc-vertical-tab--grouped .dc-vertical-tab__header {
  padding-right: 4.4rem;
}

.dc-vertical-tab--grouped .dc-vertical-tab__header--highlight {
  z-index: -1;
}

[dir="ltr"] .dc-vertical-tab--grouped .dc-vertical-tab__header--active {
  padding-left: 4.8rem;
}

[dir="rtl"] .dc-vertical-tab--grouped .dc-vertical-tab__header--active {
  padding-right: 4.8rem;
}

[dir="ltr"] .dc-vertical-tab__header__icon.dc-vertical-tab__header__icon--active {
  margin-right: 2rem;
}

[dir="rtl"] .dc-vertical-tab__header__icon.dc-vertical-tab__header__icon--active {
  margin-left: 2rem;
}

.dc-vertical-tab__header-group-chevron {
  position: absolute;
  transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
}

[dir="ltr"] .dc-vertical-tab__header-group-chevron {
  right: 2.4rem;
}

[dir="rtl"] .dc-vertical-tab__header-group-chevron {
  left: 2.4rem;
}

[dir="ltr"] .dc-vertical-tab__header-group-chevron--invert {
  transform: rotate(180deg);
}

[dir="rtl"] .dc-vertical-tab__header-group-chevron--invert {
  transform: rotate(-180deg);
}

[dir="ltr"] .dc-vertical-tab__header,[dir="ltr"]  .dc-vertical-tab__header-group {
  text-align: left;
}

[dir="rtl"] .dc-vertical-tab__header,[dir="rtl"]  .dc-vertical-tab__header-group {
  text-align: right;
}

.dc-vertical-tab__header, .dc-vertical-tab__header-group {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  line-height: 1.5;
  line-height: 1.5;
  color: var(--text-general);
  cursor: pointer;
  display: flex;
  align-items: center;
  transition: background-color 0.1s ease-in;
  text-decoration: none;
  z-index: 1;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
}

[dir="ltr"] .dc-vertical-tab__header, [dir="ltr"] .dc-vertical-tab__header-group {
  padding: 1rem 1.2rem 1rem 1.6rem;
}

[dir="rtl"] .dc-vertical-tab__header, [dir="rtl"] .dc-vertical-tab__header-group {
  padding: 1rem 1.6rem 1rem 1.2rem;
}

.dc-vertical-tab__header:hover:not(.dc-vertical-tab__header--active):not(.dc-vertical-tab__header-group--active), .dc-vertical-tab__header-group:hover:not(.dc-vertical-tab__header--active):not(.dc-vertical-tab__header-group--active) {
  background-color: var(--state-hover);
}

.dc-vertical-tab__header__link, .dc-vertical-tab__header-group__link {
  font-weight: normal;
}

[dir="ltr"] .dc-vertical-tab__header__link, [dir="ltr"] .dc-vertical-tab__header-group__link {
  margin-right: 0.4rem;
}

[dir="rtl"] .dc-vertical-tab__header__link, [dir="rtl"] .dc-vertical-tab__header-group__link {
  margin-left: 0.4rem;
}

[dir="ltr"] .dc-vertical-tab__header__icon, [dir="ltr"] .dc-vertical-tab__header-group__icon {
  margin-right: 1.6rem;
}

[dir="rtl"] .dc-vertical-tab__header__icon, [dir="rtl"] .dc-vertical-tab__header-group__icon {
  margin-left: 1.6rem;
}

.dc-vertical-tab__header__icon--active, .dc-vertical-tab__header-group__icon--active {
  --fill-color1: var(--text-prominent);
}

.dc-vertical-tab__header__counter, .dc-vertical-tab__header-group__counter {
  position: absolute;
}

[dir="ltr"] .dc-vertical-tab__header__counter, [dir="ltr"] .dc-vertical-tab__header-group__counter {
  right: 2rem;
}

[dir="rtl"] .dc-vertical-tab__header__counter, [dir="rtl"] .dc-vertical-tab__header-group__counter {
  left: 2rem;
}

.dc-vertical-tab__header--active .dc-vertical-tab__header__link, .dc-vertical-tab__header--active .dc-vertical-tab__header-group__link, .dc-vertical-tab__header-group--active .dc-vertical-tab__header__link, .dc-vertical-tab__header-group--active .dc-vertical-tab__header-group__link {
  color: var(--text-prominent);
  font-weight: bold;
}

.dc-vertical-tab__header--highlight, .dc-vertical-tab__header-group--highlight {
  position: absolute;
  display: block;
  content: "";
  color: var(--text-prominent);
  background-color: var(--state-normal);
  width: 100%;
  height: 41px;
  transform: translate3d(0, 0, 0);
  z-index: 0;
}

[dir="ltr"] .dc-vertical-tab__header--highlight, [dir="ltr"] .dc-vertical-tab__header-group--highlight {
  border-left: 4px solid var(--brand-red-coral);
}

[dir="rtl"] .dc-vertical-tab__header--highlight, [dir="rtl"] .dc-vertical-tab__header-group--highlight {
  border-right: 4px solid var(--brand-red-coral);
}

.dc-vertical-tab__header--new, .dc-vertical-tab__header-group--new {
  font-size: 1rem;
  font-weight: bold;
  padding: 0 0.4rem;
  margin: 0 0.4rem;
  background-color: var(--text-loss-danger);
  color: var(--status-colored-background);
  border-radius: 8px;
}

.dc-vertical-tab__header--floating, .dc-vertical-tab__header-group--floating {
  border-radius: 4px;
}

.dc-vertical-tab__content {
  width: 100%;
  height: 100%;
  min-height: inherit;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
  position: relative;
  background-color: var(--general-main-1);
  grid-area: form-content;
}

[dir="ltr"] .dc-vertical-tab__content {
  border-radius: 0 4px 4px 0;
}

[dir="rtl"] .dc-vertical-tab__content {
  border-radius: 4px 0 0 4px;
}

.dc-vertical-tab__content-side-note {
  min-width: 25.6rem;
}

[dir="ltr"] .dc-vertical-tab__content-side-note {
  margin-left: 2.4rem;
}

[dir="rtl"] .dc-vertical-tab__content-side-note {
  margin-right: 2.4rem;
}

.dc-vertical-tab__content-side-note-item {
  background-color: var(--general-section-1);
  border-radius: 8px;
  padding: 1.6rem 2.4rem;
  color: var(--text-general);
  font-size: var(--text-size-xxs);
  line-height: 1.5;
  margin-bottom: 2.4rem;
  width: 25.6rem;
}

.dc-vertical-tab__content.dc-vertical-tab:not(.dc-vertical-tab--full-screen) {
  padding: 2.4rem;
  height: 100%;
}

.dc-vertical-tab__content--floating {
  max-width: 952px;
  min-width: 672px;
}

[dir="ltr"] .dc-vertical-tab__content--floating {
  margin-left: 2.4rem;
}

[dir="rtl"] .dc-vertical-tab__content--floating {
  margin-right: 2.4rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.wizard {
  width: inherit;
  height: inherit;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.player {
  position: static !important;
  position: initial !important;
}

.player__wrapper {
  position: relative;
}

.player__loader {
  position: absolute;
  top: 0;
  width: 100%;
  height: 100%;
  z-index: 2;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: transparent;
}

[dir="ltr"] .player__loader {
  left: 0;
}

[dir="rtl"] .player__loader {
  right: 0;
}

.player__loader-circle {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  border: 3px solid rgba(255, 255, 255, 0.2);
  border-top-color: var(--brand-red-coral);
  animation: spin 1s infinite linear;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

.player__overlay {
  position: absolute;
  top: 0;
  height: 100%;
  width: 100%;
  background: rgba(0, 0, 0, 0.72);
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 0;
  -webkit-transform: translate3d(0, 0, 200px);
}

.player__overlay--visible {
  opacity: 1;
}

.player__overlay__icon {
  margin: 0;
}

.player__overlay__icon-close {
  position: fixed;
  top: 0;
  padding: 1.6rem;
}

[dir="ltr"] .player__overlay__icon-close {
  right: 0;
}

[dir="rtl"] .player__overlay__icon-close {
  left: 0;
}

.player__controls__wrapper {
  position: absolute;
  bottom: 0.2rem;
  z-index: 2;
  width: 100%;
  height: 5.6rem;
  padding: 0 1.6rem;
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.25s linear;
  -webkit-transform: translate3d(0, 0, 200px);
}

[dir="ltr"] .player__controls__wrapper {
  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%);
}

[dir="rtl"] .player__controls__wrapper {
  background: linear-gradient(-180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%);
}

.player__controls__wrapper--visible {
  opacity: 1;
}

.player__controls__wrapper--interactive {
  pointer-events: auto;
}

.player__controls__progress-bar {
  width: 100%;
  background-color: var(--text-colored-background);
  height: 0.4rem;
  border-radius: 4px;
  margin: 0.8rem 0;
  cursor: pointer;
}

.player__controls__progress-bar:not(.player__controls__progress-bar--v2):before {
  content: "";
  display: block;
  height: 2rem;
  width: 100%;
  position: absolute;
  bottom: 67%;
}

.player__controls__progress-bar__filled {
  position: relative;
  width: 0%;
  height: 0.4rem;
  border-radius: 4px;
  background-color: var(--brand-red-coral);
}

.player__controls__progress-bar__filled--animated {
  transition: all 0.3s linear;
}

.player__controls__progress-bar__filled--ended {
  width: 100%;
}

.player__controls__bottom-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 3.6rem;
  padding-bottom: 0.4rem;
}

.player__controls__bottom-bar--v2 {
  display: flex;
  flex-direction: column;
  height: 3.6rem;
  padding-bottom: 0.4rem;
}

.player__controls__bottom-bar--v2 .controls__right--v2 {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  gap: 0.8rem;
}

.player__controls__bottom-bar--blocked {
  pointer-events: none;
}

.player__controls__bottom-bar .controls__right {
  width: 10.2rem;
}

.player__controls__time-wrapper {
  margin: 0 1.6rem;
}

.player__controls__time-wrapper--v2 {
  margin: 0;
}

.player__controls__button {
  background: none;
  border: none;
  padding: 0;
  cursor: pointer;
  width: 2.4rem;
  height: 2.4rem;
  display: flex;
  justify-content: center;
  align-items: center;
}

.player__controls__button svg {
  margin: 0 !important;
}

.player__volume__wrapper {
  position: relative;
}

.player__volume__wrapper:before {
  content: "";
  display: block;
  height: 1rem;
  width: 4rem;
  position: absolute;
}

[dir="ltr"] .player__volume__wrapper:before {
  right: -1rem;
}

[dir="rtl"] .player__volume__wrapper:before {
  left: -1rem;
}

.player__volume-bar {
  position: relative;
  width: 0.4rem;
  height: 100%;
  border-radius: 4px;
  cursor: pointer;
  background-color: var(--text-less-prominent);
}

.player__volume-bar__wrapper {
  width: 4rem;
  height: 10.4rem;
  position: absolute;
  bottom: 2.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.8rem 0;
  border-radius: 8px;
  background-color: var(--general-main-2);
  box-shadow: 0 0.8rem 1.6rem 0 var(--shadow-menu);
  transform: translateY(0);
  transition: transform 0.25s ease, opacity 0.25s linear;
  opacity: 0;
}

[dir="ltr"] .player__volume-bar__wrapper {
  right: -1rem;
}

[dir="rtl"] .player__volume-bar__wrapper {
  left: -1rem;
}

.player__volume-bar__wrapper--enter, .player__volume-bar__wrapper--exit {
  transform: translateY(1rem);
  opacity: 0;
}

.player__volume-bar__wrapper--enter-done {
  transform: translateY(0);
  opacity: 1;
}

.player__volume-bar__filled {
  position: absolute;
  bottom: 0;
  width: 0.4rem;
  border-radius: 4px;
  background-color: var(--brand-red-coral);
}

.player__volume-bar__filled--animated {
  transition: all 0.3s linear;
}

.player__volume-dot {
  position: absolute;
  bottom: 90%;
}

[dir="ltr"] .player__volume-dot {
  left: -0.4rem;
}

[dir="rtl"] .player__volume-dot {
  right: -0.4rem;
}

.player__progress-dot, .player__volume-dot {
  width: 1.2rem;
  height: 1.2rem;
  border-radius: 50%;
  background-color: var(--brand-red-coral);
  cursor: pointer;
}

.player__progress-dot {
  position: absolute;
  bottom: -0.3rem;
}

[dir="ltr"] .player__progress-dot {
  left: calc(100% - 0.6rem);
}

[dir="rtl"] .player__progress-dot {
  right: calc(100% - 0.6rem);
}

@media (min-width: 1024px) {
  .player__progress-dot:hover {
    bottom: -0.6rem;
    width: 1.6rem;
    height: 1.6rem;
  }
}

.player__progress-dot--increased-drag-area:before {
  position: absolute;
  content: "";
  height: 2.5rem;
  width: 2.5rem;
  top: 50%;
  border-radius: 50%;
}

[dir="ltr"] .player__progress-dot--increased-drag-area:before {
  left: 50%;
  transform: translate(-50%, -50%);
}

[dir="rtl"] .player__progress-dot--increased-drag-area:before {
  right: 50%;
  transform: translate(50%, -50%);
}

.player__progress-dot--enlarged {
  bottom: -0.6rem;
  width: 1.6rem;
  height: 1.6rem;
}

.player__playback-rate__wrapper {
  width: 6.2rem;
  position: relative;
}

.player__playback-rate__wrapper .playback-rate__icon {
  position: absolute;
}

[dir="ltr"] .player__playback-rate__wrapper .playback-rate__icon {
  left: 0;
}

[dir="rtl"] .player__playback-rate__wrapper .playback-rate__icon {
  right: 0;
}

.player__playback-rate__wrapper .dc-dropdown__select-arrow {
  display: none;
}

.player__playback-rate__wrapper .dc-dropdown__display--playback-rate {
  width: 6.2rem;
  height: 2.3rem;
  background: none;
  border: none;
  border-radius: 8px;
  justify-content: flex-start;
}

.player__playback-rate__wrapper .dc-dropdown__display--playback-rate--v2 {
  width: 6.2rem;
  height: 2.3rem;
  background: none;
  border: none;
  border-radius: 8px;
}

.player__playback-rate__wrapper .dc-dropdown__display--playback-rate--v2 .dc-dropdown__display-text {
  color: var(--text-colored-background);
  font-size: var(--text-size-xxs);
}

[dir="ltr"] .player__playback-rate__wrapper .dc-dropdown__display--playback-rate--v2 .dc-dropdown__display-text {
  padding: 0 0 0 3.5rem;
}

[dir="rtl"] .player__playback-rate__wrapper .dc-dropdown__display--playback-rate--v2 .dc-dropdown__display-text {
  padding: 0 3.5rem 0 0;
}

.player__playback-rate__wrapper .dc-dropdown__display--playback-rate .dc-dropdown__display-text {
  color: var(--text-colored-background);
  font-size: 1rem;
}

[dir="ltr"] .player__playback-rate__wrapper .dc-dropdown__display--playback-rate .dc-dropdown__display-text {
  padding: 0 0 0 2.5rem;
}

[dir="rtl"] .player__playback-rate__wrapper .dc-dropdown__display--playback-rate .dc-dropdown__display-text {
  padding: 0 2.5rem 0 0;
}

.player__playback-rate__wrapper .dc-dropdown-container {
  min-width: 6.2rem;
  width: auto;
  width: initial;
}

.player__playback-rate__wrapper .dc-dropdown-container:before {
  content: "";
  display: block;
  height: 1.7rem;
  width: 7rem;
  position: absolute;
  bottom: 1rem;
}

.player__playback-rate__wrapper .dc-dropdown__list {
  width: 9.7rem;
}

[dir="ltr"] .player__playback-rate__wrapper .dc-dropdown__list {
  right: 10%;
  left: auto;
  left: initial;
}

[dir="rtl"] .player__playback-rate__wrapper .dc-dropdown__list {
  left: 10%;
  right: auto;
  right: initial;
}

.player__playback-rate__wrapper .dc-dropdown__display--playback-rate__item {
  height: 4rem;
  display: flex;
  justify-content: start;
  align-items: center;
}

@media (min-width: 320px) and (max-width: 767px) {
  .player__playback-rate__wrapper .dc-list,
  .player__playback-rate__wrapper .dc-themed-scrollbars {
    max-height: 100vh !important;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
*:where(:not(html):not(iframe):not(canvas):not(img):not(svg):not(video):not(audio):not(symbol):not(svg *):not(symbol *)) {
  all: unset;
  display: revert;
}

*, *:before, *:after {
  box-sizing: border-box;
}

html {
  -moz-text-size-adjust: none;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
}

a, button {
  cursor: revert;
}

ol, ul, menu, summary {
  list-style: none;
}

img {
  max-width: 100%;
  max-height: 100%;
}

table {
  border-collapse: collapse;
}

input, textarea {
  -webkit-user-select: auto;
}

input::-webkit-outer-spin-button, input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input[type=number] {
  -moz-appearance: textfield;
}

textarea {
  white-space: revert;
}

meter {
  -webkit-appearance: revert;
  -moz-appearance: revert;
  appearance: revert;
}

:where(pre) {
  all: revert;
  box-sizing: border-box;
}

::-moz-placeholder {
  color: inherit;
}

::placeholder {
  color: inherit;
}

:where([hidden]) {
  display: none;
}

:where([contenteditable]:not([contenteditable=false])) {
  -moz-user-modify: read-write;
  -webkit-user-modify: read-write;
  word-wrap: break-word;
  -webkit-line-break: after-white-space;
  -webkit-user-select: auto;
}

:where([draggable=true]) {
  -webkit-user-drag: element;
}

:where(dialog:modal) {
  all: revert;
  box-sizing: border-box;
}

::-webkit-details-marker {
  display: none;
}

:host, :root {
  --du-text-size-3xs: 6px;
  --du-text-size-2xs: 8px;
  --du-text-size-xs: 10px;
  --du-text-size-sm: 12px;
  --du-text-size-default: 14px;
  --du-text-size-md: 16px;
  --du-text-size-lg: 28px;
  --du-text-size-xl: 30px;
  --du-text-size-2xl: 32px;
  --du-text-lh-2xs: 1;
  --du-text-lh-xs: 1.25;
  --du-text-lh-sm: 1.4;
  --du-text-lh-md: 1.5;
  --du-text-lh-lg: 1.75;
  --du-text-lh-xl: 2;
  --du-text-lh-2xl: 2.4;
  --du-text-weight-light: 300;
  --du-text-weight-normal: 400;
  --du-text-weight-semibold: 500;
  --du-text-weight-bold: 700;
  --du-text-align-left: start;
  --du-text-align-right: right;
  --du-text-align-center: center;
  --du-brand-white: #ffffff;
  --du-brand-dark-gray: #0e0e0e;
  --du-brand-red-coral: #ff444f;
  --du-brand-orange: #ff6444;
  --du-brand-secondary: #85acb0;
  --du-deriv-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);
  --du-deriv-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);
  --du-deriv-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);
  --du-deriv-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);
  --du-deriv-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);
  --du-deriv-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);
  --du-deriv-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);
  --du-deriv-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);
  --du-deriv-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);
  --du-deriv-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);
  --du-deriv-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);
  --du-deriv-perfectmoney: gradient-perfectmoney;
  --du-deriv-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);
  --du-deriv-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);
  --du-deriv-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);
  --du-deriv-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);
  --du-deriv-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);
  --du-app-card-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);
  --du-app-card-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);
}

:host .theme--light, :root .theme--light {
  --du-general-main-1: #ffffff;
  --du-general-main-2: #ffffff;
  --du-general-main-3: #999999;
  --du-general-main-4: rgba(255, 255, 255, .7);
  --du-general-section-1: #f2f3f4;
  --du-general-section-2: #f2f3f4;
  --du-general-section-3: #fafafa;
  --du-general-section-4: #f5f7fa;
  --du-general-section-5: #f2f3f4;
  --du-general-section-6: #f2f3f4;
  --du-general-disabled: #eaeced;
  --du-general-hover: #e6e9e9;
  --du-general-hover-1: #333333;
  --du-general-active: #d6dadb;
  --du-text-general: #333333;
  --du-text-primary: #999999;
  --du-text-less-prominent: #999999;
  --du-text-prominent: #333333;
  --du-text-disabled: #999999;
  --du-text-disabled-1: #d6d6d6;
  --du-text-loss-danger: #ec3f3f;
  --du-text-profit-success: #4bb4b3;
  --du-text-warning: #ffad3a;
  --du-text-red: #ff444f;
  --du-text-green: #17eabd;
  --du-text-blue: #0796e0;
  --du-text-info-blue: #377cfc;
  --du-text-black: #000000;
  --du-text-orange: #ff9c13;
  --du-system-dark-2-general-text: #c2c2c2;
  --du-text-info-blue-background: #dfeaff;
  --du-text-colored-background: #ffffff;
  --du-icon-light-background: #5c5c5c;
  --du-icon-dark-background: #ffffff;
  --du-icon-gray-background: #f2f3f4;
  --du-icon-black-plus: #000000;
  --du-text-status-info-blue: #377cfc;
  --du-text-hint: #333333;
  --du-text-white: #ffffff;
  --du-text-black-transparent: rgba(0, 0, 0, .72);
  --du-purchase-main-1: #4bb4b3;
  --du-purchase-section-1: #3d9494;
  --du-purchase-main-2: #ec3f3f;
  --du-purchase-section-2: #d33636;
  --du-purchase-disabled-main: #eaeced;
  --du-purchase-disabled-section: #e6e9e9;
  --du-button-primary-default: var(--du-brand-red-coral);
  --du-button-secondary-default: #999999;
  --du-button-tertiary-default: transparent;
  --du-button-primary-light-default: rgba(255, 68, 79, .16);
  --du-button-primary-hover: #eb3e48;
  --du-button-secondary-hover: rgba(0, 0, 0, .08);
  --du-button-tertiary-hover: rgba(255, 68, 79, .08);
  --du-button-primary-light-hover: rgba(255, 68, 79, .24);
  --du-button-toggle-primary: #0796e0;
  --du-button-toggle-secondary: #d6dadb;
  --du-button-toggle-alternate: #ffffff;
  --du-overlay-outside-dialog: rgba(0, 0, 0, .72);
  --du-overlay-inside-dialog: rgba(255, 255, 255, .96);
  --du-shadow-menu: rgba(0, 0, 0, .16);
  --du-shadow-menu-2: rgba(0, 0, 0, .16);
  --du-shadow-drop: rgba(0, 0, 0, .08);
  --du-shadow-box: rgba(0, 0, 0, .4);
  --du-state-normal: #ffffff;
  --du-state-hover: #e6e9e9;
  --du-state-active: #d6dadb;
  --du-state-disabled: #eaeced;
  --du-checkbox-disabled-gray: #d6d6d6;
  --du-sidebar-tab: #d6d6d6;
  --du-border-normal: #d6dadb;
  --du-border-normal-1: #d6dadb;
  --du-border-normal-2: #d6dadb;
  --du-border-normal-3: #d6d6d6;
  --du-border-hover: #999999;
  --du-border-hover-1: #5c5c5c;
  --du-border-active: var(--du-brand-secondary);
  --du-border-disabled: #eaeced;
  --du-border-divider: #f2f3f4;
  --du-fill-normal: #ffffff;
  --du-fill-normal-1: #c2c2c2;
  --du-fill-hover: #999999;
  --du-fill-active: var(--du-brand-secondary);
  --du-fill-disabled: #eaeced;
  --du-status-default: #eaeced;
  --du-status-adjustment: #999999;
  --du-status-danger: #ec3f3f;
  --du-status-success: #4bb4b3;
  --du-status-warning: #ffad3a;
  --du-status-warning-transparent: rgba(255, 173, 58, .16);
  --du-status-transfer: #ff6444;
  --du-status-info: #377cfc;
  --du-status-colored-background: #ffffff;
  --du-status-alert-background: rgba(255, 173, 58, .16);
  --du-dashboard-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);
  --du-dashboard-app: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);
  --du-payment-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);
  --du-payment-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);
  --du-payment-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);
  --du-payment-credit-and-debit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);
  --du-payment-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);
  --du-payment-usd-coin: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);
  --du-payment-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);
  --du-payment-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);
  --du-payment-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);
  --du-payment-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);
  --du-payment-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);
  --du-payment-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);
  --du-payment-deriv: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);
  --du-transparent-success: rgba(75, 180, 179, .92);
  --du-transparent-success-secondary: rgba(0, 136, 50, .08);
  --du-transparent-blue-secondary: rgba(44, 154, 255, .08);
  --du-transparent-info: rgba(55, 124, 252, .16);
  --du-transparent-hint: rgba(55, 124, 252, .08);
  --du-transparent-danger: rgba(255, 68, 79, .16);
  --du-transparent-danger-secondary: rgba(230, 25, 14, .08);
  --du-transparent-correct-message: rgba(75, 180, 179, .1607843137);
  --du-transparent-fake-message: rgba(236, 63, 63, .1607843137);
  --du-transparent-warning-secondary: rgba(255, 156, 19, .08);
  --du-gradient-success: linear-gradient(to top, #ffffff, rgba(75, 180, 179, .16));
  --du-gradient-danger: linear-gradient(to top, #ffffff, rgba(255, 68, 79, .16));
  --du-contract-gradient-danger: linear-gradient(to top, #ffffff 85%, rgba(255, 68, 79, .16));
  --du-gradient-right-edge: linear-gradient(to right, rgba(255, 255, 255, 0) -5%, #ffffff 71%);
  --du-gradient-blue: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);
  --du-gradient-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);
  --du-gradient-green: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);
  --du-badge-white: #ffffff;
  --du-badge-blue: #0677af;
  --du-badge-blue-secondary: #0777c4;
  --du-badge-light-blue: #0677af;
  --du-badge-violet: #2a3052;
  --du-badge-success: #4bb4b3;
  --du-badge-success-secondary: #007a22;
  --du-badge-warning: #ffad3a;
  --du-badge-warning-secondary: #c47d00;
  --du-badge-danger: #ec3f3f;
  --du-badge-danger-secondary: #c40000;
  --du-badge-purple: #722fe4;
  --du-traders-hub-banner-border-color: #e6e9e9;
  --du-derivs-banner-ready-bg-color: #e2f3f3;
  --du-derivs-banner-ready-tick-bg-color: #4ab4b3;
  --du-derivs-banner-border-color: #e6e9e9;
  --du-derivs-banner-dot-color: #d6d6d6;
  --du-derivs-banner-active-dot-color: #ff444f;
  --du-derivs-card-active-gradient-background: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, .16) 100%);
  --du-deriv-demo-bg-color: #fff8f9;
  --du-deriv-demo-divider-color: #fff0f1;
  --du-deriv-eu-disclaimer: #e6e9e9;
  --du-deriv-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, .08), 0px 4px 6px -2px rgba(14, 14, 14, .03);
  --du-demo-text-color-1: #c2c2c2;
  --du-demo-text-color-2: #ffffff;
  --du-header-background-mt5: #e6f5ff;
  --du-header-background-others: #e8fdf8;
}

:host .theme--dark, :root .theme--dark {
  --du-general-main-1: #0e0e0e;
  --du-general-main-2: #151717;
  --du-general-main-3: #1d1f20;
  --du-general-main-4: rgba(14, 14, 14, .5);
  --du-general-section-1: #151717;
  --du-general-section-2: #0e0e0e;
  --du-general-section-3: #242828;
  --du-general-section-4: #242828;
  --du-general-section-5: #242828;
  --du-general-section-6: #6e6e6e;
  --du-general-disabled: #1d1f20;
  --du-general-hover: #242828;
  --du-general-hover-1: #ffffff;
  --du-general-active: #323738;
  --du-text-prominent: #ffffff;
  --du-text-general: #c2c2c2;
  --du-text-less-prominent: #6e6e6e;
  --du-text-primary: #999999;
  --du-text-disabled: #3e3e3e;
  --du-text-disabled-1: #3e3e3e;
  --du-text-profit-success: #00a79e;
  --du-text-loss-danger: #cc2e3d;
  --du-text-red: #ff444f;
  --du-text-colored-background: #ffffff;
  --du-text-info-blue: #92b8ff;
  --du-text-info-blue-background: #182130;
  --du-text-status-info-blue: #377cfc;
  --du-text-hint: #c2c2c2;
  --du-text-white: #ffffff;
  --du-icon-light-background: #5c5c5c;
  --du-icon-dark-background: #ffffff;
  --du-icon-gray-background: #333333;
  --du-icon-black-plus: #ffffff;
  --du-text-black-transparent: rgba(255, 255, 255, .28);
  --du-purchase-main-1: #00a79e;
  --du-purchase-section-1: #008079;
  --du-purchase-main-2: #cc2e3d;
  --du-purchase-section-2: #a32430;
  --du-purchase-disabled-main: #1d1f20;
  --du-purchase-disabled-section: #0e0e0e;
  --du-button-primary-default: var(--du-brand-red-coral);
  --du-button-secondary-default: #6e6e6e;
  --du-button-tertiary-default: transparent;
  --du-button-primary-light-default: rgba(255, 68, 79, .16);
  --du-button-primary-hover: #eb3e48;
  --du-button-secondary-hover: rgba(255, 255, 255, .08);
  --du-button-tertiary-hover: rgba(255, 68, 79, .08);
  --du-button-primary-light-hover: rgba(255, 68, 79, .24);
  --du-button-toggle-primary: #0796e0;
  --du-button-toggle-secondary: #323738;
  --du-button-toggle-alternate: #323738;
  --du-overlay-outside-dialog: rgba(0, 0, 0, .72);
  --du-overlay-inside-dialog: rgba(14, 14, 14, .96);
  --du-shadow-menu: rgba(0, 0, 0, .84);
  --du-shadow-menu-2: rgba(0, 0, 0, .72);
  --du-shadow-drop: rgba(0, 0, 0, .64);
  --du-shadow-box: #555975;
  --du-state-normal: #0e0e0e;
  --du-state-hover: #242828;
  --du-state-active: #323738;
  --du-state-disabled: #1d1f20;
  --du-checkbox-disabled-gray: #d6d6d6;
  --du-sidebar-tab: #6e6e6e;
  --du-border-normal: #323738;
  --du-border-normal-1: #d6dadb;
  --du-border-normal-2: #999999;
  --du-border-normal-3: #6e6e6e;
  --du-border-hover: #6e6e6e;
  --du-border-hover-1: #5c5c5c;
  --du-border-active: var(--du-brand-secondary);
  --du-border-disabled: #1d1f20;
  --du-border-divider: #2e2e2e;
  --du-fill-normal: #0e0e0e;
  --du-fill-normal-1: #333333;
  --du-fill-hover: #6e6e6e;
  --du-fill-active: var(--du-brand-secondary);
  --du-fill-disabled: #1d1f20;
  --du-status-default: #eaeced;
  --du-status-adjustment: #999999;
  --du-status-danger: #cc2e3d;
  --du-status-warning: #ffad3a;
  --du-status-warning-transparent: rgba(255, 173, 58, .16);
  --du-status-success: #00a79e;
  --du-status-transfer: #ff6444;
  --du-status-info: #377cfc;
  --du-status-colored-background: #ffffff;
  --du-status-alert-background: rgba(255, 173, 58, .16);
  --du-transparent-success: rgba(0, 167, 158, .92);
  --du-transparent-success-secondary: rgba(0, 136, 50, .08);
  --du-transparent-blue-secondary: rgba(44, 154, 255, .08);
  --du-transparent-info: rgba(55, 124, 252, .16);
  --du-transparent-hint: rgba(55, 124, 252, .16);
  --du-transparent-danger: rgba(255, 68, 79, .16);
  --du-transparent-danger-secondary: rgba(230, 25, 14, .08);
  --du-transparent-correct-message: rgba(75, 180, 179, .1607843137);
  --du-transparent-fake-message: rgba(236, 63, 63, .1607843137);
  --du-transparent-warning-secondary: rgba(255, 156, 19, .08);
  --du-gradient-success: linear-gradient(to top, #0e0e0e, rgba(0, 167, 158, .16));
  --du-gradient-danger: linear-gradient(to top, #0e0e0e, rgba(255, 68, 79, .16));
  --du-contract-gradient-danger: linear-gradient(to top, #0e0e0e 85%, rgba(255, 68, 79, .16));
  --du-gradient-right-edge: linear-gradient(to right, rgba(14, 14, 14, 0) -5%, #0e0e0e 71%);
  --du-gradient-blue: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);
  --du-gradient-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);
  --du-gradient-green: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);
  --du-badge-white: #ffffff;
  --du-badge-blue: #0677af;
  --du-badge-blue-secondary: #0777c4;
  --du-badge-light-blue: #00c6ef;
  --du-badge-violet: #2a3052;
  --du-badge-success: #00a79e;
  --du-badge-success-secondary: #007a22;
  --du-badge-warning: #ffad3a;
  --du-badge-warning-secondary: #c47d00;
  --du-badge-danger: #cc2e3d;
  --du-badge-danger-secondary: #c40000;
  --du-badge-purple: #8f4bff;
  --du-traders-hub-banner-border-color: #242828;
  --du-derivs-banner-ready-bg-color: #e2f3f3;
  --du-derivs-banner-ready-tick-bg-color: #4ab4b3;
  --du-derivs-banner-border-color: #e6e9e9;
  --du-derivs-banner-dot-color: #d6d6d6;
  --du-derivs-banner-active-dot-color: #ff444f;
  --du-derivs-card-active-gradient-background: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, .16) 100%);
  --du-deriv-demo-bg-color: #140506;
  --du-deriv-demo-divider-color: #323738;
  --du-deriv-eu-disclaimer: #e6e9e9;
  --du-deriv-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, .08), 0px 4px 6px -2px rgba(14, 14, 14, .03);
  --du-demo-text-color-1: #333333;
  --du-demo-text-color-2: #333333;
  --du-header-background-mt5: #e6f5ff;
  --du-header-background-others: #e8fdf8;
}

html {
  font-family: IBM Plex Sans, sans-serif;
}

.derivs-text__color--prominent {
  color: #333333;
  color: var(--du-text-prominent, #333333);
}

.derivs-text__color--less-prominent {
  color: #999999;
  color: var(--du-text-less-prominent, #999999);
}

.derivs-text__color--general {
  color: #333333;
  color: var(--du-text-general, #333333);
}

.derivs-text__color--primary {
  color: #999999;
  color: var(--du-text-primary, #999999);
}

.derivs-text__color--success {
  color: #4bb4b3;
  color: var(--du-text-profit-success, #4bb4b3);
}

.derivs-text__color--warning {
  color: #ffad3a;
  color: var(--du-text-warning, #ffad3a);
}

.derivs-text__color--error {
  color: #ec3f3f;
  color: var(--du-text-loss-danger, #ec3f3f);
}

.derivs-text__color--red {
  color: #ff444f;
  color: var(--du-text-red, #ff444f);
}

.derivs-text__color--blue {
  color: #377cfc;
  color: var(--du-text-info-blue, #377cfc);
}

.derivs-text__color--green {
  color: #17eabd;
  color: var(--du-text-green, #17eabd);
}

.derivs-text__color--white {
  color: #ffffff;
  color: var(--du-text-white, #ffffff);
}

.derivs-text__color--black {
  color: #000000;
  color: var(--du-text-black, #000000);
}

.derivs-text__color--orange {
  color: #ff9c13;
  color: var(--du-text-orange, #ff9c13);
}

.derivs-text__color--system-dark-2-general-text {
  color: #c2c2c2;
  color: var(--du-system-dark-2-general-text, #c2c2c2);
}

.derivs-text__size--2xs {
  font-size: 10px;
  line-height: 14px;
}

.derivs-text__size--xs {
  font-size: 12px;
  line-height: 18px;
}

.derivs-text__size--sm {
  font-size: 14px;
  line-height: 20px;
}

.derivs-text__size--md {
  font-size: 16px;
  line-height: 24px;
}

.derivs-text__size--lg {
  font-size: 20px;
  line-height: 30px;
}

.derivs-text__size--xl {
  font-size: 24px;
  line-height: 36px;
}

.derivs-text__size--2xl {
  font-size: 32px;
  line-height: 40px;
}

.derivs-text__size--3xl {
  font-size: 48px;
  line-height: 60px;
}

.derivs-text__size--4xl {
  font-size: 64px;
  line-height: 80px;
}

.derivs-text__size--5xl {
  font-size: 80px;
  line-height: 10px;
}

@media (max-width: 601px) {
  .derivs-text__size--2xs {
    font-size: 8px;
    line-height: 12px;
  }
}

@media (max-width: 601px) {
  .derivs-text__size--xs {
    font-size: 10px;
    line-height: 14px;
  }
}

@media (max-width: 601px) {
  .derivs-text__size--sm {
    font-size: 12px;
    line-height: 18px;
  }
}

@media (max-width: 601px) {
  .derivs-text__size--md {
    font-size: 14px;
    line-height: 20px;
  }
}

@media (max-width: 601px) {
  .derivs-text__size--lg {
    font-size: 16px;
    line-height: 24px;
  }
}

@media (max-width: 601px) {
  .derivs-text__size--xl {
    font-size: 18px;
    line-height: 26px;
  }
}

@media (max-width: 601px) {
  .derivs-text__size--2xl {
    font-size: 24px;
    line-height: 30px;
  }
}

@media (max-width: 601px) {
  .derivs-text__size--3xl {
    font-size: 28px;
    line-height: 34px;
  }
}

@media (max-width: 601px) {
  .derivs-text__size--4xl {
    font-size: 32px;
    line-height: 40px;
  }
}

@media (max-width: 601px) {
  .derivs-text__size--5xl {
    font-size: 40px;
    line-height: 50px;
  }
}

.derivs-text__line-height--3xs {
  line-height: 12px;
}

.derivs-text__line-height--2xs {
  line-height: 14px;
}

.derivs-text__line-height--xs {
  line-height: 16px;
}

.derivs-text__line-height--sm {
  line-height: 18px;
}

.derivs-text__line-height--md {
  line-height: 20px;
}

.derivs-text__line-height--lg {
  line-height: 22px;
}

.derivs-text__line-height--xl {
  line-height: 24px;
}

.derivs-text__line-height--2xl {
  line-height: 26px;
}

.derivs-text__line-height--3xl {
  line-height: 28px;
}

.derivs-text__line-height--4xl {
  line-height: 30px;
}

.derivs-text__line-height--5xl {
  line-height: 32px;
}

.derivs-text__line-height--6xl {
  line-height: 34px;
}

.derivs-text__line-height--7xl {
  line-height: 36px;
}

.derivs-text__weight--bold {
  font-weight: 700;
}

.derivs-text__weight--semibold {
  font-weight: 500;
}

.derivs-text__weight--normal {
  font-weight: 400;
}

.derivs-text__weight--light {
  font-weight: 300;
}

[dir="ltr"] .derivs-text__align--left {
  text-align: left;
}

[dir="rtl"] .derivs-text__align--left {
  text-align: right;
}

.derivs-text__align--center {
  text-align: center;
}

[dir="ltr"] .derivs-text__align--right {
  text-align: right;
}

[dir="rtl"] .derivs-text__align--right {
  text-align: left;
}

.derivs-text__font-style--italic {
  font-style: italic;
}

.derivs-text__font-style--normal {
  font-style: normal;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.information-banner {
  display: flex;
  padding: 1.6rem;
  background: #e7f2f4;
  border-radius: 8px;
  justify-content: space-between;
  margin-top: 1.6rem;
  cursor: pointer;
}

.information-banner__content {
  display: flex;
}

[dir="ltr"] .information-banner__content-text {
  margin-left: 0.4rem;
}

[dir="rtl"] .information-banner__content-text {
  margin-right: 0.4rem;
}

.information-banner__content-text {
  display: flex;
  flex-direction: column;
  padding-top: 0.3rem;
}

.information-banner__title {
  font-weight: 700 !important;
  color: #095a66 !important;
}

.information-banner__description {
  color: #095a66 !important;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.wallet-icon {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  overflow: hidden;
}

.wallet-icon__default-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(244, 67, 54, 0.24) 0%, rgba(40, 57, 145, 0.48) 100%) #ffffff;
}

.wallet-icon--xsmall {
  width: 2.4rem;
  height: 1.4rem;
}

.wallet-icon--small {
  width: 4rem;
  height: 2.4rem;
}

.wallet-icon--medium {
  width: 6.4rem;
  height: 4rem;
}

.wallet-icon--large {
  width: 8.4rem;
  height: 5.2rem;
}

.wallet-icon--xlarge {
  width: 12.8rem;
  height: 8rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.wallet-card {
  position: relative;
}

.wallet-card__container {
  border-radius: inherit;
  width: 100%;
  height: 100%;
}

.wallet-card__container--active {
  border: 2px solid var(--text-red);
}

.wallet-card__container--small {
  display: flex;
  align-items: center;
  justify-content: center;
}

.wallet-card__container-fade {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  opacity: 0;
  background: var(--wallets-card-active-gradient-background);
  border-radius: inherit;
}

.wallet-card__container-fade--active {
  opacity: 1;
}

.wallet-card__container:hover .wallet-card__container-fade {
  opacity: 1;
}

.wallet-card__container:hover .wallet-card__container-fade--disabled, .wallet-card__container:hover .wallet-card__container-fade--faded, .wallet-card__container:hover .wallet-card__container-fade--added {
  opacity: 0;
}

.wallet-card__shine {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  clip-path: polygon(40% 10%, 104% -6.94%, 92.5% 100%, 28% 100%);
  mix-blend-mode: overlay;
  opacity: 0.16;
  background-color: #ffffff;
}

[dir="ltr"] .wallet-card__shine {
  border-top-right-radius: 8px;
}

[dir="rtl"] .wallet-card__shine {
  border-top-left-radius: 8px;
}

.wallet-card__content {
  position: relative;
  height: 100%;
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  padding: 1.6rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__content--medium {
    padding: 0.8rem;
  }
}

.wallet-card--small {
  width: 6.4rem;
  height: 4rem;
  border-radius: 4px;
}

.wallet-card--medium {
  width: 20rem;
  height: 12rem;
  border-radius: 8px;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card--medium {
    width: 16rem;
    height: 9.6rem;
  }
}

.wallet-card--large {
  width: 24rem;
  height: 14.4rem;
  border-radius: 8px;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card--large {
    width: 21.6rem;
    height: 12.8rem;
  }
}

.wallet-card__active-icon {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  justify-content: center;
  align-items: center;
}

.wallet-card__active-icon--small {
  position: absolute;
  top: 0;
  width: auto;
  width: initial;
  height: auto;
  height: initial;
}

[dir="ltr"] .wallet-card__active-icon--small {
  left: 100%;
  transform: translate(-1.2rem, -0.4rem);
}

[dir="rtl"] .wallet-card__active-icon--small {
  right: 100%;
  transform: translate(1.2rem, -0.4rem);
}

.wallet-card__top-wrapper {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
}

.wallet-card__bottom-wrapper {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  width: 100%;
}

.wallet-card__wallet-button {
  background: #ffffff;
}

.wallet-card__wallet-button-text {
  color: #333333;
}

.wallet-card__wallet-button--added {
  opacity: 0.32;
}

.wallet-card--disabled {
  opacity: 0.32;
}

.wallet-card--faded {
  opacity: 0.72;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.app-icon {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  overflow: hidden;
}

.app-icon__top-icon {
  position: absolute;
  top: 0;
  z-index: 1;
}

[dir="ltr"] .app-icon__top-icon {
  left: 0;
}

[dir="rtl"] .app-icon__top-icon {
  right: 0;
}

.app-icon__bottom-icon {
  position: absolute;
  bottom: 0;
}

[dir="ltr"] .app-icon__bottom-icon {
  right: 0;
}

[dir="rtl"] .app-icon__bottom-icon {
  left: 0;
}

.app-icon--small {
  width: 4rem;
  height: 2.4rem;
}

.app-icon--small .app-icon__top-icon {
  top: 0.1rem;
}

[dir="ltr"] .app-icon--small .app-icon__top-icon {
  left: 0.1rem;
}

[dir="rtl"] .app-icon--small .app-icon__top-icon {
  right: 0.1rem;
}

.app-icon--small .app-icon__bottom-icon {
  bottom: 0.1rem;
}

[dir="ltr"] .app-icon--small .app-icon__bottom-icon {
  right: 0.1rem;
}

[dir="rtl"] .app-icon--small .app-icon__bottom-icon {
  left: 0.1rem;
}

.app-icon--medium {
  width: 6.4rem;
  height: 4rem;
}

.app-icon--medium .app-icon__top-icon {
  top: 0.2rem;
}

[dir="ltr"] .app-icon--medium .app-icon__top-icon {
  left: 0.2rem;
}

[dir="rtl"] .app-icon--medium .app-icon__top-icon {
  right: 0.2rem;
}

.app-icon--medium .app-icon__bottom-icon {
  bottom: 0.2rem;
}

[dir="ltr"] .app-icon--medium .app-icon__bottom-icon {
  right: 0.2rem;
}

[dir="rtl"] .app-icon--medium .app-icon__bottom-icon {
  left: 0.2rem;
}

.app-icon--large {
  width: 12.8rem;
  height: 8rem;
}

.app-icon--large .app-icon__top-icon {
  top: 0.4rem;
}

[dir="ltr"] .app-icon--large .app-icon__top-icon {
  left: 0.4rem;
}

[dir="rtl"] .app-icon--large .app-icon__top-icon {
  right: 0.4rem;
}

.app-icon--large .app-icon__bottom-icon {
  bottom: 0.4rem;
}

[dir="ltr"] .app-icon--large .app-icon__bottom-icon {
  right: 0.4rem;
}

[dir="rtl"] .app-icon--large .app-icon__bottom-icon {
  left: 0.4rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.callback {
  font-family: Ubuntu, sans-serif;
  height: 100vh;
  width: 100vw;
  background-repeat: no-repeat;
  background-position: center;
  position: relative;
  align-items: center;
  background: #fff;
}

.callback__content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100%;
  gap: 40px;
}

.callback__title {
  color: #000;
  font-size: 24px;
  text-align: center;
  font-weight: 700;
  margin: 0;
}

.callback__button {
  border: 1px solid #000000;
  border-radius: 16px;
  font-weight: 700;
  font-size: 16px;
  line-height: 24px;
  text-align: center;
  background: inherit;
  color: #000;
  max-height: 48px;
}

.callback__button:hover {
  background: inherit;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.callback {
  font-family: Ubuntu, sans-serif;
  height: 100vh;
  width: 100vw;
  background-repeat: no-repeat;
  background-position: center;
  position: relative;
  align-items: center;
  background: #fff;
}

.callback__content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100%;
  gap: 40px;
}

.callback__title {
  color: #000;
  font-size: 24px;
  text-align: center;
  font-weight: 700;
  margin: 0;
}

.callback__button {
  border: 1px solid #000000;
  border-radius: 16px;
  font-weight: 700;
  font-size: 16px;
  line-height: 24px;
  text-align: center;
  background: inherit;
  color: #000;
  max-height: 48px;
}

.callback__button:hover {
  background: inherit;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.endpoint {
  width: 30vw;
  min-width: 30rem;
  margin: 20vh auto;
}

@media (min-width: 320px) and (max-width: 767px) {
  .endpoint {
    margin: auto;
  }
}

.endpoint__title {
  margin-bottom: 1.6rem;
}

.endpoint__checkbox {
  margin-top: 4.5rem;
  margin-bottom: 1.6rem;
}

[dir="ltr"] .endpoint .dc-btn--secondary {
  margin-left: 1.6rem;
}

[dir="rtl"] .endpoint .dc-btn--secondary {
  margin-right: 1.6rem;
}

.endpoint .feature-flags {
  margin-top: 4rem;
}

.endpoint .feature-flags__item {
  margin-top: 1.6rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.access-denied__main-container {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  height: calc(100vh - 7.2rem - 48px - 36px);
}

.access-denied__header {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 7.2rem;
}

.access-denied__logo {
  max-width: 190px;
}

.access-denied__title {
  font-size: 18px !important;
}

.access-denied__title {
  margin-top: 24px;
}

.access-denied__description {
  margin-top: 16px;
}

.access-denied__actions {
  margin-top: 24px;
  width: 368px;
}

.access-denied__button {
  border-radius: 100px;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 48px;
  color: var(--text-colored-background);
  font-size: 16px;
  font-weight: 500;
  background-color: var(--button-primary-default);
  cursor: pointer;
}

.access-denied__button:hover {
  background-color: var(--button-primary-hover);
}

.access-denied__button--switch {
  background-color: transparent;
  border: 1px solid var(--button-secondary-default);
  color: var(--text-general);
  margin-top: 8px;
}

.access-denied__button--switch:hover {
  background-color: var(--button-secondary-hover);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
*:where(:not(html):not(iframe):not(canvas):not(img):not(svg):not(video):not(audio):not(symbol):not(svg *):not(symbol *)) {
  all: unset;
  display: revert;
}

*, *:before, *:after {
  box-sizing: border-box;
}

html {
  -moz-text-size-adjust: none;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
}

a, button {
  cursor: revert;
}

ol, ul, menu, summary {
  list-style: none;
}

img {
  max-width: 100%;
  max-height: 100%;
}

table {
  border-collapse: collapse;
}

input, textarea {
  -webkit-user-select: auto;
}

input::-webkit-outer-spin-button, input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input[type=number] {
  -moz-appearance: textfield;
}

textarea {
  white-space: revert;
}

meter {
  -webkit-appearance: revert;
  -moz-appearance: revert;
  appearance: revert;
}

:where(pre) {
  all: revert;
  box-sizing: border-box;
}

::-moz-placeholder {
  color: inherit;
}

::placeholder {
  color: inherit;
}

:where([hidden]) {
  display: none;
}

:where([contenteditable]:not([contenteditable=false])) {
  -moz-user-modify: read-write;
  -webkit-user-modify: read-write;
  word-wrap: break-word;
  -webkit-line-break: after-white-space;
  -webkit-user-select: auto;
}

:where([draggable=true]) {
  -webkit-user-drag: element;
}

:where(dialog:modal) {
  all: revert;
  box-sizing: border-box;
}

::-webkit-details-marker {
  display: none;
}

:host, :root {
  --du-text-size-3xs: 6px;
  --du-text-size-2xs: 8px;
  --du-text-size-xs: 10px;
  --du-text-size-sm: 12px;
  --du-text-size-default: 14px;
  --du-text-size-md: 16px;
  --du-text-size-lg: 28px;
  --du-text-size-xl: 30px;
  --du-text-size-2xl: 32px;
  --du-text-lh-2xs: 1;
  --du-text-lh-xs: 1.25;
  --du-text-lh-sm: 1.4;
  --du-text-lh-md: 1.5;
  --du-text-lh-lg: 1.75;
  --du-text-lh-xl: 2;
  --du-text-lh-2xl: 2.4;
  --du-text-weight-light: 300;
  --du-text-weight-normal: 400;
  --du-text-weight-semibold: 500;
  --du-text-weight-bold: 700;
  --du-text-align-left: start;
  --du-text-align-right: right;
  --du-text-align-center: center;
  --du-brand-white: #ffffff;
  --du-brand-dark-gray: #0e0e0e;
  --du-brand-red-coral: #ff444f;
  --du-brand-orange: #ff6444;
  --du-brand-secondary: #85acb0;
  --du-deriv-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);
  --du-deriv-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);
  --du-deriv-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);
  --du-deriv-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);
  --du-deriv-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);
  --du-deriv-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);
  --du-deriv-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);
  --du-deriv-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);
  --du-deriv-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);
  --du-deriv-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);
  --du-deriv-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);
  --du-deriv-perfectmoney: gradient-perfectmoney;
  --du-deriv-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);
  --du-deriv-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);
  --du-deriv-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);
  --du-deriv-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);
  --du-deriv-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);
  --du-app-card-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);
  --du-app-card-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);
}

:host .theme--light, :root .theme--light {
  --du-general-main-1: #ffffff;
  --du-general-main-2: #ffffff;
  --du-general-main-3: #999999;
  --du-general-main-4: rgba(255, 255, 255, .7);
  --du-general-section-1: #f2f3f4;
  --du-general-section-2: #f2f3f4;
  --du-general-section-3: #fafafa;
  --du-general-section-4: #f5f7fa;
  --du-general-section-5: #f2f3f4;
  --du-general-section-6: #f2f3f4;
  --du-general-disabled: #eaeced;
  --du-general-hover: #e6e9e9;
  --du-general-hover-1: #333333;
  --du-general-active: #d6dadb;
  --du-text-general: #333333;
  --du-text-primary: #999999;
  --du-text-less-prominent: #999999;
  --du-text-prominent: #333333;
  --du-text-disabled: #999999;
  --du-text-disabled-1: #d6d6d6;
  --du-text-loss-danger: #ec3f3f;
  --du-text-profit-success: #4bb4b3;
  --du-text-warning: #ffad3a;
  --du-text-red: #ff444f;
  --du-text-green: #17eabd;
  --du-text-blue: #0796e0;
  --du-text-info-blue: #377cfc;
  --du-text-black: #000000;
  --du-text-orange: #ff9c13;
  --du-system-dark-2-general-text: #c2c2c2;
  --du-text-info-blue-background: #dfeaff;
  --du-text-colored-background: #ffffff;
  --du-icon-light-background: #5c5c5c;
  --du-icon-dark-background: #ffffff;
  --du-icon-gray-background: #f2f3f4;
  --du-icon-black-plus: #000000;
  --du-text-status-info-blue: #377cfc;
  --du-text-hint: #333333;
  --du-text-white: #ffffff;
  --du-text-black-transparent: rgba(0, 0, 0, .72);
  --du-purchase-main-1: #4bb4b3;
  --du-purchase-section-1: #3d9494;
  --du-purchase-main-2: #ec3f3f;
  --du-purchase-section-2: #d33636;
  --du-purchase-disabled-main: #eaeced;
  --du-purchase-disabled-section: #e6e9e9;
  --du-button-primary-default: var(--du-brand-red-coral);
  --du-button-secondary-default: #999999;
  --du-button-tertiary-default: transparent;
  --du-button-primary-light-default: rgba(255, 68, 79, .16);
  --du-button-primary-hover: #eb3e48;
  --du-button-secondary-hover: rgba(0, 0, 0, .08);
  --du-button-tertiary-hover: rgba(255, 68, 79, .08);
  --du-button-primary-light-hover: rgba(255, 68, 79, .24);
  --du-button-toggle-primary: #0796e0;
  --du-button-toggle-secondary: #d6dadb;
  --du-button-toggle-alternate: #ffffff;
  --du-overlay-outside-dialog: rgba(0, 0, 0, .72);
  --du-overlay-inside-dialog: rgba(255, 255, 255, .96);
  --du-shadow-menu: rgba(0, 0, 0, .16);
  --du-shadow-menu-2: rgba(0, 0, 0, .16);
  --du-shadow-drop: rgba(0, 0, 0, .08);
  --du-shadow-box: rgba(0, 0, 0, .4);
  --du-state-normal: #ffffff;
  --du-state-hover: #e6e9e9;
  --du-state-active: #d6dadb;
  --du-state-disabled: #eaeced;
  --du-checkbox-disabled-gray: #d6d6d6;
  --du-sidebar-tab: #d6d6d6;
  --du-border-normal: #d6dadb;
  --du-border-normal-1: #d6dadb;
  --du-border-normal-2: #d6dadb;
  --du-border-normal-3: #d6d6d6;
  --du-border-hover: #999999;
  --du-border-hover-1: #5c5c5c;
  --du-border-active: var(--du-brand-secondary);
  --du-border-disabled: #eaeced;
  --du-border-divider: #f2f3f4;
  --du-fill-normal: #ffffff;
  --du-fill-normal-1: #c2c2c2;
  --du-fill-hover: #999999;
  --du-fill-active: var(--du-brand-secondary);
  --du-fill-disabled: #eaeced;
  --du-status-default: #eaeced;
  --du-status-adjustment: #999999;
  --du-status-danger: #ec3f3f;
  --du-status-success: #4bb4b3;
  --du-status-warning: #ffad3a;
  --du-status-warning-transparent: rgba(255, 173, 58, .16);
  --du-status-transfer: #ff6444;
  --du-status-info: #377cfc;
  --du-status-colored-background: #ffffff;
  --du-status-alert-background: rgba(255, 173, 58, .16);
  --du-dashboard-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);
  --du-dashboard-app: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);
  --du-payment-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);
  --du-payment-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);
  --du-payment-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);
  --du-payment-credit-and-debit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);
  --du-payment-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);
  --du-payment-usd-coin: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);
  --du-payment-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);
  --du-payment-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);
  --du-payment-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);
  --du-payment-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);
  --du-payment-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);
  --du-payment-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);
  --du-payment-deriv: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);
  --du-transparent-success: rgba(75, 180, 179, .92);
  --du-transparent-success-secondary: rgba(0, 136, 50, .08);
  --du-transparent-blue-secondary: rgba(44, 154, 255, .08);
  --du-transparent-info: rgba(55, 124, 252, .16);
  --du-transparent-hint: rgba(55, 124, 252, .08);
  --du-transparent-danger: rgba(255, 68, 79, .16);
  --du-transparent-danger-secondary: rgba(230, 25, 14, .08);
  --du-transparent-correct-message: rgba(75, 180, 179, .1607843137);
  --du-transparent-fake-message: rgba(236, 63, 63, .1607843137);
  --du-transparent-warning-secondary: rgba(255, 156, 19, .08);
  --du-gradient-success: linear-gradient(to top, #ffffff, rgba(75, 180, 179, .16));
  --du-gradient-danger: linear-gradient(to top, #ffffff, rgba(255, 68, 79, .16));
  --du-contract-gradient-danger: linear-gradient(to top, #ffffff 85%, rgba(255, 68, 79, .16));
  --du-gradient-right-edge: linear-gradient(to right, rgba(255, 255, 255, 0) -5%, #ffffff 71%);
  --du-gradient-blue: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);
  --du-gradient-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);
  --du-gradient-green: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);
  --du-badge-white: #ffffff;
  --du-badge-blue: #0677af;
  --du-badge-blue-secondary: #0777c4;
  --du-badge-light-blue: #0677af;
  --du-badge-violet: #2a3052;
  --du-badge-success: #4bb4b3;
  --du-badge-success-secondary: #007a22;
  --du-badge-warning: #ffad3a;
  --du-badge-warning-secondary: #c47d00;
  --du-badge-danger: #ec3f3f;
  --du-badge-danger-secondary: #c40000;
  --du-badge-purple: #722fe4;
  --du-traders-hub-banner-border-color: #e6e9e9;
  --du-derivs-banner-ready-bg-color: #e2f3f3;
  --du-derivs-banner-ready-tick-bg-color: #4ab4b3;
  --du-derivs-banner-border-color: #e6e9e9;
  --du-derivs-banner-dot-color: #d6d6d6;
  --du-derivs-banner-active-dot-color: #ff444f;
  --du-derivs-card-active-gradient-background: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, .16) 100%);
  --du-deriv-demo-bg-color: #fff8f9;
  --du-deriv-demo-divider-color: #fff0f1;
  --du-deriv-eu-disclaimer: #e6e9e9;
  --du-deriv-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, .08), 0px 4px 6px -2px rgba(14, 14, 14, .03);
  --du-demo-text-color-1: #c2c2c2;
  --du-demo-text-color-2: #ffffff;
  --du-header-background-mt5: #e6f5ff;
  --du-header-background-others: #e8fdf8;
}

:host .theme--dark, :root .theme--dark {
  --du-general-main-1: #0e0e0e;
  --du-general-main-2: #151717;
  --du-general-main-3: #1d1f20;
  --du-general-main-4: rgba(14, 14, 14, .5);
  --du-general-section-1: #151717;
  --du-general-section-2: #0e0e0e;
  --du-general-section-3: #242828;
  --du-general-section-4: #242828;
  --du-general-section-5: #242828;
  --du-general-section-6: #6e6e6e;
  --du-general-disabled: #1d1f20;
  --du-general-hover: #242828;
  --du-general-hover-1: #ffffff;
  --du-general-active: #323738;
  --du-text-prominent: #ffffff;
  --du-text-general: #c2c2c2;
  --du-text-less-prominent: #6e6e6e;
  --du-text-primary: #999999;
  --du-text-disabled: #3e3e3e;
  --du-text-disabled-1: #3e3e3e;
  --du-text-profit-success: #00a79e;
  --du-text-loss-danger: #cc2e3d;
  --du-text-red: #ff444f;
  --du-text-colored-background: #ffffff;
  --du-text-info-blue: #92b8ff;
  --du-text-info-blue-background: #182130;
  --du-text-status-info-blue: #377cfc;
  --du-text-hint: #c2c2c2;
  --du-text-white: #ffffff;
  --du-icon-light-background: #5c5c5c;
  --du-icon-dark-background: #ffffff;
  --du-icon-gray-background: #333333;
  --du-icon-black-plus: #ffffff;
  --du-text-black-transparent: rgba(255, 255, 255, .28);
  --du-purchase-main-1: #00a79e;
  --du-purchase-section-1: #008079;
  --du-purchase-main-2: #cc2e3d;
  --du-purchase-section-2: #a32430;
  --du-purchase-disabled-main: #1d1f20;
  --du-purchase-disabled-section: #0e0e0e;
  --du-button-primary-default: var(--du-brand-red-coral);
  --du-button-secondary-default: #6e6e6e;
  --du-button-tertiary-default: transparent;
  --du-button-primary-light-default: rgba(255, 68, 79, .16);
  --du-button-primary-hover: #eb3e48;
  --du-button-secondary-hover: rgba(255, 255, 255, .08);
  --du-button-tertiary-hover: rgba(255, 68, 79, .08);
  --du-button-primary-light-hover: rgba(255, 68, 79, .24);
  --du-button-toggle-primary: #0796e0;
  --du-button-toggle-secondary: #323738;
  --du-button-toggle-alternate: #323738;
  --du-overlay-outside-dialog: rgba(0, 0, 0, .72);
  --du-overlay-inside-dialog: rgba(14, 14, 14, .96);
  --du-shadow-menu: rgba(0, 0, 0, .84);
  --du-shadow-menu-2: rgba(0, 0, 0, .72);
  --du-shadow-drop: rgba(0, 0, 0, .64);
  --du-shadow-box: #555975;
  --du-state-normal: #0e0e0e;
  --du-state-hover: #242828;
  --du-state-active: #323738;
  --du-state-disabled: #1d1f20;
  --du-checkbox-disabled-gray: #d6d6d6;
  --du-sidebar-tab: #6e6e6e;
  --du-border-normal: #323738;
  --du-border-normal-1: #d6dadb;
  --du-border-normal-2: #999999;
  --du-border-normal-3: #6e6e6e;
  --du-border-hover: #6e6e6e;
  --du-border-hover-1: #5c5c5c;
  --du-border-active: var(--du-brand-secondary);
  --du-border-disabled: #1d1f20;
  --du-border-divider: #2e2e2e;
  --du-fill-normal: #0e0e0e;
  --du-fill-normal-1: #333333;
  --du-fill-hover: #6e6e6e;
  --du-fill-active: var(--du-brand-secondary);
  --du-fill-disabled: #1d1f20;
  --du-status-default: #eaeced;
  --du-status-adjustment: #999999;
  --du-status-danger: #cc2e3d;
  --du-status-warning: #ffad3a;
  --du-status-warning-transparent: rgba(255, 173, 58, .16);
  --du-status-success: #00a79e;
  --du-status-transfer: #ff6444;
  --du-status-info: #377cfc;
  --du-status-colored-background: #ffffff;
  --du-status-alert-background: rgba(255, 173, 58, .16);
  --du-transparent-success: rgba(0, 167, 158, .92);
  --du-transparent-success-secondary: rgba(0, 136, 50, .08);
  --du-transparent-blue-secondary: rgba(44, 154, 255, .08);
  --du-transparent-info: rgba(55, 124, 252, .16);
  --du-transparent-hint: rgba(55, 124, 252, .16);
  --du-transparent-danger: rgba(255, 68, 79, .16);
  --du-transparent-danger-secondary: rgba(230, 25, 14, .08);
  --du-transparent-correct-message: rgba(75, 180, 179, .1607843137);
  --du-transparent-fake-message: rgba(236, 63, 63, .1607843137);
  --du-transparent-warning-secondary: rgba(255, 156, 19, .08);
  --du-gradient-success: linear-gradient(to top, #0e0e0e, rgba(0, 167, 158, .16));
  --du-gradient-danger: linear-gradient(to top, #0e0e0e, rgba(255, 68, 79, .16));
  --du-contract-gradient-danger: linear-gradient(to top, #0e0e0e 85%, rgba(255, 68, 79, .16));
  --du-gradient-right-edge: linear-gradient(to right, rgba(14, 14, 14, 0) -5%, #0e0e0e 71%);
  --du-gradient-blue: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);
  --du-gradient-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);
  --du-gradient-green: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);
  --du-badge-white: #ffffff;
  --du-badge-blue: #0677af;
  --du-badge-blue-secondary: #0777c4;
  --du-badge-light-blue: #00c6ef;
  --du-badge-violet: #2a3052;
  --du-badge-success: #00a79e;
  --du-badge-success-secondary: #007a22;
  --du-badge-warning: #ffad3a;
  --du-badge-warning-secondary: #c47d00;
  --du-badge-danger: #cc2e3d;
  --du-badge-danger-secondary: #c40000;
  --du-badge-purple: #8f4bff;
  --du-traders-hub-banner-border-color: #242828;
  --du-derivs-banner-ready-bg-color: #e2f3f3;
  --du-derivs-banner-ready-tick-bg-color: #4ab4b3;
  --du-derivs-banner-border-color: #e6e9e9;
  --du-derivs-banner-dot-color: #d6d6d6;
  --du-derivs-banner-active-dot-color: #ff444f;
  --du-derivs-card-active-gradient-background: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, .16) 100%);
  --du-deriv-demo-bg-color: #140506;
  --du-deriv-demo-divider-color: #323738;
  --du-deriv-eu-disclaimer: #e6e9e9;
  --du-deriv-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, .08), 0px 4px 6px -2px rgba(14, 14, 14, .03);
  --du-demo-text-color-1: #333333;
  --du-demo-text-color-2: #333333;
  --du-header-background-mt5: #e6f5ff;
  --du-header-background-others: #e8fdf8;
}

html {
  font-family: IBM Plex Sans, sans-serif;
}

.derivs-loader {
  display: flex;
  width: 7.2rem;
  height: 3.2rem;
  transition: all 0.4s ease;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
}

.derivs-loader--fullscreen {
  position: absolute;
  top: 50%;
}

[dir="ltr"] .derivs-loader--fullscreen {
  left: 50%;
  transform: translate(-50%, -50%);
}

[dir="rtl"] .derivs-loader--fullscreen {
  right: 50%;
  transform: translate(50%, -50%);
}

.derivs-loader__element {
  display: block;
  width: 0.8rem;
  height: 3.2rem;
  animation: loader 1.5s ease-in infinite both;
  border-radius: 1rem;
}

.derivs-loader__element:nth-child(1) {
  animation-delay: 0.1s;
}

.derivs-loader__element:nth-child(2) {
  animation-delay: 0.2s;
}

.derivs-loader__element:nth-child(3) {
  animation-delay: 0.3s;
}

.derivs-loader__element:nth-child(4) {
  animation-delay: 0.4s;
}

.derivs-loader__element:nth-child(5) {
  animation-delay: 0.5s;
}

@keyframes loader {
  0% {
    bottom: 0;
    height: 50%;
  }

  12.5% {
    bottom: 0;
    height: 75%;
  }

  25% {
    bottom: 75%;
    height: 100%;
  }

  37.5% {
    bottom: 0;
    height: 75%;
  }

  50% {
    bottom: 0;
    height: 50%;
  }

  to {
    bottom: 0;
    height: 50%;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.landscape-blocker {
  /* enable temporary landscape blocker UI in landscape */
  display: flex;
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  overflow: hidden;
  background: var(--general-main-1);
  align-items: center;
  justify-content: center;
  flex-direction: column;
  color: var(--text-prominent);
  font-size: 1.6rem;
  z-index: 9999;
  font-weight: bold;
  gap: 2.4rem;
}

.landscape-blocker__icon {
  width: 8rem;
  height: 6.2rem;
}

.landscape-blocker__message {
  padding: 1.6rem 11rem;
}

@media screen and (orientation: portrait) {
  .landscape-blocker__message--landscape {
    display: none;
  }
}

.landscape-blocker__message--portrait {
  text-align: center;
  line-height: var(--text-lh-m);
}

@media screen and (orientation: landscape) {
  .landscape-blocker__message--portrait {
    display: none;
  }
}

@media (min-width: 1280px) {
  .landscape-blocker {
    display: none;
  }
}

@media screen and (max-width: 600px) and (max-aspect-ratio: 13/9) {
  .landscape-blocker {
    display: none;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define toast-messages; */
.toast-messages {
  position: absolute;
  z-index: 1000;
  pointer-events: none;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

@media (min-width: 320px) and (max-width: 767px) {
  .toast-messages {
    top: 2rem;
    height: calc(100vh - 2rem);
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.theme-select-settings {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  width: 100%;
}

.theme-select-settings__title {
  margin-bottom: 16px;
  color: var(--text-prominent);
}

.theme-select-settings__content {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  width: 100%;
}

.theme-select-settings__option {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 234px;
  height: 207px;
}

.theme-select-settings__option__title {
  margin-top: 9px;
  font-size: 14px;
  line-height: 1.43;
  color: var(--text-general);
}

.theme-select-settings__option__title--selected {
  font-weight: bold;
  color: var(--text-prominent);
}

.theme-select-settings__option__icon {
  width: 234px;
  height: 178px;
  cursor: pointer;
  border-radius: 4px;
  border: 1px solid var(--border-normal);
}

.theme-select-settings__option__icon:hover:not(.theme-select-settings__option__icon--active) {
  border-color: var(--border-hover);
}

.theme-select-settings__option__icon--active {
  border-color: var(--border-active);
}

.theme-select-settings__option__icon--disabled {
  opacity: 0.16 !important;
  cursor: not-allowed !important;
}

/** @define settings-language */
.settings-language {
  width: -moz-fit-content;
  width: fit-content;
}

[dir="ltr"] .settings-language {
  margin-left: 1.6rem;
}

[dir="rtl"] .settings-language {
  margin-right: 1.6rem;
}

@media (max-width: 1279px) {
  .settings-language {
    display: flex;
    flex-direction: column;
    padding: 1.6rem 2.2rem 8rem;
    width: 100%;
  }

  [dir="ltr"] .settings-language {
    margin-left: 0;
  }

  [dir="rtl"] .settings-language {
    margin-right: 0;
  }
}

.settings-language__language-container {
  display: grid;
  grid-template-columns: repeat(4, min-content);
  grid-gap: 0.8rem;
  margin: 1.6rem 0;
}

@media (max-width: 1279px) {
  .settings-language__language-container {
    grid-template-columns: repeat(2, minmax(40%, 1fr));
    grid-template-rows: auto;
    grid-gap: initial;
    margin: 0 auto;
    padding: 0 0.8rem;
  }
}

@media (max-width: 1279px) and (max-width: 1279px) {
  .settings-language__language-container--disabled {
    opacity: 0.5;
    pointer-events: none;
  }
}

.settings-language__language-button_wrapper {
  display: flex;
  align-items: center;
}

.settings-language__language-link {
  color: var(--text-prominent);
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  border-radius: 4px;
  padding: 16px;
  width: 13.6rem;
  height: 8.8rem;
  text-decoration: none;
  background-color: var(--state-normal);
}

@media (max-width: 1279px) {
  .settings-language__language-link {
    padding: 8px;
  }

  .settings-language__language-link--pre-appstore {
    padding: 1.6rem;
  }
}

.settings-language__language-link * {
  cursor: pointer;
}

.settings-language__language-link--active {
  border: 1px solid var(--border-active);
  color: var(--text-prominent);
}

@media (max-width: 1279px) {
  .settings-language__language-link--active {
    order: -1;
  }
}

.settings-language__language-link--active * {
  cursor: not-allowed;
}

.settings-language__language-flag {
  width: 3.6rem;
  height: 2.8rem;
}

@media (max-width: 1279px) {
  .settings-language__language-flag {
    margin-top: 1rem;
  }
}

[dir="ltr"] .settings-language__language-name {
  text-align: left;
}

[dir="rtl"] .settings-language__language-name {
  text-align: right;
}

.settings-language__language-name {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  line-height: 1.5;
  color: var(--text-prominent);
  margin-top: 0.8rem;
}

.settings-language__language-name--active {
  font-weight: bold;
  color: var(--text-prominent);
}

@media (max-width: 1279px) {
  .settings-language__language-name {
    font-size: 1.4rem;
  }
}

.settings-language__language--radio-button {
  display: none;
}

.settings-language__language--center-label {
  text-align: center;
}

/** @define dc-modal-header; */
.dc-modal-header--modal-settings {
  background-color: var(--general-main-1);
}

.dc-modal-header__title--modal-settings {
  min-width: 28%;
  background-color: var(--general-section-1);
  max-width: 206px;
}

/** @define dc-modal; */
.dc-modal__container_modal-settings {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.dc-modal__container_modal-settings .dc-modal-header {
  border-bottom-width: 0;
}

.dc-modal__container_modal-settings .dc-vertical-tab__tab-meta-wrapper {
  width: 100%;
  max-width: 206px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
@media (min-width: 320px) and (max-width: 767px) {
  .open-real-account-dialog .dc-dialog__dialog {
    max-width: 32rem;
  }

  .open-real-account-dialog .dc-dialog__content {
    font-size: 1.2rem;
  }

  .open-real-account-dialog .dc-dialog__button {
    font-size: 1.2rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-modal-header--complete-user-profile-modal {
  border-bottom: 1px solid var(--border-divider);
}

.complete-user-profile-modal__form {
  display: flex;
  flex-direction: column;
  padding: 2.4rem;
  padding-bottom: 9.6rem;
}

.complete-user-profile-modal__dropdown-list {
  display: flex;
  align-items: center;
  gap: 0.8rem;
}

.complete-user-profile-modal__footer.dc-modal-footer {
  padding-left: 0;
  padding-right: 0;
}

.complete-user-profile-modal__heading {
  display: flex;
  align-items: center;
  gap: 0.8rem;
}

[dir="ltr"] .complete-user-profile-modal__heading:after {
  margin-left: 0.8rem;
}

[dir="rtl"] .complete-user-profile-modal__heading:after {
  margin-right: 0.8rem;
}

.complete-user-profile-modal__heading:after {
  content: "";
  flex: 1;
  height: 1px;
  background: var(--border-divider);
  display: block;
}

.complete-user-profile-modal__bottom-margin {
  margin-bottom: 2.4rem;
}

.complete-user-profile-modal__bottom-margin-field {
  margin-bottom: 4.2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .complete-user-profile-modal__submit-button.dc-form-submit-button {
    display: inline;
    display: initial;
  }
}

@media (min-width: 320px) and (max-width: 767px) {
  .complete-user-profile-modal__submit-button.dc-form-submit-button > .dc-btn {
    width: 100%;
  }
}

.dc-modal-footer.complete-user-profile-modal__footer {
  position: fixed;
  bottom: 0;
  background: var(--general-main-2);
  width: 100%;
  padding-left: 2.4rem;
  padding-right: 2.4rem;
  border-top: 1px solid var(--border-divider);
}

[dir="ltr"] .dc-modal-footer.complete-user-profile-modal__footer {
  right: 0;
}

[dir="rtl"] .dc-modal-footer.complete-user-profile-modal__footer {
  left: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
*:where(:not(html):not(iframe):not(canvas):not(img):not(svg):not(video):not(audio):not(symbol):not(svg *):not(symbol *)) {
  all: unset;
  display: revert;
}

*, *:before, *:after {
  box-sizing: border-box;
}

html {
  -moz-text-size-adjust: none;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
}

a, button {
  cursor: revert;
}

ol, ul, menu, summary {
  list-style: none;
}

img {
  max-width: 100%;
  max-height: 100%;
}

table {
  border-collapse: collapse;
}

input, textarea {
  -webkit-user-select: auto;
}

input::-webkit-outer-spin-button, input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input[type=number] {
  -moz-appearance: textfield;
}

textarea {
  white-space: revert;
}

meter {
  -webkit-appearance: revert;
  -moz-appearance: revert;
  appearance: revert;
}

:where(pre) {
  all: revert;
  box-sizing: border-box;
}

::-moz-placeholder {
  color: inherit;
}

::placeholder {
  color: inherit;
}

:where([hidden]) {
  display: none;
}

:where([contenteditable]:not([contenteditable=false])) {
  -moz-user-modify: read-write;
  -webkit-user-modify: read-write;
  word-wrap: break-word;
  -webkit-line-break: after-white-space;
  -webkit-user-select: auto;
}

:where([draggable=true]) {
  -webkit-user-drag: element;
}

:where(dialog:modal) {
  all: revert;
  box-sizing: border-box;
}

::-webkit-details-marker {
  display: none;
}

:host, :root {
  --du-text-size-3xs: 6px;
  --du-text-size-2xs: 8px;
  --du-text-size-xs: 10px;
  --du-text-size-sm: 12px;
  --du-text-size-default: 14px;
  --du-text-size-md: 16px;
  --du-text-size-lg: 28px;
  --du-text-size-xl: 30px;
  --du-text-size-2xl: 32px;
  --du-text-lh-2xs: 1;
  --du-text-lh-xs: 1.25;
  --du-text-lh-sm: 1.4;
  --du-text-lh-md: 1.5;
  --du-text-lh-lg: 1.75;
  --du-text-lh-xl: 2;
  --du-text-lh-2xl: 2.4;
  --du-text-weight-light: 300;
  --du-text-weight-normal: 400;
  --du-text-weight-semibold: 500;
  --du-text-weight-bold: 700;
  --du-text-align-left: start;
  --du-text-align-right: right;
  --du-text-align-center: center;
  --du-brand-white: #ffffff;
  --du-brand-dark-gray: #0e0e0e;
  --du-brand-red-coral: #ff444f;
  --du-brand-orange: #ff6444;
  --du-brand-secondary: #85acb0;
  --du-deriv-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);
  --du-deriv-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);
  --du-deriv-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);
  --du-deriv-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);
  --du-deriv-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);
  --du-deriv-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);
  --du-deriv-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);
  --du-deriv-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);
  --du-deriv-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);
  --du-deriv-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);
  --du-deriv-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);
  --du-deriv-perfectmoney: gradient-perfectmoney;
  --du-deriv-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);
  --du-deriv-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);
  --du-deriv-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);
  --du-deriv-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);
  --du-deriv-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);
  --du-app-card-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);
  --du-app-card-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);
}

:host .theme--light, :root .theme--light {
  --du-general-main-1: #ffffff;
  --du-general-main-2: #ffffff;
  --du-general-main-3: #999999;
  --du-general-main-4: rgba(255, 255, 255, .7);
  --du-general-section-1: #f2f3f4;
  --du-general-section-2: #f2f3f4;
  --du-general-section-3: #fafafa;
  --du-general-section-4: #f5f7fa;
  --du-general-section-5: #f2f3f4;
  --du-general-section-6: #f2f3f4;
  --du-general-disabled: #eaeced;
  --du-general-hover: #e6e9e9;
  --du-general-hover-1: #333333;
  --du-general-active: #d6dadb;
  --du-text-general: #333333;
  --du-text-primary: #999999;
  --du-text-less-prominent: #999999;
  --du-text-prominent: #333333;
  --du-text-disabled: #999999;
  --du-text-disabled-1: #d6d6d6;
  --du-text-loss-danger: #ec3f3f;
  --du-text-profit-success: #4bb4b3;
  --du-text-warning: #ffad3a;
  --du-text-red: #ff444f;
  --du-text-green: #17eabd;
  --du-text-blue: #0796e0;
  --du-text-info-blue: #377cfc;
  --du-text-black: #000000;
  --du-text-orange: #ff9c13;
  --du-system-dark-2-general-text: #c2c2c2;
  --du-text-info-blue-background: #dfeaff;
  --du-text-colored-background: #ffffff;
  --du-icon-light-background: #5c5c5c;
  --du-icon-dark-background: #ffffff;
  --du-icon-gray-background: #f2f3f4;
  --du-icon-black-plus: #000000;
  --du-text-status-info-blue: #377cfc;
  --du-text-hint: #333333;
  --du-text-white: #ffffff;
  --du-text-black-transparent: rgba(0, 0, 0, .72);
  --du-purchase-main-1: #4bb4b3;
  --du-purchase-section-1: #3d9494;
  --du-purchase-main-2: #ec3f3f;
  --du-purchase-section-2: #d33636;
  --du-purchase-disabled-main: #eaeced;
  --du-purchase-disabled-section: #e6e9e9;
  --du-button-primary-default: var(--du-brand-red-coral);
  --du-button-secondary-default: #999999;
  --du-button-tertiary-default: transparent;
  --du-button-primary-light-default: rgba(255, 68, 79, .16);
  --du-button-primary-hover: #eb3e48;
  --du-button-secondary-hover: rgba(0, 0, 0, .08);
  --du-button-tertiary-hover: rgba(255, 68, 79, .08);
  --du-button-primary-light-hover: rgba(255, 68, 79, .24);
  --du-button-toggle-primary: #0796e0;
  --du-button-toggle-secondary: #d6dadb;
  --du-button-toggle-alternate: #ffffff;
  --du-overlay-outside-dialog: rgba(0, 0, 0, .72);
  --du-overlay-inside-dialog: rgba(255, 255, 255, .96);
  --du-shadow-menu: rgba(0, 0, 0, .16);
  --du-shadow-menu-2: rgba(0, 0, 0, .16);
  --du-shadow-drop: rgba(0, 0, 0, .08);
  --du-shadow-box: rgba(0, 0, 0, .4);
  --du-state-normal: #ffffff;
  --du-state-hover: #e6e9e9;
  --du-state-active: #d6dadb;
  --du-state-disabled: #eaeced;
  --du-checkbox-disabled-gray: #d6d6d6;
  --du-sidebar-tab: #d6d6d6;
  --du-border-normal: #d6dadb;
  --du-border-normal-1: #d6dadb;
  --du-border-normal-2: #d6dadb;
  --du-border-normal-3: #d6d6d6;
  --du-border-hover: #999999;
  --du-border-hover-1: #5c5c5c;
  --du-border-active: var(--du-brand-secondary);
  --du-border-disabled: #eaeced;
  --du-border-divider: #f2f3f4;
  --du-fill-normal: #ffffff;
  --du-fill-normal-1: #c2c2c2;
  --du-fill-hover: #999999;
  --du-fill-active: var(--du-brand-secondary);
  --du-fill-disabled: #eaeced;
  --du-status-default: #eaeced;
  --du-status-adjustment: #999999;
  --du-status-danger: #ec3f3f;
  --du-status-success: #4bb4b3;
  --du-status-warning: #ffad3a;
  --du-status-warning-transparent: rgba(255, 173, 58, .16);
  --du-status-transfer: #ff6444;
  --du-status-info: #377cfc;
  --du-status-colored-background: #ffffff;
  --du-status-alert-background: rgba(255, 173, 58, .16);
  --du-dashboard-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);
  --du-dashboard-app: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);
  --du-payment-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);
  --du-payment-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);
  --du-payment-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);
  --du-payment-credit-and-debit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);
  --du-payment-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);
  --du-payment-usd-coin: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);
  --du-payment-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);
  --du-payment-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);
  --du-payment-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);
  --du-payment-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);
  --du-payment-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);
  --du-payment-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);
  --du-payment-deriv: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);
  --du-transparent-success: rgba(75, 180, 179, .92);
  --du-transparent-success-secondary: rgba(0, 136, 50, .08);
  --du-transparent-blue-secondary: rgba(44, 154, 255, .08);
  --du-transparent-info: rgba(55, 124, 252, .16);
  --du-transparent-hint: rgba(55, 124, 252, .08);
  --du-transparent-danger: rgba(255, 68, 79, .16);
  --du-transparent-danger-secondary: rgba(230, 25, 14, .08);
  --du-transparent-correct-message: rgba(75, 180, 179, .1607843137);
  --du-transparent-fake-message: rgba(236, 63, 63, .1607843137);
  --du-transparent-warning-secondary: rgba(255, 156, 19, .08);
  --du-gradient-success: linear-gradient(to top, #ffffff, rgba(75, 180, 179, .16));
  --du-gradient-danger: linear-gradient(to top, #ffffff, rgba(255, 68, 79, .16));
  --du-contract-gradient-danger: linear-gradient(to top, #ffffff 85%, rgba(255, 68, 79, .16));
  --du-gradient-right-edge: linear-gradient(to right, rgba(255, 255, 255, 0) -5%, #ffffff 71%);
  --du-gradient-blue: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);
  --du-gradient-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);
  --du-gradient-green: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);
  --du-badge-white: #ffffff;
  --du-badge-blue: #0677af;
  --du-badge-blue-secondary: #0777c4;
  --du-badge-light-blue: #0677af;
  --du-badge-violet: #2a3052;
  --du-badge-success: #4bb4b3;
  --du-badge-success-secondary: #007a22;
  --du-badge-warning: #ffad3a;
  --du-badge-warning-secondary: #c47d00;
  --du-badge-danger: #ec3f3f;
  --du-badge-danger-secondary: #c40000;
  --du-badge-purple: #722fe4;
  --du-traders-hub-banner-border-color: #e6e9e9;
  --du-derivs-banner-ready-bg-color: #e2f3f3;
  --du-derivs-banner-ready-tick-bg-color: #4ab4b3;
  --du-derivs-banner-border-color: #e6e9e9;
  --du-derivs-banner-dot-color: #d6d6d6;
  --du-derivs-banner-active-dot-color: #ff444f;
  --du-derivs-card-active-gradient-background: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, .16) 100%);
  --du-deriv-demo-bg-color: #fff8f9;
  --du-deriv-demo-divider-color: #fff0f1;
  --du-deriv-eu-disclaimer: #e6e9e9;
  --du-deriv-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, .08), 0px 4px 6px -2px rgba(14, 14, 14, .03);
  --du-demo-text-color-1: #c2c2c2;
  --du-demo-text-color-2: #ffffff;
  --du-header-background-mt5: #e6f5ff;
  --du-header-background-others: #e8fdf8;
}

:host .theme--dark, :root .theme--dark {
  --du-general-main-1: #0e0e0e;
  --du-general-main-2: #151717;
  --du-general-main-3: #1d1f20;
  --du-general-main-4: rgba(14, 14, 14, .5);
  --du-general-section-1: #151717;
  --du-general-section-2: #0e0e0e;
  --du-general-section-3: #242828;
  --du-general-section-4: #242828;
  --du-general-section-5: #242828;
  --du-general-section-6: #6e6e6e;
  --du-general-disabled: #1d1f20;
  --du-general-hover: #242828;
  --du-general-hover-1: #ffffff;
  --du-general-active: #323738;
  --du-text-prominent: #ffffff;
  --du-text-general: #c2c2c2;
  --du-text-less-prominent: #6e6e6e;
  --du-text-primary: #999999;
  --du-text-disabled: #3e3e3e;
  --du-text-disabled-1: #3e3e3e;
  --du-text-profit-success: #00a79e;
  --du-text-loss-danger: #cc2e3d;
  --du-text-red: #ff444f;
  --du-text-colored-background: #ffffff;
  --du-text-info-blue: #92b8ff;
  --du-text-info-blue-background: #182130;
  --du-text-status-info-blue: #377cfc;
  --du-text-hint: #c2c2c2;
  --du-text-white: #ffffff;
  --du-icon-light-background: #5c5c5c;
  --du-icon-dark-background: #ffffff;
  --du-icon-gray-background: #333333;
  --du-icon-black-plus: #ffffff;
  --du-text-black-transparent: rgba(255, 255, 255, .28);
  --du-purchase-main-1: #00a79e;
  --du-purchase-section-1: #008079;
  --du-purchase-main-2: #cc2e3d;
  --du-purchase-section-2: #a32430;
  --du-purchase-disabled-main: #1d1f20;
  --du-purchase-disabled-section: #0e0e0e;
  --du-button-primary-default: var(--du-brand-red-coral);
  --du-button-secondary-default: #6e6e6e;
  --du-button-tertiary-default: transparent;
  --du-button-primary-light-default: rgba(255, 68, 79, .16);
  --du-button-primary-hover: #eb3e48;
  --du-button-secondary-hover: rgba(255, 255, 255, .08);
  --du-button-tertiary-hover: rgba(255, 68, 79, .08);
  --du-button-primary-light-hover: rgba(255, 68, 79, .24);
  --du-button-toggle-primary: #0796e0;
  --du-button-toggle-secondary: #323738;
  --du-button-toggle-alternate: #323738;
  --du-overlay-outside-dialog: rgba(0, 0, 0, .72);
  --du-overlay-inside-dialog: rgba(14, 14, 14, .96);
  --du-shadow-menu: rgba(0, 0, 0, .84);
  --du-shadow-menu-2: rgba(0, 0, 0, .72);
  --du-shadow-drop: rgba(0, 0, 0, .64);
  --du-shadow-box: #555975;
  --du-state-normal: #0e0e0e;
  --du-state-hover: #242828;
  --du-state-active: #323738;
  --du-state-disabled: #1d1f20;
  --du-checkbox-disabled-gray: #d6d6d6;
  --du-sidebar-tab: #6e6e6e;
  --du-border-normal: #323738;
  --du-border-normal-1: #d6dadb;
  --du-border-normal-2: #999999;
  --du-border-normal-3: #6e6e6e;
  --du-border-hover: #6e6e6e;
  --du-border-hover-1: #5c5c5c;
  --du-border-active: var(--du-brand-secondary);
  --du-border-disabled: #1d1f20;
  --du-border-divider: #2e2e2e;
  --du-fill-normal: #0e0e0e;
  --du-fill-normal-1: #333333;
  --du-fill-hover: #6e6e6e;
  --du-fill-active: var(--du-brand-secondary);
  --du-fill-disabled: #1d1f20;
  --du-status-default: #eaeced;
  --du-status-adjustment: #999999;
  --du-status-danger: #cc2e3d;
  --du-status-warning: #ffad3a;
  --du-status-warning-transparent: rgba(255, 173, 58, .16);
  --du-status-success: #00a79e;
  --du-status-transfer: #ff6444;
  --du-status-info: #377cfc;
  --du-status-colored-background: #ffffff;
  --du-status-alert-background: rgba(255, 173, 58, .16);
  --du-transparent-success: rgba(0, 167, 158, .92);
  --du-transparent-success-secondary: rgba(0, 136, 50, .08);
  --du-transparent-blue-secondary: rgba(44, 154, 255, .08);
  --du-transparent-info: rgba(55, 124, 252, .16);
  --du-transparent-hint: rgba(55, 124, 252, .16);
  --du-transparent-danger: rgba(255, 68, 79, .16);
  --du-transparent-danger-secondary: rgba(230, 25, 14, .08);
  --du-transparent-correct-message: rgba(75, 180, 179, .1607843137);
  --du-transparent-fake-message: rgba(236, 63, 63, .1607843137);
  --du-transparent-warning-secondary: rgba(255, 156, 19, .08);
  --du-gradient-success: linear-gradient(to top, #0e0e0e, rgba(0, 167, 158, .16));
  --du-gradient-danger: linear-gradient(to top, #0e0e0e, rgba(255, 68, 79, .16));
  --du-contract-gradient-danger: linear-gradient(to top, #0e0e0e 85%, rgba(255, 68, 79, .16));
  --du-gradient-right-edge: linear-gradient(to right, rgba(14, 14, 14, 0) -5%, #0e0e0e 71%);
  --du-gradient-blue: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);
  --du-gradient-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);
  --du-gradient-green: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);
  --du-badge-white: #ffffff;
  --du-badge-blue: #0677af;
  --du-badge-blue-secondary: #0777c4;
  --du-badge-light-blue: #00c6ef;
  --du-badge-violet: #2a3052;
  --du-badge-success: #00a79e;
  --du-badge-success-secondary: #007a22;
  --du-badge-warning: #ffad3a;
  --du-badge-warning-secondary: #c47d00;
  --du-badge-danger: #cc2e3d;
  --du-badge-danger-secondary: #c40000;
  --du-badge-purple: #8f4bff;
  --du-traders-hub-banner-border-color: #242828;
  --du-derivs-banner-ready-bg-color: #e2f3f3;
  --du-derivs-banner-ready-tick-bg-color: #4ab4b3;
  --du-derivs-banner-border-color: #e6e9e9;
  --du-derivs-banner-dot-color: #d6d6d6;
  --du-derivs-banner-active-dot-color: #ff444f;
  --du-derivs-card-active-gradient-background: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, .16) 100%);
  --du-deriv-demo-bg-color: #140506;
  --du-deriv-demo-divider-color: #323738;
  --du-deriv-eu-disclaimer: #e6e9e9;
  --du-deriv-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, .08), 0px 4px 6px -2px rgba(14, 14, 14, .03);
  --du-demo-text-color-1: #333333;
  --du-demo-text-color-2: #333333;
  --du-header-background-mt5: #e6f5ff;
  --du-header-background-others: #e8fdf8;
}

html {
  font-family: IBM Plex Sans, sans-serif;
}

.deriv-inline-message {
  width: 100%;
  position: relative;
  display: inline-flex;
  align-items: center;
  gap: 8px;
  border-radius: 4px;
  padding: 8px;
}

.deriv-inline-message__icon {
  width: 16px;
  height: 16px;
}

.deriv-inline-message__icon--top {
  align-self: flex-start;
}

.deriv-inline-message__icon--center {
  align-self: center;
}

.deriv-inline-message__icon--bottom {
  align-self: flex-end;
}

.deriv-inline-message__info--filled {
  border: none;
  background-color: rgba(55, 124, 252, 0.1607843137);
}

.deriv-inline-message__info--outlined {
  border: 1px solid #377cfc;
  background-color: transparent;
}

.deriv-inline-message__success--filled {
  border: none;
  background-color: rgba(75, 180, 179, 0.1607843137);
}

.deriv-inline-message__success--outlined {
  border: 1px solid #4bb4b3;
  background-color: transparent;
}

.deriv-inline-message__warning--filled {
  border: none;
  background-color: rgba(255, 173, 58, 0.1607843137);
}

.deriv-inline-message__warning--outlined {
  border: 1px solid #ffad3a;
  background-color: transparent;
}

.deriv-inline-message__error--filled {
  border: none;
  background-color: rgba(236, 63, 63, 0.1607843137);
}

.deriv-inline-message__error--outlined {
  border: 1px solid #ec3f3f;
  background-color: transparent;
}

.deriv-inline-message__general {
  background-color: #f2f3f4;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.crypto-transaction-processing-modal__content {
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 2.4rem;
  padding: 2.4rem;
}

@media (max-width: 1279px) {
  .crypto-transaction-processing-modal__content {
    position: absolute;
    top: 50vh;
    transform: translateY(-50%);
    padding: 1.6rem;
  }
}

.crypto-transaction-processing-modal__content-description {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.crypto-transaction-processing-modal__circle {
  position: relative;
  width: 6.4rem;
  height: 6.4rem;
  background: #ffad3a;
  border-radius: 3.2rem;
}

.crypto-transaction-processing-modal__dot {
  position: absolute;
  width: 1rem;
  height: 1rem;
  background: var(--general-main-1);
  border-radius: 0.5rem;
  top: 2.7rem;
}

[dir="ltr"] .crypto-transaction-processing-modal__dot-0 {
  left: 1.2rem;
}

[dir="rtl"] .crypto-transaction-processing-modal__dot-0 {
  right: 1.2rem;
}

[dir="ltr"] .crypto-transaction-processing-modal__dot-1 {
  left: 2.7rem;
}

[dir="rtl"] .crypto-transaction-processing-modal__dot-1 {
  right: 2.7rem;
}

[dir="ltr"] .crypto-transaction-processing-modal__dot-2 {
  left: 4.2rem;
}

[dir="rtl"] .crypto-transaction-processing-modal__dot-2 {
  right: 4.2rem;
}

.dc-mobile-dialog__crypto-transaction-processing-modal {
  display: flex;
  justify-content: center;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.need-real-account-for-cashier-dialog .dc-dialog__header-wrapper {
  margin: 0 0 2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .need-real-account-for-cashier-dialog .dc-dialog__content, .need-real-account-for-cashier-dialog .dc-dialog__button {
    font-size: 1.2rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
@media (min-width: 320px) and (max-width: 767px) {
  .ready-to-deposit-dialog .dc-dialog__content, .ready-to-deposit-dialog .dc-dialog__button {
    font-size: 1.2rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.ready-to-verify-dialog .dc-dialog__header-wrapper, .ready-to-verify-dialog .dc-dialog__content, .ready-to-verify-dialog .dc-dialog__footer {
  display: flex;
  justify-content: center;
  text-align: center;
}

@media (min-width: 320px) and (max-width: 767px) {
  .ready-to-verify-dialog .dc-dialog__dialog {
    padding: 1.6rem;
    margin: 0 1.6rem;
  }
}

.ready-to-verify-dialog .dc-dialog__header-wrapper {
  margin-top: 0;
  margin-top: initial;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.wallets-upgrade-completed-modal {
  width: calc(100vw - 2rem);
  max-width: 120rem;
  height: 79.1rem;
  padding-top: 8rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2.4rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallets-upgrade-completed-modal {
    padding-top: 2.4rem;
    width: 100%;
    height: 100%;
  }
}

.wallets-upgrade-completed-modal__text-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.8rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallets-upgrade-completed-modal__button {
    width: 100%;
  }
}

.wallets-upgrade-completed-modal__pic {
  width: 100%;
  height: 27.2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallets-upgrade-completed-modal__pic {
    height: 17rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.wallets-upgrade-logout-modal__content {
  width: 36.3rem;
  display: flex;
  flex-direction: column;
  gap: 0.8rem;
}

@media (max-width: 1279px) {
  .wallets-upgrade-logout-modal__content {
    width: 100%;
    align-items: center;
  }
}

.wallets-upgrade-logout-modal .dc-dialog__dialog {
  width: 100%;
  max-width: 60rem;
  overflow: hidden;
  background-color: var(--general-section-1);
}

@media (max-width: 1279px) {
  .wallets-upgrade-logout-modal .dc-dialog__dialog {
    width: 32.8rem;
    padding: 1.6rem;
  }
}

.wallets-upgrade-logout-modal .dc-dialog__content {
  margin-bottom: 1.6rem;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}

@media (max-width: 1279px) {
  .wallets-upgrade-logout-modal .dc-dialog__content {
    align-items: center;
  }
}

.wallets-upgrade-logout-modal .dc-dialog__footer {
  display: flex;
  justify-content: flex-start;
}

@media (max-width: 1279px) {
  .wallets-upgrade-logout-modal .dc-dialog__footer {
    justify-content: center;
  }
}

[dir="ltr"] .wallets-upgrade-logout-modal .dc-dialog__button {
  margin-left: 0;
}

[dir="rtl"] .wallets-upgrade-logout-modal .dc-dialog__button {
  margin-right: 0;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallets-upgrade-logout-modal .dc-dialog__button {
    height: 3rem;
  }
}

@media (max-width: 1279px) {
  .wallets-upgrade-logout-modal .dc-btn__text {
    font-size: var(--text-size-xxs);
  }
}

[dir=rtl] .wallets-upgrade-logout-modal__pic {
  transform: scaleX(-1);
}

@media (min-width: 1024px) {
  [dir="ltr"] .wallets-upgrade-logout-modal__pic {
    right: -3rem;
  }
  [dir="rtl"] .wallets-upgrade-logout-modal__pic {
    left: -3rem;
  }
  .wallets-upgrade-logout-modal__pic {
    position: absolute;
    height: 12.8rem;
    width: 23.5rem;
    bottom: 1rem;
  }
}

@media (max-width: 1279px) {
  .wallets-upgrade-logout-modal__pic {
    position: relative;
    width: 100%;
    height: 8.2rem;
    margin-bottom: 1.6rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.devtools__toggle-button {
  background: #ff444f;
  border: 0px;
  padding: 0px;
  position: fixed;
  z-index: 99999;
  font-size: 1.5em;
  margin: 0.5em;
  cursor: pointer;
  bottom: 0px;
  width: 40px;
  height: 40px;
  border-radius: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
  color: #fff;
  padding-bottom: 2px;
  font-weight: bold;
  transition: all 0.2s;
}

[dir="ltr"] .devtools__toggle-button {
  right: 0px;
}

[dir="rtl"] .devtools__toggle-button {
  left: 0px;
}

.devtools__toggle-button:hover {
  scale: 1.1;
}

.devtools__panel {
  font-size: max(12px, min(1.5vw, 14px));
  font-family: sans-serif;
  display: flex;
  background-color: rgb(11, 21, 33);
  color: #fff;
  height: 290px;
  position: fixed;
  bottom: 0px;
  border-top: 1px solid rgb(63, 78, 96);
  transform-origin: center top;
  box-shadow: rgba(0, 0, 0, 0.3) 0px 0px 20px;
  z-index: 100000;
  transition: all 0.2s ease 0s;
  width: 100%;
  max-height: 90%;
}

[dir="ltr"] .devtools__panel {
  direction: ltr;
  left: 0px;
}

[dir="rtl"] .devtools__panel {
  direction: rtl;
  right: 0px;
}

.devtools__panel--open {
  visibility: visible;
  opacity: 1;
  pointer-events: all;
  transform: translateY(0px) scale(1);
}

.devtools__panel--close {
  visibility: hidden;
  opacity: 0;
  pointer-events: none;
  transform: translateY(15px) scale(1.02);
}

.devtools__panel-left {
  flex: 1 1 500px;
  min-height: 40%;
  max-height: 100%;
  overflow: auto;
  display: flex;
  flex-direction: column;
}

[dir="ltr"] .devtools__panel-left {
  border-right: 1px solid rgb(34, 46, 62);
}

[dir="rtl"] .devtools__panel-left {
  border-left: 1px solid rgb(34, 46, 62);
}

.devtools__panel-right {
  flex: 1 1 500px;
  display: flex;
  flex-direction: column;
  overflow: auto;
  height: 100%;
}

.devtools__close-button {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  font-size: 0.9em;
  font-weight: bold;
  background: rgb(63, 78, 96);
  border: 0px;
  border-radius: 0.3em;
  color: #fff;
  padding: 0.5em;
  cursor: pointer;
  position: absolute;
  z-index: 99999;
  margin: 0.5em;
  bottom: 0px;
}

[dir="ltr"] .devtools__close-button {
  right: 0px;
}

[dir="rtl"] .devtools__close-button {
  left: 0px;
}

.devtools__panel-title {
  padding: 0.5em;
  background: rgb(19, 35, 55);
  position: sticky;
  top: 0px;
  z-index: 1;
}

.devtools__checkbox-container {
  display: flex;
  flex-wrap: wrap;
}

.devtools__checkbox {
  margin: 10px 5px;
}

.devtools__checkbox-label {
  color: #fff;
}

.devtools__endpoint-container {
  margin: 10px;
  gap: 15px;
  display: flex;
  flex-direction: column;
}

.devtools__endpoint-container a {
  color: #ff444f;
}

.devtools__endpoint-container .dc-input__field {
  color: #fff;
}

.devtools__endpoint-container .dc-input__label {
  background: rgb(11, 21, 33);
}

.devtools__endpoint-container .dc-input__field ~ label {
  color: #fff !important;
}

.devtools__endpoint-actions {
  display: flex;
  gap: 15px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
.side-menu__icon, .account-settings-toggle svg, .footer__icon, .footer__link:hover .footer__icon, .advanced-simple-toggle__icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.side-menu__icon .color1-fill, .account-settings-toggle svg .color1-fill, .footer__icon .color1-fill, .footer__link:hover .footer__icon .color1-fill, .advanced-simple-toggle__icon .color1-fill {
  fill: var(--text-general);
}

.side-menu__icon .color1-stroke, .account-settings-toggle svg .color1-stroke, .footer__icon .color1-stroke, .footer__link:hover .footer__icon .color1-stroke, .advanced-simple-toggle__icon .color1-stroke {
  stroke: var(--text-general);
}

.side-menu__icon .color2-fill, .account-settings-toggle svg .color2-fill, .footer__icon .color2-fill, .footer__link:hover .footer__icon .color2-fill, .advanced-simple-toggle__icon .color2-fill {
  fill: none;
}

.side-menu__icon .color2-stroke, .account-settings-toggle svg .color2-stroke, .footer__icon .color2-stroke, .footer__link:hover .footer__icon .color2-stroke, .advanced-simple-toggle__icon .color2-stroke {
  stroke: none;
}
.active.side-menu__icon, .account-settings-toggle svg.active, .active.footer__icon, .footer__link:hover .active.footer__icon, .active.advanced-simple-toggle__icon, .account-settings-toggle:hover svg, .ic-settings--active .ic-settings__icon, .header__menu-link--active .header__icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.active.side-menu__icon .color1-fill, .account-settings-toggle svg.active .color1-fill, .active.footer__icon .color1-fill, .active.advanced-simple-toggle__icon .color1-fill, .account-settings-toggle:hover svg .color1-fill, .ic-settings--active .ic-settings__icon .color1-fill, .header__menu-link--active .header__icon .color1-fill {
  fill: var(--text-prominent);
}

.active.side-menu__icon .color1-stroke, .account-settings-toggle svg.active .color1-stroke, .active.footer__icon .color1-stroke, .active.advanced-simple-toggle__icon .color1-stroke, .account-settings-toggle:hover svg .color1-stroke, .ic-settings--active .ic-settings__icon .color1-stroke, .header__menu-link--active .header__icon .color1-stroke {
  stroke: var(--text-prominent);
}

.active.side-menu__icon .color2-fill, .account-settings-toggle svg.active .color2-fill, .active.footer__icon .color2-fill, .active.advanced-simple-toggle__icon .color2-fill, .account-settings-toggle:hover svg .color2-fill, .ic-settings--active .ic-settings__icon .color2-fill, .header__menu-link--active .header__icon .color2-fill {
  fill: none;
}

.active.side-menu__icon .color2-stroke, .account-settings-toggle svg.active .color2-stroke, .active.footer__icon .color2-stroke, .active.advanced-simple-toggle__icon .color2-stroke, .account-settings-toggle:hover svg .color2-stroke, .ic-settings--active .ic-settings__icon .color2-stroke, .header__menu-link--active .header__icon .color2-stroke {
  stroke: none;
}
.disabled.side-menu__icon, .account-settings-toggle svg.disabled, .disabled.footer__icon, .footer__link:hover .disabled.footer__icon, .disabled.advanced-simple-toggle__icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.disabled.side-menu__icon .color1-fill, .account-settings-toggle svg.disabled .color1-fill, .disabled.footer__icon .color1-fill, .disabled.advanced-simple-toggle__icon .color1-fill {
  fill: var(--text-disabled);
}

.disabled.side-menu__icon .color1-stroke, .account-settings-toggle svg.disabled .color1-stroke, .disabled.footer__icon .color1-stroke, .disabled.advanced-simple-toggle__icon .color1-stroke {
  stroke: var(--text-disabled);
}

.disabled.side-menu__icon .color2-fill, .account-settings-toggle svg.disabled .color2-fill, .disabled.footer__icon .color2-fill, .disabled.advanced-simple-toggle__icon .color2-fill {
  fill: none;
}

.disabled.side-menu__icon .color2-stroke, .account-settings-toggle svg.disabled .color2-stroke, .disabled.footer__icon .color2-stroke, .disabled.advanced-simple-toggle__icon .color2-stroke {
  stroke: none;
}
.white.side-menu__icon, .account-settings-toggle svg.white, .white.footer__icon, .footer__link:hover .white.footer__icon, .white.advanced-simple-toggle__icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.white.side-menu__icon .color1-fill, .account-settings-toggle svg.white .color1-fill, .white.footer__icon .color1-fill, .white.advanced-simple-toggle__icon .color1-fill {
  fill: var(--text-prominent);
}

.white.side-menu__icon .color1-stroke, .account-settings-toggle svg.white .color1-stroke, .white.footer__icon .color1-stroke, .white.advanced-simple-toggle__icon .color1-stroke {
  stroke: var(--text-prominent);
}
.border_hover_color.side-menu__icon, .account-settings-toggle svg.border_hover_color, .border_hover_color.footer__icon, .footer__link:hover .border_hover_color.footer__icon, .border_hover_color.advanced-simple-toggle__icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.border_hover_color.side-menu__icon .color1-fill, .account-settings-toggle svg.border_hover_color .color1-fill, .border_hover_color.footer__icon .color1-fill, .border_hover_color.advanced-simple-toggle__icon .color1-fill {
  fill: var(--text-prominent);
}

.border_hover_color.side-menu__icon .color1-stroke, .account-settings-toggle svg.border_hover_color .color1-stroke, .border_hover_color.footer__icon .color1-stroke, .border_hover_color.advanced-simple-toggle__icon .color1-stroke {
  stroke: var(--text-prominent);
}
.secondary.side-menu__icon, .account-settings-toggle svg.secondary, .secondary.footer__icon, .footer__link:hover .secondary.footer__icon, .secondary.advanced-simple-toggle__icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.secondary.side-menu__icon .color1-fill, .account-settings-toggle svg.secondary .color1-fill, .secondary.footer__icon .color1-fill, .secondary.advanced-simple-toggle__icon .color1-fill {
  fill: var(--text-less-prominent);
}

.secondary.side-menu__icon .color1-stroke, .account-settings-toggle svg.secondary .color1-stroke, .secondary.footer__icon .color1-stroke, .secondary.advanced-simple-toggle__icon .color1-stroke {
  stroke: var(--text-less-prominent);
}

/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/* postcss-bem-linter: ignore */
html {
  font-size: 62.5%;
  /** TODO: define breakpoints */
}

/** @define body */
.body {
  position: relative;
  min-height: 100%;
  margin: 0;
  padding: 0;
  overflow-x: hidden;
}

/* postcss-bem-linter: ignore */
*,
html,
.body {
  font-family: "IBM Plex Sans", sans-serif;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  box-sizing: border-box;
}

@media (min-width: 320px) and (max-width: 767px) {
  *,
  html,
  .body {
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  }
}

/** @define select */
.select {
  font-family: inherit;
  font-size: inherit;
  font-style: inherit;
  padding: 2px 3px;
  border: 1px solid var(--border-normal);
  border-radius: 4px;
}

/** @define input */
.input {
  font-family: inherit;
  font-style: inherit;
  padding: 2px 3px;
  color: var(--text-general);
}

::-webkit-input-placeholder {
  /* Chrome/Opera/Safari */
  color: var(--text-general);
}

::-moz-placeholder {
  /* Firefox 19+ */
  color: var(--text-general);
}

:-ms-input-placeholder {
  /* IE 10+ */
  color: var(--text-general);
}

:-moz-placeholder {
  /* Firefox 18- */
  color: var(--text-general);
}

/** @define theme */
.theme--light {
  background: #ffffff;
}

.theme--dark {
  background: #0e0e0e;
}

/** @define container */
.container {
  width: 100%;
  max-width: 1440px;
  margin: 0 auto;
  box-sizing: border-box;
}

/** @define hidden */
.hidden {
  visibility: hidden !important;
  transition: none !important;
}

/** @define absolute-center-v */
.absolute-center-v {
  position: absolute;
  margin: auto;
  top: 0;
  bottom: 0;
}

/** @define link */
.link {
  color: var(--brand-red-coral);
  font-weight: bold;
  text-decoration: none;
}

.link:hover {
  text-decoration: underline;
  cursor: pointer;
}

.link--white {
  color: #ffffff;
}

[dir="ltr"] .link--right {
  float: right;
}

[dir="rtl"] .link--right {
  float: left;
}

.link--prominent {
  color: var(--text-prominent);
}

.link--no-underline:hover {
  text-decoration: none;
}

.link--no-bold {
  color: var(--text-red);
  text-decoration: none;
}

.link.dark {
  color: var(--brand-red-grey);
}

/** @define icon */
.icon--centered {
  top: 0.8em;
}

[dir="ltr"] .icon--centered {
  left: 5%;
}

[dir="rtl"] .icon--centered {
  right: 5%;
}

/** @define center-text */
.center-text {
  text-align: center;
}

/** @define no-margin */
.no-margin {
  margin: 0;
}

/** @define hr */
.hr {
  border-top: var(--general-section-1);
  display: block;
  height: 1px;
  border: 0;
  margin: 0.5em 0;
  padding: 0;
}

/** @define deriv-app */
.deriv-app {
  height: 100%;
  overflow: hidden;
}

/*------------------------------------*
 *  # Reset SCSS
 *  - to make browsers render all elements more consistently
 *  - Reference:  https://github.com/AdamMarsden/simple-typography/blob/master/_reset.scss
 *------------------------------------*/
/* stylelint-disable */
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
input,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

html {
  height: 100%;
  font-size: 10px;
}

body {
  line-height: 1;
  height: 100%;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

strong {
  font-weight: bold;
}

/* stylelint-enable */
:host,
:root {
  --text-size-xxxxs: 0.8rem;
  --text-size-xxxs: 1rem;
  --text-size-xxs: 1.2rem;
  --text-size-xs: 1.4rem;
  --text-size-s: 1.6rem;
  --text-size-xsm: 1.8rem;
  --text-size-sm: 2rem;
  --text-size-m: 2.4rem;
  --text-size-xm: 2.8rem;
  --text-size-l: 3.2rem;
  --text-size-xl: 4.8rem;
  --text-size-xxl: 6.4rem;
  --text-lh-xxs: 1;
  --text-lh-xs: 1.25;
  --text-lh-s: 1.4;
  --text-lh-m: 1.5;
  --text-lh-l: 1.75;
  --text-lh-xl: 2;
  --text-lh-xxl: 2.4;
  --text-weight-lighter: lighter;
  --text-weight-normal: normal;
  --text-weight-bold: bold;
  --text-weight-bolder: bolder;
  --text-align-left: start;
  --text-align-right: right;
  --text-align-center: center;
  --text-align-end: end;
  --brand-white: #ffffff;
  --brand-dark-grey: #0e0e0e;
  --brand-red-coral: #ff444f;
  --brand-orange: #ff6444;
  --brand-secondary: #85acb0;
  --wallet-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);
  --wallet-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);
  --wallet-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);
  --wallet-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);
  --wallet-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);
  --wallet-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);
  --wallet-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);
  --wallet-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);
  --wallet-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);
  --wallet-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);
  --wallet-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);
  --wallet-perfectmoney: gradient-perfectmoney;
  --wallet-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);
  --wallet-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);
  --wallet-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);
  --wallet-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);
  --wallet-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);
  --app-card-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);
  --app-card-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);
}

:host .theme--light,
:root .theme--light {
  --general-main-1: #ffffff;
  --general-main-2: #ffffff;
  --general-main-3: #999999;
  --general-main-4: rgba(255, 255, 255, 0.7);
  --general-main-5: #ffffff;
  --general-section-1: #f2f3f4;
  --general-section-2: #f2f3f4;
  --general-section-3: #fafafa;
  --general-section-4: #f5f7fa;
  --general-section-5: #f2f3f4;
  --general-section-6: #f2f3f4;
  --general-disabled: #eaeced;
  --general-hover: #e6e9e9;
  --general-active: #d6dadb;
  --text-general: #333333;
  --text-primary: #999999;
  --text-less-prominent: #999999;
  --text-prominent: #333333;
  --text-disabled: #999999;
  --text-disabled-1: #d6d6d6;
  --text-loss-danger: #ec3f3f;
  --text-profit-success: #4bb4b3;
  --text-warning: #ffad3a;
  --text-red: #ff444f;
  --text-green: #17eabd;
  --text-blue: #0796e0;
  --text-info-blue: #377cfc;
  --text-info-blue-background: #dfeaff;
  --text-colored-background: #ffffff;
  --icon-light-background: #5c5c5c;
  --icon-dark-background: #ffffff;
  --icon-grey-background: #f2f3f4;
  --icon-black-plus: #000000;
  --text-status-info-blue: #377cfc;
  --text-hint: #333333;
  --text-orange: #ff9c13;
  --purchase-main-1: #4bb4b3;
  --purchase-section-1: #3d9494;
  --purchase-main-2: #ec3f3f;
  --purchase-section-2: #d33636;
  --purchase-disabled-main: #eaeced;
  --purchase-disabled-section: #e6e9e9;
  --button-primary-default: var(--brand-red-coral);
  --button-secondary-default: #999999;
  --button-tertiary-default: transparent;
  --button-primary-light-default: rgba(255, 68, 79, 0.16);
  --button-primary-hover: #eb3e48;
  --button-secondary-hover: rgba(0, 0, 0, 0.08);
  --button-tertiary-hover: rgba(255, 68, 79, 0.08);
  --button-primary-light-hover: rgba(255, 68, 79, 0.24);
  --button-toggle-primary: #0796e0;
  --button-toggle-secondary: #d6dadb;
  --button-toggle-alternate: #ffffff;
  --button-get-started-bg: #000000;
  --overlay-outside-dialog: rgba(0, 0, 0, 0.72);
  --overlay-inside-dialog: rgba(255, 255, 255, 0.96);
  --shadow-menu: rgba(0, 0, 0, 0.16);
  --shadow-menu-2: rgba(0, 0, 0, 0.16);
  --shadow-drop: rgba(0, 0, 0, 0.08);
  --shadow-box: rgba(0, 0, 0, 0.4);
  --state-normal: #ffffff;
  --state-hover: #e6e9e9;
  --state-active: #d6dadb;
  --state-disabled: #eaeced;
  --checkbox-disabled-grey: #d6d6d6;
  --sidebar-tab: #d6d6d6;
  --border-normal: #d6dadb;
  --border-normal-1: #d6dadb;
  --border-normal-2: #d6dadb;
  --border-normal-3: #d6d6d6;
  --border-hover: #999999;
  --border-hover-1: #5c5c5c;
  --border-active: var(--brand-secondary);
  --border-disabled: #eaeced;
  --border-divider: #f2f3f4;
  --fill-normal: #ffffff;
  --fill-normal-1: #c2c2c2;
  --fill-hover: #999999;
  --fill-active: var(--brand-secondary);
  --fill-disabled: #eaeced;
  --status-default: #eaeced;
  --status-adjustment: #999999;
  --status-danger: #ec3f3f;
  --status-danger-transparent: rgba(255, 68, 79, 0.16);
  --status-success: #4bb4b3;
  --status-success-transparent: rgba(0, 167, 158, 0.16);
  --status-warning: #ffad3a;
  --status-warning-dark: #b3760d;
  --status-info-transparent: rgba(55, 124, 252, 0.16);
  --status-warning-transparent: rgba(255, 173, 58, 0.16);
  --status-transfer: #ff6444;
  --status-info: #377cfc;
  --status-colored-background: #ffffff;
  --status-alert-background: rgba(255, 173, 58, 0.16);
  --dashboard-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);
  --dashboard-app: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);
  --payment-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);
  --payment-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);
  --payment-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);
  --payment-credit-and-debit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);
  --payment-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);
  --payment-usd-coin: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);
  --payment-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);
  --payment-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);
  --payment-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);
  --payment-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);
  --payment-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);
  --payment-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);
  --payment-deriv: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);
  --transparent-success: rgba(75, 180, 179, 0.92);
  --transparent-info: rgba(55, 124, 252, 0.16);
  --transparent-hint: rgba(55, 124, 252, 0.08);
  --transparent-danger: rgba(255, 68, 79, 0.16);
  --transparent-correct-message: rgba(75, 180, 179, 0.1607843137);
  --transparent-fake-message: rgba(236, 63, 63, 0.1607843137);
  /* TODO: change to styleguide later */
  --gradient-success: linear-gradient(to top, #ffffff, rgba(75, 180, 179, 0.16));
  --gradient-danger: linear-gradient(to top, #ffffff, rgba(255, 68, 79, 0.16));
  --contract-gradient-danger: linear-gradient(to top, #ffffff 85%, rgba(255, 68, 79, 0.16));
  --gradient-right-edge: linear-gradient(to right, rgba(255, 255, 255, 0) -5%, #ffffff 71%);
  --gradient-blue: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);
  --gradient-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);
  --gradient-green: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);
  --badge-white: #ffffff;
  --badge-blue: #0677af;
  --badge-violet: #2a3052;
  --badge-green: #00a79e;
  --traders-hub-banner-border-color: #e6e9e9;
  --traders-hub-logged-out-banner-bg-color: #f3f4f5;
  --wallets-banner-ready-bg-color: #e2f3f3;
  --wallets-banner-ready-tick-bg-color: #4ab4b3;
  --wallets-banner-border-color: #e6e9e9;
  --wallets-banner-dot-color: #d6d6d6;
  --wallets-banner-active-dot-color: #ff444f;
  --wallets-card-active-gradient-background: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);
  --wallet-demo-bg-color: #fff8f9;
  --wallet-demo-divider-color: #fff0f1;
  --wallet-eu-disclaimer: #e6e9e9;
  --wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);
  --demo-text-color-1: #c2c2c2;
  --demo-text-color-2: #ffffff;
  --header-background-mt5: #e6f5ff;
  --header-background-others: #e8fdf8;
}

:host .theme--dark,
:root .theme--dark {
  --general-main-1: #0e0e0e;
  --general-main-2: #151717;
  --general-main-3: #1d1f20;
  --general-main-4: rgba(14, 14, 14, 0.5);
  --general-main-5: #181c25;
  --general-section-1: #151717;
  --general-section-2: #0e0e0e;
  --general-section-3: #242828;
  --general-section-4: #242828;
  --general-section-5: #242828;
  --general-section-6: #6e6e6e;
  --general-disabled: #1d1f20;
  --general-hover: #242828;
  --general-active: #323738;
  --text-prominent: #ffffff;
  --text-general: #c2c2c2;
  --text-less-prominent: #6e6e6e;
  --text-primary: #999999;
  --text-disabled: #3e3e3e;
  --text-disabled-1: #3e3e3e;
  --text-profit-success: #00a79e;
  --text-loss-danger: #cc2e3d;
  --text-red: #ff444f;
  --text-colored-background: #ffffff;
  --text-info-blue: #92b8ff;
  --text-info-blue-background: #182130;
  --text-status-info-blue: #377cfc;
  --text-hint: #c2c2c2;
  --icon-light-background: #5c5c5c;
  --icon-dark-background: #ffffff;
  --icon-grey-background: #333333;
  --icon-black-plus: #ffffff;
  --purchase-main-1: #00a79e;
  --purchase-section-1: #008079;
  --purchase-main-2: #cc2e3d;
  --purchase-section-2: #a32430;
  --purchase-disabled-main: #1d1f20;
  --purchase-disabled-section: #0e0e0e;
  --button-primary-default: var(--brand-red-coral);
  --button-secondary-default: #6e6e6e;
  --button-tertiary-default: transparent;
  --button-primary-light-default: rgba(255, 68, 79, 0.16);
  --button-primary-hover: #eb3e48;
  --button-secondary-hover: rgba(255, 255, 255, 0.08);
  --button-tertiary-hover: rgba(255, 68, 79, 0.08);
  --button-primary-light-hover: rgba(255, 68, 79, 0.24);
  --button-toggle-primary: #0796e0;
  --button-toggle-secondary: #323738;
  --button-toggle-alternate: #323738;
  --button-get-started-bg: #ffffff;
  --overlay-outside-dialog: rgba(0, 0, 0, 0.72);
  --overlay-inside-dialog: rgba(14, 14, 14, 0.96);
  --shadow-menu: rgba(0, 0, 0, 0.84);
  --shadow-menu-2: rgba(0, 0, 0, 0.72);
  --shadow-drop: rgba(0, 0, 0, 0.64);
  --shadow-box: #555975;
  --state-normal: #0e0e0e;
  --state-hover: #242828;
  --state-active: #323738;
  --state-disabled: #1d1f20;
  --checkbox-disabled-grey: #d6d6d6;
  --sidebar-tab: #6e6e6e;
  --border-normal: #323738;
  --border-normal-1: #d6dadb;
  --border-normal-2: #999999;
  --border-normal-3: #6e6e6e;
  --border-hover: #6e6e6e;
  --border-hover-1: #5c5c5c;
  --border-active: var(--brand-secondary);
  --border-disabled: #1d1f20;
  --border-divider: #2e2e2e;
  --fill-normal: #0e0e0e;
  --fill-normal-1: #333333;
  --fill-hover: #6e6e6e;
  --fill-active: var(--brand-secondary);
  --fill-disabled: #1d1f20;
  --status-default: #eaeced;
  --status-adjustment: #999999;
  --status-danger: #cc2e3d;
  --status-warning: #ffad3a;
  --status-warning-transparent: rgba(255, 173, 58, 0.16);
  --status-success: #00a79e;
  --status-transfer: #ff6444;
  --status-info: #377cfc;
  --status-warning-dark: #b3760d;
  --status-danger-transparent: rgba(255, 68, 79, 0.08);
  --status-success-transparent: rgba(0, 167, 158, 0.16);
  --status-colored-background: #ffffff;
  --status-alert-background: rgba(255, 173, 58, 0.16);
  --status-warning-dark: #b3760d;
  --status-info-transparent: rgba(55, 124, 252, 0.16);
  --transparent-success: rgba(0, 167, 158, 0.92);
  --transparent-info: rgba(55, 124, 252, 0.16);
  --transparent-hint: rgba(55, 124, 252, 0.16);
  --transparent-danger: rgba(255, 68, 79, 0.16);
  --transparent-correct-message: rgba(75, 180, 179, 0.1607843137);
  --transparent-fake-message: rgba(236, 63, 63, 0.1607843137);
  /* TODO: change to styleguide later */
  --gradient-success: linear-gradient(to top, #0e0e0e, rgba(0, 167, 158, 0.16));
  --gradient-danger: linear-gradient(to top, #0e0e0e, rgba(255, 68, 79, 0.16));
  --contract-gradient-danger: linear-gradient(to top, #0e0e0e 85%, rgba(255, 68, 79, 0.16));
  --gradient-right-edge: linear-gradient(to right, rgba(14, 14, 14, 0) -5%, #0e0e0e 71%);
  --gradient-blue: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);
  --gradient-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);
  --gradient-green: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);
  --badge-white: #ffffff;
  --badge-blue: #0677af;
  --badge-violet: #2a3052;
  --badge-green: #00a79e;
  --traders-hub-banner-border-color: #242828;
  --traders-hub-logged-out-banner-bg-color: #242828;
  --wallets-banner-ready-bg-color: #e2f3f3;
  --wallets-banner-ready-tick-bg-color: #4ab4b3;
  --wallets-banner-border-color: #242828;
  --wallets-banner-dot-color: #d6d6d6;
  --wallets-banner-active-dot-color: #ff444f;
  --wallets-card-active-gradient-background: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);
  --wallet-demo-bg-color: #140506;
  --wallet-demo-divider-color: #323738;
  --wallet-eu-disclaimer: #e6e9e9;
  --wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);
  --demo-text-color-1: #333333;
  --demo-text-color-2: #333333;
  --header-background-mt5: #e6f5ff;
  --header-background-others: #e8fdf8;
}

.details-form {
  display: grid;
  align-content: start;
}

@media (min-width: 1280px) {
  .details-form {
    padding: 0 0.4rem;
  }
}

@media (max-width: 1279px) {
  .details-form {
    overflow-x: hidden;
    overflow-y: auto;
  }
}

.details-form__banner-container {
  display: flex;
  justify-content: center;
  padding: 0 4.6rem;
}

.details-form__banner-container .da-inline-note-with-icon {
  align-items: center;
  margin-top: 0.8rem;
  padding: 0.8rem;
  display: flex;
  background: rgba(255, 173, 58, 0.16);
  border-radius: 4px;
  gap: 0.8rem;
  line-height: 1.4rem;
}

@media (max-width: 1279px) {
  .details-form__banner-container {
    padding: 0 1.6rem;
  }
}

@media (min-width: 601px) and (max-width: 1279px) {
  .details-form__banner-container {
    display: inline;
  }
}

@media (min-width: 1280px) {
  .details-form__sub-header {
    margin: 0 4rem 4rem;
  }
}

@media (max-width: 1279px) {
  .details-form__sub-header {
    margin-bottom: 0.8rem;
  }
}

.details-form__elements {
  flex-grow: 1;
  margin: 1.2rem auto;
  width: 45%;
}

.details-form__elements--wide {
  width: 45%;
}

.details-form__elements-container {
  height: calc(100% - 76px);
  overflow: hidden;
}

@media (max-width: 1279px) {
  .details-form__elements-container {
    height: auto;
    width: calc(100% - 3.2rem);
    overflow: visible;
    overflow: initial;
    margin: 1.6rem auto;
  }
}

.details-form__elements .dc-autocomplete {
  margin-bottom: 3.2rem;
}

.details-form__elements .dc-radio__input {
  margin-bottom: 2.4rem;
}

.details-form__elements .dc-input__label {
  top: 1rem;
}

.details-form__elements .dc-input label {
  top: 1rem;
  background-color: var(--general-main-2);
}

@media (max-width: 1279px) {
  .details-form__elements .dc-input label {
    background-color: var(--fill-normal);
  }
}

.details-form__elements .dc-input .dc-field--error {
  font-size: 1.1rem;
}

@media (min-width: 1280px) {
  .details-form__elements .dc-input {
    /* To get rid of ugly chrome autofill shadow dom-applied background color */
  }

  .details-form__elements .dc-input__field:-webkit-autofill {
    -webkit-box-shadow: 0 0 0 30px var(--fill-normal) inset !important;
  }

  .details-form__elements .dc-input__field:-webkit-autofill:hover, .details-form__elements .dc-input__field:-webkit-autofill:focus, .details-form__elements .dc-input__field:-webkit-autofill:active {
    -webkit-box-shadow: 0 0 0 30px var(--fill-normal) inset !important;
  }
}

.details-form__elements .dc-datepicker__input .dc-input__field {
  background-color: var(--fill-normal);
}

.details-form__elements .dc-select-native {
  margin-bottom: 3.2rem;
}

.details-form__elements .dc-dropdown__display {
  background-color: var(--general-main-2);
}

.details-form__elements .dc-dropdown__display-placeholder-text {
  background-color: var(--general-main-2);
}

.details-form__elements .dc-dropdown__container {
  margin-bottom: 3rem;
}

@media (max-width: 1279px) {
  .details-form__elements {
    width: 100%;
    margin: 0;
    padding: 1rem 1.6rem 6rem;
    overflow-y: auto;
  }
}

.details-form__loader .barspinner {
  margin-top: 0.4rem;
  margin-bottom: 3.2rem;
}

.details-form__tax {
  position: relative;
}

@media (max-width: 1279px) {
  [dir="ltr"] .details-form__tax {
    padding-right: 2rem;
  }

  [dir="rtl"] .details-form__tax {
    padding-left: 2rem;
  }
}

.details-form__tax .dc-popover {
  position: absolute;
  cursor: pointer;
  top: 10px;
}

[dir="ltr"] .details-form__tax .dc-popover {
  right: -25px;
}

[dir="rtl"] .details-form__tax .dc-popover {
  left: -25px;
}

@media (max-width: 1279px) {
  [dir="ltr"] .details-form__tax .dc-popover {
    right: -5px;
  }

  [dir="rtl"] .details-form__tax .dc-popover {
    left: -5px;
  }
}

.details-form .dc-page-error__container {
  height: 100%;
}

.details-form__heading {
  margin: 1.6rem;
}

.details-form__description {
  margin: 1.6rem auto;
  width: 45%;
}

@media (min-width: 1280px) {
  .details-form__description {
    display: flex;
    flex-direction: column;
  }
}

@media (min-width: 768px) and (max-width: 1023px) {
  .details-form__description {
    width: 70%;
  }
}

@media (max-width: 1279px) {
  .details-form__description {
    width: auto;
    width: initial;
    margin: 0 2.4rem;
    line-height: 20px;
  }

  [dir="ltr"] .details-form__description {
    text-align: left;
  }

  [dir="rtl"] .details-form__description {
    text-align: right;
  }
}

.cfd-personal-details-modal__form .details-form__description {
  margin: 0 auto;
  width: auto;
  width: initial;
  padding-top: 3.2rem;
}

.details-form .address-details-form__eu {
  margin-top: 4.4rem;
}

.financial-assessment {
  gap: 1.6rem;
}

@media (min-width: 1280px) {
  .financial-assessment__form {
    width: 70%;
  }
}

.modal__container.modal__real-account-signup-modal .dc-vertical-tab__content {
  padding: 0 !important;
}

.accept-risk__header {
  padding: 2.4rem 0;
}

.accept-risk__container {
  padding: 0 2.4rem;
}

.accept-risk__container .dc-text {
  text-align: justify;
}

@media (max-width: 1279px) {
  .accept-risk__container {
    padding: 0 1.6rem;
  }
}

.accept-risk__form {
  display: grid;
  height: calc(100% - 57px);
  position: relative;
  width: 100%;
}

.account-signup-loader {
  width: 100%;
  height: 100%;
}

@media (min-width: 768px) and (max-width: 904px) {
  .dc-modal__container_real-account-signup-modal {
    width: 768px !important;
  }

  .dc-modal__container--risk-message {
    width: 440px !important;
  }
}

.poi-form-on-signup {
  height: 100%;
  overflow: auto;
  width: 100%;
}

.poi-form-on-signup__fields {
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100%;
}

@media (max-width: 1279px) {
  .poi-form-on-signup__fields {
    display: inline;
    display: initial;
    position: relative;
  }
}

.poi-form-on-signup__fields span.proof-of-identity {
  width: auto;
  width: initial;
  height: auto;
  height: initial;
}

.poi-form-on-signup__fields .proof-of-identity__container {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 45%;
  justify-content: initial;
}

@media (max-width: 1279px) {
  .poi-form-on-signup__fields .proof-of-identity__container {
    width: 100%;
    overflow-y: visible;
    overflow-y: initial;
    justify-content: initial;
  }
}

.poi-form-on-signup__fields .proof-of-identity__container .icon {
  width: 12.8rem;
  height: 12.8rem;
  margin: 1.6rem 0 2.4rem;
}

.poi-form-on-signup__fields .proof-of-identity__container .dc-input__bottom-label {
  margin: 0;
  margin: initial;
}

.poi-form-on-signup__fields .proof-of-identity__container .btm-spacer {
  margin-bottom: 1.6rem;
}

.poi-form-on-signup__fields .proof-of-identity__container .spacer {
  margin: 1.6rem 0;
}

.poi-form-on-signup__fields .proof-of-identity__container--idv {
  width: 100%;
}

.poi-form-on-signup__fields .proof-of-identity__inner-container {
  display: inline;
  display: initial;
  flex-direction: initial;
  justify-content: initial;
  align-items: initial;
  width: 100%;
}

.poi-form-on-signup__fields .proof-of-identity__image {
  width: 100%;
  max-width: none;
  max-width: initial;
  border-radius: 0;
  border-radius: initial;
  -o-object-fit: initial;
     object-fit: initial;
}

.poi-form-on-signup__fields .proof-of-identity__image-container {
  width: auto;
  width: initial;
  height: auto;
  height: initial;
  padding: 0;
  padding: initial;
  border-radius: 0;
  border-radius: initial;
  background-color: transparent;
  background-color: initial;
}

.poi-form-on-signup__fields .proof-of-identity__fieldset {
  width: 100%;
  margin-bottom: 2rem;
}

@media (max-width: 1279px) {
  .poi-form-on-signup__fields .proof-of-identity__fieldset {
    margin: 0 0 1.8rem;
  }
}

.poi-form-on-signup__fields .proof-of-identity__fieldset-container {
  display: inline;
  display: initial;
  flex-direction: initial;
  justify-content: initial;
  align-items: initial;
}

.poi-form-on-signup__fields .proof-of-identity__fieldset-input {
  width: auto;
  width: initial;
  margin-bottom: 1rem;
}

.poi-form-on-signup__fields .proof-of-identity__sample-container {
  margin-top: 2.4rem;
  width: auto;
  width: initial;
}

[dir="ltr"] .poi-form-on-signup__fields .proof-of-identity__sample-container {
  margin-left: 0;
  margin-left: initial;
}

[dir="rtl"] .poi-form-on-signup__fields .proof-of-identity__sample-container {
  margin-right: 0;
  margin-right: initial;
}

[dir="ltr"] .poi-form-on-signup__fields .proof-of-identity__submit-button {
  margin-left: 0.8rem;
}

[dir="rtl"] .poi-form-on-signup__fields .proof-of-identity__submit-button {
  margin-right: 0.8rem;
}

@media (max-width: 1279px) {
  [dir="ltr"] .poi-form-on-signup__fields .proof-of-identity__submit-button {
    margin-right: 0;
    margin-right: initial;
  }

  [dir="rtl"] .poi-form-on-signup__fields .proof-of-identity__submit-button {
    margin-left: 0;
    margin-left: initial;
  }
}

.poi-form-on-signup .details-form {
  display: grid;
  grid-template-rows: minmax(10rem, 1fr) 8.2rem;
  height: 100%;
  position: relative;
}

@media (max-width: 1279px) {
  .poi-form-on-signup .details-form {
    max-height: calc(100% - 5rem);
  }
}

@media (max-width: 1279px) {
  .poi-form-on-signup {
    overflow: hidden;
  }
}

.idv-form {
  grid-template-rows: initial !important;
}

.idv-form {
  display: grid;
}

@media (max-width: 1279px) {
  .idv-form .details-form {
    overflow: visible;
    overflow: initial;
  }
}

@media (min-width: 1280px) {
  .idv-form .details-form {
    padding: 0;
    padding: initial;
  }
}

@media (min-width: 1280px) {
  .mt5-layout {
    display: flex;
    flex-direction: column;
  }
}

.mt5-layout__container {
  overflow: auto;
  height: 100%;
}

@media (min-width: 1280px) {
  .mt5-layout__container {
    padding: 0.8rem 15.5rem;
  }
}

@media (max-width: 1279px) {
  .mt5-layout__container {
    padding: 1.6rem;
  }
}

.mt5-layout .proof-of-identity__footer {
  padding: 1.6rem 2.4rem;
  justify-content: end;
  display: flex;
  border-top: 1px solid var(--general-section-1);
  max-width: none;
  max-width: initial;
}

@media (max-width: 1279px) {
  .mt5-layout .proof-of-identity__footer {
    width: 100%;
    position: relative;
  }
}

@media (max-width: 1279px) {
  .mt5-layout .proof-of-identity__submit-button {
    width: 100%;
    margin: 0;
    margin: initial;
  }
}

.mt5-layout .account-form__footer {
  position: relative;
}

.proof-of-identity__container.mt5-layout {
  justify-content: space-between;
  height: 100%;
}

@media (max-width: 1279px) {
  .proof-of-identity__container.mt5-layout {
    width: 100%;
    padding: 0;
    padding: initial;
  }
}

@keyframes closeDrawerWrapper {
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
}

@media (max-width: 1279px) {
  /** disabling pull to refresh on iOS / Android browsers */
  /* postcss-bem-linter: ignore */
  body,
  .deriv-app,
  .modal-root,
  .dc-mobile-drawer__overlay {
    position: absolute !important;
    top: 0 !important;
    overflow-y: hidden !important;
  }
  body,
  .deriv-app,
  .modal-root,
  .dc-mobile-drawer__overlay {
    /* Break the flow */
    /* Give them all the available space */
    width: 100%;
    height: 100%;
    /* Remove the margins if any */
    margin: 0;
    /* Allow them to scroll down the document */
    /* -webkit-touch-callout only is supported on iOS webkit engine, thus it should apply iOS only styles */
  }

  @supports (-webkit-touch-callout: none) {
    body,
    .deriv-app,
    .modal-root,
    .dc-mobile-drawer__overlay {
      position: fixed !important;
    }
  }

  .dc-mobile-drawer__overlay {
    position: fixed !important;
  }

  .dc-mobile-drawer__overlay.exit {
    animation-name: closeDrawerWrapper;
    animation-delay: 1s;
    animation-duration: 0.1s;
    animation-fill-mode: forwards;
  }

  .body {
    /* Sending body at the bottom of the stack */
    z-index: 1;
  }

  .deriv-app {
    /* Making the wrapper stack above the body */
    overscroll-behavior: none;
    z-index: 2;
  }

  .deriv-app .trade-notifications {
    position: absolute;
    width: 40rem;
    max-width: calc(100% - 1.6rem);
    z-index: 6;
    top: 0.8rem;
    right: 0.8rem;
    bottom: auto;
    left: 0.8rem;
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
  }

  .deriv-app .notification-messages .trade-notifications {
    position: relative;
    top: initial;
    right: auto;
    right: initial;
    bottom: auto;
    bottom: initial;
    left: auto;
    left: initial;
    max-width: 32.8rem;
    width: calc(100% - 0.8rem);
    top: -0.8rem;
  }

  [dir="ltr"] .deriv-app .notification-messages .trade-notifications {
    margin-right: 0.4rem;
  }

  [dir="rtl"] .deriv-app .notification-messages .trade-notifications {
    margin-left: 0.4rem;
  }

  .modal-root {
    height: 100% !important;
  }

  .popup-root > .dc-toast {
    top: 48px;
    z-index: 3;
    margin: auto;
    position: absolute;
  }

  .popup-root .dc-toast-popup {
    max-width: calc(100vw - 1.6rem);
    left: 1.6rem;
    width: calc(100vw - 3.2rem);
    top: 48px;
    position: absolute;
    right: 1.6rem;
  }
}
/** @define app-contents; weak */
.app-contents {
  margin: 48px 0 36px;
  height: calc(100vh - 48px - 36px);
  overflow: hidden;
  backface-visibility: hidden;
  background-color: var(--general-main-1);
}

.app-contents--is-disabled:after {
  opacity: 1;
  pointer-events: auto;
}

.app-contents--is-route-modal {
  background-color: var(--overlay-outside-dialog);
}

.app-contents--is-hidden {
  margin-top: 0;
}

.app-contents--is-onboarding {
  margin: 0 !important;
}

.app-contents--is-onboarding {
  padding: 0;
  height: inherit;
}

@media (max-width: 600px) {
  .app-contents .ciq-menu {
    top: 0;
    margin: 0.8rem;
    z-index: 2;
  }
}

@media (max-width: 1279px) {
  .app-contents {
    margin-bottom: 0;
    height: calc(100% - 48px);
    position: relative;
    margin-top: 48px;
  }

  .app-contents--is-scrollable {
    overflow-y: auto;
  }

  .app-contents--is-dashboard {
    height: calc(100% - 48px);
    margin-top: 48px;
  }

  .app-contents--is-hidden {
    margin-top: 0;
  }

  .app-contents--is-dtrader-v2 {
    height: calc(100% - 48px);
    margin-top: 48px;
  }

  .app-contents--is-dtrader-v2[\:has\(.trade-notification\)] {
    position: static;
    position: initial;
  }

  .app-contents--is-dtrader-v2[\:has\(.trade-notification\)] {
    position: static;
    position: initial;
  }

  .app-contents--is-dtrader-v2[\:has\(.trade-notification\)] {
    position: static;
    position: initial;
  }

  .app-contents--is-dtrader-v2:has(.trade-notification) {
    position: static;
    position: initial;
  }

  .app-contents--is-dtrader-v2--with-banner {
    height: calc(100% - 128px);
    margin-top: 128px;
  }

  .app-contents--is-dtrader-v2--with-banner[\:has\(.trade-notification\)] {
    position: static;
    position: initial;
  }

  .app-contents--is-dtrader-v2--with-banner[\:has\(.trade-notification\)] {
    position: static;
    position: initial;
  }

  .app-contents--is-dtrader-v2--with-banner[\:has\(.trade-notification\)] {
    position: static;
    position: initial;
  }

  .app-contents--is-dtrader-v2--with-banner:has(.trade-notification) {
    position: static;
    position: initial;
  }

  .app-contents .cq-symbol-select-btn {
    padding: 0.3rem 0.9rem;
  }

  .app-contents .cq-symbol-select-btn .cq-symbol-dropdown {
    transform: scale(1);
  }

  [dir="ltr"] .app-contents .cq-symbol-select-btn .cq-symbol-dropdown {
    margin-left: auto;
  }

  [dir="rtl"] .app-contents .cq-symbol-select-btn .cq-symbol-dropdown {
    margin-right: auto;
  }

  .app-contents .cq-symbol-select-btn .cq-symbol {
    font-size: 1.2rem;
  }

  .app-contents .cq-symbol-select-btn .cq-chart-price {
    display: none;
  }

  .app-contents .cq-symbol-select-btn .cq-symbol-info {
    margin: 0 0.8rem;
    white-space: nowrap;
  }

  .app-contents .cq-symbol-select-btn .ic-icon:not(.cq-symbol-dropdown) > svg {
    padding: 0.4rem;
  }

  .app-contents .chart-container__loader {
    width: 100%;
    height: 100%;
    z-index: 1;
    top: 0;
  }

  .app-contents .contract-details-wrapper {
    height: inherit;
    position: relative;
    z-index: 1;
  }

  .app-contents .contract-audit-card {
    background-color: var(--general-section-1);
    border-radius: 4px;
  }

  .app-contents .contract-audit-card .contract-audit__wrapper {
    height: 100%;
  }
}

/** @define popup-root */
.popup-root {
  position: absolute;
  z-index: 9999;
}

/** @define contract */
.contract--enter {
  opacity: 0;
}

[dir="ltr"] .contract--enter {
  transform: translate3d(calc(100% + 1.6em), 0, 0);
}

[dir="rtl"] .contract--enter {
  transform: translate3d(calc(-1*(100% + 1.6em)), 0, 0);
}

.contract--exit {
  opacity: 0;
  pointer-events: none;
}

[dir="ltr"] .contract--exit {
  transform: translate3d(calc(100% + 1.6em), 0, 0);
}

[dir="rtl"] .contract--exit {
  transform: translate3d(calc(-1*(100% + 1.6em)), 0, 0);
}

/** @define advanced-simple-toggle */

.advanced-simple-toggle {
  display: flex;
  justify-content: center;
  align-items: center;
  /* margin shorthand for values below does not work */
  width: calc(100% + 16px);
  margin-top: 8px;
  margin-left: -8px;
  margin-bottom: -9px;
  margin-right: 0;
  padding: 8px 0;
  border-bottom-right-radius: 4px;
  border-bottom-left-radius: 4px;
  border: 0;
  background: none;
  transition: background-color 0.25s linear;
}

.advanced-simple-toggle__icon {
  transition: transform 0.2s ease;
}

.advanced-simple-toggle__icon--active {
  transform: rotate(180deg);
}

.advanced-simple-toggle:hover {
  cursor: pointer;
  background-color: var(--general-hover);
}

.advanced-simple-toggle:focus {
  outline: none;
}
/** @define category-wrapper */
.category-wrapper {
  width: 2.4em;
  height: 2.4em;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--general-section-1);
}

/** @define type-wrapper */
.type-wrapper {
  width: 2.4em;
  height: 2.4em;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--general-section-1);
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.type-wrapper .color1-fill {
  fill: var(--brand-red-coral);
}

.type-wrapper .color2-fill {
  fill: var(--brand-secondary);
}

/** @define no-scroll */
.no-scroll {
  overflow: hidden;
  max-height: 100vh;
}

/** @define mobile-only */
@media (min-width: 769px) {
  .mobile-only {
    display: none !important;
  }
}

/** @define error */
.error__container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: calc(100vh - 9em);
}

.error__message {
  color: var(--text-general);
}

.error__message {
  font-size: 14px;
}

@media screen and (min-width: 320px) {
  .error__message {
    font-size: calc(0.5357142857vw + 12.2857142857px);
  }
}

@media screen and (min-width: 1440px) {
  .error__message {
    font-size: 20px;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}
/** @define header; weak */
.header {
  position: fixed;
  z-index: 99;
  box-sizing: border-box;
  height: 48px;
  width: 100%;
  top: 0;
  transition: opacity 0.3s;
  backface-visibility: hidden;
  background-color: var(--general-main-1);
  border-bottom: 1px solid var(--general-section-1);
}

.header--is-disabled:after {
  opacity: 1;
  pointer-events: auto;
}

.header--is-hidden {
  display: none;
}

.header--tradershub_os_desktop {
  display: none;
}

.header--tradershub_os_mobile {
  display: block;
}

.header__menu-mobile-whatsapp-link {
  text-decoration: none;
  color: var(--text-general);
}

[dir="ltr"] .header__menu-mobile-whatsapp-link {
  padding-left: 1.6rem;
}

[dir="rtl"] .header__menu-mobile-whatsapp-link {
  padding-right: 1.6rem;
}

.header__menu-mobile-traders-hub {
  padding-top: 2rem;
}

.header__menu-mobile-livechat {
  border-bottom: 1px solid var(--general-section-2);
}

.header__menu-mobile-body-wrapper {
  position: relative;
  height: calc(100% - 4rem);
}

.header__menu-mobile-platform-switcher {
  position: absolute;
  height: 100%;
  top: 2.4rem;
}

[dir="ltr"] .header__menu-mobile-platform-switcher {
  left: 0;
}

[dir="rtl"] .header__menu-mobile-platform-switcher {
  right: 0;
}

.header__menu-mobile-theme {
  border-bottom: 1px solid var(--general-section-2);
}

[dir="ltr"] .header__menu-mobile-theme {
  padding-right: 0;
}

[dir="rtl"] .header__menu-mobile-theme {
  padding-left: 0;
}

.header__menu-mobile-theme--responsible-trading {
  border-bottom: 1px solid var(--general-section-2);
}

.header__menu--separator {
  width: 2rem;
  height: 3.2rem;
}

[dir="ltr"] .header__menu--separator {
  border-right: 1px solid var(--general-section-1);
  margin-right: 1rem;
}

[dir="rtl"] .header__menu--separator {
  border-left: 1px solid var(--general-section-1);
  margin-left: 1rem;
}

.header__menu--dtrader--separator {
  margin-top: 0.8rem;
  height: 3.2rem;
}

[dir="ltr"] .header__menu--dtrader--separator {
  border-right: 1px solid var(--general-section-1);
}

[dir="rtl"] .header__menu--dtrader--separator {
  border-left: 1px solid var(--general-section-1);
}

[dir="ltr"] .header__menu--dtrader--separator--account {
  margin-right: 1rem;
}

[dir="rtl"] .header__menu--dtrader--separator--account {
  margin-left: 1rem;
}

.header__menu__redirect {
  display: flex;
}

.header__menu__redirect--link {
  display: flex;
  align-items: center;
  padding: 0.5rem;
  text-decoration: none;
}

.header__redirect--dtratder {
  display: flex;
}

[dir="ltr"] .header__redirect--dtratder {
  margin-left: 50rem;
}

[dir="rtl"] .header__redirect--dtratder {
  margin-right: 50rem;
}

.header__redirect--dtratder--link {
  display: flex;
  align-items: center;
  padding: 0.5rem;
  text-decoration: none;
}

[dir="ltr"] .header__redirect--dtratder--link {
  margin-right: 5rem;
}

[dir="rtl"] .header__redirect--dtratder--link {
  margin-left: 5rem;
}

.header__menu-mobile-link {
  text-decoration: none;
  display: flex;
  flex: 1;
  align-items: center;
}

.header__menu-mobile-link--active .header__menu-mobile-link-text {
  font-weight: bold;
  color: var(--text-prominent);
}

.header__menu-mobile-link-text {
  font-size: 1.4rem;
  color: var(--text-general);
  flex: 1;
}

.header__menu-mobile-link-icon {
  width: 16px;
  height: 16px;
}

[dir="ltr"] .header__menu-mobile-link-icon {
  margin-right: 16px;
}

[dir="rtl"] .header__menu-mobile-link-icon {
  margin-left: 16px;
}

[dir="ltr"] .header__menu-mobile-link-flag-icon {
  margin-right: 16px;
}

[dir="rtl"] .header__menu-mobile-link-flag-icon {
  margin-left: 16px;
}

.header__menu-mobile-link-suffix-icon {
  width: 16px;
  height: 16px;
  margin-right: auto;
  margin-left: auto;
}

.header__menu-items {
  display: flex;
  position: relative;
  box-sizing: border-box;
  align-items: center;
  width: 100%;
  height: 100%;
}

.header__navbar-icons {
  cursor: pointer;
  padding: 0.8em 1.6em;
  align-self: center;
  height: 100%;
}

.header__navbar-icons--notify-toggle {
  order: 2;
  order: 2;
  padding: 0.5em 1em;
  width: 2em;
}

[dir="ltr"] .header__menu-divider {
  margin-left: 20rem;
}

[dir="rtl"] .header__menu-divider {
  margin-right: 20rem;
}

.header__menu-left {
  justify-content: flex-start;
  order: -1;
  display: inline-flex;
  flex: 1;
  height: 47px;
}

@media (min-width: 1024px) {
  .header__menu-left {
    align-items: center;
  }
}

.header__menu-left-extensions {
  display: flex;
  align-items: center;
}

.header__menu-left-logo {
  align-self: center;
  margin: 0 1.6rem;
  cursor: pointer;
}

.header__menu-right {
  justify-content: flex-end;
  order: 1;
  display: inline-flex;
  height: 47px;
  position: relative;
}

.header__menu-right--hidden {
  display: none;
}

@media (max-width: 1279px) {
  [dir="ltr"] .header__menu-right .acc-info__separator {
    padding-left: 0.8rem;
  }

  [dir="rtl"] .header__menu-right .acc-info__separator {
    padding-right: 0.8rem;
  }

  [dir="ltr"] .header__menu-right .notifications-toggle {
    margin-right: 0;
  }

  [dir="rtl"] .header__menu-right .notifications-toggle {
    margin-left: 0;
  }
}

.header__menu--back-to-old-ui--dtrader {
  padding: 0 1.5rem 2.5rem;
  width: 110%;
}

.header__menu--back-to-ui {
  display: flex;
  width: 90%;
  justify-content: space-between;
  border-radius: 1rem;
}

.header__menu--back-to-ui--dark {
  background-color: var(--general-main-1);
  display: flex;
  width: 90%;
  justify-content: space-between;
  border-radius: 1rem;
}

.header__menu--traders-hub {
  padding: 1.5rem;
}

.header__menu--traders-hub-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.header__menu--traders-hub-text {
  width: 13rem;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

[dir="ltr"] .header__menu--traders-hub-beta-icon {
  margin: 0 4rem 0 1rem;
}

[dir="rtl"] .header__menu--traders-hub-beta-icon {
  margin: 0 1rem 0 4rem;
}

.header__menu--explore-traders-hub {
  border-radius: 1rem;
}

.header__menu--explore-traders-hub--dark {
  background-color: var(--general-main-1);
}

.header__menu--explore-traders-hub .dc-btn__text {
  display: flex;
  justify-content: space-between;
  width: 100%;
}

.header__menu--exit-traders-hub {
  border-radius: 1rem;
}

.header__menu--exit-traders-hub--dark {
  background-color: var(--general-main-1);
}

.header__menu--exit-traders-hub .dc-btn__text {
  display: flex;
  justify-content: space-between;
  width: 100%;
}

[dir="ltr"] .header__menu--exit-traders-hub-beta-icon {
  margin: 0 4rem 0 1rem;
}

[dir="rtl"] .header__menu--exit-traders-hub-beta-icon {
  margin: 0 1rem 0 4rem;
}

.header__menu--back-to-ui-text {
  align-items: flex-start;
}

.header__menu--back-to-ui-text--dark {
  color: var(--text-prominent);
  align-items: flex-start;
}

.header__menu-mobile-right-arrow {
  align-items: flex-end;
  display: inline-flex;
}

.header__menu-toggle {
  align-self: center;
  display: flex;
}

.header__menu-links {
  height: 100%;
  align-self: center;
}

@media (max-width: 1279px) {
  .header__menu-links {
    display: none;
  }
}

.header__menu-link {
  height: 100%;
  padding: 0 1.6em;
  text-decoration: none;
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: space-evenly;
  transition: background-color 0.3s;
  cursor: pointer;
}

[dir="ltr"] .header__menu-link-text{
  text-align: left;
}

[dir="rtl"] .header__menu-link-text{
  text-align: right;
}

.header__menu-link-text {
  font-size: 1.6rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  line-height: 1.75;
  padding: 0.5em 0;
  position: relative;
  color: var(--text-general);
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.header__menu-link-text .color1-fill {
  fill: var(--text-general);
}

.header__menu-link-text .color1-stroke {
  stroke: var(--text-general);
}

.header__menu-link-text .color2-fill {
  fill: none;
}

.header__menu-link-text .color2-stroke {
  stroke: none;
}

.header__menu-link-text .color3-fill {
  fill: var(--text-general);
}

.header__menu-link-text .color3-stroke {
  stroke: var(--text-general);
}

.header__menu-link-text:before {
  position: absolute;
  top: 1.4em;
}

[dir="ltr"] .header__menu-link-text:before {
  left: 1.2em;
}

[dir="rtl"] .header__menu-link-text:before {
  right: 1.2em;
}

.header__menu-link-text:after {
  display: block;
  content: attr(title);
  font-weight: 400;
  height: 0;
  overflow: hidden;
  visibility: hidden;
}

.header__menu-link:hover:not(.header__menu-link--active) {
  background-color: var(--general-hover);
}

.header__menu-link--active > .header__menu-link-text[title] {
  font-weight: bold;
  color: var(--text-prominent);
}

.header__menu-link--active > .header__menu-link-text[title]:after {
  color: var(--text-prominent);
}

.header__logo {
  background-color: var(--brand-secondary);
  border-radius: 10px;
  color: var(--text-colored-background);
  display: inline-block;
  font-size: 1.4rem;
  font-weight: normal;
  height: 20px;
  line-height: 1.43;
  text-align: center;
  width: 50px;
}

[dir="ltr"] .header__logo {
  margin-left: 8px;
}

[dir="rtl"] .header__logo {
  margin-right: 8px;
}

.header__mobile-drawer-icon {
  width: 16px;
  height: 16px;
  transform: scale(1.3);
}

.header__mobile-drawer-toggle {
  padding: 0 1.2rem;
  display: flex;
  align-items: center;
  height: inherit;
}

[dir="ltr"] .header__mobile-drawer-toggle {
  border-right: 1px solid var(--general-section-1);
}

[dir="rtl"] .header__mobile-drawer-toggle {
  border-left: 1px solid var(--general-section-1);
}

.header__title {
  display: inline-block;
  font-weight: bold;
  color: var(--text-prominent);
}

.header__icon {
  vertical-align: middle;
}

[dir="ltr"] .header__icon {
  margin-right: 0.8rem;
}

[dir="rtl"] .header__icon {
  margin-left: 0.8rem;
}

@media (max-width: 1279px) {
  .header {
    height: 48px;
  }

  .header .header__menu-left,
  .header .header__menu-right {
    height: 47px;
  }
}

.header__divider {
  width: 0.1rem;
  height: 3rem;
  background: var(--general-section-2);
}

@media (min-width: 320px) and (max-width: 767px) {
  .header__divider {
    height: 2.4rem;
  }
}

.header-v2 {
  height: 48px;
  border-bottom: none;
}

.header-v2--with-banner {
  height: 128px;
}

.header-v2__acc-info {
  display: flex;
  justify-content: center;
  flex-direction: column;
}

.header-v2__acc-info__name {
  display: flex;
  align-items: center;
  gap: var(--core-spacing-200);
}

h5.header-v2__acc-info__balance {
  color: var(--core-color-opacity-black-600);
}

.header-v2__acc-info__container {
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding-left: var(--core-spacing-800);
  padding-right: var(--core-spacing-800);
}

.header-v2__acc-info__container .notifications__icon {
  fill: var(--core-color-opacity-black-600);
}

.header-v2__acc-info__container .notifications__wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  width: var(--core-size-1800);
  height: var(--core-size-1800);
}

.header-v2__acc-info__wrapper {
  all: unset;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: var(--core-spacing-400);
}

.header-v2__acc-info__select-arrow {
  pointer-events: none;
  transform: rotate(0);
  transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
}

[dir="ltr"] .header-v2__acc-info__select-arrow--up {
  transform: rotate(180deg);
}

[dir="rtl"] .header-v2__acc-info__select-arrow--up {
  transform: rotate(-180deg);
}

.header-v2__loader {
  display: flex;
  justify-content: space-between;
  padding: var(--core-spacing-300) var(--semantic-spacing-general-md);
}

.contract-details-header-v2 {
  display: flex;
  justify-content: center;
  height: var(--core-spacing-2000);
  padding: var(--core-spacing-400) var(--core-spacing-50);
}

.contract-details-header-v2 .arrow {
  position: absolute;
  cursor: pointer;
}

[dir="ltr"] .contract-details-header-v2 .arrow {
  left: var(--core-size-1200);
}

[dir="rtl"] .contract-details-header-v2 .arrow {
  right: var(--core-size-1200);
}

/** @define footer; weak */
.footer {
  position: fixed;
  bottom: 0;
  padding: 0 1em;
  width: 100%;
  height: 36px;
  box-sizing: border-box;
  z-index: 3;
  display: flex;
  justify-content: flex-end;
  align-items: center;
  transition: opacity 0.3s;
  backface-visibility: hidden;
  background: var(--general-main-1);
  color: var(--text-prominent);
  border-top: 1px solid var(--general-section-1);
}

.footer--is-disabled {
  border-top: none;
}

.footer--is-disabled:after {
  opacity: 1;
  pointer-events: auto;
}

.footer__links {
  display: flex;
  justify-content: space-evenly;
  align-items: center;
  flex-direction: row;
  height: 100%;
  /* fix issue with rogue tiny-popover div generated in footer links */
}

[dir="ltr"] .footer__links--left {
  margin-right: auto;
}

[dir="rtl"] .footer__links--left {
  margin-left: auto;
}

.footer__links--left:hover {
  cursor: pointer;
}

.footer__links div {
  height: inherit;
  display: inline-flex;
  align-items: center;
  position: relative;
}

.footer__links--dark-mode {
  padding: 0.8rem;
  cursor: pointer;
}

.footer__links--dark-mode:hover {
  background: var(--general-hover);
}

.footer__link {
  padding: 0 0.8em;
  text-decoration: none;
  height: 100%;
  display: inline-flex;
  align-items: center;
  position: relative;
  cursor: pointer;
}

.footer__link:hover {
  background: var(--general-hover);
}

.footer__icon {
  width: 1.6em;
  height: 1.6em;
}

@media (max-width: 600px) {
  .footer {
    display: none;
  }
}

@keyframes blinking-network-status {
  40% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
}
/** @define network-status  */
.network-status__wrapper {
  height: 1.4em;
  position: relative;
}

[dir="ltr"] .network-status__wrapper--is-mobile .network-status__circle {
  margin: 0.2em 0 0.2em -0.2em;
}

[dir="rtl"] .network-status__wrapper--is-mobile .network-status__circle {
  margin: 0.2em -0.2em 0.2em 0;
}

.network-status__tooltip {
  text-decoration-line: none;
}

[dir="ltr"] .network-status__tooltip {
  left: auto;
  left: initial;
}

[dir="rtl"] .network-status__tooltip {
  right: auto;
  right: initial;
}

.network-status__circle {
  background: var(--general-section-1);
  width: 1em;
  height: 1em;
  margin: 0.2em 1.6em;
  border-radius: 50%;
}

.network-status__circle--online {
  background: var(--text-profit-success);
}

.network-status__circle--offline {
  background: var(--text-loss-danger);
}

.network-status__circle--blinker {
  animation: blinking-network-status 0.4s alternate infinite;
  background: var(--text-profit-success);
}

/** @define server-time */
[dir="ltr"] .server-time{
  text-align: left;
}
[dir="rtl"] .server-time{
  text-align: right;
}
.server-time {
  display: inline-flex;
  align-self: center;
  padding: 0 1em;
  font-size: 1.2rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  line-height: 1.25;
  color: var(--text-general);
}

[dir="ltr"] .server-time {
  margin-right: 1em;
}

[dir="rtl"] .server-time {
  margin-left: 1em;
}

[dir="ltr"] .server-time--is-mobile {
  padding: 0 1em 0 0;
  margin-right: 0;
}

[dir="rtl"] .server-time--is-mobile {
  padding: 0 0 0 1em;
  margin-left: 0;
}

/** @define ic-settings */
.ic-settings--active {
  position: relative;
  background: var(--state-hover);
}

.ic-settings--active:after {
  content: "";
  height: 0.2em;
  width: 100%;
  position: absolute;
  top: 0;
  background: var(--text-prominent);
}

[dir="ltr"] .ic-settings--active:after {
  left: 0;
}

[dir="rtl"] .ic-settings--active:after {
  right: 0;
}

.ic-settings--active .ic-settings__icon {
  pointer-events: none;
}

[dir="ltr"] .ic-settings-language__text{
  margin-left: 0.4rem;
}

[dir="rtl"] .ic-settings-language__text{
  margin-right: 0.4rem;
}

.ic-settings--disabled {
  cursor: not-allowed;
  opacity: 0.5;
  pointer-events: none;
}

/** @define footer-regulatory-information */
.footer-regulatory-information {
  padding: 2rem;
}

[dir="ltr"] .footer-regulatory-information p{
  text-align: left;
}

[dir="rtl"] .footer-regulatory-information p{
  text-align: right;
}

.footer-regulatory-information p {
  font-size: 1.4rem;
  color: var(--text-prominent);
  font-weight: 400;
  text-transform: none;
  line-height: 1.5;
}

[dir="ltr"] .footer-regulatory-information__link{
  text-align: left;
}

[dir="rtl"] .footer-regulatory-information__link{
  text-align: right;
}

.footer-regulatory-information__link {
  font-size: 1.4rem;
  color: var(--text-prominent);
  font-weight: 700;
  text-transform: none;
  line-height: 1.5;
  color: var(--brand-red-coral);
  text-decoration: none;
}

.footer-regulatory-information__icon {
  display: flex;
  justify-content: center;
  align-items: flex-start;
  margin-bottom: 2.4rem;
}

/** @define footer-icon-separator */
.footer-icon-separator {
  height: 1.6rem !important;
}
.footer-icon-separator {
  width: 1px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--general-section-1);
  margin: 0 0.1rem;
}

.modal-root {
  width: 100vw;
  height: 100vh;
  align-items: center;
  justify-content: center;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  z-index: 9998;
  display: none;
  overflow: hidden;
  opacity: 0;
  background-color: var(--overlay-outside-dialog);
}

.modal-root:not(:empty) {
  display: flex;
  opacity: 1;
}

.modal-root--absolute {
  z-index: 9999;
}

.traders-hub-header {
  position: fixed;
  z-index: 99;
  width: 100%;
  height: 48px;
  top: 0;
  box-sizing: border-box;
  border-bottom: 1px solid var(--general-section-1);
  background-color: var(--general-main-1);
  backface-visibility: hidden;
  transition: opacity 0.3s;
  display: flex;
}

[dir="ltr"] .traders-hub-header {
  left: 0;
}

[dir="rtl"] .traders-hub-header {
  right: 0;
}

.traders-hub-header--is-disabled:after {
  opacity: 1;
  pointer-events: auto;
}

.traders-hub-header--is-hidden {
  display: none !important;
}

@media screen and (max-width: 380px) {
  .traders-hub-header__cashier-button, .traders-hub-header__logo-wrapper {
    display: none;
  }
}

@media (max-width: 1279px) {
  .traders-hub-header {
    display: flex;
    justify-content: space-between;
    height: 4rem;
  }
}

.traders-hub-header__logo-wrapper {
  display: block;
  cursor: pointer;
}

@media screen and (max-width: 380px) {
  .traders-hub-header__logo-wrapper--cashier {
    display: none;
  }
}

.traders-hub-header__menu-left {
  display: inline-flex;
  height: 47px;
  align-items: center;
}

@media (max-width: 1279px) {
  .traders-hub-header__menu-left {
    height: 3.8rem;
  }
}

.traders-hub-header__menu-left-extensions {
  display: flex;
  overflow: hidden;
}

.traders-hub-header__mobile-parent {
  display: flex;
  align-items: center;
  padding: 1rem;
}

.traders-hub-header__menu-right {
  justify-content: flex-end;
  display: inline-flex;
  flex: 1;
  align-items: center;
}

.traders-hub-header__menu-right--items {
  display: flex;
  align-items: center;
}

.traders-hub-header__menu-right--items--onboarding {
  padding: 2.5rem;
  cursor: pointer;
}

@media (max-width: 1279px) {
  .traders-hub-header__menu-right--items--onboarding {
    padding: 1rem;
  }
}

@media (max-width: 1279px) {
  [dir="ltr"] .traders-hub-header__menu-right--items--notifications {
    padding: 0 2rem 0 1rem;
  }

  [dir="rtl"] .traders-hub-header__menu-right--items--notifications {
    padding: 0 1rem 0 2rem;
  }
}

@media (max-width: 1279px) {
  [dir="ltr"] .traders-hub-header__menu-right--items--notifications__cashier {
    padding-right: 1rem;
  }

  [dir="rtl"] .traders-hub-header__menu-right--items--notifications__cashier {
    padding-left: 1rem;
  }
}

.traders-hub-header__menu-right--items--account-toggle {
  height: 47px;
}

@media (max-width: 1279px) {
  .traders-hub-header__menu-right--items--account-toggle {
    height: 3.8rem;
  }
}

@media (max-width: 1279px) {
  [dir="ltr"] .traders-hub-header__menu-right--items--account-toggle .acc-info__wrapper {
    margin-right: 0;
  }

  [dir="rtl"] .traders-hub-header__menu-right--items--account-toggle .acc-info__wrapper {
    margin-left: 0;
  }
}

.traders-hub-header__menu-right--items--account-toggle .acc-info__wrapper .acc-info__separator {
  width: auto;
  width: initial;
}

.traders-hub-header__menu-middle {
  display: flex;
  align-items: center;
  margin-left: 1rem;
  margin-right: 1rem;
  justify-content: space-between;
}

.traders-hub-header__logo {
  margin-bottom: 0.2rem !important;
}

.traders-hub-header__logo {
  height: 1.8rem;
}

[dir="ltr"] .traders-hub-header__logo {
  padding: 0 1rem 0 1.5rem;
}

[dir="rtl"] .traders-hub-header__logo {
  padding: 0 1.5rem 0 1rem;
}

@media (max-width: 1279px) {
  [dir="ltr"] .traders-hub-header__logo {
    margin-left: 0.7rem;
  }

  [dir="rtl"] .traders-hub-header__logo {
    margin-right: 0.7rem;
  }
}

.traders-hub-header__tradershub {
  display: flex;
  height: 100%;
  justify-content: center;
  align-items: center;
  cursor: pointer;
}

[dir="ltr"] .traders-hub-header__tradershub {
  padding: 0 1rem 0 1.6rem;
}

[dir="rtl"] .traders-hub-header__tradershub {
  padding: 0 1.6rem 0 1rem;
}

.traders-hub-header__tradershub:hover:not(.traders-hub-header__tradershub--active) {
  background-color: var(--general-hover);
}

.traders-hub-header__tradershub--active > .traders-hub-header__tradershub--text {
  font-weight: bold;
  color: var(--text-prominent);
}

[dir="ltr"] .traders-hub-header__tradershub--home-logo {
  padding-right: 0.8rem;
}

[dir="rtl"] .traders-hub-header__tradershub--home-logo {
  padding-left: 0.8rem;
}

.traders-hub-header__tradershub--text {
  font-size: 1.6rem;
}

.traders-hub-header__tradershub > * {
  cursor: pointer;
}

.traders-hub-header__tradershub--onboarding {
  padding: 2rem;
  cursor: pointer;
}

[dir="ltr"] .traders-hub-header__tradershub--onboarding {
  margin-right: 0.3rem;
}

[dir="rtl"] .traders-hub-header__tradershub--onboarding {
  margin-left: 0.3rem;
}

.traders-hub-header__divider {
  width: 0.1rem;
  height: 3rem;
  background: var(--general-section-2);
}

[dir="ltr"] .traders-hub-header__divider {
  margin-left: 0.8rem;
}

[dir="rtl"] .traders-hub-header__divider {
  margin-right: 0.8rem;
}

@media (max-width: 1279px) {
  .traders-hub-header__divider {
    height: 2.4rem;
  }
}

[dir="ltr"] .traders-hub-header__divider--wallets {
  margin-left: 0;
}

[dir="rtl"] .traders-hub-header__divider--wallets {
  margin-right: 0;
}

.traders-hub-header__redirect {
  display: flex;
  cursor: pointer;
}

.traders-hub-header__redirect--link {
  display: flex;
  align-items: center;
  padding: 0.5rem;
  text-decoration: none;
}

[dir="ltr"] .traders-hub-header__redirect--link {
  margin-right: 1rem;
}

[dir="rtl"] .traders-hub-header__redirect--link {
  margin-left: 1rem;
}

.traders-hub-header__redirect--cashierlink {
  display: flex;
  align-items: center;
  text-decoration: none;
  padding: 2rem;
}

[dir="ltr"] .traders-hub-header__redirect--cashierlink {
  margin-right: 1rem;
}

[dir="rtl"] .traders-hub-header__redirect--cashierlink {
  margin-left: 1rem;
}

.traders-hub-header__redirect--cashiertext {
  padding: 0.7rem;
}

.traders-hub-header__redirect--beta {
  padding: 0 0.7rem;
}

.traders-hub-header__dtrader--redirect {
  display: flex;
  align-items: center;
}

[dir="ltr"] .traders-hub-header__dtrader--redirect {
  margin-right: 1rem;
}

[dir="rtl"] .traders-hub-header__dtrader--redirect {
  margin-left: 1rem;
}

.traders-hub-header__dtrader--redirect--link {
  display: flex;
  align-items: center;
  padding: 0.5rem;
  text-decoration: none;
}

.traders-hub-header__dtrader--redirect--beta {
  padding: 0 0.5rem;
}

[dir="ltr"] .traders-hub-header__setting {
  margin-right: 2.2rem;
}

[dir="rtl"] .traders-hub-header__setting {
  margin-left: 2.2rem;
}

.traders-hub-header__setting--icon {
  cursor: pointer;
}

@media (max-width: 1279px) {
  [dir="ltr"] .traders-hub-header__notification .notifications-toggle {
    margin-right: 0;
  }

  [dir="rtl"] .traders-hub-header__notification .notifications-toggle {
    margin-left: 0;
  }
}

.traders-hub-header-wallets__logo {
  align-self: center;
  margin: 0 1.2rem;
  cursor: pointer;
}

[dir="ltr"] .traders-hub-onboarding__toggle {
  margin-right: 0.8rem;
}

[dir="rtl"] .traders-hub-onboarding__toggle {
  margin-left: 0.8rem;
}

[dir="ltr"] .account-settings-toggle {
  margin-right: 1.2rem;
}

[dir="rtl"] .account-settings-toggle {
  margin-left: 1.2rem;
}

.account-settings-toggle svg {
  height: 20px;
  width: 20px;
}
/** @define error-box */
.error-box {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  width: 100%;
  text-align: center;
  color: var(--text-colored-background);
}

/** @define login-prompt */
.login-prompt {
  height: calc(100vh - 84px);
  margin: 0 2em;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.login-prompt__icon {
  height: 6.4em;
  width: 6.4em;
  margin-bottom: 1em;
}

.login-prompt__icon-svg {
  height: 100%;
  width: 100%;
}

.login-prompt__message {
  font-size: 1.4em;
}

.media {
  margin: 0 0 24px;
}

[dir="ltr"] .media__heading{
  text-align: left;
}

[dir="rtl"] .media__heading{
  text-align: right;
}

.media__heading {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  line-height: 1.5;
  color: var(--text-prominent);
  margin: 0 0 16px;
  text-transform: none;
}

.media__heading .inline-message {
  margin-top: 1.6rem;
}

.media__icon {
  height: 120px;
  border-radius: 4px;
  min-width: 160px;
}

[dir="ltr"] .media__icon {
  margin-right: 1.6em;
}

[dir="rtl"] .media__icon {
  margin-left: 1.6em;
}

.media__icon:empty {
  background-color: var(--general-disabled);
}

[dir="ltr"] .media__description{
  text-align: left;
}

[dir="rtl"] .media__description{
  text-align: right;
}

.media__description {
  display: flex;
  justify-content: flex-start;
  align-items: flex-start;
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  line-height: 1.5;
  color: var(--text-prominent);
}

.media__form {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
  text-transform: none;
  text-transform: initial;
  color: var(--text-prominent);
}

/** @define side-menu */
.side-menu {
  overflow: hidden;
}

.side-menu__heading {
  padding: 20px 16px;
}

.side-menu__main-header-layout {
  height: 100%;
  min-width: 270px;
}

.side-menu__sub-header-layout {
  padding-top: 56px;
  height: 100%;
}

[dir="ltr"] .side-menu__sub-header-layout {
  border-left: 2px solid var(--general-main-1);
}

[dir="rtl"] .side-menu__sub-header-layout {
  border-right: 2px solid var(--general-main-1);
}

.side-menu__title {
  font-size: var(--text-size-s);
  font-weight: bold;
  margin: 0 0.8rem;
  color: var(--text-prominent);
}

.side-menu__header--active {
  background-color: var(--general-main-1);
  /* postcss-bem-linter: ignore */
}

.side-menu__header--active:hover {
  background-color: var(--general-main-1) !important;
}

.side-menu__header--active div {
  font-weight: bold;
}

.side-menu__header--disabled {
  opacity: 0.32;
  pointer-events: none;
}

.side-menu__icon {
  font-weight: bold;
}

[dir="ltr"] .side-menu__icon {
  transform: rotate(360deg);
  margin-left: auto;
}

[dir="rtl"] .side-menu__icon {
  transform: rotate(-360deg);
  margin-right: auto;
}

/* postcss-bem-linter: ignore */
.dc-vertical-tab__tab .dc-vertical-tab__header {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

[dir="ltr"] .dc-vertical-tab__tab .dc-vertical-tab__header .dc-vertical-tab__header__link {
  margin-left: 4px;
}

[dir="rtl"] .dc-vertical-tab__tab .dc-vertical-tab__header .dc-vertical-tab__header__link {
  margin-right: 4px;
}
.dc-vertical-tab__tab .dc-vertical-tab__header--active {
  /* postcss-bem-linter: ignore */
}

[dir="ltr"] .dc-vertical-tab__tab .dc-vertical-tab__header--active .dc-vertical-tab__header__link {
  margin-left: 0;
}

[dir="rtl"] .dc-vertical-tab__tab .dc-vertical-tab__header--active .dc-vertical-tab__header__link {
  margin-right: 0;
}

.dc-vertical-tab__tab .dc-vertical-tab__header--disabled {
  opacity: 0.32;
  pointer-events: none;
}

.livechat {
  display: flex;
  width: 100%;
  align-items: center;
}

[dir="ltr"] .livechat {
  padding-right: 1.6rem;
}

[dir="rtl"] .livechat {
  padding-left: 1.6rem;
}

.livechat__icon {
  width: 1.6rem;
  height: 1.6rem;
}

[dir="ltr"] .livechat__icon {
  margin-right: 1.6rem;
}

[dir="rtl"] .livechat__icon {
  margin-left: 1.6rem;
}

.livechat__icon-wrapper {
  display: flex;
  align-items: center;
}

#chat-widget-minimized {
  display: none !important;
}

/** @define cookie-banner; weak */
.cookie-banner {
  position: fixed;
  background-color: var(--general-main-2);
  box-shadow: 0 24px 24px 0 rgba(0, 0, 0, 0.08), 0 0 24px 0 rgba(0, 0, 0, 0.08);
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.5;
  color: var(--text-general);
  font-stretch: normal;
  font-style: normal;
  line-height: 1.5;
  letter-spacing: normal;
  padding: 2.8rem 0;
  bottom: 0;
  width: 100%;
  height: -moz-fit-content;
  height: fit-content;
  text-align: center;
  transition: top 0.3s ease-in-out;
  z-index: 1000;
}

@media (min-width: 320px) and (max-width: 767px) {
  .cookie-banner {
    font-size: 12px;
    font-weight: bold;
    height: -moz-fit-content;
    height: fit-content;
    padding: 2.4rem 0;
  }
}

.cookie-banner--theme-dark {
  box-shadow: 0 24px 24px 0 rgba(0, 0, 0, 0.64), 0 0 24px 0 rgba(0, 0, 0, 0.64);
}

.cookie-banner--is-closed {
  transform: translateY(152px);
}

@media (min-width: 320px) and (max-width: 767px) {
  .cookie-banner--is-closed {
    transform: translateY(168px);
  }
}

.cookie-banner .description {
  margin: 0 auto;
}

@media (min-width: 1024px) {
  .cookie-banner .description {
    width: 640px;
  }
}

@media (min-width: 320px) and (max-width: 767px) {
  .cookie-banner .description {
    max-width: 296px;
  }
}

.cookie-banner__btn-dont-accept, .cookie-banner__btn-dont-accept:hover, .cookie-banner__btn-accept, .cookie-banner__btn-accept:hover {
  margin: 20px auto 0;
  height: 40px;
  border-width: 2px;
  border-radius: 4px;
  font-stretch: normal;
  font-style: normal;
  line-height: 1.43;
  letter-spacing: normal;
}

@media (min-width: 320px) and (max-width: 767px) {
  .cookie-banner__btn-dont-accept, .cookie-banner__btn-dont-accept:hover, .cookie-banner__btn-accept, .cookie-banner__btn-accept:hover {
    height: 32px;
    border-width: 1px;
  }
}

.cookie-banner__btn-dont-accept, .cookie-banner__btn-dont-accept:hover {
  width: -moz-fit-content;
  width: fit-content;
}

[dir="ltr"] .cookie-banner__btn-dont-accept, [dir="ltr"] .cookie-banner__btn-dont-accept:hover {
  margin-right: 8px;
}

[dir="rtl"] .cookie-banner__btn-dont-accept, [dir="rtl"] .cookie-banner__btn-dont-accept:hover {
  margin-left: 8px;
}

.cookie-banner__btn-accept {
  width: -moz-fit-content;
  width: fit-content;
}

.notification-banner {
  position: relative;
  display: flex;
  background-color: var(--general-main-1);
  color: var(--text-prominent);
  border-radius: 4px;
  box-shadow: 0 4px 6px 0 var(--shadow-menu), 0 4px 6px 0 var(--shadow-menu);
  width: 100%;
  max-width: 40rem;
  min-height: 14.4rem;
  transition: transform 0.25s ease, opacity 0.25s linear;
  margin-bottom: 16px;
}

.notification-banner--enter-done {
  opacity: 1;
  transform: translateY(0);
}

.notification-banner--enter, .notification-banner--exit {
  opacity: 0;
  transform: translateY(-16px);
}

.notification-banner--left {
  width: 50%;
  min-width: 220px;
}

[dir="ltr"] .notification-banner--left {
  margin: 1.6rem 0 1.6rem 1.6rem;
}

[dir="rtl"] .notification-banner--left {
  margin: 1.6rem 1.6rem 1.6rem 0;
}

.notification-banner--right {
  position: relative;
  width: calc(100% - 138px);
  overflow: hidden;
}

@media (min-width: 1024px) {
  .notification-banner__title {
    white-space: nowrap;
  }
}

.notification-banner__description {
  margin-top: 0.8rem;
}

.notification-banner__btn-wrapper {
  display: flex;
  flex-direction: row;
  gap: 0.8rem;
  margin-top: 4rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .notification-banner__btn-wrapper {
    margin-top: 1rem;
  }
}

.notification-banner__bg {
  position: absolute;
  background-color: #ff6444;
  width: 100%;
  height: 100%;
  clip-path: polygon(0 0, 100% 0, 100% 100%, 50% 100%);
  z-index: 1;
}

[dir="ltr"] .notification-banner__bg {
  right: 0;
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}

[dir="rtl"] .notification-banner__bg {
  left: 0;
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}

.notification-banner__trustpilot .notification-banner__bg {
  max-width: 13.8rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .notification-banner__trustpilot .notification-banner__bg {
    max-width: 11rem;
  }
}

.notification-banner__img {
  position: absolute;
  bottom: -0.8rem;
  -o-object-fit: contain;
     object-fit: contain;
  height: 15.2rem;
  width: auto;
  z-index: 2;
  pointer-events: none;
}

[dir="ltr"] .notification-banner__img {
  right: 1.2rem;
}

[dir="rtl"] .notification-banner__img {
  left: 1.2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .notification-banner__img {
    height: 12rem;
    bottom: 0;
  }

  [dir="ltr"] .notification-banner__img {
    right: 0.8rem;
  }

  [dir="rtl"] .notification-banner__img {
    left: 0.8rem;
  }
}

.notification-banner__close-icon {
  position: absolute;
  z-index: 2;
  top: 1.6rem;
  cursor: pointer;
}

[dir="ltr"] .notification-banner__close-icon {
  right: 1.6rem;
}

[dir="rtl"] .notification-banner__close-icon {
  left: 1.6rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .notification-banner {
    height: 100%;
    max-height: 13.8rem;
    width: calc(100vw - 1.6rem);
    top: -0.2rem;
  }

  [dir="ltr"] .notification-banner {
    left: 0.8rem;
  }

  [dir="rtl"] .notification-banner {
    right: 0.8rem;
  }
}

.notification-promo {
  position: relative;
  display: flex;
  width: 100%;
  height: -moz-fit-content;
  height: fit-content;
  background-color: var(--general-main-1);
  box-shadow: 0 4px 6px 0 var(--shadow-menu), 0 4px 6px 0 var(--shadow-menu);
  border-radius: 4px;
  margin-bottom: 16px;
  transition: transform 0.25s ease, opacity 0.25s linear;
}

.notification-promo--enter-done {
  opacity: 1;
  transform: translateY(0);
}

.notification-promo--enter, .notification-promo--exit {
  opacity: 0;
  transform: translateY(-16px);
}

.notification-promo__img {
  position: absolute;
  -o-object-fit: fill;
     object-fit: fill;
  width: 128px;
  height: 100%;
  z-index: 12;
  pointer-events: none;
}

[dir="ltr"] .notification-promo__img {
  right: 0;
  border-radius: 0 4px 4px 0;
}

[dir="rtl"] .notification-promo__img {
  left: 0;
  border-radius: 4px 0 0 4px;
}

.notification-promo--container {
  width: 100%;
  padding: 16px;
}

.notification-promo--left {
  max-width: calc(100% - 128px);
}

.notification-promo__btn {
  margin-top: 16px;
}

.notification-promo__close-icon {
  position: absolute;
  z-index: 12;
  top: 1.6rem;
  cursor: pointer;
}

[dir="ltr"] .notification-promo__close-icon {
  right: 1.6rem;
}

[dir="rtl"] .notification-promo__close-icon {
  left: 1.6rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .notification-promo {
    height: 100%;
    max-height: 12.2rem;
    width: calc(100vw - 1.6rem);
    top: -0.2rem;
  }

  [dir="ltr"] .notification-promo {
    left: 0.8rem;
  }

  [dir="rtl"] .notification-promo {
    right: 0.8rem;
  }

  .notification-promo__btn {
    margin-top: 6px;
  }
}

.onfido-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.6rem;
}

.onfido-container__hidden {
  display: none;
}

.onfido-container-view_wrapper {
  position: relative;
  min-width: 32.8rem;
  min-height: 50rem;
  margin: auto;
}

@media (max-width: 1279px) {
  .onfido-container-view_wrapper {
    height: -moz-fit-content;
    height: fit-content;
  }
}

.onfido-container .account-form__poi-confirm-example_container {
  margin-bottom: 0;
}

.onfido-container .onfido-sdk-ui-Modal-inner {
  border-radius: 8px;
}

@media (min-width: 320px) and (max-width: 767px) {
  .onfido-container .onfido-sdk-ui-Theme-step {
    height: auto;
  }
}

@media (max-width: 1279px) {
  .onfido-container {
    padding: 1.6rem;
    height: 100%;
  }

  .onfido-container .onfido-sdk-ui-PageTitle-titleWrapper {
    margin: 2.4rem 0 0;
  }

  .onfido-container .onfido-sdk-ui-PageTitle-title {
    font-size: 2rem;
    text-align: center;
  }

  .onfido-container .onfido-sdk-ui-PageTitle-titleSpan {
    font-size: 2rem;
  }
}

.onfido-container .onfido-sdk-ui-Camera-webcamContainer {
  width: -webkit-fill-available;
}

[dir="ltr"] .onfido-container .onfido-sdk-ui-Camera-webcamContainer {
  left: auto;
}

[dir="rtl"] .onfido-container .onfido-sdk-ui-Camera-webcamContainer {
  right: auto;
}

.onfido-container__disabled {
  opacity: 0.5;
  pointer-events: none;
}

.onfido-container__info-message {
  width: 100% !important;
}

.onfido-container__info-message {
  position: absolute;
  top: 1.6rem;
  z-index: 1;
  max-width: -moz-max-content;
  max-width: max-content;
}

[dir="ltr"] .onfido-container__info-message {
  left: 50%;
  transform: translate(-50%);
}

[dir="rtl"] .onfido-container__info-message {
  right: 50%;
  transform: translate(50%);
}

@media (max-width: 1279px) {
  .onfido-container__info-message {
    margin-top: 1.6rem;
  }
}

.onfido-container__info-message .dc-hint-box {
  margin-left: 0.8rem;
  margin-right: 0.8rem;
}

.onfido-container__status-message {
  background-color: var(--transparent-correct-message);
  justify-content: flex-start;
  transition: transform 0.35s ease, opacity 0.35s linear;
  transform-origin: top;
  opacity: 1;
  width: 98%;
}

.onfido-container__status-message--exit {
  transform: scale(1, 0);
  opacity: 0;
}

.onfido-container__status-message_container {
  position: absolute;
  top: 0.4rem;
  min-height: 3.4rem;
  text-align: center;
  z-index: 1;
  width: 100%;
}

.account-form__fieldset .dc-autocomplete,
.account-form__fieldset .dc-select-native {
  margin-bottom: 3.2rem;
}

@media (max-width: 1279px) {
  .account-form__fieldset--email-consent {
    margin-bottom: 1.6rem;
  }
}

@media (max-width: 1279px) {
  .account-form__financial-assessment .dc-select-native {
    margin-bottom: 0;
  }
}

.account-form__poi-inline-message {
  margin-bottom: 1.6rem;
}

.account-form__poi-confirm-example {
  display: flex;
  flex-direction: column;
  gap: 0.8rem;
}

@media (max-width: 1279px) {
  .account-form__poi-confirm-example {
    height: -moz-fit-content;
    height: fit-content;
  }
}

.account-form__poi-confirm-example .account-form__fieldset {
  max-width: none;
  max-width: initial;
}

.account-form__poi-confirm-example--status-message {
  margin-top: 1.6rem;
  text-align: center;
  width: 100%;
}

.account-form__poi-confirm-example_container {
  border: 1px solid var(--general-active);
  border-radius: 0.8rem;
}

@media (min-width: 1280px) {
  .account-form__poi-confirm-example_container {
    padding: 1.6rem;
  }
}

@media (max-width: 1279px) {
  .account-form__poi-confirm-example_container {
    padding: 1.6rem 1.6rem 0;
    margin-bottom: 2.4rem;
  }
}

.account-form__poi-confirm-example_wrapper {
  transition: transform 0.35s ease, opacity 0.35s linear;
  transform-origin: top;
  opacity: 1;
  padding: 1.6rem;
  max-width: 67rem;
}

@media (max-width: 1279px) {
  .account-form__poi-confirm-example_wrapper {
    padding-left: 0;
    padding-right: 0;
    height: 100%;
  }
}

.account-form__poi-confirm-example_wrapper--exit {
  transform: scale(1, 0);
  opacity: 0;
}

.account-form__poi-confirm-example .da-inline-note-with-icon {
  margin-top: 0;
  padding: 0.8rem;
  display: flex;
  background: var(--status-alert-background);
  border-radius: 4px;
  gap: 0.8rem;
  line-height: 1.4rem;
}

.account-form__poi-confirm-example .account__scrollbars_container {
  padding: 0;
}

.account-form__poi-confirm-example .account__scrollbars_container--grid-layout {
  grid-gap: 0;
}

@media (max-width: 1279px) {
  .account-form__poi-confirm-example .account-form__section-side-note {
    margin-top: 1.6rem;
    justify-content: center;
    display: flex;
  }
}

@media (min-width: 1280px) {
  .account-form__poi-confirm-example .account-form__section {
    margin-top: 1.6rem;
  }
}

.account-form__poi-confirm-example .account-form__section-content .account-form__fieldset {
  margin-bottom: 0;
}

.account-form__poi-confirm-example .account-form__section-content .account-form__fieldset .dc-input {
  margin-bottom: 1rem;
}

.account-form__poi-confirm-example .account-form__section-content .account-form__fieldset .dc-input--error,
.account-form__poi-confirm-example .account-form__section-content .account-form__fieldset .dc-input.dc-input--hint {
  margin-bottom: 3.8rem;
}

.account-form__poi-confirm-example--button {
  padding: 0;
  margin: 0;
  background-color: transparent;
  background-color: initial;
  border: medium none currentColor;
  border: initial;
}

.account-form__poi-confirm-example--button__disabled > * {
  cursor: not-allowed;
}

.account-form__poi-additional-information {
  margin-top: 2rem;
}

.account-form__phone-container {
  display: flex;
}

.account-form__phone-container .dc-autocomplete {
  width: 40%;
}

[dir="ltr"] .account-form__phone-container .dc-autocomplete .dc-input__container {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

[dir="rtl"] .account-form__phone-container .dc-autocomplete .dc-input__container {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

@media (max-width: 1279px) {
  .account-form__phone-container .dc-select-native {
    width: 40%;
  }

  [dir="ltr"] .account-form__phone-container .dc-select-native__container {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  [dir="rtl"] .account-form__phone-container .dc-select-native__container {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
}

[dir="ltr"] .account-form__phone-container--input .dc-input__container {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

[dir="rtl"] .account-form__phone-container--input .dc-input__container {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.account-form__section {
  display: grid;
  align-items: center;
}

@media (min-width: 1280px) {
  .account-form__section {
    grid-template-areas: "section-side-note section-content";
    grid-template-columns: auto 1fr;
    grid-gap: 1rem;
  }
}

@media (max-width: 1279px) {
  .account-form__section {
    grid-template-areas: "section-side-note" "section-content";
  }
}

.account-form__section-side-note {
  grid-area: section-side-note;
}

@media (max-width: 1279px) {
  .account-form__section-side-note {
    margin-top: 0;
    margin-top: initial;
    width: 100%;
    margin-bottom: 0.8rem;
  }
}

@media (max-width: 1279px) {
  .account-form__section-side-note__example {
    flex-direction: column;
  }
}

.account-form__section-side-note__example-image {
  align-self: center;
}

.account-form__section-content {
  grid-area: section-content;
}

@media (max-width: 1279px) {
  .account-form__section-content {
    width: 100%;
  }
}

@media (min-width: 1280px) {
  .account-form__section--reversed {
    grid-template-areas: "section-content section-side-note";
    grid-template-columns: 1fr auto;
  }
}

@media (max-width: 1279px) {
  .account-form__trading-assessment .dc-form-submit-button {
    justify-content: center;
  }

  .account-form__trading-assessment .dc-form-submit-button .dc-btn {
    max-width: 56.8rem;
    width: 100%;
  }
}

[dir="ltr"] .account-form__footer{
  left: 0;
}

[dir="rtl"] .account-form__footer{
  right: 0;
}

.account-form__footer {
  height: 8rem;
  position: absolute;
  bottom: 0;
  display: flex;
  width: 100%;
  padding: 1.6rem 2.4rem;
  align-items: center;
  justify-content: flex-end;
  z-index: 4;
  border-top: 1px solid var(--general-section-1);
  background-color: var(--general-main-1);
}

[dir="ltr"] .account-form__footer {
  border-radius: 0 4px 4px 0;
}

[dir="rtl"] .account-form__footer {
  border-radius: 4px 0 0 4px;
}

@media (min-width: 1280px) {
  .account-form__footer {
    max-width: 100%;
  }
}

@media (max-width: 1279px) {
  [dir="ltr"] .account-form__footer{
    left: 0;
  }
  [dir="rtl"] .account-form__footer{
    right: 0;
  }
  .account-form__footer {
    flex-direction: row;
    justify-content: center;
    width: 100%;
    align-items: center;
  }
}

[dir="ltr"] .account-form__footer .back-btn{
  margin-right: 0.8rem;
}

[dir="rtl"] .account-form__footer .back-btn{
  margin-left: 0.8rem;
}

@media (min-width: 601px) and (max-width: 1279px) {
  .account-form__footer .back-btn {
    width: 56.8rem;
  }
}

@media (max-width: 600px) {
  .account-form__footer .back-btn {
    width: 100%;
  }
}

[dir="ltr"] .account-form__footer .back-btn .back-btn-icon{
  margin-right: 0.8rem;
}

[dir="rtl"] .account-form__footer .back-btn .back-btn-icon{
  margin-left: 0.8rem;
}

.account-form__footer .back-btn span {
  display: inline-flex;
  align-items: center;
}

.account-form__footer-note {
  color: var(--text-prominent);
  font-size: var(--text-size-xxs);
  line-height: 1.5;
  display: flex;
  justify-content: end;
  align-items: center;
  min-width: 27.6rem;
  max-width: 36.6rem;
  height: 3.6rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .account-form__footer-note {
    justify-content: start;
  }
}

@media (min-width: 601px) and (max-width: 1279px) {
  .account-form__footer-note {
    justify-content: center;
  }
}

@media (max-width: 1279px) {
  .account-form__footer-note {
    width: 100%;
  }

  .account-form__footer-note--dashboard {
    margin: 0 1.6rem;
  }

  [dir="ltr"] .account-form__footer-note--dashboard {
    text-align: left;
  }

  [dir="rtl"] .account-form__footer-note--dashboard {
    text-align: right;
  }
}

.account-form__footer-btn {
  height: 4rem;
}

.account-form__footer-btn-wrapper {
  align-items: normal;
  display: flex;
  flex-direction: row;
}

@media (max-width: 1279px) {
  .account-form__footer-btn-wrapper {
    flex-direction: column;
  }
}

.account-form__footer-btn-dashboard .dc-btn__text {
  color: var(--text-prominent);
}

.account-form__footer-btn-dashboard:hover {
  background-color: transparent !important;
  background-color: initial !important;
}

@media (min-width: 1280px) {
  [dir="ltr"] .account-form__footer-btn {
    margin-left: 1.6rem;
  }

  [dir="rtl"] .account-form__footer-btn {
    margin-right: 1.6rem;
  }

  .account-form__footer-btn-wrapper--dashboard {
    display: flex;
    justify-content: space-between;
  }
}

@media (min-width: 601px) and (max-width: 1279px) {
  .account-form__footer-btn {
    width: 100%;
  }
}

@media (max-width: 600px) {
  .account-form__footer-btn--has-bottom-margin {
    margin-bottom: 1.6rem;
  }
}

@media (min-width: 601px) and (max-width: 1279px) {
  .account-form__footer-btn {
    width: 56.8rem;
    margin: auto;
  }
}

.account-form__footer--dashboard {
  width: 68.5rem;
}

[dir="ltr"] .account-form__footer--dashboard {
  margin-left: 6rem;
}

[dir="rtl"] .account-form__footer--dashboard {
  margin-right: 6rem;
}

@media (max-width: 1279px) {
  .account-form__footer--dashboard {
    width: 100vw;
  }

  [dir="ltr"] .account-form__footer--dashboard {
    margin-left: 0;
    margin-left: initial;
  }

  [dir="rtl"] .account-form__footer--dashboard {
    margin-right: 0;
    margin-right: initial;
  }

  .account-form__footer--dashboard .account-form__footer-btn {
    min-width: 35%;
  }

  .account-form__footer--dashboard .account-form__footer-btn-wrapper {
    flex-direction: row;
  }

  .account-form__footer--dashboard > div {
    display: flex;
    justify-content: space-around;
  }
}

[dir="ltr"] .account-form__footer-poa {
  margin-left: 0;
  margin-left: initial;
}

[dir="rtl"] .account-form__footer-poa {
  margin-right: 0;
  margin-right: initial;
}

.account-form__footer-all-fields-required {
  padding-bottom: 2.4rem;
  padding-top: 0.8rem;
}

@media (max-width: 1279px) {
  .account-form__footer {
    position: fixed;
    flex-direction: column;
    height: auto;
    align-items: initial;
    border-top: 2px solid var(--general-section-1);
    width: 100vw;
  }
}

@media (min-width: 601px) and (max-width: 1279px) {
  .account-form__footer {
    padding: 1.6rem 0;
  }
}

.account__scrollbars_container {
  height: 100%;
  padding-bottom: 6.4rem;
}

.account__scrollbars_container-wrapper {
  overflow-x: hidden;
  overflow-y: auto;
}

.account__scrollbars_container--grid-layout {
  grid-gap: 4px;
}

.account__scrollbars_container--grid-layout .dc-dropdown-container .dc-dropdown__display-text,
.account__scrollbars_container--grid-layout .dc-dropdown-container .dc-list__item-text {
  text-transform: inherit;
}

@media (max-width: 1279px) {
  .account__scrollbars_container--grid-layout {
    padding: 0 1.6rem;
    overflow-x: hidden;
    overflow-y: auto;
    grid-template-rows: auto auto 1fr;
  }

  .account__scrollbars_container--grid-layout .account-form__header:first-child {
    padding-top: 2.4rem;
    margin-bottom: 3.2rem;
  }
}

@media (min-width: 1280px) {
  [dir="ltr"] .account__scrollbars_container{
    padding-left: 16px;
  }
  [dir="rtl"] .account__scrollbars_container{
    padding-right: 16px;
  }
  [dir="ltr"] .account__scrollbars_container{
    padding-right: 16px;
  }
  [dir="rtl"] .account__scrollbars_container{
    padding-left: 16px;
  }
}

@media (min-width: 601px) and (max-width: 1279px) {
  [dir="ltr"] .account__scrollbars_container{
    padding-left: 0;
  }
  [dir="rtl"] .account__scrollbars_container{
    padding-right: 0;
  }
  [dir="ltr"] .account__scrollbars_container{
    padding-right: 0;
  }
  [dir="rtl"] .account__scrollbars_container{
    padding-left: 0;
  }
}

@media (max-width: 600px) {
  .account__scrollbars_container {
    height: auto;
    height: initial;
    padding-top: 0;
    padding-top: initial;
    padding-bottom: 0;
    padding-bottom: initial;
  }
}

@media (max-width: 1279px) {
  .account-management__message-content {
    padding-top: 2.4rem;
  }
}

@media (min-width: 1280px) {
  .account-management__container {
    max-width: 68.2rem;
  }
}

@media (max-width: 1279px) {
  .account-management__container {
    margin: 0 auto;
  }
}

.idv-layout {
  width: 100%;
}

.idv-layout .poi-form-on-signup__fields .proof-of-identity__container {
  width: 100%;
  padding: 0;
}

.idv-layout .poi-form-on-signup__fields .proof-of-identity__fieldset {
  margin-bottom: 2rem;
}

@media (max-width: 1279px) {
  .idv-layout .poi-form-on-signup__fields .proof-of-identity__fieldset {
    margin-bottom: 1.6rem;
  }
}

@media (min-width: 1280px) {
  .idv-layout .poi-form-on-signup__fields .proof-of-identity__fieldset-input {
    margin-bottom: 0;
    margin-bottom: initial;
  }
}

.idv-layout .poi-form-on-signup__fields .proof-of-identity__fieldset-container {
  display: flex;
  flex-direction: column;
}

.idv-layout .additional-field {
  margin-bottom: 2rem !important;
}

.idv-layout .additional-field {
  margin-top: 0.8rem;
}

@media (max-width: 1279px) {
  .idv-layout .additional-field {
    margin-top: 1.6rem;
  }
}

.idv-layout .additional-field .dc-input {
  margin-bottom: 0;
  margin-bottom: initial;
}

.idv-layout .additional-field .dc-input__bottom-label {
  margin-bottom: -2rem;
}

.account-form_poa .account-form__section {
  align-items: initial;
}

.account-form_poa .account-form__section-side-note {
  width: 26rem;
}

.account-form_poa .account-form__section-content {
  width: 40rem;
}

@media (max-width: 1279px) {
  .account-form_poa .account-form__section-content {
    width: 100%;
  }
}

.account-form_poa .account-form__fieldset {
  max-width: none;
  max-width: initial;
  margin-top: 1.6rem;
  display: flex;
  flex-direction: column;
}

.account-form_poa .account__scrollbars_container {
  padding-top: 0;
  padding-bottom: 0;
}

[dir="ltr"] .account-form_poa .account__scrollbars_container {
  padding-left: 0;
}

[dir="rtl"] .account-form_poa .account__scrollbars_container {
  padding-right: 0;
}

[dir="ltr"] .account-form_poa-submit-error {
  justify-content: left;
}

[dir="rtl"] .account-form_poa-submit-error {
  justify-content: right;
}

@media (min-width: 1280px) {
  .file-uploader__container {
    margin: 1.6rem 0;
    padding: 1.6rem 2.4rem;
    border-radius: 8px;
    border: 1px solid var(--border-normal);
  }
}

.file-uploader__container .files-description__title {
  margin-bottom: 1.6rem;
}

.file-uploader__container .files-description li {
  list-style-type: disc;
}

[dir="ltr"] .file-uploader__container .files-description li {
  margin-left: 2.4rem;
}

[dir="rtl"] .file-uploader__container .files-description li {
  margin-right: 2.4rem;
}

.file-uploader__container .files-description li::marker {
  font-size: 1.2rem;
}

.file-uploader__file-dropzone-wrapper {
  flex: 1;
  height: 13.2rem;
  position: relative;
}

.file-uploader__file-dropzone-wrapper .dc-file-dropzone {
  border-radius: 8px;
}

.file-uploader__file-dropzone-wrapper .dc-file-dropzone__message {
  max-width: none;
  max-width: initial;
}

.file-uploader__file-dropzone-wrapper .dc-file-dropzone__message-subtitle {
  font-size: 1.4rem;
  font-weight: bold;
  display: flex;
  flex-direction: column;
  gap: 0.8rem;
  margin-top: 1.6rem;
}

.file-uploader__file-title {
  margin: 2.4rem 0 1.6rem;
}

.file-uploader__file-supported-formats {
  display: flex;
  justify-content: space-between;
  margin: 1.6rem 0 2.4rem;
}

@media (max-width: 1279px) {
  .file-uploader__file-supported-formats {
    margin-bottom: 1.6rem;
  }
}

@media (max-width: 1279px) {
  .file-uploader__file-supported-formats span {
    max-width: 14rem;
  }
}

@media (max-width: 1279px) {
  .file-uploader__file {
    flex: initial;
    margin-bottom: 2.4rem;
    height: 15rem;
  }
}

.file-uploader__remove-btn {
  position: absolute;
  width: 1.6rem;
  height: 1.6rem;
  top: 0.8rem;
  cursor: pointer;
  transition: transform 0.25s linear;
}

[dir="ltr"] .file-uploader__remove-btn {
  right: 0.8rem;
}

[dir="rtl"] .file-uploader__remove-btn {
  left: 0.8rem;
}

.file-uploader__remove-btn:hover {
  transform: scale(1.25, 1.25);
}

.file-uploader__remove-btn--error circle {
  fill: var(--status-danger);
}

.file-uploader__remove-btn-container {
  position: absolute;
  top: 0;
  width: 100%;
  height: 100%;
}

[dir="ltr"] .file-uploader__remove-btn-container {
  left: 0;
}

[dir="rtl"] .file-uploader__remove-btn-container {
  right: 0;
}

.proof-of-identity {
  width: 100%;
  height: 100%;
}

.proof-of-identity__main-container {
  max-width: 68.2rem;
}

@media (min-width: 1280px) {
  .proof-of-identity__main-container {
    height: 100%;
  }
}

@media (max-width: 1279px) {
  .proof-of-identity__main-container {
    max-width: 100%;
    overflow: hidden;
  }
}

.proof-of-identity .min-height .idv-layout {
  min-height: 30vh;
}

@media (max-width: 1279px) {
  .proof-of-identity .min-height {
    min-height: 0;
    min-height: initial;
  }
}

.proof-of-identity__container {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  height: 100%;
  padding-bottom: 1.6rem;
}

@media (max-width: 1279px) {
  .proof-of-identity__container {
    overflow-y: scroll;
    padding: 0 1.6rem;
  }

  .proof-of-identity__container--status {
    height: 100%;
    width: 100%;
    padding-top: 2.4rem;
  }
}

.proof-of-identity__container--reset {
  align-items: normal;
}

@media (max-width: 1279px) {
  .proof-of-identity__container--reset {
    overflow-y: visible;
    overflow-y: initial;
  }
}

@media (max-width: 1279px) {
  .proof-of-identity__container--reset .proof-of-identity__submit-button {
    width: 100%;
  }
}

@media (min-width: 1280px) {
  .proof-of-identity__container--reset .form-body {
    z-index: 5;
  }
}

.proof-of-identity__container--reset .account__scrollbars_container--grid-layout {
  padding: 0;
}

.proof-of-identity__container .icon {
  width: 128px;
  height: 128px;
  margin-bottom: 2.6rem;
}

@media (min-width: 1280px) {
  .proof-of-identity__container .icon {
    margin-top: 5.2rem;
  }
}

@media (max-width: 1279px) {
  .proof-of-identity__container .icon {
    width: 72px;
    height: 72px;
  }
}

.proof-of-identity__container .external-dropdown .dc-dropdown-list {
  z-index: 5;
}

.proof-of-identity .continue-trade {
  margin-top: 0 !important;
  margin-top: initial !important;
}

.proof-of-identity__redirection .dc-btn {
  margin-top: 3.2rem;
  height: 4rem;
}

@media (max-width: 1279px) {
  .proof-of-identity__redirection .dc-btn {
    margin: 1.6rem 0;
    padding: 1.6rem;
    width: 100%;
  }
}

.proof-of-identity__country-container {
  align-items: flex-start;
}

.proof-of-identity__country-container .proof-of-identity__fieldset {
  width: 100%;
}

@media (max-width: 1279px) {
  .proof-of-identity__country-container .proof-of-identity__fieldset {
    margin-top: 0;
  }

  .proof-of-identity__country-container .proof-of-identity__fieldset .proof-of-identity__dropdown-container {
    margin-top: 0;
    overflow: visible;
  }
}

.proof-of-identity__country-text {
  margin-bottom: 1.6rem;
}

@media (max-width: 1279px) {
  .proof-of-identity__text {
    text-align: center;
  }
}

.proof-of-identity__dropdown-container {
  margin-top: 1.6rem;
}

.proof-of-identity__inner-container {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width: 100%;
}

@media (max-width: 1279px) {
  .proof-of-identity__inner-container {
    flex-direction: column;
  }
}

.proof-of-identity__header {
  margin-bottom: 1.6rem;
}

@media (max-width: 1279px) {
  .proof-of-identity__header {
    margin: 1.6rem 0;
  }
}

.proof-of-identity__footer.external-footer {
  padding: 0;
  padding: initial;
  position: static;
  position: initial;
  top: auto;
  top: initial;
  bottom: auto;
  bottom: initial;
  border: none;
  height: -moz-fit-content;
  height: fit-content;
  z-index: 4;
}

.proof-of-identity__footer {
  display: flex;
  align-items: center;
  justify-content: flex-end;
  bottom: 0;
}

@media (min-width: 1280px) {
  .proof-of-identity__footer {
    max-width: 68.2rem;
  }
}

@media (max-width: 1279px) {
  .proof-of-identity__footer {
    flex-direction: row;
    width: 100%;
    justify-content: center;
  }
}

@media (max-width: 1279px) {
  .proof-of-identity__footer .proof-of-identity__submit-button {
    width: 55.2rem;
    align-items: center;
    justify-content: center;
  }
}

[dir="ltr"] .proof-of-identity__footer-alert {
  margin-right: auto;
}

[dir="rtl"] .proof-of-identity__footer-alert {
  margin-left: auto;
}

.proof-of-identity__fieldset {
  width: 39.5rem;
}

@media (max-width: 1279px) {
  .proof-of-identity__fieldset {
    width: 94%;
    margin: 0.4rem 0 3.2rem;
  }
}

.proof-of-identity__fieldset .country-dropdown {
  height: 100%;
}

.proof-of-identity__fieldset-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

@media (max-width: 1279px) {
  .proof-of-identity__fieldset-container {
    width: 100%;
  }
}

.proof-of-identity__fieldset-input {
  width: 39.5rem;
}

@media (max-width: 1279px) {
  .proof-of-identity__fieldset-input {
    width: 94%;
    margin-top: 0.4rem;
  }
}

[dir="ltr"] .proof-of-identity__sample-container {
  margin-left: 1.6rem;
}

[dir="rtl"] .proof-of-identity__sample-container {
  margin-right: 1.6rem;
}

@media (max-width: 1279px) {
  .proof-of-identity__sample-container {
    width: 94%;
  }

  [dir="ltr"] .proof-of-identity__sample-container {
    margin-left: 0;
    margin-left: initial;
  }

  [dir="rtl"] .proof-of-identity__sample-container {
    margin-right: 0;
    margin-right: initial;
  }
}

.proof-of-identity__sample-container-external {
  margin-top: 2.8rem;
}

.proof-of-identity__image-container {
  width: -moz-fit-content;
  width: fit-content;
  height: -moz-fit-content;
  height: fit-content;
  padding: 0.8rem;
  border-radius: 4px;
  background-color: #f2f3f4;
}

.proof-of-identity__image {
  max-width: 24.5rem;
  border-radius: 4px;
  -o-object-fit: contain;
     object-fit: contain;
}

@media (max-width: 1279px) {
  .proof-of-identity__image {
    max-width: calc(95vw - 16px);
  }
}

.proof-of-identity__redirect {
  width: auto !important;
}

.proof-of-identity .text {
  display: block;
}

.proof-of-identity .btm-spacer {
  margin-bottom: 1.6rem;
}

.proof-of-identity__failed-message {
  margin: 1.6rem auto;
  border-radius: 8px;
  width: 100%;
}

.proof-of-identity__mismatch-container {
  height: 100%;
}

@media (min-width: 1280px) {
  .proof-of-identity__mismatch-container .idv-form {
    margin-bottom: 1.6rem;
  }
}

@media (min-width: 1280px) {
  .proof-of-identity__mismatch-container .account__scrollbars_container {
    padding-top: 0;
  }
}

@media (max-width: 1279px) {
  .proof-of-identity__mismatch-container .account__scrollbars_container--grid-layout {
    margin-top: 2.4rem;
  }
}

.proof-of-identity__mismatch-container .account-form__header.details {
  margin-top: 0;
  margin-top: initial;
}

@media (max-width: 1279px) {
  .formik__confirmation-checkbox {
    margin-bottom: 1.6rem;
  }
}

.focus-field {
  border-radius: 4px;
  border: 1px solid var(--text-prominent);
}

.wallet-card__usd-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(244, 67, 54, 0.24) 0%, rgba(40, 57, 145, 0.48) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__usd-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(244, 67, 54, 0.24) 0%, rgba(40, 57, 145, 0.48) 100%) #ffffff;
  }
}

.wallet-card__usd-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(244, 67, 54, 0.24) 0%, rgba(40, 57, 145, 0.48) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__usd-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(244, 67, 54, 0.4) 0%, rgba(244, 67, 54, 0.16) 50.52%, rgba(40, 57, 145, 0.56) 100%) #151717;
  }
}

.wallet-header__usd-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(244, 67, 54, 0.4) 0%, rgba(244, 67, 54, 0.16) 50.52%, rgba(40, 57, 145, 0.56) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__usd-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(244, 67, 54, 0.4) 0%, rgba(244, 67, 54, 0.16) 50.52%, rgba(40, 57, 145, 0.56) 100%) #ffffff;
  }
}

.wallet-header__usd-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(244, 67, 54, 0.4) 0%, rgba(244, 67, 54, 0.16) 50.52%, rgba(40, 57, 145, 0.56) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__usd-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(244, 67, 54, 0.4) 0%, rgba(244, 67, 54, 0.16) 50.52%, rgba(40, 57, 145, 0.56) 100%) #151717;
  }
}

.wallet-card__aud-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(13, 180, 61, 0.24) 0%, rgba(255, 205, 0, 0.48) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__aud-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(13, 180, 61, 0.24) 0%, rgba(255, 205, 0, 0.48) 100%) #ffffff;
  }
}

.wallet-card__aud-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(13, 180, 61, 0.24) 0%, rgba(255, 205, 0, 0.48) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__aud-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(13, 180, 61, 0.24) 0%, rgba(255, 205, 0, 0.48) 100%) #151717;
  }
}

.wallet-header__aud-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(13, 180, 61, 0.4) 0%, rgba(13, 180, 61, 0.16) 50.52%, rgba(255, 205, 0, 0.56) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__aud-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(13, 180, 61, 0.4) 0%, rgba(13, 180, 61, 0.16) 50.52%, rgba(255, 205, 0, 0.56) 100%) #ffffff;
  }
}

.wallet-header__aud-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(13, 180, 61, 0.4) 0%, rgba(13, 180, 61, 0.16) 50.52%, rgba(255, 205, 0, 0.56) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__aud-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(13, 180, 61, 0.4) 0%, rgba(13, 180, 61, 0.16) 50.52%, rgba(255, 205, 0, 0.56) 100%) #151717;
  }
}

.wallet-card__eur-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.24) 0%, rgba(248, 209, 46, 0.48) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__eur-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.24) 0%, rgba(248, 209, 46, 0.48) 100%) #ffffff;
  }
}

.wallet-card__eur-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.24) 0%, rgba(248, 209, 46, 0.48) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__eur-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.24) 0%, rgba(248, 209, 46, 0.48) 100%) #151717;
  }
}

.wallet-header__eur-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.4) 0%, rgba(40, 57, 145, 0.16) 50.52%, rgba(248, 209, 46, 0.56) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__eur-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.4) 0%, rgba(40, 57, 145, 0.16) 50.52%, rgba(248, 209, 46, 0.56) 100%) #ffffff;
  }
}

.wallet-header__eur-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.4) 0%, rgba(40, 57, 145, 0.16) 50.52%, rgba(248, 209, 46, 0.56) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__eur-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.4) 0%, rgba(40, 57, 145, 0.16) 50.52%, rgba(248, 209, 46, 0.56) 100%) #151717;
  }
}

.wallet-card__gbp-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.24) 0%, rgba(40, 57, 145, 0.24) 0.01%, rgba(244, 67, 54, 0.48) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__gbp-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.24) 0%, rgba(40, 57, 145, 0.24) 0.01%, rgba(244, 67, 54, 0.48) 100%) #ffffff;
  }
}

.wallet-card__gbp-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.24) 0%, rgba(40, 57, 145, 0.24) 0.01%, rgba(244, 67, 54, 0.48) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__gbp-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.24) 0%, rgba(40, 57, 145, 0.24) 0.01%, rgba(244, 67, 54, 0.48) 100%) #151717;
  }
}

.wallet-header__gbp-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.4) 0%, rgba(40, 57, 145, 0.16) 50.52%, rgba(244, 67, 54, 0.56) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__gbp-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.4) 0%, rgba(40, 57, 145, 0.16) 50.52%, rgba(244, 67, 54, 0.56) 100%) #ffffff;
  }
}

.wallet-header__gbp-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.4) 0%, rgba(40, 57, 145, 0.16) 50.52%, rgba(244, 67, 54, 0.56) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__gbp-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(40, 57, 145, 0.4) 0%, rgba(40, 57, 145, 0.16) 50.52%, rgba(244, 67, 54, 0.56) 100%) #151717;
  }
}

.wallet-card__p2p-bg {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(255, 68, 79, 0.24) 0%, rgba(255, 100, 68, 0.48) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__p2p-bg {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(255, 68, 79, 0.24) 0%, rgba(255, 100, 68, 0.48) 100%) #ffffff;
  }
}

.wallet-card__p2p-bg--dark {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(255, 68, 79, 0.24) 0%, rgba(255, 100, 68, 0.48) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__p2p-bg--dark {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(255, 68, 79, 0.24) 0%, rgba(255, 100, 68, 0.48) 100%) #151717;
  }
}

.wallet-header__p2p-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(255, 68, 79, 0.4) 0%, rgba(255, 68, 79, 0.16) 50.52%, rgba(255, 100, 68, 0.56) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__p2p-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(255, 68, 79, 0.4) 0%, rgba(255, 68, 79, 0.16) 50.52%, rgba(255, 100, 68, 0.56) 100%) #ffffff;
  }
}

.wallet-header__p2p-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(255, 68, 79, 0.4) 0%, rgba(255, 68, 79, 0.16) 50.52%, rgba(255, 100, 68, 0.56) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__p2p-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(255, 68, 79, 0.4) 0%, rgba(255, 68, 79, 0.16) 50.52%, rgba(255, 100, 68, 0.56) 100%) #151717;
  }
}

.wallet-card__payment-agent-bg {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(151, 151, 151, 0.24) 0%, rgba(178, 194, 195, 0.48) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__payment-agent-bg {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(151, 151, 151, 0.24) 0%, rgba(178, 194, 195, 0.48) 100%) #ffffff;
  }
}

.wallet-card__payment-agent-bg--dark {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(151, 151, 151, 0.24) 0%, rgba(178, 194, 195, 0.48) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__payment-agent-bg--dark {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(151, 151, 151, 0.24) 0%, rgba(178, 194, 195, 0.48) 100%) #151717;
  }
}

.wallet-header__payment-agent-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(151, 151, 151, 0.4) 0%, rgba(151, 151, 151, 0.16) 50.52%, rgba(178, 194, 195, 0.56) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__payment-agent-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(151, 151, 151, 0.4) 0%, rgba(151, 151, 151, 0.16) 50.52%, rgba(178, 194, 195, 0.56) 100%) #ffffff;
  }
}

.wallet-header__payment-agent-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(151, 151, 151, 0.4) 0%, rgba(151, 151, 151, 0.16) 50.52%, rgba(178, 194, 195, 0.56) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__payment-agent-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(151, 151, 151, 0.4) 0%, rgba(151, 151, 151, 0.16) 50.52%, rgba(178, 194, 195, 0.56) 100%) #151717;
  }
}

.wallet-card__btc-bg {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(247, 147, 27, 0.24) 0%, rgba(247, 199, 27, 0.477) 99.99%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__btc-bg {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(247, 147, 27, 0.24) 0%, rgba(247, 199, 27, 0.477) 99.99%) #ffffff;
  }
}

.wallet-card__btc-bg--dark {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(247, 147, 27, 0.24) 0%, rgba(247, 199, 27, 0.477) 99.99%, rgba(255, 100, 68, 0.48) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__btc-bg--dark {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(247, 147, 27, 0.24) 0%, rgba(247, 199, 27, 0.477) 99.99%, rgba(255, 100, 68, 0.48) 100%) #151717;
  }
}

.wallet-header__btc-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(247, 147, 27, 0.4) 0%, rgba(247, 147, 27, 0.16) 50.52%, rgba(247, 199, 27, 0.4) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__btc-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(247, 147, 27, 0.4) 0%, rgba(247, 147, 27, 0.16) 50.52%, rgba(247, 199, 27, 0.4) 100%) #ffffff;
  }
}

.wallet-header__btc-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(247, 147, 27, 0.4) 0%, rgba(247, 147, 27, 0.16) 50.52%, rgba(247, 199, 27, 0.4) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__btc-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(247, 147, 27, 0.4) 0%, rgba(247, 147, 27, 0.16) 50.52%, rgba(247, 199, 27, 0.4) 100%) #151717;
  }
}

.wallet-card__eth-bg {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(82, 86, 127, 0.24) 0%, rgba(130, 140, 173, 0.48) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__eth-bg {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(82, 86, 127, 0.24) 0%, rgba(130, 140, 173, 0.48) 100%) #ffffff;
  }
}

.wallet-card__eth-bg--dark {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(82, 86, 127, 0.24) 0%, rgba(130, 140, 173, 0.48) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__eth-bg--dark {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(82, 86, 127, 0.24) 0%, rgba(130, 140, 173, 0.48) 100%) #151717;
  }
}

.wallet-header__eth-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(82, 86, 127, 0.4) 0%, rgba(82, 86, 127, 0.16) 50.52%, rgba(130, 140, 173, 0.4) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__eth-bg {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(82, 86, 127, 0.24) 0%, rgba(130, 140, 173, 0.48) 100%) #ffffff;
  }
}

.wallet-header__eth-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(82, 86, 127, 0.4) 0%, rgba(82, 86, 127, 0.16) 50.52%, rgba(130, 140, 173, 0.4) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__eth-bg--dark {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(82, 86, 127, 0.24) 0%, rgba(130, 140, 173, 0.48) 100%) #151717;
  }
}

.wallet-card__ltc-bg {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(165, 168, 169, 0.24) 0%, rgba(193, 204, 207, 0.48) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__ltc-bg {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(165, 168, 169, 0.24) 0%, rgba(193, 204, 207, 0.48) 100%) #ffffff;
  }
}

.wallet-card__ltc-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(165, 168, 169, 0.4) 0%, rgba(165, 168, 169, 0.16) 50.52%, rgba(193, 204, 207, 0.4) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__ltc-bg--dark {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(165, 168, 169, 0.24) 0%, rgba(193, 204, 207, 0.48) 100%) #151717;
  }
}

.wallet-header__ltc-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(165, 168, 169, 0.4) 0%, rgba(165, 168, 169, 0.16) 50.52%, rgba(193, 204, 207, 0.4) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__ltc-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(165, 168, 169, 0.4) 0%, rgba(165, 168, 169, 0.16) 50.52%, rgba(193, 204, 207, 0.4) 100%) #ffffff;
  }
}

.wallet-header__ltc-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(165, 168, 169, 0.4) 0%, rgba(165, 168, 169, 0.16) 50.52%, rgba(193, 204, 207, 0.4) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__ltc-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(165, 168, 169, 0.4) 0%, rgba(165, 168, 169, 0.16) 50.52%, rgba(193, 204, 207, 0.4) 100%) #151717;
  }
}

.wallet-card__ust-bg {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__ust-bg {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #ffffff;
  }
}

.wallet-card__ust-bg--dark {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__ust-bg--dark {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #151717;
  }
}

.wallet-header__ust-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__ust-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #ffffff;
  }
}

.wallet-header__ust-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__ust-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #151717;
  }
}

.wallet-card__usdt-bg {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__usdt-bg {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #ffffff;
  }
}

.wallet-card__usdt-bg--dark {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__usdt-bg--dark {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #151717;
  }
}

.wallet-header__usdt-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__usdt-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #ffffff;
  }
}

.wallet-header__usdt-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__usdt-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #151717;
  }
}

.wallet-card__tusdt-bg {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__tusdt-bg {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #ffffff;
  }
}

.wallet-card__tusdt-bg--dark {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__tusdt-bg--dark {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #151717;
  }
}

.wallet-header__tusdt-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__tusdt-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #ffffff;
  }
}

.wallet-header__tusdt-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__tusdt-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #151717;
  }
}

.wallet-card__eusdt-bg {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__eusdt-bg {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #ffffff;
  }
}

.wallet-card__eusdt-bg--dark {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__eusdt-bg--dark {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(0, 147, 147, 0.24) 0%, rgba(0, 147, 147, 0.48) 100%) #151717;
  }
}

.wallet-header__eusdt-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__eusdt-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #ffffff;
  }
}

.wallet-header__eusdt-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__eusdt-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(0, 147, 147, 0.4) 0%, rgba(0, 147, 147, 0.16) 50.52%, rgba(4, 217, 217, 0.4) 100%) #151717;
  }
}

.wallet-card__usdc-bg {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(39, 117, 202, 0.24) 0%, rgba(34, 76, 225, 0.48) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__usdc-bg {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(39, 117, 202, 0.24) 0%, rgba(34, 76, 225, 0.48) 100%) #ffffff;
  }
}

.wallet-card__usdc-bg--dark {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(39, 117, 202, 0.24) 0%, rgba(34, 76, 225, 0.48) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__usdc-bg--dark {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(39, 117, 202, 0.24) 0%, rgba(34, 76, 225, 0.48) 100%) #151717;
  }
}

.wallet-header__usdc-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(39, 117, 202, 0.4) 0%, rgba(39, 117, 202, 0.16) 50.52%, rgba(34, 76, 225, 0.4) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__usdc-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(39, 117, 202, 0.4) 0%, rgba(39, 117, 202, 0.16) 50.52%, rgba(34, 76, 225, 0.4) 100%) #ffffff;
  }
}

.wallet-header__usdc-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(39, 117, 202, 0.4) 0%, rgba(39, 117, 202, 0.16) 50.52%, rgba(34, 76, 225, 0.4) 100%) #151717;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__usdc-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(39, 117, 202, 0.4) 0%, rgba(39, 117, 202, 0.16) 50.52%, rgba(34, 76, 225, 0.4) 100%) #151717;
  }
}

.wallet-card__xrp-bg {
  background: radial-gradient(295.23% 141.42% at 0% 100%, rgba(108, 106, 151, 0.28) 0%, rgba(50, 48, 99, 0.48) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__xrp-bg {
    background: radial-gradient(295.23% 141.42% at 0% 100%, rgba(108, 106, 151, 0.28) 0%, rgba(50, 48, 99, 0.48) 100%) #ffffff;
  }
}

.wallet-header__xrp-bg {
  background: radial-gradient(295.23% 141.42% at 0% 100%, rgba(108, 106, 151, 0.28) 0%, rgba(50, 48, 99, 0.48) 100%) #ffffff;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__xrp-bg {
    background: radial-gradient(295.23% 141.42% at 0% 100%, rgba(108, 106, 151, 0.28) 0%, rgba(50, 48, 99, 0.48) 100%) #ffffff;
  }
}

.wallet-card__demo-bg {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(255, 100, 68, 0.24) 0%, rgba(255, 68, 79, 0.48) 100%) #212329;
  position: relative;
}

.wallet-card__demo-bg:not([class*="--hide-watermark"]):not([class*="--small"]):before {
  content: "";
  display: block;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-image: url(/--env/public/images/app/wallet/wallet-demo-bg-light.dc37832ca7b0f09e4244cf5908fba6bd.svg);
  background-repeat: repeat;
  background-size: 70px;
  mix-blend-mode: overlay;
  opacity: 0.24;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__demo-bg {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(255, 100, 68, 0.24) 0%, rgba(255, 68, 79, 0.48) 100%) #212329;
  }
}

.wallet-card__demo-bg--dark {
  background: radial-gradient(100% 277.78% at 0% 100%, rgba(255, 100, 68, 0.24) 0%, rgba(255, 68, 79, 0.48) 100%) #fbdddd;
  position: relative;
}

.wallet-card__demo-bg--dark:not([class*="--hide-watermark"]):not([class*="--small"]):before {
  content: "";
  display: block;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-image: url(/--env/public/images/app/wallet/wallet-demo-bg-dark.cd2d79a9663211a2d9efe4ba2a4a78d0.svg);
  background-repeat: repeat;
  background-size: 70px;
  mix-blend-mode: overlay;
  opacity: 0.24;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__demo-bg--dark {
    background: radial-gradient(100% 277.78% at 0% 100%, rgba(255, 100, 68, 0.24) 0%, rgba(255, 68, 79, 0.48) 100%) #fbdddd;
  }
}

.wallet-header__demo-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(255, 100, 68, 0.4) 0%, rgba(255, 100, 68, 0.16) 50.52%, rgba(255, 68, 79, 0.4) 100%) #212329;
  position: relative;
}

.wallet-header__demo-bg:not([class*="--hide-watermark"]):not([class*="--small"]):before {
  content: "";
  display: block;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-image: url(/--env/public/images/app/wallet/wallet-demo-bg-light.dc37832ca7b0f09e4244cf5908fba6bd.svg);
  background-repeat: repeat;
  background-size: 70px;
  mix-blend-mode: overlay;
  opacity: 0.24;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__demo-bg {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(255, 100, 68, 0.4) 0%, rgba(255, 100, 68, 0.16) 50.52%, rgba(255, 68, 79, 0.4) 100%) #212329;
  }
}

.wallet-header__demo-bg--dark {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(255, 100, 68, 0.4) 0%, rgba(255, 100, 68, 0.16) 50.52%, rgba(255, 68, 79, 0.4) 100%) #fbdddd;
  position: relative;
}

.wallet-header__demo-bg--dark:not([class*="--hide-watermark"]):not([class*="--small"]):before {
  content: "";
  display: block;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-image: url(/--env/public/images/app/wallet/wallet-demo-bg-dark.cd2d79a9663211a2d9efe4ba2a4a78d0.svg);
  background-repeat: repeat;
  background-size: 70px;
  mix-blend-mode: overlay;
  opacity: 0.24;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-header__demo-bg--dark {
    background: radial-gradient(100% 4130.74% at 0% 100%, rgba(255, 100, 68, 0.4) 0%, rgba(255, 100, 68, 0.16) 50.52%, rgba(255, 68, 79, 0.4) 100%) #fbdddd;
  }
}

@media (max-width: 1279px) {
  .cfd-proof-of-address .account__scrollbars_container--grid-layout {
    padding: 2.4rem 1.6rem;
    overflow-y: auto;
  }
}

.cfd-proof-of-address .dc-form-submit-button {
  background-color: var(--general-main-1) !important;
}

.cfd-proof-of-address__form {
  padding: 1.6rem 6rem;
}

.initial-callback {
  font-family: "Ubuntu", sans-serif;
  height: 100vh;
  width: 100vw;
  position: fixed;
  background-repeat: no-repeat;
  background-position: center;
  align-items: center;
  background-color: #ffffff;
  margin: 48px 0 36px;
  z-index: 99999;
}

@media (min-width: 320px) and (max-width: 767px) {
  .initial-callback {
    margin-top: 40px;
  }
}

.initial-callback__content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100%;
  gap: 40px;
}

.initial-callback__title {
  color: #000000;
  font-size: 24px;
  text-align: center;
  font-weight: bold;
  margin: 0;
}

/** @define page-404 */
[dir="ltr"] .page-404__image {
  margin-right: 1.6rem;
}

[dir="rtl"] .page-404__image {
  margin-left: 1.6rem;
}

@media screen and (max-width: 758px) {
  .page-404__image {
    margin: 0;
  }
}

/** @define account-deactivated */
.account-closed {
  padding: 24px 95px;
  color: var(--text-prominent);
  font-weight: bold;
  width: 100%;
  text-align: center;
  line-height: 1.5;
  max-width: 44rem;
  font-size: var(--text-size-s);
}

/* @define reset-password */
.reset-password,
.link-expired {
  margin: 1.6rem 1.6rem 0;
}

.reset-password__residence-selection, .reset-password__password-selection,
.link-expired__residence-selection,
.link-expired__password-selection {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-flow: nowrap column;
}

.reset-password__password-selection .reset-password__heading,
.link-expired__password-selection .reset-password__heading {
  margin-bottom: 3.3rem;
}

.reset-password__heading,
.link-expired__heading {
  margin-bottom: 0.8rem;
}

.reset-password__text,
.link-expired__text {
  text-align: center;
  margin-bottom: 3.3rem;
}

.reset-password__subtext,
.link-expired__subtext {
  margin: 1rem 0 2.4rem;
}

.reset-password__divider,
.link-expired__divider {
  width: 100%;
  border: 1px solid #e6e9e9;
}

.reset-password__btn,
.link-expired__btn {
  margin: 0;
  background-color: var(--button-primary-default);
  font-weight: bold;
  color: var(--text-colored-background);
  font-size: 1.2rem;
}

.reset-password__btn:hover,
.link-expired__btn:hover {
  background-color: var(--button-primary-hover);
}

.reset-password__btn--disabled,
.link-expired__btn--disabled {
  cursor: not-allowed !important;
}

.reset-password__btn--disabled,
.link-expired__btn--disabled {
  opacity: 0.32;
}

.reset-password__fieldset,
.link-expired__fieldset {
  position: relative;
  width: 100%;
}

@media (min-width: 1024px) {
  .reset-password__fieldset,
  .link-expired__fieldset {
    max-width: 30rem;
  }
}
.reset-password__password-field,
.link-expired__password-field {
  /* postcss-bem-linter: ignore */
}

.reset-password__password-field > label,
.link-expired__password-field > label {
  top: 0.9rem;
  background-color: var(--general-main-2);
}

@media (min-width: 320px) and (max-width: 767px) {
  .reset-password__password-set,
  .link-expired__password-set {
    padding-top: 1.6rem;
  }
}

@media (min-width: 320px) and (max-width: 767px) {
  .reset-password__spaced-container,
  .link-expired__spaced-container {
    padding: 0 1.6rem;
  }
}

.reset-password__spaced-container .dc-dialog__header-wrapper,
.link-expired__spaced-container .dc-dialog__header-wrapper {
  margin: 0;
}

.reset-password__spaced-container .dc-dialog__content,
.link-expired__spaced-container .dc-dialog__content {
  margin-bottom: 0;
  align-self: auto;
}

.reset-password__spaced-container .dc-dialog__dialog,
.link-expired__spaced-container .dc-dialog__dialog {
  justify-content: space-between;
}

@media (min-width: 320px) and (max-width: 767px) {
  .reset-password__spaced-container .dc-dialog__dialog,
  .link-expired__spaced-container .dc-dialog__dialog {
    padding: 1.6rem;
    width: 100%;
  }
}

.reset-password__spaced-container .dc-btn,
.link-expired__spaced-container .dc-btn {
  height: auto;
  padding: 1rem 1.6rem;
}

.reset-password__spaced-container .reset-password,
.link-expired__spaced-container .reset-password {
  margin: 0;
}

.reset-password__spaced-container .reset-password__subtext,
.link-expired__spaced-container .reset-password__subtext {
  margin: auto;
}

@media (min-width: 1024px) {
  .reset-password__spaced-container .reset-password__fieldset,
  .link-expired__spaced-container .reset-password__fieldset {
    max-width: none;
    max-width: initial;
  }
}

.reset-password__spaced-container .reset-password__password-selection,
.link-expired__spaced-container .reset-password__password-selection {
  flex-flow: column;
  align-items: end;
  padding-top: 2.4rem;
  gap: 2.4rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .reset-password__spaced-container .reset-password__password-selection,
  .link-expired__spaced-container .reset-password__password-selection {
    align-items: stretch;
    padding-top: 1.6rem;
    gap: 1.6rem;
  }
}

.reset-password__spaced-container .link-expired,
.link-expired__spaced-container .link-expired {
  margin: 0;
  padding-top: 2.4rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .reset-password__spaced-container .link-expired,
  .link-expired__spaced-container .link-expired {
    padding-top: 1.6rem;
  }
}

.reset-password__spaced-container__content,
.link-expired__spaced-container__content {
  display: flex;
  flex-direction: column;
  gap: 2.4rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .reset-password__spaced-container__content,
  .link-expired__spaced-container__content {
    gap: 1.6rem;
  }
}

@media (min-width: 320px) and (max-width: 767px) {
  .reset-password__spaced-container__fullscreen,
  .link-expired__spaced-container__fullscreen {
    padding: 0;
  }
}

@media (min-width: 320px) and (max-width: 767px) {
  .reset-password__spaced-container__fullscreen .dc-dialog__dialog,
  .link-expired__spaced-container__fullscreen .dc-dialog__dialog {
    height: 100%;
    margin-top: 0.2rem;
    max-height: none;
    max-height: initial;
  }
}

.reset-password__spaced-container__email_sent,
.link-expired__spaced-container__email_sent {
  align-items: center;
}

/* @define reset-trading-password */
.reset-trading-password__description--is-centered {
  margin: 0 auto;
  max-width: 70%;
}

.reset-trading-password__confirm-button {
  margin-top: 2.4rem;
}

.reset-trading-password__dialog .dc-dialog__dialog {
  max-height: -moz-fit-content;
  max-height: fit-content;
}

.reset-trading-password__dialog .dc-dialog__dialog .dc-dialog__content {
  margin-bottom: 0;
}

.reset-trading-password__error {
  max-width: 38.4rem;
  min-height: 28.4rem;
  padding-top: 2rem;
  text-align: center;
}

.reset-trading-password__lead {
  margin: 1.6rem 0 0;
}

.reset-trading-password__set-password {
  display: flex;
  justify-content: center;
  flex-flow: nowrap column;
}

.reset-trading-password__set-password .reset-trading-password__heading {
  margin-bottom: 2.4rem;
}

.reset-trading-password__password-success {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

[dir="ltr"] .reset-trading-password__password-success .reset-trading-password__icon {
  margin: 0 0 2.4rem 3rem;
}

[dir="rtl"] .reset-trading-password__password-success .reset-trading-password__icon {
  margin: 0 3rem 2.4rem 0;
}

.reset-trading-password__password-success .reset-trading-password__heading {
  margin-bottom: 0.8rem;
}

.reset-trading-password__password-success .reset-trading-password__subtext {
  margin-bottom: 2.4rem;
}

.reset-trading-password__residence-selection, .reset-trading-password__password-selection {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-flow: nowrap column;
}

.reset-trading-password__password-selection .reset-trading-password__heading {
  margin-bottom: 3.3rem;
}

.reset-trading-password__heading {
  margin-bottom: 0.8rem;
}

.reset-trading-password__text {
  text-align: center;
  margin-bottom: 3.3rem;
}

.reset-trading-password__subtext {
  margin-bottom: 1.6rem;
}

.reset-trading-password__hint {
  margin-bottom: 2.4rem;
}

.reset-trading-password__btn {
  width: -moz-fit-content;
  width: fit-content;
  align-self: flex-end;
}

.reset-trading-password__fieldset {
  position: relative;
  width: 100%;
}

@media (min-width: 1024px) {
  .reset-trading-password__fieldset {
    max-width: 30rem;
  }
}

.reset-trading-password__input-field {
  margin-bottom: 1.2rem;
}
.reset-trading-password__password-field {
  /* postcss-bem-linter: ignore */
}

.reset-trading-password__password-field > label {
  top: 0.9rem;
  background-color: var(--general-main-2);
}

/* @define unlink-password */
.unlink-password__dialog .dc-dialog__dialog {
  max-height: -moz-fit-content;
  max-height: fit-content;
}

.unlink-password__dialog .dc-dialog__dialog .dc-dialog__content {
  margin-bottom: 0;
}

.unlink-password__set-password {
  display: flex;
  justify-content: center;
  flex-flow: nowrap column;
}

.unlink-password__set-password .unlink-password__heading {
  margin-bottom: 2.4rem;
}

.unlink-password__password-success {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.unlink-password__password-success .unlink-password__icon {
  margin-bottom: 2.4rem;
}

[dir="ltr"] .unlink-password__password-success .unlink-password__icon {
  margin-left: 1.6rem;
}

[dir="rtl"] .unlink-password__password-success .unlink-password__icon {
  margin-right: 1.6rem;
}

.unlink-password__password-success .unlink-password__heading {
  margin-bottom: 0.8rem;
}

.unlink-password__password-success .unlink-password__subtext {
  margin-bottom: 2.4rem;
}

.unlink-password__residence-selection, .unlink-password__password-selection {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-flow: nowrap column;
}

.unlink-password__password-selection .unlink-password__heading {
  margin-bottom: 3.3rem;
}

.unlink-password__heading {
  margin-bottom: 0.8rem;
}

.unlink-password__text {
  text-align: center;
  margin-bottom: 3.3rem;
}

.unlink-password__subtext {
  margin-bottom: 1.6rem;
}

.unlink-password__hint {
  margin-bottom: 2.4rem;
}

.unlink-password__btn {
  width: -moz-fit-content;
  width: fit-content;
  align-self: flex-end;
}

.unlink-password__fieldset {
  position: relative;
  width: 100%;
}

@media (min-width: 1024px) {
  .unlink-password__fieldset {
    max-width: 30rem;
  }
}

.unlink-password__input-field {
  margin-bottom: 1.2rem;
}
.unlink-password__password-field {
  /* postcss-bem-linter: ignore */
}

.unlink-password__password-field > label {
  top: 0.9rem;
  background-color: var(--general-main-2);
}

/* @define reset-email */
.reset-email .dc-dialog__content {
  margin-bottom: 0;
}

.reset-email__email-selection {
  display: flex;
  justify-content: center;
  align-items: flex-start;
  flex-flow: nowrap column;
}

.reset-email__email-selection .reset-email__heading {
  margin-bottom: 1.6rem;
}

.reset-email__email-selection .reset-email__descripton {
  margin-bottom: 2rem;
}

.reset-email__subtext {
  color: var(--status-danger);
  position: relative;
  bottom: 3rem;
}

.reset-email__heading {
  margin-bottom: 0.8rem;
}

.reset-email__text {
  text-align: center;
  margin-bottom: 3.3rem;
}

.reset-email__btn {
  margin: 0;
  background-color: var(--button-primary-default);
  font-weight: bold;
  align-self: flex-end;
  color: var(--text-colored-background);
  font-size: 1.2rem;
}

.reset-email__btn:hover {
  background-color: var(--button-primary-hover);
}

.reset-email__btn--disabled {
  cursor: not-allowed !important;
}

.reset-email__btn--disabled {
  opacity: 0.32;
}

.reset-email__fieldset {
  position: relative;
  width: 100%;
  margin-bottom: 1rem;
}
.reset-email__email-field {
  /* postcss-bem-linter: ignore */
}

.reset-email__email-field > label {
  top: 0.9rem;
  background-color: var(--general-main-2);
}

.change-email-update {
  display: grid;
  padding: 3.2rem 0;
}

.change-email-update__modal-content {
  display: grid;
  grid-gap: 8px;
}

.change-email-update__modal-close {
  display: flex;
  justify-content: flex-end;
  padding-bottom: 1.2rem;
  cursor: pointer;
}

.change-email-update__modal-title {
  margin: 0.8rem 2.4rem;
  text-align: center;
}

.change-email-update__modal-description {
  text-align: center;
  margin: 0 2rem;
}

.change-email-update__modal-icon {
  width: 100%;
  text-align: center;
  margin-top: 1.6rem;
  padding-top: 0;
  padding-bottom: 1.6rem;
  align-self: center;
}

.change-email-update__footer {
  justify-content: center;
}

.email-confirmation {
  margin: 0.5rem 2.4rem 1.7rem;
  word-break: break-word;
}

.email-confirmation__currentEmail {
  color: var(--status-danger);
  font-style: italic;
}

.redirect-notice {
  z-index: 50000;
}
@charset "UTF-8";
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define notification-messages; */
.notification-messages {
  width: 40rem;
  z-index: 6;
  position: absolute;
  right: 0;
  margin-top: 1.6rem;
}

.notification-messages > div {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
}

@media (min-width: 320px) and (max-width: 767px) {
  .notification-messages {
    max-width: calc(100% - 3.2rem);
    left: 1.6rem;
    right: 1.6rem;
  }
}

[dir="ltr"] .notification-messages--traders-hub {
  margin: 1rem 1rem 0 0;
}

[dir="rtl"] .notification-messages--traders-hub {
  margin: 1rem 0 0 1rem;
}

/** @define notification; weak */
.notification {
  position: relative;
  display: flex;
  border-radius: 4px;
  width: 100%;
  max-width: 40rem;
  padding: 1.6rem;
  color: var(--text-prominent);
  background-color: var(--general-main-2);
  box-shadow: 0 4px 6px 0 var(--shadow-menu), 0 4px 6px 0 var(--shadow-menu);
  overflow: hidden;
  transition: transform 0.25s ease, opacity 0.25s linear;
}

[dir="ltr"] .notification {
  direction: ltr;
}

[dir="rtl"] .notification {
  direction: rtl;
}

.notification--enter-done {
  opacity: 1;
  transform: translateY(0);
}

.notification--enter, .notification--exit {
  opacity: 0;
  transform: translateY(-16px);
}

.notification--small {
  max-width: 28rem;
}

.notification__cta-button {
  padding: 0 0.8rem;
  margin-top: 1.6rem;
  height: 24px;
  width: -moz-fit-content;
  width: fit-content;
  max-width: 27rem;
  align-self: flex-end;
}

.notification__text-container {
  display: flex;
  flex-direction: column;
  z-index: 2;
  width: 100%;
}

.notification__text-body {
  font-size: 1.4rem;
  line-height: 1.43;
}

.notification__action {
  display: flex;
  justify-content: flex-end;
}

.notification__header {
  margin-bottom: 0.8rem;
}

[dir="ltr"] .notification__header {
  margin-right: 3.2rem;
}

[dir="rtl"] .notification__header {
  margin-left: 3.2rem;
}

.notification__close-button {
  position: absolute;
  top: 1.05rem;
  visibility: visible;
  background: none;
  border: none;
  padding: 0;
  cursor: pointer;
  z-index: 2;
}

[dir="ltr"] .notification__close-button {
  right: 1.6rem;
}

[dir="rtl"] .notification__close-button {
  left: 1.6rem;
}

.notification__close-button:focus, .notification__close-button:active {
  outline: none;
}

.notification__close-button:after {
  content: "×";
  font-size: 30px;
  font-weight: 400;
  color: var(--text-prominent);
  font-family: monospace;
}

.notification__icon-type {
  margin-top: 0.4rem;
  width: 1.6rem;
  height: 1.6rem;
}

[dir="ltr"] .notification__icon-type {
  margin-right: 1.6rem;
}

[dir="rtl"] .notification__icon-type {
  margin-left: 1.6rem;
}

.notification__icon-type--is-background {
  width: 21rem;
  height: 21rem;
}

.notification__icon-background {
  position: absolute;
  bottom: -5px;
  pointer-events: none;
  opacity: 0.08;
  z-index: 0;
}

[dir="ltr"] .notification__icon-background {
  left: -25px;
}

[dir="rtl"] .notification__icon-background {
  right: -25px;
}

.notification__icon-background--header-only {
  bottom: -10.5rem;
}

.notification:not(:last-child) {
  margin-bottom: 16px;
}

@media (min-width: 320px) and (max-width: 767px) {
  .notification {
    max-width: 328px;
    width: calc(100% - 0.8rem);
  }

  [dir="ltr"] .notification {
    margin-right: 0.4rem;
  }

  [dir="rtl"] .notification {
    margin-left: 0.4rem;
  }
}
