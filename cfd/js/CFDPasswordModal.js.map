{"version":3,"file":"cfd/js/CFDPasswordModal.js","mappings":"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","sources":["webpack://@deriv/cfd/webpack/universalModuleDefinition","webpack://@deriv/cfd/webpack/runtime/chunk loaded","webpack://@deriv/cfd/webpack/runtime/load script","webpack://@deriv/cfd/webpack/runtime/css loading","webpack://@deriv/cfd/./src/Components/migration-success-modal/migration-success-modal-content.tsx","webpack://@deriv/cfd/./src/Components/migration-success-modal/migration-success-modal.tsx","webpack://@deriv/cfd/./src/Components/migration-success-modal/index.tsx","webpack://@deriv/cfd/./src/Components/success-dialog/success-dialog.tsx","webpack://@deriv/cfd/../../node_modules/js-cookie/dist/js.cookie.mjs","webpack://@deriv/cfd/./src/Components/cfd-account-copy.tsx","webpack://@deriv/cfd/./src/Components/specbox.tsx","webpack://@deriv/cfd/./src/Containers/account-nakala-modal/account-nakala-modal.tsx","webpack://@deriv/cfd/./src/Containers/cfd-enter-password-modal-title.tsx","webpack://@deriv/cfd/./src/Containers/cfd-password-modal.tsx","webpack://@deriv/cfd/external umd \"@deriv/account/dist/account/js/sent-email-modal\"","webpack://@deriv/cfd/external umd \"@deriv/components\"","webpack://@deriv/cfd/external umd \"@deriv/hooks\"","webpack://@deriv/cfd/external umd \"@deriv/shared\"","webpack://@deriv/cfd/external umd \"@deriv/stores\"","webpack://@deriv/cfd/external umd \"@deriv/translations\"","webpack://@deriv/cfd/external umd \"classnames\"","webpack://@deriv/cfd/external umd \"formik\"","webpack://@deriv/cfd/external umd \"react\"","webpack://@deriv/cfd/external umd \"react-router\"","webpack://@deriv/cfd/../../node_modules/@deriv-com/ui/dist/_commonjsHelpers-BkfeUUK-.js","webpack://@deriv/cfd/../../node_modules/@deriv-com/ui/dist/hooks/useDevice.js","webpack://@deriv/cfd/../../node_modules/@deriv-com/ui/dist/index-EY1gwl5O.js","webpack://@deriv/cfd/webpack/bootstrap","webpack://@deriv/cfd/webpack/runtime/compat get default export","webpack://@deriv/cfd/webpack/runtime/define property getters","webpack://@deriv/cfd/webpack/runtime/ensure chunk","webpack://@deriv/cfd/webpack/runtime/get javascript chunk filename","webpack://@deriv/cfd/webpack/runtime/get mini-css chunk filename","webpack://@deriv/cfd/webpack/runtime/hasOwnProperty shorthand","webpack://@deriv/cfd/webpack/runtime/make namespace object","webpack://@deriv/cfd/webpack/runtime/runtimeId","webpack://@deriv/cfd/webpack/runtime/publicPath","webpack://@deriv/cfd/webpack/runtime/jsonp chunk loading","webpack://@deriv/cfd/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@deriv/account/dist/account/js/sent-email-modal\"), require(\"@deriv/components\"), require(\"@deriv/hooks\"), require(\"@deriv/shared\"), require(\"@deriv/stores\"), require(\"@deriv/translations\"), require(\"classnames\"), require(\"formik\"), require(\"react\"), require(\"react-router\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@deriv/account/dist/account/js/sent-email-modal\", \"@deriv/components\", \"@deriv/hooks\", \"@deriv/shared\", \"@deriv/stores\", \"@deriv/translations\", \"classnames\", \"formik\", \"react\", \"react-router\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@deriv/cfd\"] = factory(require(\"@deriv/account/dist/account/js/sent-email-modal\"), require(\"@deriv/components\"), require(\"@deriv/hooks\"), require(\"@deriv/shared\"), require(\"@deriv/stores\"), require(\"@deriv/translations\"), require(\"classnames\"), require(\"formik\"), require(\"react\"), require(\"react-router\"));\n\telse\n\t\troot[\"@deriv/cfd\"] = factory(root[\"@deriv/account/dist/account/js/sent-email-modal\"], root[\"@deriv/components\"], root[\"@deriv/hooks\"], root[\"@deriv/shared\"], root[\"@deriv/stores\"], root[\"@deriv/translations\"], root[\"classnames\"], root[\"formik\"], root[\"react\"], root[\"react-router\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_sent_email_modal__, __WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_hooks__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_stores__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_classnames__, __WEBPACK_EXTERNAL_MODULE_formik__, __WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_router__) => {\nreturn ","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"@deriv/cfd:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","var createStylesheet = (chunkId, fullhref, resolve, reject) => {\n\tvar linkTag = document.createElement(\"link\");\n\n\tlinkTag.rel = \"stylesheet\";\n\tlinkTag.type = \"text/css\";\n\tvar onLinkComplete = (event) => {\n\t\t// avoid mem leaks.\n\t\tlinkTag.onerror = linkTag.onload = null;\n\t\tif (event.type === 'load') {\n\t\t\tresolve();\n\t\t} else {\n\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + realHref + \")\");\n\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n\t\t\terr.type = errorType;\n\t\t\terr.request = realHref;\n\t\t\tlinkTag.parentNode.removeChild(linkTag)\n\t\t\treject(err);\n\t\t}\n\t}\n\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n\tlinkTag.href = fullhref;\n\n\tdocument.head.appendChild(linkTag);\n\treturn linkTag;\n};\nvar findStylesheet = (href, fullhref) => {\n\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n\tfor(var i = 0; i < existingLinkTags.length; i++) {\n\t\tvar tag = existingLinkTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n\t}\n\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n\tfor(var i = 0; i < existingStyleTags.length; i++) {\n\t\tvar tag = existingStyleTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\");\n\t\tif(dataHref === href || dataHref === fullhref) return tag;\n\t}\n};\nvar loadStylesheet = (chunkId) => {\n\treturn new Promise((resolve, reject) => {\n\t\tvar href = __webpack_require__.miniCssF(chunkId);\n\t\tvar fullhref = __webpack_require__.p + href;\n\t\tif(findStylesheet(href, fullhref)) return resolve();\n\t\tcreateStylesheet(chunkId, fullhref, resolve, reject);\n\t});\n}\n// object to store loaded CSS chunks\nvar installedCssChunks = {\n\t\"CFDPasswordModal\": 0\n};\n\n__webpack_require__.f.miniCss = (chunkId, promises) => {\n\tvar cssChunks = {\"src_Containers_mt5-create-password_mt5-create-password_tsx\":1};\n\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n\t\tpromises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(() => {\n\t\t\tinstalledCssChunks[chunkId] = 0;\n\t\t}, (e) => {\n\t\t\tdelete installedCssChunks[chunkId];\n\t\t\tthrow e;\n\t\t}));\n\t}\n};\n\n// no hmr","import React from 'react';\nimport classNames from 'classnames';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { InlineMessage, Text, Button, Modal, Icon } from '@deriv/components';\nimport { Jurisdiction, CFD_PLATFORMS, getCFDPlatformNames, getFormattedJurisdictionCode } from '@deriv/shared';\n\ntype TMigrationSuccessModalContent = {\n    icon?: string;\n    eligible_account_to_migrate: string;\n    closePopupModal: () => void;\n    jurisdiction_market_name: Array<string>;\n};\n\nconst MigrationSuccessModalContent = observer(\n    ({\n        icon,\n        eligible_account_to_migrate,\n        jurisdiction_market_name,\n        closePopupModal,\n    }: TMigrationSuccessModalContent) => {\n        const { ui } = useStore();\n        const { is_mobile } = ui;\n\n        const platform = getCFDPlatformNames(CFD_PLATFORMS.MT5);\n        const text_size = is_mobile ? 'xxs' : 'xs';\n        const information_text_size = is_mobile ? 'xxxs' : 'xxs';\n        const getFormattedAccounts = () =>\n            jurisdiction_market_name.length > 1\n                ? {\n                      type_1: jurisdiction_market_name[0],\n                      type_2: jurisdiction_market_name[1],\n                  }\n                : {\n                      type_1: jurisdiction_market_name[0],\n                  };\n        return (\n            <div className='cfd-success-dialog-migration__modal-content'>\n                <Modal.Body className={classNames('cfd-success-dialog-migration__body')}>\n                    <div className='cfd-success-dialog-migration__icon-area'>\n                        {icon && <Icon icon={icon} size={128} />}\n                    </div>\n                    <div>\n                        <Text as='h2' weight='bold' className='cfd-success-dialog-migration__title'>\n                            <Localize i18n_default_text='Upgrade complete' />\n                        </Text>\n                        <div className='cfd-success-dialog-migration__content-wrapper'>\n                            <Text size={text_size} as='p' align='center'>\n                                {jurisdiction_market_name.length > 1 ? (\n                                    <Localize\n                                        i18n_default_text='Start trading with your new <0>{{platform}} {{type_1}}</0> and <0>{{type_2}} {{eligible_account_to_migrate}}</0> accounts.'\n                                        values={{\n                                            platform,\n                                            eligible_account_to_migrate,\n                                            ...getFormattedAccounts(),\n                                        }}\n                                        components={[<strong key={0} />]}\n                                    />\n                                ) : (\n                                    <Localize\n                                        i18n_default_text='Start trading with your new <0>{{platform}} {{type_1}} {{eligible_account_to_migrate}}</0> account.'\n                                        values={{\n                                            platform,\n                                            eligible_account_to_migrate,\n                                            ...getFormattedAccounts(),\n                                        }}\n                                        components={[<strong key={0} />]}\n                                    />\n                                )}\n                            </Text>\n                            <div className='cfd-success-dialog-migration__inline-msg'>\n                                <InlineMessage\n                                    type='information'\n                                    size='sm'\n                                    title={\n                                        <Localize\n                                            i18n_default_text='Important: Your <0>{{platform}} {{existing_account}}</0> account.'\n                                            values={{\n                                                platform,\n                                                existing_account: getFormattedJurisdictionCode(Jurisdiction.SVG),\n                                            }}\n                                            components={[<strong key={0} />]}\n                                        />\n                                    }\n                                    message={\n                                        <Text\n                                            as='ul'\n                                            size={information_text_size}\n                                            className={'cfd-success-dialog-migration__body-bullets--list'}\n                                        >\n                                            <li>\n                                                <Localize i18n_default_text=\"You can manage your existing positions, but you can't start a new trade.\" />\n                                            </li>\n                                            <li>\n                                                <Localize i18n_default_text=\"We'll close accounts with no open positions after 60 days.\" />\n                                            </li>\n                                        </Text>\n                                    }\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer has_separator className='cfd-success-dialog-migration-footer'>\n                    <Button has_effect onClick={closePopupModal} primary large>\n                        <Localize i18n_default_text='OK' />\n                    </Button>\n                </Modal.Footer>\n            </div>\n        );\n    }\n);\n\nexport default MigrationSuccessModalContent;\n","import React from 'react';\nimport { Modal, PageOverlay } from '@deriv/components';\nimport { Jurisdiction, getFormattedJurisdictionMarketTypes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { getFormattedJurisdictionCode } from '../../Stores/Modules/CFD/Helpers/cfd-config';\n\nimport { useCfdStore } from '../../Stores/Modules/CFD/Helpers/useCfdStores';\nimport MigrationSuccessModalContent from './migration-success-modal-content';\n\ntype TMigrationSuccessModal = {\n    is_open: boolean;\n    closeModal: () => void;\n};\n\nconst MigrationSuccessModal = observer(({ is_open, closeModal }: TMigrationSuccessModal) => {\n    const { ui } = useStore();\n    const { is_mobile, setMT5MigrationModalEnabled } = ui;\n    const { migrated_mt5_accounts, setIsFromMt5MigrationModal } = useCfdStore();\n\n    const has_migrated_mt5_accounts = !!migrated_mt5_accounts.length;\n    const eligible_account_to_migrate = getFormattedJurisdictionCode(\n        migrated_mt5_accounts.map(account => Object.values(account?.to_account ?? {})?.[0])?.[0]\n    );\n\n    const jurisdiction_market_name = migrated_mt5_accounts.map(account =>\n        getFormattedJurisdictionMarketTypes(Object.keys(account?.to_account ?? {})?.[0])\n    );\n\n    const closeMigrationModals = () => {\n        setIsFromMt5MigrationModal(false);\n        setMT5MigrationModalEnabled(false);\n        closeModal();\n    };\n\n    const getMigrationIcon = () => {\n        if (has_migrated_mt5_accounts) {\n            const to_acc = Object.values(migrated_mt5_accounts[0]?.to_account)?.[0] || '';\n            if (migrated_mt5_accounts?.length === 1) {\n                switch (to_acc) {\n                    case Jurisdiction.BVI:\n                        return 'IcMt5Bvi';\n                    case Jurisdiction.VANUATU:\n                        return 'IcMt5Vanuatu';\n                    default:\n                        return '';\n                }\n            } else {\n                switch (to_acc) {\n                    case Jurisdiction.BVI:\n                        return 'IcMt5StandardFinancialBvi';\n                    case Jurisdiction.VANUATU:\n                        return 'IcMt5StandardFinancialVanuatu';\n                    default:\n                        return '';\n                }\n            }\n        }\n    };\n\n    const ModalContent = () => (\n        <MigrationSuccessModalContent\n            closePopupModal={closeMigrationModals}\n            icon={getMigrationIcon()}\n            eligible_account_to_migrate={eligible_account_to_migrate}\n            jurisdiction_market_name={jurisdiction_market_name}\n        />\n    );\n\n    return is_mobile ? (\n        <PageOverlay\n            is_open={is_open}\n            header_classname='cfd-success-dialog-migration'\n            portal_id='deriv_app'\n            header=' '\n            onClickClose={closeMigrationModals}\n        >\n            <ModalContent />\n        </PageOverlay>\n    ) : (\n        <Modal\n            className='cfd-success-dialog-migration'\n            is_open={is_open}\n            toggleModal={closeMigrationModals}\n            has_close_icon\n            title=' '\n            width='58.8rem'\n            should_header_stick_body={false}\n        >\n            <ModalContent />\n        </Modal>\n    );\n});\n\nexport default MigrationSuccessModal;\n","import MigrationSuccessModal from './migration-success-modal';\n\nexport default MigrationSuccessModal;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Button, Icon, Modal, Text } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\n\ntype TSuccessDialogProps = {\n    is_open: boolean;\n    toggleModal: () => void;\n    onCancel?: () => void;\n    onSubmit?: () => void;\n    classNameMessage?: string;\n    message: string | React.ReactElement;\n    icon: React.ReactElement;\n    icon_size?: string;\n    text_submit?: string;\n    text_cancel?: string;\n    heading?: string | React.ReactElement;\n    title?: string;\n    icon_type?: string;\n    is_medium_button?: boolean;\n    has_close_icon: boolean;\n    width?: string;\n    has_cancel?: boolean;\n    has_submit?: boolean;\n};\n\nconst SuccessDialog = ({\n    classNameMessage = '',\n    has_cancel = false,\n    has_submit = true,\n    icon,\n    message,\n    onCancel,\n    onSubmit,\n    heading,\n    icon_size = 'large',\n    text_submit,\n    text_cancel,\n    is_open,\n    toggleModal,\n    title,\n    has_close_icon,\n    width = '',\n    is_medium_button,\n}: TSuccessDialogProps) => {\n    return (\n        <Modal\n            className='cfd-success-dialog'\n            is_open={is_open}\n            toggleModal={toggleModal}\n            has_close_icon={has_close_icon}\n            small={!title}\n            title={title}\n            width={width}\n        >\n            <Modal.Body>\n                <div\n                    className={classNames('success-change__icon-area', {\n                        'success-change__icon-area--large': icon_size === 'large',\n                        'success-change__icon-area--xlarge': icon_size === 'xlarge',\n                    })}\n                    data-testid='dt_cfd_success_modal_icon_wrapper'\n                >\n                    {icon}\n                    <Icon\n                        className='bottom-right-overlay'\n                        icon='IcCheckmarkCircle'\n                        custom_color='var(--status-success)'\n                        size={24}\n                    />\n                </div>\n                {!heading ? (\n                    <Text as='h2' weight='bold' size='s' className='dc-modal-header__title'>\n                        <Localize i18n_default_text='Success!' />\n                    </Text>\n                ) : (\n                    <React.Fragment>{heading}</React.Fragment>\n                )}\n\n                {React.isValidElement(message) && message}\n                {!React.isValidElement(message) && <p className={classNameMessage}>{message}</p>}\n            </Modal.Body>\n            <Modal.Footer>\n                {has_cancel && onCancel && (\n                    <Button\n                        onClick={onCancel}\n                        has_effect\n                        text={text_cancel || localize('Maybe later')}\n                        secondary\n                        {...(is_medium_button ? { medium: true } : { large: true })}\n                    />\n                )}\n                {has_submit && onSubmit && (\n                    <Button\n                        has_effect\n                        onClick={onSubmit}\n                        text={text_submit}\n                        primary\n                        {...(is_medium_button ? { medium: true } : { large: true })}\n                    />\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default SuccessDialog;\n","/*! js-cookie v3.0.5 | MIT */\n/* eslint-disable no-var */\nfunction assign (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      target[key] = source[key];\n    }\n  }\n  return target\n}\n/* eslint-enable no-var */\n\n/* eslint-disable no-var */\nvar defaultConverter = {\n  read: function (value) {\n    if (value[0] === '\"') {\n      value = value.slice(1, -1);\n    }\n    return value.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent)\n  },\n  write: function (value) {\n    return encodeURIComponent(value).replace(\n      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,\n      decodeURIComponent\n    )\n  }\n};\n/* eslint-enable no-var */\n\n/* eslint-disable no-var */\n\nfunction init (converter, defaultAttributes) {\n  function set (name, value, attributes) {\n    if (typeof document === 'undefined') {\n      return\n    }\n\n    attributes = assign({}, defaultAttributes, attributes);\n\n    if (typeof attributes.expires === 'number') {\n      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);\n    }\n    if (attributes.expires) {\n      attributes.expires = attributes.expires.toUTCString();\n    }\n\n    name = encodeURIComponent(name)\n      .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n      .replace(/[()]/g, escape);\n\n    var stringifiedAttributes = '';\n    for (var attributeName in attributes) {\n      if (!attributes[attributeName]) {\n        continue\n      }\n\n      stringifiedAttributes += '; ' + attributeName;\n\n      if (attributes[attributeName] === true) {\n        continue\n      }\n\n      // Considers RFC 6265 section 5.2:\n      // ...\n      // 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\n      //     character:\n      // Consume the characters of the unparsed-attributes up to,\n      // not including, the first %x3B (\";\") character.\n      // ...\n      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];\n    }\n\n    return (document.cookie =\n      name + '=' + converter.write(value, name) + stringifiedAttributes)\n  }\n\n  function get (name) {\n    if (typeof document === 'undefined' || (arguments.length && !name)) {\n      return\n    }\n\n    // To prevent the for loop in the first place assign an empty array\n    // in case there are no cookies at all.\n    var cookies = document.cookie ? document.cookie.split('; ') : [];\n    var jar = {};\n    for (var i = 0; i < cookies.length; i++) {\n      var parts = cookies[i].split('=');\n      var value = parts.slice(1).join('=');\n\n      try {\n        var found = decodeURIComponent(parts[0]);\n        jar[found] = converter.read(value, found);\n\n        if (name === found) {\n          break\n        }\n      } catch (e) {}\n    }\n\n    return name ? jar[name] : jar\n  }\n\n  return Object.create(\n    {\n      set,\n      get,\n      remove: function (name, attributes) {\n        set(\n          name,\n          '',\n          assign({}, attributes, {\n            expires: -1\n          })\n        );\n      },\n      withAttributes: function (attributes) {\n        return init(this.converter, assign({}, this.attributes, attributes))\n      },\n      withConverter: function (converter) {\n        return init(assign({}, this.converter, converter), this.attributes)\n      }\n    },\n    {\n      attributes: { value: Object.freeze(defaultAttributes) },\n      converter: { value: Object.freeze(converter) }\n    }\n  )\n}\n\nvar api = init(defaultConverter, { path: '/' });\n/* eslint-enable no-var */\n\nexport { api as default };\n","import React from 'react';\nimport { Clipboard } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isMobile } from '@deriv/shared';\nimport { TCFDAccountCopy } from './props.types';\n\nconst CFDAccountCopy = ({ text, className }: TCFDAccountCopy) => {\n    return (\n        <div className={className} data-testid='cfd_account_copy_main_div'>\n            <Clipboard\n                text_copy={text}\n                info_message={isMobile() ? '' : localize('copy')}\n                success_message={localize('copied!')}\n                popoverAlignment={isMobile() ? 'left' : 'bottom'}\n            />\n        </div>\n    );\n};\n\nexport { CFDAccountCopy };\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Text } from '@deriv/components';\n\nimport { CFDAccountCopy } from './cfd-account-copy';\n\nexport type TSpecBoxProps = {\n    value?: string;\n    is_bold?: boolean;\n    is_broker?: boolean;\n};\n\nconst SpecBox = ({ value, is_bold, is_broker }: TSpecBoxProps) => (\n    <div className='cfd-trade-modal__spec-box '>\n        <Text\n            size='xs'\n            weight={is_bold ? 'bold' : ''}\n            className={classNames('cfd-trade-modal__spec-text', { 'cfd-trade-modal__spec-text-broker': is_broker })}\n        >\n            {value}\n        </Text>\n        <CFDAccountCopy text={value} className='cfd-trade-modal__spec-copy' />\n    </div>\n);\n\nexport default SpecBox;\n","import React, { useEffect } from 'react';\nimport Cookies from 'js-cookie';\n\nimport { Button, Icon, Text } from '@deriv/components';\nimport { isDesktop } from '@deriv/shared';\nimport { observer } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\n\nimport SpecBox from '../../Components/specbox';\n\nimport './account-nakala-modal.scss';\n\ninterface CFDDerivNakalaModalProps {\n    onclickAction: () => void;\n}\n\nconst ModalInfo = () => {\n    return (\n        <React.Fragment>\n            <div className='nakala-modal-maintenance'>\n                <div className='nakala-modal-maintenance_icon'>\n                    <Icon icon='IcInfoYellow' />\n                </div>\n                <Text size='xxxs'>\n                    <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.' />\n                </Text>\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst CFDDerivNakalaInfo = (props: CFDDerivNakalaModalProps) => {\n    return (\n        <React.Fragment>\n            <div className='cfd-nakala-modal'>\n                <div className='cfd-nakala-modal__logo-container'>\n                    <div className='cfd-nakala-modal__logo'>\n                        <Icon icon='IcRebrandingDerivNakala' size={64} />\n                    </div>\n                </div>\n\n                <div className='cfd-nakala-modal__description'>\n                    <Text as='p' size='s'>\n                        <Localize i18n_default_text='Follow top global traders and copy their strategies.' />\n                    </Text>\n                </div>\n\n                <div className='cfd-nakala-modal__getting-started'>\n                    <Text as='h3' weight='bold' size='s'>\n                        <Localize i18n_default_text='Getting started with Deriv Nakala' />\n                    </Text>\n\n                    <div className='cfd-nakala-modal__steps'>\n                        <div className='cfd-nakala-modal__step'>\n                            <div className='cfd-nakala-modal__step-number'>\n                                <Text weight='bold' color='colored-background'>\n                                    1\n                                </Text>\n                            </div>\n                            <Text size='xs'>\n                                <Localize i18n_default_text='Open an MT5 Standard account on our trading platform.' />\n                            </Text>\n                        </div>\n\n                        <div className='cfd-nakala-modal__step'>\n                            <div className='cfd-nakala-modal__step-number'>\n                                <Text weight='bold' color='colored-background'>\n                                    2\n                                </Text>\n                            </div>\n                            <Text size='xs'>\n                                <Localize i18n_default_text='Download the Nakala app and create your account.' />\n                            </Text>\n                        </div>\n                        <div className='cfd-nakala-modal__step'>\n                            <div className='cfd-nakala-modal__step-number'>\n                                <Text weight='bold' color='colored-background'>\n                                    3\n                                </Text>\n                            </div>\n                            <Text size='xs'>\n                                <Localize i18n_default_text='Link your MT5 account in the Deriv Nakala app.' />\n                            </Text>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className={`cfd-nakala-modal__footer ${!isDesktop() && 'cfd-nakala-modal__footer--mobile'}`}>\n                <Button type='button' onClick={props.onclickAction} primary large>\n                    <Localize i18n_default_text='Next' />\n                </Button>\n            </div>\n        </React.Fragment>\n    );\n};\n\ninterface TCFDDerivNakalaLinkAccountProps {\n    isSuccess?: boolean;\n    nakalaInfo: {\n        loginId: string | null;\n        serverName: string | null;\n    };\n}\n\nexport const CFDDerivNakalaLinkAccount = observer((props: TCFDDerivNakalaLinkAccountProps) => {\n    const { isSuccess = false, nakalaInfo } = props;\n\n    const manageNakalaCookie = () => {\n        const nakalaLinkedCookie = 'nakala_linked';\n\n        const nakalaLinkedCookieExist = Cookies.get(nakalaLinkedCookie);\n        if (nakalaLinkedCookieExist) return;\n\n        const nakalaLinkedCookieValue = 'true';\n        const nakalaLinkedCookieExpiry = 365; // days\n\n        Cookies.set(nakalaLinkedCookie, nakalaLinkedCookieValue, {\n            domain: '.deriv.com',\n            expires: nakalaLinkedCookieExpiry,\n        });\n    };\n\n    const isDesktopDevice = isDesktop();\n\n    useEffect(() => {\n        isDesktopDevice && manageNakalaCookie();\n    }, [isDesktopDevice]);\n\n    const onClickOpenApp = () => {\n        manageNakalaCookie();\n        window.open('https://onelink.to/uuuxmw', '_blank');\n    };\n\n    return (\n        <React.Fragment>\n            <div className='cfd-nakala-modal'>\n                <div className='cfd-nakala-modal__logo-container'>\n                    <div className='cfd-nakala-modal__logo'>\n                        <Icon icon='IcRebrandingNakalaMt5Linked' className='linked' />\n                    </div>\n                </div>\n\n                {isSuccess && (\n                    <div className='cfd-nakala-modal__title'>\n                        <Text as='h3' weight='bold' align='center'>\n                            <Localize i18n_default_text='Your MT5 Standard account is ready' />\n                        </Text>\n                    </div>\n                )}\n\n                <div className='cfd-nakala-modal__steps cfd-nakala-modal__steps--with-line'>\n                    <div className='cfd-nakala-modal__step'>\n                        <div className='cfd-nakala-modal__step-number'>\n                            <Text weight='bold' color='colored-background'>\n                                1\n                            </Text>\n                        </div>\n                        <div className='cfd-nakala-modal__step-content'>\n                            <Text as='p'>\n                                <Localize i18n_default_text='To copy trade, create your Deriv Nakala account in the mobile app. ' />\n                                {isDesktopDevice && (\n                                    <Localize i18n_default_text='Scan the below QR to download the mobile app.' />\n                                )}\n                            </Text>\n                        </div>\n                    </div>\n\n                    {isDesktopDevice && (\n                        <div className='cfd-nakala-modal__qr-section'>\n                            <div className='cfd-nakala-modal__qr-section-code'>\n                                <Icon icon='IcRebrandingNakalaQrCode' height={120} width={120} />\n                            </div>\n                        </div>\n                    )}\n\n                    <div className='cfd-nakala-modal__step'>\n                        <div className='cfd-nakala-modal__step-number'>\n                            <Text weight='bold' color='colored-background'>\n                                2\n                            </Text>\n                        </div>\n                        <div className='cfd-nakala-modal__step-content'>\n                            <Text as='p'>\n                                <Localize i18n_default_text='Then, link your MT5 Standard account using these details and your MT5 password:' />\n                            </Text>\n                        </div>\n                    </div>\n                </div>\n\n                <div className='cfd-nakala-modal__login-specs'>\n                    <div className='cfd-nakala-modal__login-specs-item'>\n                        <Text className='cfd-nakala-modal--paragraph'>{localize('Server')}</Text>\n                        <SpecBox is_bold value={nakalaInfo.serverName ?? ''} />\n                    </div>\n                    <div className='cfd-nakala-modal__login-specs-item'>\n                        <Text className='cfd-nakala-modal--paragraph'>{localize('Account no.')}</Text>\n                        <SpecBox is_bold value={nakalaInfo.loginId ?? ''} />\n                    </div>\n                    <ModalInfo />\n                </div>\n\n                <div className='cfd-nakala-modal__help-section'>\n                    <Text size='xs'>\n                        {localize('Need help?')}{' '}\n                        <a href='https://deriv.copytrade-resource.com/' target='_blank' rel='noreferrer'>\n                            {localize('Check the guide')}\n                        </a>\n                    </Text>\n                </div>\n            </div>\n            {!isDesktopDevice && (\n                <div className={`cfd-nakala-modal__footer cfd-nakala-modal__footer--info-mobile`}>\n                    <Button type='button' onClick={onClickOpenApp} primary large>\n                        <Localize i18n_default_text='Open Deriv Nakala mobile app' />\n                    </Button>\n                </div>\n            )}\n        </React.Fragment>\n    );\n});\nexport default CFDDerivNakalaInfo;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { getCFDPlatformLabel, getCFDPlatformNames } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { CATEGORY, CFD_PLATFORMS } from '../Helpers/cfd-config';\n\ntype TCFDEnterPasswordModalTitleProps = { platform: typeof CFD_PLATFORMS[keyof typeof CFD_PLATFORMS] };\n\nconst CFDEnterPasswordModalTitle = observer(({ platform }: TCFDEnterPasswordModalTitleProps) => {\n    const {\n        modules: { cfd },\n    } = useStore();\n    const { account_title, account_type } = cfd;\n\n    const getAccountCardTitle = () => {\n        switch (platform) {\n            case CFD_PLATFORMS.CTRADER:\n            case CFD_PLATFORMS.DXTRADE:\n                return account_type.category === CATEGORY.REAL ? 'Real' : '';\n            default:\n                return account_title;\n        }\n    };\n\n    return (\n        <Text size='xs' className='dc-modal__container_cfd-password-modal__account-title'>\n            {platform === CFD_PLATFORMS.MT5 ? (\n                <Localize\n                    i18n_default_text='Enter your {{platform}} password to add an {{platform}} {{account}} account.'\n                    values={{\n                        platform: getCFDPlatformNames(platform),\n                        account: getAccountCardTitle(),\n                    }}\n                />\n            ) : (\n                <Localize\n                    i18n_default_text='Enter your {{platform}} password to add a {{platform}} {{account}} account.'\n                    values={{\n                        platform: getCFDPlatformLabel(platform),\n                        account: getAccountCardTitle(),\n                    }}\n                />\n            )}\n        </Text>\n    );\n});\n\nexport default CFDEnterPasswordModalTitle;\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport classNames from 'classnames';\nimport { Formik, FormikErrors, FormikHelpers } from 'formik';\n\nimport { SentEmailModal } from '@deriv/account';\nimport {\n    Div100vhContainer,\n    FormSubmitButton,\n    Icon,\n    MobileDialog,\n    Modal,\n    MultiStep,\n    PageOverlay,\n    PasswordInput,\n    PasswordMeter,\n    Text,\n} from '@deriv/components';\nimport {\n    getCFDPlatformLabel,\n    getCFDPlatformNames,\n    getErrorMessages,\n    makeLazyLoader,\n    moduleLoader,\n    validLength,\n    validMT5Password,\n    validPassword,\n    WS,\n} from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\n\nimport MigrationSuccessModal from '../Components/migration-success-modal';\nimport SuccessDialog from '../Components/success-dialog/success-dialog';\nimport { CATEGORY, CFD_PLATFORMS } from '../Helpers/cfd-config';\nimport { getDxCompanies, getMtCompanies, TDxCompanies, TMtCompanies } from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nimport CFDDerivNakalaInfo, { CFDDerivNakalaLinkAccount } from './account-nakala-modal/account-nakala-modal';\nimport CFDEnterPasswordModalTitle from './cfd-enter-password-modal-title';\n\nimport '../sass/cfd.scss';\nimport { useIsEnabledNakala } from '@deriv/hooks';\n\nconst MT5CreatePassword = makeLazyLoader(\n    () => moduleLoader(() => import('./mt5-create-password/mt5-create-password')),\n    () => <div />\n)();\n\nconst CfdPasswordModalTnc = makeLazyLoader(\n    () => moduleLoader(() => import('./cfd-password-modal-tnc')),\n    () => <div />\n)();\n\nconst CFDPasswordChange = makeLazyLoader(\n    () => moduleLoader(() => import('./cfd-password-change')),\n    () => <div />\n)();\n\nconst CFDPasswordSuccessIcon = makeLazyLoader(\n    () => moduleLoader(() => import('./cfd-password-success-icon')),\n    () => <div />\n)();\n\nconst CFDPasswordChangeContent = makeLazyLoader(\n    () => moduleLoader(() => import('./cfd-password-change-content')),\n    () => <div />\n)();\n\nconst ChangePasswordConfirmation = makeLazyLoader(\n    () => moduleLoader(() => import('./cfd-change-password-confirmation')),\n    () => <div />\n)();\n\nexport type TCFDPasswordFormValues = { password: string };\n\ntype TOnSubmitPassword = (values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) => void;\n\ntype TPasswordModalHeaderProps = {\n    should_set_trading_password: boolean;\n    is_password_reset_error: boolean;\n    platform: string;\n    is_nakala_info: boolean;\n    has_mt5_account?: boolean;\n};\n\ntype TCFDPasswordFormReusedProps = {\n    platform: (typeof CFD_PLATFORMS)[keyof typeof CFD_PLATFORMS];\n    error_message: string;\n    validatePassword: (values: TCFDPasswordFormValues) => FormikErrors<TCFDPasswordFormValues>;\n};\n\ntype TCFDCreatePasswordProps = TCFDPasswordFormReusedProps & {\n    password: string;\n    onSubmit: TOnSubmitPassword;\n    need_tnc: boolean;\n};\n\ntype TCFDCreatePasswordFormProps = TCFDPasswordFormReusedProps & {\n    has_mt5_account: boolean;\n    submitPassword: TOnSubmitPassword;\n    need_tnc: boolean;\n};\n\ntype TMultiStepRefProps = {\n    goNextStep: () => void;\n    goPrevStep: () => void;\n};\n\ntype TCFDPasswordFormProps = TCFDPasswordFormReusedProps & {\n    closeModal: () => void;\n    error_type?: string;\n    form_error?: string;\n    has_mt5_account: boolean;\n    is_dxtrade_allowed: boolean;\n    onCancel: () => void;\n    onForgotPassword: () => void;\n    should_set_trading_password: boolean;\n    submitPassword: TOnSubmitPassword;\n    account_type: {\n        type: string;\n        category: string;\n    };\n};\n\ntype TCFDPasswordModalProps = {\n    error_type?: string;\n    form_error?: string;\n    platform: (typeof CFD_PLATFORMS)[keyof typeof CFD_PLATFORMS];\n};\n\nconst PasswordModalHeader = ({\n    should_set_trading_password,\n    is_password_reset_error,\n    platform,\n    is_nakala_info,\n}: TPasswordModalHeaderProps) => {\n    const { isDesktop } = useDevice();\n    const is_mt5 = platform === CFD_PLATFORMS.MT5;\n\n    const element = !isDesktop ? 'p' : 'span';\n\n    const style = !isDesktop\n        ? {\n              padding: '2rem',\n          }\n        : {};\n\n    if (is_nakala_info) {\n        return (\n            <Text as={element} line_height='m' weight='bold' size={!isDesktop ? 'xs' : 's'} align='center'>\n                <Localize i18n_default_text='Deriv Nakala' />\n            </Text>\n        );\n    }\n\n    if (is_mt5 && !is_password_reset_error) {\n        const platform_name = getCFDPlatformNames(platform);\n        return (\n            <Text as={element} line_height='m' weight='bold' size={!isDesktop ? 'xs' : 's'} align='center'>\n                {should_set_trading_password ? (\n                    <Localize\n                        i18n_default_text='Create an {{platform_name}} account'\n                        values={{\n                            platform_name,\n                        }}\n                    />\n                ) : (\n                    <Localize\n                        i18n_default_text='Add an {{platform_name}} account'\n                        values={{\n                            platform_name,\n                        }}\n                    />\n                )}\n            </Text>\n        );\n    }\n\n    return (\n        <Text styles={style} as={element} line_height='m' weight='bold' size='s' align='center'>\n            {!should_set_trading_password && !is_password_reset_error && (\n                <Localize\n                    i18n_default_text='Enter your {{platform}} password'\n                    values={{\n                        platform: getCFDPlatformLabel(platform),\n                    }}\n                />\n            )}\n            {is_password_reset_error && <Localize i18n_default_text='Too many attempts' />}\n        </Text>\n    );\n};\n\nconst getCancelButtonLabel = ({\n    should_set_trading_password,\n    error_type,\n    isDesktop,\n}: Pick<TCFDPasswordFormProps, 'should_set_trading_password' | 'error_type'> & { isDesktop: boolean }) => {\n    if (should_set_trading_password && error_type !== 'PasswordReset') {\n        return isDesktop ? null : localize('Cancel');\n    }\n\n    return localize('Forgot password?');\n};\n\nconst handlePasswordInputChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    handleChange: (el: React.ChangeEvent<HTMLInputElement>) => void,\n    validateForm: (values?: TCFDPasswordFormValues) => Promise<FormikErrors<TCFDPasswordFormValues>>,\n    setFieldTouched: (field: string, isTouched?: boolean, shouldValidate?: boolean) => void\n) => {\n    handleChange(e);\n    validateForm().then(() => {\n        setFieldTouched('password', true);\n    });\n};\n\nconst CreatePassword = ({ password, platform, validatePassword, onSubmit, error_message }: TCFDCreatePasswordProps) => {\n    return (\n        <Formik\n            initialValues={{\n                password,\n            }}\n            enableReinitialize\n            validate={validatePassword}\n            onSubmit={onSubmit}\n        >\n            {({\n                errors,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                setFieldTouched,\n                touched,\n                values,\n                validateForm,\n            }) => (\n                <form onSubmit={handleSubmit}>\n                    <div\n                        className='cfd-password-modal__content dc-modal__container_cfd-password-modal__body cfd-password-modal__create-password-content'\n                        data-testid='dt_create_password'\n                    >\n                        <Icon icon='IcDxtradeOnePassword' width='122' height='108' />\n                        <Text\n                            size='s'\n                            align='center'\n                            weight='bold'\n                            className='cfd-password-modal__create-password-title'\n                        >\n                            <Localize\n                                i18n_default_text='Create a {{platform}} password'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <Text size='xs' align='center' className='cfd-password-modal__create-password-description'>\n                            <Localize\n                                i18n_default_text='You can use this password for all your {{platform}} accounts.'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <div className='input-element'>\n                            <PasswordMeter\n                                input={values.password}\n                                has_error={!!(touched.password && errors.password)}\n                                custom_feedback_messages={getErrorMessages().password_warnings}\n                            >\n                                {() => (\n                                    <PasswordInput\n                                        autoComplete='new-password'\n                                        label={localize('{{platform}} password', {\n                                            platform: getCFDPlatformLabel(platform),\n                                        })}\n                                        error={\n                                            (touched.password && errors.password) ||\n                                            (values.password.length === 0 ? error_message : '')\n                                        }\n                                        name='password'\n                                        value={values.password}\n                                        onBlur={handleBlur}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                            handlePasswordInputChange(e, handleChange, validateForm, setFieldTouched);\n                                        }}\n                                        data_testId={`dt_${platform}_password`}\n                                    />\n                                )}\n                            </PasswordMeter>\n                        </div>\n                        <FormSubmitButton\n                            is_disabled={!values.password || Object.keys(errors).length > 0}\n                            is_loading={isSubmitting}\n                            label={localize('Create {{platform}} password', {\n                                platform: getCFDPlatformLabel(platform),\n                            })}\n                            is_center={platform !== CFD_PLATFORMS.MT5}\n                        />\n                    </div>\n                </form>\n            )}\n        </Formik>\n    );\n};\n\nconst CFDCreatePasswordForm = ({\n    has_mt5_account,\n    platform,\n    error_message,\n    validatePassword,\n    submitPassword,\n    need_tnc,\n}: TCFDCreatePasswordFormProps) => {\n    const multi_step_ref = React.useRef<TMultiStepRefProps>();\n    const [password, setPassword] = React.useState('');\n\n    const onSubmit: TOnSubmitPassword = (values, actions) => {\n        if (platform === CFD_PLATFORMS.MT5 && has_mt5_account) {\n            setPassword(values.password);\n            multi_step_ref.current?.goNextStep();\n        } else {\n            submitPassword(values, actions);\n        }\n    };\n\n    const steps = [\n        {\n            component:\n                platform === CFD_PLATFORMS.MT5 ? (\n                    <MT5CreatePassword\n                        password={password}\n                        platform={platform}\n                        error_message={error_message}\n                        validatePassword={validatePassword}\n                        onSubmit={onSubmit}\n                        need_tnc={need_tnc}\n                    />\n                ) : (\n                    <CreatePassword\n                        password={password}\n                        platform={platform}\n                        error_message={error_message}\n                        validatePassword={validatePassword}\n                        onSubmit={onSubmit}\n                        need_tnc={need_tnc}\n                    />\n                ),\n        },\n        {\n            component: (\n                <ChangePasswordConfirmation\n                    className='cfd-password-modal__change-password-confirmation'\n                    platform={platform}\n                    onConfirm={(_values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) =>\n                        submitPassword({ password }, actions)\n                    }\n                    onCancel={() => multi_step_ref.current?.goPrevStep()}\n                />\n            ),\n        },\n    ];\n\n    return <MultiStep ref={multi_step_ref} steps={steps} />;\n};\n\nconst CFDPasswordForm = observer(\n    ({\n        closeModal,\n        error_message,\n        error_type,\n        form_error,\n        has_mt5_account,\n        onCancel,\n        onForgotPassword,\n        platform,\n        should_set_trading_password,\n        submitPassword,\n        validatePassword,\n        account_type,\n    }: TCFDPasswordFormProps) => {\n        const { isDesktop } = useDevice();\n        const { jurisdiction_selected_shortcode } = useCfdStore();\n        const [checked, setChecked] = React.useState(false);\n        const need_tnc =\n            jurisdiction_selected_shortcode !== 'svg' &&\n            account_type.category === CATEGORY.REAL &&\n            platform === CFD_PLATFORMS.MT5;\n\n        const button_label = React.useMemo(() => {\n            if (error_type === 'PasswordReset') {\n                return localize('Try later');\n            }\n            return localize('Add account');\n        }, [error_type]);\n\n        const has_cancel_button = (isDesktop ? !should_set_trading_password : true) || error_type === 'PasswordReset';\n\n        const cancel_button_label = getCancelButtonLabel({ should_set_trading_password, error_type, isDesktop });\n\n        const handleCancel = () => {\n            if (!has_cancel_button) {\n                return undefined;\n            }\n            if (should_set_trading_password) {\n                return onCancel();\n            }\n\n            return onForgotPassword();\n        };\n\n        if (error_type === 'PasswordReset') {\n            return (\n                <React.Fragment>\n                    <div className='cfd-password-reset'>\n                        <div className='cfd-password-modal__content cfd-password-modal__content--password-reset'>\n                            <Text as='p' line_height='24' size='xs'>\n                                <Localize i18n_default_text='Please try again in a minute.' />\n                            </Text>\n                        </div>\n                        <Formik onSubmit={closeModal} initialValues={{}}>\n                            {({ handleSubmit }) => (\n                                <form onSubmit={handleSubmit}>\n                                    <FormSubmitButton\n                                        has_cancel={has_cancel_button}\n                                        cancel_label={cancel_button_label}\n                                        onCancel={handleCancel}\n                                        is_absolute={!isDesktop}\n                                        label={button_label}\n                                    />\n                                </form>\n                            )}\n                        </Formik>\n                    </div>\n                </React.Fragment>\n            );\n        }\n\n        if (should_set_trading_password) {\n            return (\n                <CFDCreatePasswordForm\n                    platform={platform}\n                    error_message={error_message}\n                    validatePassword={validatePassword}\n                    submitPassword={submitPassword}\n                    has_mt5_account={has_mt5_account}\n                    need_tnc={need_tnc}\n                />\n            );\n        }\n        // enter password modal\n\n        return (\n            <Formik\n                initialValues={{\n                    password: '',\n                }}\n                enableReinitialize\n                validate={validatePassword}\n                onSubmit={submitPassword}\n            >\n                {({\n                    errors,\n                    isSubmitting,\n                    handleBlur,\n                    handleChange,\n                    handleSubmit,\n                    setFieldTouched,\n                    touched,\n                    values,\n                    validateForm,\n                    isValid,\n                }) => (\n                    <form onSubmit={handleSubmit}>\n                        <div className='cfd-password-modal__content dc-modal__container_cfd-password-modal__body'>\n                            <CFDEnterPasswordModalTitle platform={platform} />\n                            <div className='input-element'>\n                                <PasswordInput\n                                    autoComplete='new-password'\n                                    label={localize('{{platform}} password', {\n                                        platform: getCFDPlatformLabel(platform),\n                                    })}\n                                    error={\n                                        (touched.password && errors.password) ||\n                                        (values.password.length === 0 ? error_message : '')\n                                    }\n                                    name='password'\n                                    value={values.password}\n                                    onBlur={handleBlur}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                        handlePasswordInputChange(e, handleChange, validateForm, setFieldTouched);\n                                    }}\n                                    data_testId={`dt_${platform}_password`}\n                                />\n                            </div>\n                            {error_type === 'PasswordError' && (\n                                <Text size='xs' as='p' className='dc-modal__container_mt5-password-modal__hint'>\n                                    <Localize\n                                        i18n_default_text='Hint: You may have entered your Deriv password, which is different from your {{platform}} password.'\n                                        values={{\n                                            platform: getCFDPlatformLabel(platform),\n                                        }}\n                                    />\n                                </Text>\n                            )}\n                            {account_type.category === CATEGORY.REAL && platform === CFD_PLATFORMS.MT5 && (\n                                <CfdPasswordModalTnc\n                                    className='cfd-password-modal-tnc--bottom'\n                                    platform={platform}\n                                    checked={checked}\n                                    onCheck={() => setChecked(prev => !prev)}\n                                    need_tnc={need_tnc}\n                                />\n                            )}\n                        </div>\n                        <FormSubmitButton\n                            is_disabled={!values.password || !isValid || (need_tnc && !checked)}\n                            has_cancel={has_cancel_button}\n                            cancel_label={cancel_button_label}\n                            onCancel={handleCancel}\n                            is_absolute={!isDesktop}\n                            is_loading={isSubmitting}\n                            label={button_label}\n                            is_center={should_set_trading_password}\n                            form_error={form_error}\n                        />\n                    </form>\n                )}\n            </Formik>\n        );\n    }\n);\n\nconst CFDPasswordModal = observer(({ form_error, platform }: TCFDPasswordModalProps) => {\n    const { isDesktop, isMobileOrTabletLandscape } = useDevice();\n    const isMobileOrTabletPortrait = !isDesktop && !isMobileOrTabletLandscape;\n    const { client, traders_hub, ui } = useStore();\n\n    const {\n        email,\n        account_status,\n        is_logged_in,\n        is_populating_mt5_account_list,\n        is_dxtrade_allowed,\n        mt5_login_list,\n        updateAccountStatus,\n        updateMT5Status,\n    } = client;\n    const { show_eu_related_content, is_eu_user, toggleAccountTransferModal, combined_cfd_mt5_accounts } = traders_hub;\n    const { is_mt5_migration_modal_enabled, setMT5MigrationModalEnabled, is_mt5_migration_modal_open } = ui;\n\n    const {\n        account_type,\n        disableCFDPasswordModal,\n        error_message,\n        error_type,\n        getAccountStatus,\n        has_cfd_error,\n        is_cfd_success_dialog_enabled,\n        is_cfd_password_modal_enabled,\n        setError,\n        setCFDSuccessDialog,\n        submitMt5Password,\n        submitCFDPassword,\n        new_account_response,\n        product,\n        setMigratedMT5Accounts,\n        is_mt5_password_changed_modal_visible,\n        is_mt5_password_invalid_format_modal_visible,\n        setIsMt5PasswordInvalidFormatModalVisible,\n        is_sent_email_modal_enabled,\n        setSentEmailModalStatus,\n        is_nakala_banner_visible,\n        setNakalaBannerVisible,\n    } = useCfdStore();\n\n    const history = useHistory();\n\n    const [is_password_modal_exited, setPasswordModalExited] = React.useState(true);\n    const has_mt5_account = Boolean(mt5_login_list?.length);\n    const should_set_trading_password =\n        Array.isArray(account_status?.status) &&\n        account_status.status.includes(\n            platform === CFD_PLATFORMS.MT5 ? 'mt5_password_not_set' : 'dxtrade_password_not_set'\n        );\n    const is_password_error = error_type === 'PasswordError';\n    const is_password_reset = error_type === 'PasswordReset';\n    const is_incorrect_mt5_password_format_error =\n        error_type === 'InvalidTradingPlatformPasswordFormat' || error_type === 'IncorrectMT5PasswordFormat';\n\n    const [new_password_value, setNewPasswordValue] = React.useState('');\n    const [is_nakala_info_visible, setIsNakalaInfoVisible] = React.useState(is_nakala_banner_visible);\n\n    const mt5_trade_account = combined_cfd_mt5_accounts.find(account => account.product === 'standard');\n    const { nakalaServerInfo, loginId } = useIsEnabledNakala([mt5_trade_account]);\n\n    // Usecase: Added this timeout to render the Password Change modal after the password modal is closed.\n    // It is to avoid the flickering of the modal.\n    React.useEffect(() => {\n        let timeout: NodeJS.Timeout;\n        if (is_incorrect_mt5_password_format_error) {\n            timeout = setTimeout(() => {\n                setIsMt5PasswordInvalidFormatModalVisible(true);\n            }, 500);\n        }\n\n        return () => clearTimeout(timeout);\n    }, [is_incorrect_mt5_password_format_error, setIsMt5PasswordInvalidFormatModalVisible]);\n\n    React.useEffect(() => {\n        if (is_logged_in) {\n            updateMT5Status();\n            updateAccountStatus();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const validatePassword = (values: TCFDPasswordFormValues) => {\n        const errors: FormikErrors<TCFDPasswordFormValues> = {};\n        const max_length = platform === CFD_PLATFORMS.MT5 && should_set_trading_password ? 16 : 25;\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: max_length,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: max_length,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        } else if (\n            platform === CFD_PLATFORMS.MT5 &&\n            should_set_trading_password &&\n            !validMT5Password(values.password)\n        ) {\n            errors.password = localize(\n                'Please include at least 1 special character such as ( _ @ ? ! / # ) in your password.'\n            );\n        }\n        if (values.password?.toLowerCase() === email.toLowerCase()) {\n            errors.password = localize('Your password cannot be the same as your email address.');\n        }\n        return errors;\n    };\n\n    const closeDialogs = () => {\n        setCFDSuccessDialog(false);\n        if (is_mt5_migration_modal_enabled) setMT5MigrationModalEnabled(false);\n        setMigratedMT5Accounts([]);\n        setError(false);\n    };\n\n    const closeModal = () => {\n        updateMT5Status();\n        closeDialogs();\n        disableCFDPasswordModal();\n    };\n\n    const onCloseNakalaSuccessModal = () => {\n        setNakalaBannerVisible(false);\n        updateMT5Status();\n        closeDialogs();\n        disableCFDPasswordModal();\n    };\n\n    const closeOpenSuccess = () => {\n        disableCFDPasswordModal();\n        closeDialogs();\n        if (account_type.category === CATEGORY.REAL) {\n            toggleAccountTransferModal();\n        }\n    };\n\n    const handleForgotPassword = () => {\n        closeModal();\n        let redirect_to = platform === CFD_PLATFORMS.MT5 ? 1 : 2;\n\n        // if account type is real convert redirect_to from 1 or 2 to 10 or 20\n        // and if account type is demo convert redirect_to from 1 or 2 to 11 or 21\n        if (account_type.category === CATEGORY.REAL) {\n            redirect_to = Number(`${redirect_to}0`);\n        } else if (account_type.category === CATEGORY.DEMO) {\n            redirect_to = Number(`${redirect_to}1`);\n        }\n\n        const password_reset_code =\n            platform === CFD_PLATFORMS.MT5\n                ? 'trading_platform_mt5_password_reset'\n                : 'trading_platform_dxtrade_password_reset';\n        WS.verifyEmail(email, password_reset_code, {\n            url_parameters: {\n                redirect_to,\n            },\n        });\n        setSentEmailModalStatus(true);\n    };\n\n    const submitPassword: TOnSubmitPassword = (values, actions) => {\n        if (platform === CFD_PLATFORMS.MT5) {\n            submitMt5Password(\n                {\n                    ...values,\n                },\n                actions\n            );\n        } else {\n            (values as TCFDPasswordFormValues & { platform: string }).platform = platform;\n            submitCFDPassword(values, actions);\n        }\n    };\n\n    const should_show_password =\n        is_cfd_password_modal_enabled &&\n        !is_cfd_success_dialog_enabled &&\n        (!has_cfd_error || is_password_error || is_password_reset);\n\n    const should_show_success_modals = !has_cfd_error && is_cfd_success_dialog_enabled && is_password_modal_exited;\n\n    const should_show_success = should_show_success_modals && !is_mt5_migration_modal_enabled;\n\n    const should_show_migration_success =\n        should_show_success_modals &&\n        is_mt5_migration_modal_enabled &&\n        !is_populating_mt5_account_list &&\n        !is_mt5_migration_modal_open;\n\n    const should_show_sent_email_modal = is_sent_email_modal_enabled && is_password_modal_exited;\n\n    const should_show_password_modal = React.useMemo(() => {\n        if (should_show_password) {\n            return should_set_trading_password ? true : isDesktop;\n        }\n        return false;\n    }, [should_set_trading_password, should_show_password]);\n\n    const should_show_password_dialog = React.useMemo(() => {\n        if (should_show_password) {\n            if (!should_set_trading_password) return !isDesktop;\n        }\n        return false;\n    }, [isDesktop, should_set_trading_password, should_show_password]);\n\n    const success_modal_submit_label = React.useMemo(() => {\n        if (account_type.category === CATEGORY.REAL) {\n            return localize('Transfer now');\n        }\n        return localize('Continue');\n    }, [account_type]);\n\n    const success_modal_cancel_label = React.useMemo(() => {\n        if (is_eu_user && account_type.category === 'real' && platform === CFD_PLATFORMS.MT5) {\n            return localize('Maybe later');\n        }\n        return '';\n    }, [platform, account_type, is_eu_user]);\n\n    const getSuccssMessage = () => {\n        const { category, type } = account_type;\n        if (!category && !type) return '';\n\n        const category_label = category === CATEGORY.REAL ? localize('real') : localize('demo');\n        let type_label = '';\n        switch (platform) {\n            case CFD_PLATFORMS.MT5:\n                type_label = getMtCompanies(show_eu_related_content, product)[category as keyof TMtCompanies][\n                    type as keyof TMtCompanies['demo' | 'real']\n                ].short_title;\n                break;\n            case CFD_PLATFORMS.DXTRADE:\n                type_label =\n                    getDxCompanies()[category as keyof TDxCompanies][type as keyof TDxCompanies['demo' | 'real']]\n                        .short_title;\n                break;\n            default:\n                type_label = '';\n                break;\n        }\n\n        const accountTypes = () => {\n            if (platform === CFD_PLATFORMS.DXTRADE || platform === CFD_PLATFORMS.CTRADER) {\n                return '';\n            }\n            return type_label;\n        };\n\n        if (category === CATEGORY.REAL) {\n            return (\n                <React.Fragment>\n                    {platform === CFD_PLATFORMS.DXTRADE || platform === CFD_PLATFORMS.CTRADER ? (\n                        <Localize\n                            i18n_default_text='Congratulations, you have successfully created your <0/>{{category}} {{platform}} {{type}} account. To start trading, <1 />transfer funds <2 />from your Deriv account into this account.'\n                            values={{\n                                type: accountTypes(),\n                                platform: getCFDPlatformLabel(platform),\n                                category: category_label,\n                            }}\n                            components={[\n                                <br key={0} />,\n                                platform === CFD_PLATFORMS.CTRADER && <br key={1} />,\n                                platform === CFD_PLATFORMS.DXTRADE && <br key={2} />,\n                            ]}\n                        />\n                    ) : (\n                        <React.Fragment>\n                            <Localize\n                                i18n_default_text='Your Deriv MT5 {{type}} account is ready. '\n                                values={{\n                                    type: accountTypes(),\n                                }}\n                            />\n                            <Localize i18n_default_text='Enable trading with your first transfer.' />\n                        </React.Fragment>\n                    )}\n                </React.Fragment>\n            );\n        }\n\n        if (platform === CFD_PLATFORMS.MT5) {\n            return (\n                <Localize\n                    i18n_default_text='Your demo {{deriv}} {{type}} account is ready.'\n                    values={{\n                        type: accountTypes(),\n                        deriv: 'Deriv MT5',\n                    }}\n                />\n            );\n        }\n\n        return (\n            <Localize\n                i18n_default_text='Congratulations, you have successfully created your <0/>{{category}} {{platform}} {{type}} account. '\n                values={{\n                    type: accountTypes(),\n                    platform: is_eu_user ? '' : getCFDPlatformLabel(platform),\n                    category: category_label,\n                }}\n                components={[<br key={0} />]}\n            />\n        );\n    };\n\n    const handleCFdPasswordModal = () => {\n        if (is_nakala_banner_visible && is_nakala_info_visible) {\n            return <CFDDerivNakalaInfo onclickAction={() => setIsNakalaInfoVisible(false)} />;\n        }\n        return cfd_password_form;\n    };\n\n    const cfd_password_form = (\n        <CFDPasswordForm\n            closeModal={closeModal}\n            error_type={error_type}\n            error_message={error_type !== 'InvalidTradingPlatformPasswordFormat' ? error_message : ''}\n            has_mt5_account={has_mt5_account}\n            form_error={form_error}\n            should_set_trading_password={should_set_trading_password}\n            validatePassword={validatePassword}\n            onForgotPassword={handleForgotPassword}\n            submitPassword={submitPassword}\n            platform={platform}\n            is_dxtrade_allowed={is_dxtrade_allowed}\n            onCancel={closeModal}\n            account_type={account_type}\n        />\n    );\n\n    const password_modal = (\n        <Modal\n            className={classNames('cfd-password-modal', {\n                'cfd-password-modal__mt5': platform === CFD_PLATFORMS.MT5 && should_set_trading_password,\n            })}\n            has_close_icon\n            is_open={should_show_password_modal}\n            toggleModal={closeModal}\n            should_header_stick_body\n            renderTitle={() => (\n                <PasswordModalHeader\n                    should_set_trading_password={should_set_trading_password}\n                    is_password_reset_error={is_password_reset}\n                    platform={platform}\n                    is_nakala_info={is_nakala_info_visible}\n                />\n            )}\n            onUnmount={() => getAccountStatus(platform)}\n            onExited={() => setPasswordModalExited(true)}\n            onEntered={() => setPasswordModalExited(false)}\n            width='auto'\n        >\n            {handleCFdPasswordModal()}\n        </Modal>\n    );\n\n    const password_modal_mobile = (\n        <MobileDialog\n            has_full_height\n            portal_element_id='modal_root'\n            visible={should_show_password_modal}\n            onClose={closeModal}\n            wrapper_classname='cfd-password-modal cfd-password-modal__mt5'\n            renderTitle={() => (\n                <PasswordModalHeader\n                    should_set_trading_password={should_set_trading_password}\n                    is_password_reset_error={is_password_reset}\n                    platform={platform}\n                    is_nakala_info={is_nakala_info_visible}\n                />\n            )}\n        >\n            {handleCFdPasswordModal()}\n        </MobileDialog>\n    );\n\n    const password_dialog = (\n        <MobileDialog\n            has_full_height\n            portal_element_id='modal_root'\n            visible={should_show_password_dialog}\n            onClose={closeModal}\n            wrapper_classname='cfd-password-modal'\n            renderTitle={() => (\n                <PasswordModalHeader\n                    should_set_trading_password={should_set_trading_password}\n                    has_mt5_account={has_mt5_account}\n                    is_password_reset_error={is_password_reset}\n                    platform={platform}\n                    is_nakala_info={is_nakala_info_visible}\n                />\n            )}\n        >\n            {handleCFdPasswordModal()}\n        </MobileDialog>\n    );\n\n    const is_mt5_password_format_invalid_desktop = (\n        <Modal\n            className='cfd-password-modal'\n            has_close_icon\n            is_open={is_mt5_password_invalid_format_modal_visible}\n            toggleModal={closeModal}\n            should_header_stick_body\n            title={localize('Deriv MT5 latest password requirements')}\n            width='auto'\n        >\n            <CFDPasswordChange\n                error_type={error_type}\n                error_message={error_message}\n                form_error={form_error}\n                should_set_trading_password={should_set_trading_password}\n                setNewPasswordValue={setNewPasswordValue}\n                validatePassword={validatePassword}\n                onForgotPassword={handleForgotPassword}\n                platform={CFD_PLATFORMS.MT5}\n                onCancel={closeModal}\n            />\n        </Modal>\n    );\n\n    const is_mt5_password_format_invalid = (\n        <MobileDialog\n            has_full_height\n            portal_element_id='modal_root'\n            visible={is_mt5_password_invalid_format_modal_visible}\n            onClose={closeModal}\n            wrapper_classname='cfd-password-modal cfd-password-change__wrapper'\n            header_classname='cfd-password-change__header'\n            renderTitle={() => localize('Deriv MT5 latest password requirements')}\n        >\n            <CFDPasswordChange\n                error_type={error_type}\n                error_message={error_message}\n                form_error={form_error}\n                should_set_trading_password={should_set_trading_password}\n                setNewPasswordValue={setNewPasswordValue}\n                validatePassword={validatePassword}\n                onForgotPassword={handleForgotPassword}\n                platform={CFD_PLATFORMS.MT5}\n                onCancel={closeModal}\n            />\n        </MobileDialog>\n    );\n\n    const success_mt5_nakala_modal = () => {\n        if (isDesktop) {\n            return (\n                <Modal\n                    className={classNames('cfd-password-modal')}\n                    has_close_icon\n                    hasfull_height={isDesktop ? undefined : true}\n                    is_open={should_show_success && is_nakala_banner_visible}\n                    toggleModal={onCloseNakalaSuccessModal}\n                    should_header_stick_body={false}\n                    renderTitle={() => localize('Deriv Nakala')}\n                    width={isDesktop ? '485px' : '100%'}\n                >\n                    <CFDDerivNakalaLinkAccount isSuccess nakalaInfo={{ loginId, serverName: nakalaServerInfo }} />\n                </Modal>\n            );\n        }\n        return (\n            <PageOverlay\n                is_open={should_show_success && is_nakala_banner_visible}\n                portal_id='deriv_app'\n                onClickClose={onCloseNakalaSuccessModal}\n                header_classname='cfd-trade-modal__mobile-title'\n                header=' '\n            >\n                <Div100vhContainer className='cfd-trade-modal__mobile-view-wrapper' height_offset='80px'>\n                    <CFDDerivNakalaLinkAccount isSuccess nakalaInfo={{ loginId, serverName: nakalaServerInfo }} />\n                </Div100vhContainer>\n            </PageOverlay>\n        );\n    };\n\n    const invalid_mt5_password_modal = isMobileOrTabletPortrait\n        ? is_mt5_password_format_invalid\n        : is_mt5_password_format_invalid_desktop;\n\n    return (\n        <React.Fragment>\n            {platform === CFD_PLATFORMS.MT5 && !isDesktop && password_modal_mobile}\n            {password_modal}\n            {password_dialog}\n            {is_nakala_banner_visible && success_mt5_nakala_modal()}\n            <SuccessDialog\n                is_open={should_show_success && !is_nakala_banner_visible}\n                toggleModal={closeModal}\n                onCancel={closeModal}\n                onSubmit={closeOpenSuccess}\n                classNameMessage='cfd-password-modal__message'\n                message={getSuccssMessage()}\n                icon={\n                    <CFDPasswordSuccessIcon\n                        platform={platform}\n                        type={account_type.type}\n                        show_eu_related_content={show_eu_related_content}\n                        product={product}\n                    />\n                }\n                icon_size='xlarge'\n                text_submit={success_modal_submit_label}\n                text_cancel={success_modal_cancel_label}\n                has_cancel={account_type.category === CATEGORY.REAL}\n                has_close_icon={false}\n                width='auto'\n                is_medium_button={!isDesktop}\n            />\n            <MigrationSuccessModal is_open={should_show_migration_success} closeModal={closeModal} />\n            <SentEmailModal\n                is_open={should_show_sent_email_modal}\n                identifier_title='trading_password'\n                onClose={() => setSentEmailModalStatus(false)}\n                onClickSendEmail={handleForgotPassword}\n            />\n            {is_incorrect_mt5_password_format_error && invalid_mt5_password_modal}\n            {is_mt5_password_changed_modal_visible && (\n                <CFDPasswordChangeContent closeModal={closeModal} password_value={new_password_value} />\n            )}\n        </React.Fragment>\n    );\n});\n\nexport default CFDPasswordModal;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_sent_email_modal__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_hooks__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_stores__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;","module.exports = __WEBPACK_EXTERNAL_MODULE_classnames__;","module.exports = __WEBPACK_EXTERNAL_MODULE_formik__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react_router__;","var u = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction f(e) {\n  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, \"default\") ? e.default : e;\n}\nfunction l(e) {\n  if (e.__esModule) return e;\n  var r = e.default;\n  if (typeof r == \"function\") {\n    var t = function o() {\n      return this instanceof o ? Reflect.construct(r, arguments, this.constructor) : r.apply(this, arguments);\n    };\n    t.prototype = r.prototype;\n  } else t = {};\n  return Object.defineProperty(t, \"__esModule\", { value: !0 }), Object.keys(e).forEach(function(o) {\n    var n = Object.getOwnPropertyDescriptor(e, o);\n    Object.defineProperty(t, o, n.get ? n : {\n      enumerable: !0,\n      get: function() {\n        return e[o];\n      }\n    });\n  }), t;\n}\nexport {\n  l as a,\n  u as c,\n  f as g\n};\n","import { u as t } from \"../index-EY1gwl5O.js\";\nconst d = () => {\n  const i = t(\"(min-width: 1280px)\"), a = t(\"(max-width: 600px)\"), n = t(\n    \"(min-width: 601px) and (max-width: 1279px)\"\n  ), e = t(\n    \"(min-width: 601px) and (max-width: 1279px) and (orientation: portrait)\"\n  ), o = t(\n    \"(max-width: 1279px) and (orientation: landscape)\"\n  );\n  return {\n    /** returns Larger screen tablets [min-width: 1280px] */\n    isDesktop: i,\n    /**  returns Smaller screen tablets [max-width: 600px] */\n    isMobile: a,\n    /** returns Larger screen phones and smaller screen desktop [min-width: 601px and max-width: 1279px] */\n    isTablet: n,\n    /** returns tablet screen with portrait orientation [min-width: 601px and max-width: 1279px and orientation: portrait] */\n    isTabletPortrait: e,\n    /** returns mobile or medium screens in landscape orientation [max-width: 1279px and orientation: landscape] */\n    isMobileOrTabletLandscape: o\n  };\n};\nexport {\n  d as useDevice\n};\n","import { useState as d, useLayoutEffect as m, useEffect as u, useRef as l } from \"react\";\nimport { c as a } from \"./_commonjsHelpers-BkfeUUK-.js\";\nvar v = typeof a == \"object\" && a && a.Object === Object && a, E = typeof self == \"object\" && self && self.Object === Object && self;\nv || E || Function(\"return this\")();\nvar f = typeof window < \"u\" ? m : u;\nfunction L(t, s, o, i) {\n  const c = l(s);\n  f(() => {\n    c.current = s;\n  }, [s]), u(() => {\n    const n = window;\n    if (!(n && n.addEventListener))\n      return;\n    const r = (e) => {\n      c.current(e);\n    };\n    return n.addEventListener(t, r, i), () => {\n      n.removeEventListener(t, r, i);\n    };\n  }, [t, o, i]);\n}\nvar h = typeof window > \"u\";\nfunction O(t, {\n  defaultValue: s = !1,\n  initializeWithValue: o = !0\n} = {}) {\n  const i = (e) => h ? s : window.matchMedia(e).matches, [c, n] = d(() => o ? i(t) : s);\n  function r() {\n    n(i(t));\n  }\n  return f(() => {\n    const e = window.matchMedia(t);\n    return r(), e.addListener ? e.addListener(r) : e.addEventListener(\"change\", r), () => {\n      e.removeListener ? e.removeListener(r) : e.removeEventListener(\"change\", r);\n    };\n  }, [t]), c;\n}\nfunction g(t, s, o = \"mousedown\", i = {}) {\n  L(\n    o,\n    (c) => {\n      const n = c.target;\n      if (!n || !n.isConnected)\n        return;\n      (Array.isArray(t) ? t.filter((e) => !!e.current).every((e) => e.current && !e.current.contains(n)) : t.current && !t.current.contains(n)) && s(c);\n    },\n    void 0,\n    i\n  );\n}\nexport {\n  g as a,\n  O as u\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames not based on template\n\tif (chunkId === \"assets\") return \"cfd/js/\" + chunkId + \".js\";\n\t// return url for filenames based on template\n\treturn \"cfd/js/cfd.\" + chunkId + \".\" + {\"src_Containers_mt5-create-password_mt5-create-password_tsx\":\"e9ee4ab0c15d40673e8b\",\"src_Containers_cfd-password-modal-tnc_tsx\":\"4e83d82883533e2c5044\",\"src_Containers_cfd-password-change_tsx\":\"5e26bd913280399de9e4\",\"src_Containers_cfd-password-success-icon_tsx\":\"e3ab986661919ac107e6\",\"src_Containers_cfd-password-change-content_tsx\":\"6640cb3e341912e06752\",\"src_Containers_cfd-change-password-confirmation_tsx\":\"c67f2a9c29612c8ff7e3\"}[chunkId] + \".js\";\n};","// This function allow to reference all chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames not based on template\n\tif (chunkId === \"CFDPasswordModal\") return \"cfd/css/cfd.main.9d947fa86520d02f117b.css\";\n\t// return url for filenames based on template\n\treturn \"cfd/css/cfd.\" + chunkId + \".\" + \"8dd0e6e57d8ff43870f2\" + \".css\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.j = \"CFDPasswordModal\";","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"CFDPasswordModal\": 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_deriv_cfd\"] = self[\"webpackChunk_deriv_cfd\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"internalCFDStoreUsage\",\"utilities\"], () => (__webpack_require__(\"./src/Containers/cfd-password-modal.tsx\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_sent_email_modal__","__WEBPACK_EXTERNAL_MODULE__deriv_components__","__WEBPACK_EXTERNAL_MODULE__deriv_hooks__","__WEBPACK_EXTERNAL_MODULE__deriv_shared__","__WEBPACK_EXTERNAL_MODULE__deriv_stores__","__WEBPACK_EXTERNAL_MODULE__deriv_translations__","__WEBPACK_EXTERNAL_MODULE_classnames__","__WEBPACK_EXTERNAL_MODULE_formik__","__WEBPACK_EXTERNAL_MODULE_react__","__WEBPACK_EXTERNAL_MODULE_react_router__","deferred","inProgress","dataWebpackPrefix","loadStylesheet","installedCssChunks","observer","_ref","icon","eligible_account_to_migrate","jurisdiction_market_name","closePopupModal","is_mobile","useStore","ui","platform","getCFDPlatformNames","CFD_PLATFORMS","MT5","text_size","information_text_size","getFormattedAccounts","length","type_1","type_2","React","className","Modal","Body","classNames","Icon","size","Text","as","weight","Localize","i18n_default_text","align","values","_objectSpread","components","key","InlineMessage","type","title","existing_account","getFormattedJurisdictionCode","Jurisdiction","SVG","message","Footer","has_separator","Button","has_effect","onClick","primary","large","_migrated_mt5_account","is_open","closeModal","setMT5MigrationModalEnabled","_useCfdStore","useCfdStore","migrated_mt5_accounts","setIsFromMt5MigrationModal","has_migrated_mt5_accounts","map","account","_Object$values","_account$to_account","Object","to_account","_Object$keys","_account$to_account2","getFormattedJurisdictionMarketTypes","keys","closeMigrationModals","getMigrationIcon","_Object$values2","_migrated_mt5_account2","to_acc","BVI","VANUATU","ModalContent","MigrationSuccessModalContent","PageOverlay","header_classname","portal_id","header","onClickClose","toggleModal","has_close_icon","width","should_header_stick_body","_ref$classNameMessage","classNameMessage","_ref$has_cancel","has_cancel","_ref$has_submit","has_submit","onCancel","onSubmit","heading","_ref$icon_size","icon_size","text_submit","text_cancel","_ref$width","is_medium_button","small","custom_color","_extends","text","localize","secondary","medium","target","i","arguments","source","api","init","converter","defaultAttributes","set","name","value","attributes","document","expires","Date","now","toUTCString","encodeURIComponent","replace","decodeURIComponent","escape","stringifiedAttributes","attributeName","split","cookie","write","create","get","cookies","jar","parts","slice","join","found","read","e","remove","withAttributes","this","withConverter","freeze","path","CFDAccountCopy","Clipboard","text_copy","info_message","isMobile","success_message","popoverAlignment","is_bold","is_broker","ModalInfo","CFDDerivNakalaLinkAccount","props","_nakalaInfo$serverNam","_nakalaInfo$loginId","_props$isSuccess","isSuccess","nakalaInfo","manageNakalaCookie","nakalaLinkedCookie","Cookies","domain","isDesktopDevice","isDesktop","useEffect","color","height","SpecBox","serverName","loginId","href","rel","window","open","concat","onclickAction","cfd","modules","account_title","account_type","getAccountCardTitle","CTRADER","DXTRADE","category","CATEGORY","REAL","getCFDPlatformLabel","should_set_trading_password","is_nakala_info","_useDevice","padding","line_height","is_mt5","is_password_reset_error","platform_name","getCancelButtonLabel","setFieldTouched","CreatePassword","validatePassword","_ref3","error_message","createElement","initialValues","password","enableReinitialize","validate","isSubmitting","handleBlur","handleChange","_ref4","handleSubmit","touched","validateForm","has_error","custom_feedback_messages","getErrorMessages","password_warnings","PasswordInput","error","onBlur","onChange","handlePasswordInputChange","data_testId","is_disabled","is_center","_ref5","submitPassword","need_tnc","useRef","_React$useState2","_multi_step_ref$curre","setPassword","multi_step_ref","steps","component","onConfirm","actions","CFDPasswordForm","error_type","form_error","_ref6","has_mt5_account","onForgotPassword","useDevice","_useDevice2","jurisdiction_selected_shortcode","checked","_React$useState4","button_label","useMemo","cancel_button_label","handleCancel","has_cancel_button","cancel_label","is_absolute","label","_ref8","isValid","onCheck","setChecked","is_loading","_useDevice3","isMobileOrTabletLandscape","isMobileOrTabletPortrait","client","traders_hub","email","account_status","is_logged_in","is_populating_mt5_account_list","is_dxtrade_allowed","mt5_login_list","updateAccountStatus","updateMT5Status","show_eu_related_content","is_eu_user","toggleAccountTransferModal","combined_cfd_mt5_accounts","is_mt5_migration_modal_enabled","is_mt5_migration_modal_open","_useCfdStore2","disableCFDPasswordModal","getAccountStatus","has_cfd_error","is_cfd_success_dialog_enabled","is_cfd_password_modal_enabled","setError","setCFDSuccessDialog","submitMt5Password","submitCFDPassword","new_account_response","product","setMigratedMT5Accounts","is_mt5_password_invalid_format_modal_visible","is_mt5_password_changed_modal_visible","setIsMt5PasswordInvalidFormatModalVisible","is_sent_email_modal_enabled","setSentEmailModalStatus","is_nakala_banner_visible","setNakalaBannerVisible","useState","_React$useState6","_slicedToArray","_React$useState5","is_password_modal_exited","setPasswordModalExited","isArray","is_password_reset","is_incorrect_mt5_password_format_error","_React$useState7","_React$useState8","new_password_value","_React$useState10","_React$useState9","is_nakala_info_visible","setIsNakalaInfoVisible","_useIsEnabledNakala","mt5_trade_account","nakalaServerInfo","setTimeout","min","max","max_length","errors","min_number","_values$password","validPassword","closeDialogs","redirect_to","Number","password_reset_code","should_show_migration_success","should_show_success_modals","should_show_sent_email_modal","should_show_password_modal","should_show_password","password_modal","renderTitle","onUnmount","onExited","onEntered","handleCFdPasswordModal","has_full_height","portal_element_id","visible","onClose","wrapper_classname","should_show_password_dialog","setNewPasswordValue","handleForgotPassword","is_mt5_password_format_invalid","success_mt5_nakala_modal","should_show_success","onCloseNakalaSuccessModal","height_offset","getSuccssMessage","category_label","type_label","getMtCompanies","getDxCompanies","short_title","accountTypes","SentEmailModal","identifier_title","onClickSendEmail","password_value","CFDPasswordModal","u","globalThis","global","d","isTablet","isTabletPortrait","v","E","Function","f","h","O","t","defaultValue","s","initializeWithValue","o","matchMedia","matches","c","n","r","addListener","addEventListener","removeListener","removeEventListener","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","getter","__esModule","a","definition","defineProperty","enumerable","chunkId","Promise","all","reduce","promises","miniCssF","obj","prop","prototype","hasOwnProperty","call","l","url","done","push","script","needAttach","scripts","getElementsByTagName","getAttribute","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","event","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","forEach","bind","head","appendChild","Symbol","toStringTag","p","resolve","reject","fullhref","existingLinkTags","dataHref","tag","existingStyleTags","findStylesheet","linkTag","errorType","realHref","err","Error","code","request","createStylesheet","miniCss","then","installedChunks","installedChunkData","promise","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}