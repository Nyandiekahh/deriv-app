{"version":3,"file":"cfd/js/CFDStore.js","mappings":"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","sources":["webpack://@deriv/cfd/webpack/universalModuleDefinition","webpack://@deriv/cfd/./src/Stores/Modules/CFD/Helpers/cfd-config.ts","webpack://@deriv/cfd/external umd \"@deriv/shared\"","webpack://@deriv/cfd/external umd \"@deriv/translations\"","webpack://@deriv/cfd/external umd \"mobx\"","webpack://@deriv/cfd/webpack/bootstrap","webpack://@deriv/cfd/webpack/runtime/compat get default export","webpack://@deriv/cfd/webpack/runtime/define property getters","webpack://@deriv/cfd/webpack/runtime/hasOwnProperty shorthand","webpack://@deriv/cfd/./src/Stores/base-store.js","webpack://@deriv/cfd/./src/Stores/Modules/CFD/cfd-store.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"), require(\"mobx\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@deriv/shared\", \"@deriv/translations\", \"mobx\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@deriv/cfd\"] = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"), require(\"mobx\"));\n\telse\n\t\troot[\"@deriv/cfd\"] = factory(root[\"@deriv/shared\"], root[\"@deriv/translations\"], root[\"mobx\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_mobx__) => {\nreturn ","import { Jurisdiction, PRODUCT } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TProducts } from 'Components/props.types';\n\nexport type TDxCompanies = ReturnType<typeof getDxCompanies>;\nexport type TMtCompanies = ReturnType<typeof getMtCompanies>;\nexport type TCTraderCompanies = ReturnType<typeof getCTraderCompanies>;\n\nexport const getDxCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('CFDs'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Standard'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: localize('Financial'),\n    };\n    return {\n        demo: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getCTraderCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('All'),\n    };\n    return {\n        demo: {\n            all: {\n                ctrader_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('All'),\n                short_title: all_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getMtCompanies = (is_eu: boolean, product?: TProducts) => {\n    const all_config = {\n        account_type: '',\n        leverage: 100,\n        short_title: product === 'swap_free' ? localize('Swap-Free') : localize('Zero Spread'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Standard'),\n    };\n\n    let financial_title;\n    switch (product) {\n        case PRODUCT.STP:\n            financial_title = localize('Financial STP');\n            break;\n        case PRODUCT.GOLD:\n            financial_title = localize('Gold');\n            break;\n        default:\n            financial_title = localize('Financial');\n    }\n\n    const financial_demo_title = product === PRODUCT.GOLD ? localize('Demo Gold') : localize('Demo Financial');\n    const financial_demo_title_eu = product === PRODUCT.GOLD ? localize('Demo Gold') : localize('Demo CFDs');\n    const financial_demo_short_title = product === PRODUCT.GOLD ? localize('Gold') : localize('Deriv CFDs');\n    const financial_title_eu = product === PRODUCT.GOLD ? localize('Deriv Gold') : localize('Deriv CFDs');\n\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: is_eu ? financial_demo_short_title : financial_title,\n    };\n    const financial_stp_config = {\n        account_type: 'financial_stp',\n        leverage: 100,\n        short_title: localize('Financial STP'),\n    };\n\n    return {\n        demo: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: product === 'swap_free' ? localize('Demo Swap-Free') : localize('Demo Zero Spread'),\n                short_title: all_config.short_title,\n            },\n            all_swap_free_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free SVG'),\n                short_title: localize('Swap-Free SVG'),\n            },\n            all_zero_spread_bvi: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Zero Spread BVI'),\n                short_title: localize('Zero Spread BVI'),\n            },\n            ctrader: {\n                mt5_account_type: all_config.account_type,\n                leverage: '500',\n                title: localize('Demo'),\n                short_title: localize('cTrader'),\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? financial_demo_title_eu : financial_demo_title,\n                short_title: financial_config.short_title,\n            },\n            financial_demo: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Standard SVG'),\n                short_title: synthetic_config.short_title,\n            },\n\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial SVG'),\n                short_title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Demo Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: product === 'swap_free' ? localize('Swap-Free') : localize('Zero Spread'),\n                short_title: all_config.short_title,\n            },\n            all_swap_free_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free SVG'),\n                short_title: all_config.short_title,\n            },\n            all_zero_spread_bvi: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Zero Spread BVI'),\n                short_title: all_config.short_title,\n            },\n            ctrader: {\n                mt5_account_type: all_config.account_type,\n                leverage: '500',\n                title: localize('Real'),\n                short_title: localize('cTrader'),\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard SVG'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_bvi: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard BVI'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_v: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard Vanuatu'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? financial_title_eu : financial_title,\n                short_title: financial_config.short_title,\n            },\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n                short_title: financial_config.short_title,\n            },\n            financial_bvi: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial BVI'),\n                short_title: financial_config.short_title,\n            },\n            financial_fx: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Labuan'),\n                short_title: financial_config.short_title,\n            },\n            financial_v: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Vanuatu'),\n                short_title: financial_config.short_title,\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getFormattedJurisdictionCode = (jurisdiction_code: string) => {\n    let formatted_label = '';\n\n    switch (jurisdiction_code) {\n        case Jurisdiction.SVG:\n            formatted_label = localize('SVG');\n            break;\n        case Jurisdiction.BVI:\n            formatted_label = localize('BVI');\n            break;\n        case Jurisdiction.LABUAN:\n            formatted_label = localize('Labuan');\n            break;\n        case Jurisdiction.VANUATU:\n            formatted_label = localize('Vanuatu');\n            break;\n        case Jurisdiction.MALTA_INVEST:\n            formatted_label = localize('Malta');\n            break;\n        default:\n            formatted_label = jurisdiction_code?.toUpperCase();\n            break;\n    }\n\n    return formatted_label;\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;","module.exports = __WEBPACK_EXTERNAL_MODULE_mobx__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { action, intercept, makeObservable, observable, reaction, toJS, when } from 'mobx';\n\nimport { isEmptyObject, isProduction, Validator } from '@deriv/shared';\n\n/**\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\n *  1. Creating snapshot object from the store.\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\n */\nexport default class BaseStore {\n    /**\n     * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\n     */\n    static STORAGES = Object.freeze({\n        LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\n        SESSION_STORAGE: Symbol('SESSION_STORAGE'),\n    });\n\n    validation_errors = {};\n\n    validation_rules = {};\n\n    preSwitchAccountDisposer = null;\n    pre_switch_account_listener = null;\n\n    switchAccountDisposer = null;\n    switch_account_listener = null;\n\n    logoutDisposer = null;\n    logout_listener = null;\n\n    clientInitDisposer = null;\n    client_init_listener = null;\n\n    networkStatusChangeDisposer = null;\n    network_status_change_listener = null;\n\n    themeChangeDisposer = null;\n    theme_change_listener = null;\n\n    realAccountSignupEndedDisposer = null;\n    real_account_signup_ended_listener = null;\n\n    partial_fetch_time = 0;\n\n    /**\n     * Constructor of the base class that gets properties' name of child which should be saved in storages\n     *\n     * @param {Object} options - An object that contains the following properties:\n     *     @property {Object}   root_store - An object that contains the root store of the app.\n     *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\n     *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\n     *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\n     *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\n     */\n    constructor(options = {}) {\n        makeObservable(this, {\n            validation_errors: observable,\n            validation_rules: observable,\n            partial_fetch_time: observable,\n            retrieveFromStorage: action,\n            setValidationErrorMessages: action,\n            setValidationRules: action,\n            addRule: action,\n            validateProperty: action,\n            validateAllProperties: action,\n            onSwitchAccount: action.bound,\n            onPreSwitchAccount: action.bound,\n            onLogout: action.bound,\n            onClientInit: action.bound,\n            onNetworkStatusChange: action.bound,\n            onThemeChange: action.bound,\n            onRealAccountSignupEnd: action.bound,\n            disposePreSwitchAccount: action.bound,\n            disposeSwitchAccount: action.bound,\n            disposeLogout: action.bound,\n            disposeClientInit: action.bound,\n            disposeNetworkStatusChange: action.bound,\n            disposeThemeChange: action.bound,\n            disposeRealAccountSignupEnd: action.bound,\n            onUnmount: action.bound,\n            assertHasValidCache: action.bound,\n        });\n\n        const { root_store, local_storage_properties, session_storage_properties, validation_rules, store_name } =\n            options;\n\n        Object.defineProperty(this, 'root_store', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'local_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'session_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n\n        const has_local_or_session_storage =\n            (local_storage_properties && local_storage_properties.length) ||\n            (session_storage_properties && session_storage_properties.length);\n\n        if (has_local_or_session_storage) {\n            if (!store_name) {\n                throw new Error('store_name is required for local/session storage');\n            }\n\n            Object.defineProperty(this, 'store_name', {\n                value: store_name,\n                enumerable: false,\n                writable: false,\n            });\n        }\n\n        this.root_store = root_store;\n        this.local_storage_properties = local_storage_properties || [];\n        this.session_storage_properties = session_storage_properties || [];\n\n        setTimeout(() => {\n            this.setValidationRules(validation_rules);\n\n            this.setupReactionForLocalStorage();\n            this.setupReactionForSessionStorage();\n            this.retrieveFromStorage();\n        }, 0);\n    }\n\n    /**\n     * Returns an snapshot of the current store\n     *\n     * @param {String[]} properties - A list of properties' names that should be in the snapshot.\n     *\n     * @return {Object} Returns a cloned object of the store.\n     */\n    getSnapshot(properties) {\n        let snapshot = toJS(this);\n\n        if (!isEmptyObject(this.root_store)) {\n            snapshot.root_store = this.root_store;\n        }\n\n        if (properties && properties.length) {\n            snapshot = properties.reduce((result, p) => Object.assign(result, { [p]: snapshot[p] }), {});\n        }\n\n        return snapshot;\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForLocalStorage() {\n        if (this.local_storage_properties.length) {\n            reaction(\n                () => this.local_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForSessionStorage() {\n        if (this.session_storage_properties.length) {\n            reaction(\n                () => this.session_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\n     *\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\n     *\n     */\n    saveToStorage(properties, storage) {\n        const snapshot = JSON.stringify(this.getSnapshot(properties), (key, value) => {\n            if (value !== null) return value;\n            return undefined;\n        });\n\n        if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\n            localStorage.setItem(this.store_name, snapshot);\n        } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\n            sessionStorage.setItem(this.store_name, snapshot);\n        }\n    }\n\n    /**\n     * Retrieves saved snapshot of the store and assigns to the current instance.\n     *\n     */\n    retrieveFromStorage() {\n        const local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\n        const session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\n\n        const snapshot = { ...local_storage_snapshot, ...session_storage_snapshot };\n\n        Object.keys(snapshot).forEach(k => (this[k] = snapshot[k]));\n    }\n\n    /**\n     * Sets validation error messages for an observable property of the store\n     *\n     * @param {String} propertyName - The observable property's name\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\n     *\n     */\n    setValidationErrorMessages(propertyName, messages) {\n        const is_different = () =>\n            !!this.validation_errors[propertyName]\n                .filter(x => !messages.includes(x))\n                .concat(messages.filter(x => !this.validation_errors[propertyName].includes(x))).length;\n        if (!this.validation_errors[propertyName] || is_different()) {\n            this.validation_errors[propertyName] = messages;\n        }\n    }\n\n    /**\n     * Sets validation rules\n     *\n     * @param {object} rules\n     *\n     */\n    setValidationRules(rules = {}) {\n        Object.keys(rules).forEach(key => {\n            this.addRule(key, rules[key]);\n        });\n    }\n\n    /**\n     * Adds rules to the particular property\n     *\n     * @param {String} property\n     * @param {String} rules\n     *\n     */\n    addRule(property, rules) {\n        this.validation_rules[property] = rules;\n\n        intercept(this, property, change => {\n            this.validateProperty(property, change.newValue);\n            return change;\n        });\n    }\n\n    /**\n     * Validates a particular property of the store\n     *\n     * @param {String} property - The name of the property in the store\n     * @param {object} value    - The value of the property, it can be undefined.\n     *\n     */\n    validateProperty(property, value) {\n        const trigger = this.validation_rules[property].trigger;\n        const inputs = { [property]: value !== undefined ? value : this[property] };\n        const validation_rules = { [property]: this.validation_rules[property].rules || [] };\n\n        if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\n            inputs[trigger] = this[trigger];\n            validation_rules[trigger] = this.validation_rules[trigger].rules || [];\n        }\n\n        const validator = new Validator(inputs, validation_rules, this);\n\n        validator.isPassed();\n\n        Object.keys(inputs).forEach(key => {\n            this.setValidationErrorMessages(key, validator.errors.get(key));\n        });\n    }\n\n    /**\n     * Validates all properties which validation rule has been set for.\n     *\n     */\n    validateAllProperties() {\n        const validation_rules = Object.keys(this.validation_rules);\n        const validation_errors = Object.keys(this.validation_errors);\n\n        validation_rules.forEach(p => {\n            this.validateProperty(p, this[p]);\n        });\n\n        // Remove keys that are present in error, but not in rules:\n        validation_errors.forEach(error => {\n            if (!validation_rules.includes(error)) {\n                delete this.validation_errors[error];\n            }\n        });\n    }\n\n    onSwitchAccount(listener) {\n        if (listener) {\n            this.switch_account_listener = listener;\n\n            this.switchAccountDisposer = when(\n                () => this.root_store.client.switch_broadcast,\n                () => {\n                    try {\n                        const result = this.switch_account_listener();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.switchEndSignal();\n                                this.onSwitchAccount(this.switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Switching account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onPreSwitchAccount(listener) {\n        if (listener) {\n            this.pre_switch_account_listener = listener;\n            this.preSwitchAccountDisposer = when(\n                () => this.root_store.client.pre_switch_broadcast,\n                () => {\n                    try {\n                        const result = this.pre_switch_account_listener?.();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.setPreSwitchAccount(false);\n                                this.onPreSwitchAccount(this.pre_switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Pre-switch account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onLogout(listener) {\n        this.logoutDisposer = when(\n            () => this.root_store.client.has_logged_out,\n            async () => {\n                try {\n                    const result = this.logout_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setLogout(false);\n                            this.onLogout(this.logout_listener);\n                        });\n                    } else {\n                        throw new Error('Logout listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.logout_listener = listener;\n    }\n\n    onClientInit(listener) {\n        this.clientInitDisposer = when(\n            () => this.root_store.client.initialized_broadcast,\n            async () => {\n                try {\n                    const result = this.client_init_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setInitialized(false);\n                            this.onClientInit(this.client_init_listener);\n                        });\n                    } else {\n                        throw new Error('Client init listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.client_init_listener = listener;\n    }\n\n    onNetworkStatusChange(listener) {\n        this.networkStatusChangeDisposer = reaction(\n            () => this.root_store.common.is_network_online,\n            is_online => {\n                try {\n                    this.network_status_change_listener(is_online);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.network_status_change_listener = listener;\n    }\n\n    onThemeChange(listener) {\n        this.themeChangeDisposer = reaction(\n            () => this.root_store.ui.is_dark_mode_on,\n            is_dark_mode_on => {\n                try {\n                    this.theme_change_listener(is_dark_mode_on);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.theme_change_listener = listener;\n    }\n\n    onRealAccountSignupEnd(listener) {\n        this.realAccountSignupEndedDisposer = when(\n            () => this.root_store.ui.has_real_account_signup_ended,\n            () => {\n                try {\n                    const result = this.real_account_signup_ended_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.ui.setRealAccountSignupEnd(false);\n                            this.onRealAccountSignupEnd(this.real_account_signup_ended_listener);\n                        });\n                    } else {\n                        throw new Error('Real account signup listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.real_account_signup_ended_listener = listener;\n    }\n\n    disposePreSwitchAccount() {\n        if (typeof this.preSwitchAccountDisposer === 'function') {\n            this.preSwitchAccountDisposer();\n        }\n        this.pre_switch_account_listener = null;\n    }\n\n    disposeSwitchAccount() {\n        if (typeof this.switchAccountDisposer === 'function') {\n            this.switchAccountDisposer();\n        }\n        this.switch_account_listener = null;\n    }\n\n    disposeLogout() {\n        if (typeof this.logoutDisposer === 'function') {\n            this.logoutDisposer();\n        }\n        this.logout_listener = null;\n    }\n\n    disposeClientInit() {\n        if (typeof this.clientInitDisposer === 'function') {\n            this.clientInitDisposer();\n        }\n        this.client_init_listener = null;\n    }\n\n    disposeNetworkStatusChange() {\n        if (typeof this.networkStatusChangeDisposer === 'function') {\n            this.networkStatusChangeDisposer();\n        }\n        this.network_status_change_listener = null;\n    }\n\n    disposeThemeChange() {\n        if (typeof this.themeChangeDisposer === 'function') {\n            this.themeChangeDisposer();\n        }\n        this.theme_change_listener = null;\n    }\n\n    disposeRealAccountSignupEnd() {\n        if (typeof this.realAccountSignupEndedDisposer === 'function') {\n            this.realAccountSignupEndedDisposer();\n        }\n        this.real_account_signup_ended_listener = null;\n    }\n\n    onUnmount() {\n        this.disposePreSwitchAccount();\n        this.disposeSwitchAccount();\n        this.disposeLogout();\n        this.disposeClientInit();\n        this.disposeNetworkStatusChange();\n        this.disposeThemeChange();\n        this.disposeRealAccountSignupEnd();\n    }\n\n    assertHasValidCache(loginid, ...reactions) {\n        // account was changed when this was unmounted.\n        if (this.root_store.client.loginid !== loginid) {\n            reactions.forEach(act => act());\n            this.partial_fetch_time = false;\n        }\n    }\n}\n","import { action, computed, makeObservable, observable, override, runInAction } from 'mobx';\n\nimport {\n    CFD_PLATFORMS,\n    getAccountListKey,\n    getAccountTypeFields,\n    Jurisdiction,\n    JURISDICTION_MARKET_TYPES,\n    setPerformanceValue,\n    startPerformanceEventTimer,\n    WS,\n} from '@deriv/shared';\n\nimport BaseStore from '../../base-store';\n\nimport { getDxCompanies, getMtCompanies } from './Helpers/cfd-config';\n\nexport default class CFDStore extends BaseStore {\n    is_ctrader_transfer_modal_visible = false;\n    is_jurisdiction_modal_visible = false;\n    jurisdiction_selected_shortcode = '';\n    is_compare_accounts_visible = false;\n    is_mt5_trade_modal_visible = false;\n    product = '';\n\n    account_type = {\n        category: '',\n        type: '',\n    };\n\n    mt5_trade_account = {};\n    new_account_response = {};\n    map_type = {};\n    has_cfd_error = false;\n    error_message = '';\n    is_sent_email_modal_enabled = false;\n\n    is_account_being_created = false;\n    is_cfd_success_dialog_enabled = false;\n    is_mt5_financial_stp_modal_open = false;\n    is_cfd_password_modal_enabled = false;\n    is_mt5_password_invalid_format_modal_visible = false;\n    is_mt5_password_changed_modal_visible = false;\n    is_from_mt5_migration_modal = false;\n    is_server_maintenance_modal_visible = false;\n    is_account_unavailable_modal_visible = false;\n    mt5_migration_error = '';\n    current_account = undefined; // this is a tmp value, don't rely on it, unless you set it first.\n    is_nakala_banner_visible = false;\n\n    error_type = undefined;\n    error_details = undefined;\n\n    dxtrade_tokens = {\n        demo: '',\n        real: '',\n    };\n    ctrader_tokens = {\n        demo: '',\n        real: '',\n    };\n\n    real_synthetic_accounts_existing_data = [];\n    real_financial_accounts_existing_data = [];\n    real_swapfree_accounts_existing_data = [];\n    real_zerospread_accounts_existing_data = [];\n\n    migrated_mt5_accounts = [];\n\n    constructor({ root_store }) {\n        super({ root_store });\n\n        makeObservable(this, {\n            is_compare_accounts_visible: observable,\n            is_jurisdiction_modal_visible: observable,\n            is_mt5_trade_modal_visible: observable,\n            is_ctrader_transfer_modal_visible: observable,\n            jurisdiction_selected_shortcode: observable,\n            account_type: observable,\n            mt5_trade_account: observable,\n            mt5_migration_error: observable,\n            new_account_response: observable,\n            map_type: observable,\n            has_cfd_error: observable,\n            error_message: observable,\n            is_account_being_created: observable,\n            is_cfd_success_dialog_enabled: observable,\n            is_mt5_financial_stp_modal_open: observable,\n            is_cfd_password_modal_enabled: observable,\n            is_sent_email_modal_enabled: observable,\n            current_account: observable,\n            error_type: observable,\n            error_details: observable,\n            product: observable,\n            dxtrade_tokens: observable,\n            ctrader_tokens: observable,\n            migrated_mt5_accounts: observable,\n            is_mt5_password_invalid_format_modal_visible: observable,\n            is_mt5_password_changed_modal_visible: observable,\n            is_from_mt5_migration_modal: observable,\n            is_server_maintenance_modal_visible: observable,\n            is_account_unavailable_modal_visible: observable,\n            is_nakala_banner_visible: observable,\n            account_title: computed,\n            current_list: computed,\n            onMount: action.bound,\n            onUnmount: override,\n            checkShouldOpenAccount: action.bound,\n            realAccountSignupEndListener: action.bound,\n            resetFormErrors: action.bound,\n            clearCFDError: action.bound,\n            createCFDAccount: action.bound,\n            disableCFDPasswordModal: action.bound,\n            enableCFDPasswordModal: action.bound,\n            getName: action.bound,\n            migrateMT5Accounts: action.bound,\n            openMT5Account: action.bound,\n            openCFDAccount: action.bound,\n            beginRealSignupForMt5: action.bound,\n            enableMt5FinancialStpModal: action.bound,\n            setAccountType: action.bound,\n            setProduct: action.bound,\n            setCurrentAccount: action.bound,\n            setMT5TradeAccount: action.bound,\n            setIsAccountBeingCreated: action.bound,\n            setError: action.bound,\n            setCFDNewAccount: action.bound,\n            setCFDSuccessDialog: action.bound,\n            setMT5MigrationError: action.bound,\n            setMigratedMT5Accounts: action.bound,\n            setSentEmailModalStatus: action.bound,\n            setIsFromMt5MigrationModal: action.bound,\n            setServerMaintenanceModal: action.bound,\n            setAccountUnavailableModal: action.bound,\n            setNakalaBannerVisible: action.bound,\n            getAccountStatus: action.bound,\n            creatMT5Password: action.bound,\n            submitMt5Password: action.bound,\n            createCFDPassword: action.bound,\n            submitCFDPassword: action.bound,\n            toggleCompareAccountsModal: action.bound,\n            toggleCTraderTransferModal: action.bound,\n            getRealSyntheticAccountsExistingData: action.bound,\n            getRealFinancialAccountsExistingData: action.bound,\n            getRealSwapfreeAccountsExistingData: action.bound,\n            toggleJurisdictionModal: action.bound,\n            toggleMT5TradeModal: action.bound,\n            disableMt5FinancialStpModal: action.bound,\n            topUpVirtual: action.bound,\n            sendVerifyEmail: action.bound,\n            setJurisdictionSelectedShortcode: action.bound,\n            setDxtradeToken: action.bound,\n            setCTraderToken: action.bound,\n            loadDxtradeTokens: action.bound,\n            loadCTraderTokens: action.bound,\n            setIsMt5PasswordInvalidFormatModalVisible: action.bound,\n            setIsMt5PasswordChangedModalVisible: action.bound,\n        });\n    }\n\n    get account_title() {\n        return this.account_type.category\n            ? getMtCompanies(this.root_store.traders_hub.show_eu_related_content, this.product)[\n                  this.account_type.category\n              ][this.account_type.type].title\n            : '';\n    }\n\n    get current_list() {\n        const list = {};\n        const show_eu_related_content = this.root_store.traders_hub.show_eu_related_content;\n        this.root_store.client.mt5_login_list\n            // eslint-disable-next-line no-confusing-arrow\n            .filter(acc =>\n                show_eu_related_content\n                    ? acc.landing_company_short === 'maltainvest'\n                    : acc.landing_company_short !== 'maltainvest'\n            )\n            .forEach(account => {\n                // e.g. mt5.real.financial_stp\n                list[getAccountListKey(account, CFD_PLATFORMS.MT5, account.landing_company_short)] = {\n                    ...account,\n                };\n            });\n\n        this.root_store.client.dxtrade_accounts_list.forEach(account => {\n            // e.g. dxtrade.real.financial_stp\n            list[getAccountListKey(account, CFD_PLATFORMS.DXTRADE)] = {\n                ...account,\n            };\n        });\n        this.root_store.client.ctrader_accounts_list.forEach(account => {\n            list[getAccountListKey(account, CFD_PLATFORMS.CTRADER)] = {\n                ...account,\n            };\n        });\n        return list;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get mt5_companies() {\n        return getMtCompanies(this.root_store.client.is_eu, this.product);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get dxtrade_companies() {\n        return getDxCompanies();\n    }\n\n    onMount() {\n        this.checkShouldOpenAccount();\n        this.onRealAccountSignupEnd(this.realAccountSignupEndListener);\n        this.root_store.ui.is_cfd_page = true;\n    }\n\n    onUnmount() {\n        this.disposeRealAccountSignupEnd();\n        this.root_store.ui.is_cfd_page = false;\n    }\n\n    // other platforms can redirect to here using account switcher's `Add` account button\n    // so in that case we should open the corresponding account opening modal on load/component update\n    checkShouldOpenAccount() {\n        const account_type = sessionStorage.getItem('open_cfd_account_type');\n        if (account_type) {\n            const [category, platform, type, set_password] = account_type.split('.');\n            this.createCFDAccount({ category, platform, type, set_password });\n            sessionStorage.removeItem('open_cfd_account_type');\n        }\n    }\n\n    setIsAccountBeingCreated(is_account_being_created) {\n        this.is_account_being_created = is_account_being_created;\n    }\n\n    realAccountSignupEndListener() {\n        const post_signup = JSON.parse(sessionStorage.getItem('post_real_account_signup'));\n        if (post_signup && post_signup.category && post_signup.type) {\n            sessionStorage.removeItem('post_real_account_signup');\n            this.enableCFDPasswordModal();\n        }\n        return Promise.resolve();\n    }\n\n    resetFormErrors() {\n        this.error_message = '';\n        this.error_type = undefined;\n        this.error_details = undefined;\n        this.has_cfd_error = false;\n    }\n\n    clearCFDError() {\n        this.resetFormErrors();\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    async createCFDAccount({ category, platform, type, set_password }) {\n        this.clearCFDError();\n        this.setAccountType({\n            category,\n            type,\n        });\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            if (category === 'real') {\n                this.realCFDSignup(set_password);\n            } else {\n                this.demoCFDSignup();\n            }\n        } else if (platform === CFD_PLATFORMS.CTRADER) {\n            startPerformanceEventTimer('create_ctrader_account_time');\n            this.root_store.client.setIsLandingCompanyLoaded(false);\n\n            this.setJurisdictionSelectedShortcode('svg');\n            if (this.account_type.category === 'demo') {\n                this.setIsAccountBeingCreated(true);\n            }\n            const account_creation_values = {\n                platform,\n                account_type: this.account_type.category,\n                market_type: this.account_type.type,\n                company: this.jurisdiction_selected_shortcode,\n            };\n\n            const response = await this.openCFDAccount(account_creation_values);\n            if (!response.error) {\n                this.setError(false);\n\n                const account_list = {\n                    echo_req: response.echo_req,\n                    trading_platform_accounts: [\n                        ...this.root_store.client.ctrader_accounts_list,\n                        response.trading_platform_new_account,\n                    ],\n                };\n                this.root_store.client.responseTradingPlatformAccountsList(account_list);\n                WS.transferBetweenAccounts();\n                const trading_platform_available_accounts_list_response = await WS.tradingPlatformAvailableAccounts(\n                    CFD_PLATFORMS.CTRADER\n                );\n                this.root_store.client.responseCTraderTradingPlatformAvailableAccounts(\n                    trading_platform_available_accounts_list_response\n                );\n                this.setCFDSuccessDialog(true);\n                window.sessionStorage.setItem(\n                    'cfd_transfer_to_login_id',\n                    response.trading_platform_new_account.account_id\n                );\n                this.setIsAccountBeingCreated(false);\n                WS.tradingPlatformAccountsList(CFD_PLATFORMS.CTRADER);\n                setPerformanceValue('create_ctrader_account_time');\n            } else {\n                this.setError(true, response.error);\n                this.setIsAccountBeingCreated(false);\n            }\n            this.root_store.client.setIsLandingCompanyLoaded(true);\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            if (category === 'real') {\n                this.toggleJurisdictionModal();\n            } else {\n                if (this.root_store.traders_hub.show_eu_related_content) {\n                    this.setJurisdictionSelectedShortcode(Jurisdiction.MALTA_INVEST);\n                } else this.setJurisdictionSelectedShortcode(Jurisdiction.SVG);\n                this.demoCFDSignup();\n            }\n        }\n    }\n\n    demoCFDSignup() {\n        this.enableCFDPasswordModal();\n    }\n\n    disableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    enableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = true;\n    }\n\n    setSentEmailModalStatus(status) {\n        this.is_sent_email_modal_enabled = status;\n    }\n\n    getName(account_type = this.account_type) {\n        const { first_name } = this.root_store.client.account_settings && this.root_store.client.account_settings;\n        const title = this.mt5_companies[account_type?.category][account_type?.type].title;\n\n        // First name is not set when user has no real account\n        return first_name ? [first_name, title].join(' ') : title;\n    }\n\n    async migrateMT5Accounts(values, actions) {\n        actions?.setSubmitting(true);\n        const account_to_migrate = this.root_store.client.mt5_login_list.filter(\n            acc => acc.landing_company_short === Jurisdiction.SVG && !!acc.eligible_to_migrate\n        );\n        const promises = account_to_migrate.map(account => {\n            const { eligible_to_migrate } = account;\n            const [type, shortcode] = Object.entries(eligible_to_migrate)[0];\n            const account_type = {\n                category: 'real',\n                type,\n            };\n            this.setMigratedMT5Accounts([\n                ...this.migrated_mt5_accounts,\n                { login_id: account.login, to_account: { ...(eligible_to_migrate ?? {}) } },\n            ]);\n            return this.requestMigrateAccount(values, shortcode, account_type);\n        });\n        this.root_store.ui.setMT5MigrationModalEnabled(true);\n\n        try {\n            const results = await Promise.all(promises);\n            const has_error = results.find(result => result.error);\n            const error_code = has_error?.error?.code;\n            if (this.is_mt5_password_changed_modal_visible) this.setIsMt5PasswordChangedModalVisible(false);\n            if (!has_error) {\n                actions?.setStatus({ error_message: '' });\n                this.setError(false);\n                this.setCFDSuccessDialog(true);\n                await this.getAccountStatus(CFD_PLATFORMS.MT5);\n\n                const mt5_login_list_response = await WS.authorized.mt5LoginList();\n                this.root_store.client.responseMt5LoginList(mt5_login_list_response);\n\n                WS.transferBetweenAccounts();\n                this.root_store.client.responseMT5TradingServers(await WS.tradingServers(CFD_PLATFORMS.MT5));\n            } else if (['IncorrectMT5PasswordFormat', 'InvalidTradingPlatformPasswordFormat'].includes(error_code)) {\n                this.setError(true, has_error?.error);\n                this.setMigratedMT5Accounts([]);\n                this.setMT5MigrationError('');\n            } else {\n                this.setMT5MigrationError(has_error?.error?.message);\n                actions?.setStatus({ error_message: has_error?.error?.message });\n                await this.getAccountStatus(CFD_PLATFORMS.MT5);\n                this.clearCFDError();\n                this.root_store.ui.toggleMT5MigrationModal(true);\n                this.setMigratedMT5Accounts([]);\n            }\n        } catch (error) {\n            // At least one request has failed\n            // eslint-disable-next-line no-console\n            console.warn('One or more MT5 migration requests failed:', error);\n            actions?.setStatus({ error_message: error?.message });\n            this.setMT5MigrationError(error);\n            this.setMigratedMT5Accounts([]);\n        } finally {\n            actions?.setSubmitting(false);\n        }\n    }\n\n    requestMigrateAccount(values, shortcode, account_type) {\n        const name = this.getName(account_type);\n        const leverage = this.mt5_companies[account_type.category][account_type.type].leverage;\n        const type_request = getAccountTypeFields(account_type);\n        const { address_line_1, address_line_2, address_postcode, address_city, address_state, country_code, phone } =\n            this.root_store.client.account_settings;\n\n        return WS.mt5NewAccount({\n            mainPassword: values.password,\n            email: this.root_store.client.email_address,\n            leverage,\n            name,\n            address: address_line_1 || address_line_2,\n            city: address_city,\n            country: country_code,\n            phone,\n            state: address_state,\n            zipCode: address_postcode,\n            migrate: 1,\n            ...(values.server ? { server: values.server } : {}),\n            ...(shortcode ? { company: shortcode } : {}),\n            ...(shortcode !== Jurisdiction.LABUAN\n                ? type_request\n                : {\n                      account_type: JURISDICTION_MARKET_TYPES.FINANCIAL,\n                      mt5_account_type: 'financial_stp',\n                  }),\n        });\n    }\n\n    openMT5Account(values) {\n        const name = this.getName();\n        const leverage = this.mt5_companies[this.account_type.category][this.account_type.type].leverage;\n        const type_request = getAccountTypeFields(this.account_type);\n        const { address_line_1, address_line_2, address_postcode, address_city, address_state, country_code, phone } =\n            this.root_store.client.account_settings;\n\n        return WS.mt5NewAccount({\n            mainPassword: values.password,\n            email: this.root_store.client.email_address,\n            leverage,\n            name,\n            address: address_line_1 || address_line_2,\n            city: address_city,\n            country: country_code,\n            phone,\n            state: address_state,\n            zipCode: address_postcode,\n            product: this.product,\n            ...(values.server ? { server: values.server } : {}),\n            ...(this.jurisdiction_selected_shortcode && this.account_type.category === 'real'\n                ? { company: this.jurisdiction_selected_shortcode }\n                : {}),\n            ...(this.jurisdiction_selected_shortcode !== Jurisdiction.LABUAN\n                ? type_request\n                : {\n                      account_type: 'financial',\n                      mt5_account_type: 'financial_stp',\n                  }),\n        });\n    }\n\n    openCFDAccount(values) {\n        return WS.tradingPlatformNewAccount({\n            password: CFD_PLATFORMS.DXTRADE ? values.password : '',\n            platform: values.platform,\n            account_type: this.account_type.category,\n            market_type:\n                this.account_type.type === 'dxtrade' || this.account_type.type === 'cTrader'\n                    ? 'all'\n                    : this.account_type.type,\n            company: values.company,\n        });\n    }\n\n    beginRealSignupForMt5() {\n        sessionStorage.setItem('post_real_account_signup', JSON.stringify(this.account_type));\n        this.root_store.ui.openRealAccountSignup('svg');\n    }\n\n    realCFDSignup(set_password) {\n        switch (this.account_type.type) {\n            case 'financial':\n                this.enableCFDPasswordModal();\n                break;\n            case 'financial_stp':\n                this.root_store.client.fetchResidenceList();\n                this.root_store.client.fetchStatesList();\n                this.root_store.client.fetchAccountSettings();\n                if (set_password) this.enableCFDPasswordModal();\n                else this.enableMt5FinancialStpModal();\n                break;\n            case 'synthetic':\n            case 'dxtrade':\n            case 'all':\n                this.enableCFDPasswordModal();\n                break;\n            default:\n                throw new Error('Cannot determine mt5 account signup.');\n        }\n    }\n\n    enableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = true;\n    }\n\n    setAccountType(account_type) {\n        this.account_type = account_type;\n    }\n\n    setProduct(product) {\n        this.product = product;\n    }\n\n    setCurrentAccount(data, meta) {\n        this.current_account = {\n            ...meta,\n            ...data,\n        };\n    }\n\n    setIsMt5PasswordInvalidFormatModalVisible(visible) {\n        this.is_mt5_password_invalid_format_modal_visible = visible;\n    }\n\n    setIsMt5PasswordChangedModalVisible(visible) {\n        this.is_mt5_password_changed_modal_visible = visible;\n    }\n\n    setMT5TradeAccount(mt5_trade_account) {\n        this.mt5_trade_account = mt5_trade_account;\n    }\n\n    setError(state, obj) {\n        this.has_cfd_error = state;\n        this.error_message = obj ? obj.message : '';\n        this.error_type = obj?.code ?? undefined;\n        this.error_details = obj?.details ?? undefined;\n    }\n\n    setCFDNewAccount(cfd_new_account) {\n        this.new_account_response = cfd_new_account;\n    }\n\n    setCFDSuccessDialog(value) {\n        this.is_cfd_success_dialog_enabled = !!value;\n    }\n\n    setMT5MigrationError(error) {\n        this.mt5_migration_error = error;\n    }\n\n    async getAccountStatus(platform) {\n        const should_load_account_status =\n            (platform === CFD_PLATFORMS.MT5 && this.root_store.client.is_mt5_password_not_set) ||\n            (platform === CFD_PLATFORMS.DXTRADE && this.root_store.client.is_dxtrade_password_not_set);\n\n        if (should_load_account_status) {\n            await WS.getAccountStatus();\n        }\n    }\n\n    async creatMT5Password(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.MT5,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n        return false;\n    }\n\n    async submitMt5Password(values, actions) {\n        startPerformanceEventTimer('create_mt5_account_time');\n\n        if (this.root_store.client.is_mt5_password_not_set) {\n            const has_error = await this.creatMT5Password(values, actions);\n            if (has_error) return;\n        }\n\n        this.resetFormErrors();\n        if (this.root_store.ui.is_mt5_migration_modal_enabled || this.is_from_mt5_migration_modal) {\n            await this.migrateMT5Accounts(values, actions);\n        } else {\n            const response = await this.openMT5Account(values);\n            if (!response.error) {\n                actions?.setStatus({ success: true });\n                actions?.setSubmitting(false);\n                this.setError(false);\n                this.setIsMt5PasswordChangedModalVisible(false);\n                window.sessionStorage.setItem('cfd_transfer_to_login_id', response.mt5_new_account.login);\n                this.setCFDSuccessDialog(true);\n                await this.getAccountStatus(CFD_PLATFORMS.MT5);\n\n                const mt5_login_list_response = await WS.authorized.mt5LoginList();\n                this.root_store.client.responseMt5LoginList(mt5_login_list_response);\n\n                WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n                this.root_store.client.responseMT5TradingServers(await WS.tradingServers(CFD_PLATFORMS.MT5));\n                this.setCFDNewAccount(response.mt5_new_account);\n                setPerformanceValue('create_mt5_account_time');\n            } else {\n                await this.getAccountStatus(CFD_PLATFORMS.MT5);\n                this.setError(true, response.error);\n                actions?.resetForm({});\n                actions?.setSubmitting(false);\n                actions?.setStatus({ success: false });\n            }\n        }\n    }\n\n    async createCFDPassword(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.DXTRADE,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n\n        return false;\n    }\n\n    async submitCFDPassword(values, actions) {\n        startPerformanceEventTimer('create_dxtrade_account_time');\n\n        if (CFD_PLATFORMS.DXTRADE && this.root_store.client.is_dxtrade_password_not_set) {\n            const has_error = await this.createCFDPassword(values, actions);\n            if (has_error) return;\n        }\n\n        const response = await this.openCFDAccount(values);\n\n        if (response.error) {\n            await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return;\n        }\n\n        actions.setStatus({ success: true });\n        actions.setSubmitting(false);\n        this.setError(false);\n        this.setCFDSuccessDialog(true);\n        window.sessionStorage.setItem('cfd_transfer_to_login_id', response.trading_platform_new_account.account_id);\n        await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n\n        const trading_platform_accounts_list_response = await WS.tradingPlatformAccountsList(values.platform);\n        this.root_store.client.responseTradingPlatformAccountsList(trading_platform_accounts_list_response);\n\n        WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n        this.setCFDNewAccount(response.trading_platform_new_account);\n        setPerformanceValue('create_dxtrade_account_time');\n    }\n\n    toggleCompareAccountsModal() {\n        this.is_compare_accounts_visible = !this.is_compare_accounts_visible;\n    }\n\n    toggleCTraderTransferModal() {\n        this.is_ctrader_transfer_modal_visible = !this.is_ctrader_transfer_modal_visible;\n    }\n\n    getRealSyntheticAccountsExistingData(real_synthetic_accounts_existing_data) {\n        this.real_synthetic_accounts_existing_data = real_synthetic_accounts_existing_data;\n    }\n\n    getRealFinancialAccountsExistingData(real_financial_accounts_existing_data) {\n        this.real_financial_accounts_existing_data = real_financial_accounts_existing_data;\n    }\n\n    getRealSwapfreeAccountsExistingData(real_swapfree_accounts_existing_data) {\n        this.real_swapfree_accounts_existing_data = real_swapfree_accounts_existing_data;\n    }\n\n    toggleJurisdictionModal() {\n        this.is_jurisdiction_modal_visible = !this.is_jurisdiction_modal_visible;\n    }\n\n    toggleMT5TradeModal() {\n        this.is_nakala_banner_visible = false;\n        this.is_mt5_trade_modal_visible = !this.is_mt5_trade_modal_visible;\n    }\n\n    disableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = false;\n    }\n\n    async topUpVirtual(platform) {\n        this.root_store.ui.setTopUpInProgress(true);\n        let response;\n\n        switch (platform) {\n            case CFD_PLATFORMS.DXTRADE: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform,\n                    to_account: this.current_account.account_id,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.CTRADER: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform: CFD_PLATFORMS.CTRADER,\n                    to_account: this.current_account.account_id,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.MT5: {\n                response = await WS.authorized.mt5Deposit({\n                    to_mt5: this.current_account.login,\n                });\n                break;\n            }\n            default: {\n                response.error = 'Invalid platform';\n                break;\n            }\n        }\n\n        if (!response.error) {\n            let new_balance;\n            switch (platform) {\n                case CFD_PLATFORMS.DXTRADE: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.DXTRADE)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.dxtrade_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.CTRADER: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.CTRADER)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.ctrader_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.MT5: {\n                    await WS.authorized.mt5LoginList().then(this.root_store.client.responseMt5LoginList);\n\n                    new_balance = this.root_store.client.mt5_login_list.find(\n                        item => item.login === this.current_account.login\n                    )?.balance;\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n            runInAction(() => {\n                // Get new current account\n                this.root_store.ui.is_top_up_virtual_open = false;\n                this.current_account.balance = new_balance;\n            });\n            setTimeout(() => {\n                runInAction(() => {\n                    this.root_store.ui.is_top_up_virtual_success = true;\n                });\n            }, 250);\n        } else {\n            // eslint-disable-next-line no-console\n            console.error(response);\n        }\n        this.root_store.ui.setTopUpInProgress(false);\n    }\n\n    sendVerifyEmail() {\n        return WS.verifyEmail(this.root_store.client.email, 'trading_platform_investor_password_reset');\n    }\n\n    setDxtradeToken(response, server) {\n        if (!response.error) {\n            const { dxtrade } = response.service_token;\n            this.dxtrade_tokens[server] = dxtrade.token;\n        }\n    }\n\n    setCTraderToken(response, server) {\n        if (!response.error) {\n            const { ctrader } = response.service_token;\n            this.ctrader_tokens[server] = ctrader.token;\n        }\n    }\n\n    loadDxtradeTokens() {\n        ['demo', 'real'].forEach(account_type => {\n            const has_existing_account = this.root_store.client.dxtrade_accounts_list.some(\n                account => account.account_type === account_type\n            );\n            if (!this.dxtrade_tokens[account_type] && has_existing_account) {\n                WS.getServiceToken(CFD_PLATFORMS.DXTRADE, account_type).then(response =>\n                    this.setDxtradeToken(response, account_type)\n                );\n            }\n        });\n    }\n\n    loadCTraderTokens(url, account_type) {\n        const has_existing_account = this.root_store.client.ctrader_accounts_list.some(\n            account => account.account_type === account_type\n        );\n        if (has_existing_account) {\n            WS.getServiceToken(CFD_PLATFORMS.CTRADER, account_type)\n                .then(response => {\n                    this.setCTraderToken(response, account_type);\n                    return window.open(`${url}?token=${response.service_token.ctrader.token}`, '_blank');\n                })\n                .catch(() => window.open(`${url}`, '_blank'));\n        }\n    }\n\n    static async changePassword({ login, old_password, new_password, password_type }) {\n        let response;\n\n        if (password_type === 'investor') {\n            response = await WS.authorized.tradingPlatformInvestorPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        } else {\n            response = await WS.authorized.tradingPlatformPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        }\n\n        return response?.error?.message;\n    }\n\n    setJurisdictionSelectedShortcode(shortcode) {\n        this.jurisdiction_selected_shortcode = shortcode;\n    }\n\n    setMigratedMT5Accounts(accounts) {\n        this.migrated_mt5_accounts = accounts;\n    }\n\n    setIsFromMt5MigrationModal(is_from_mt5_migration_modal) {\n        this.is_from_mt5_migration_modal = is_from_mt5_migration_modal;\n    }\n\n    setServerMaintenanceModal(is_server_maintenance_modal_visible) {\n        this.is_server_maintenance_modal_visible = is_server_maintenance_modal_visible;\n    }\n\n    setAccountUnavailableModal(is_account_unavailable_modal_visible) {\n        this.is_account_unavailable_modal_visible = is_account_unavailable_modal_visible;\n    }\n\n    setNakalaBannerVisible(is_nakala_banner_visible) {\n        this.is_nakala_banner_visible = is_nakala_banner_visible;\n    }\n}\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__deriv_shared__","__WEBPACK_EXTERNAL_MODULE__deriv_translations__","__WEBPACK_EXTERNAL_MODULE_mobx__","getDxCompanies","all_config","account_type","leverage","short_title","localize","synthetic_config","financial_config","demo","all","dxtrade_account_type","title","synthetic","financial","real","dxtrade","mt5_account_type","getMtCompanies","is_eu","product","financial_title","PRODUCT","STP","GOLD","financial_demo_title","financial_demo_title_eu","financial_demo_short_title","financial_title_eu","financial_stp_config","all_swap_free_svg","all_zero_spread_bvi","ctrader","financial_demo","synthetic_svg","financial_svg","financial_stp","synthetic_bvi","synthetic_v","financial_bvi","financial_fx","financial_v","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","_regeneratorRuntime","e","t","r","value","i","Symbol","iterator","c","asyncIterator","u","toStringTag","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toPropertyKey","_defineProperties","toPrimitive","String","Number","_toPrimitive","BaseStore","_this","options","_classCallCheck","validation_errors","validation_rules","preSwitchAccountDisposer","pre_switch_account_listener","switchAccountDisposer","switch_account_listener","logoutDisposer","logout_listener","clientInitDisposer","client_init_listener","networkStatusChangeDisposer","network_status_change_listener","themeChangeDisposer","theme_change_listener","realAccountSignupEndedDisposer","real_account_signup_ended_listener","partial_fetch_time","makeObservable","this","observable","retrieveFromStorage","action","setValidationErrorMessages","setValidationRules","addRule","validateProperty","validateAllProperties","onSwitchAccount","bound","onPreSwitchAccount","onLogout","onClientInit","onNetworkStatusChange","onThemeChange","onRealAccountSignupEnd","disposePreSwitchAccount","disposeSwitchAccount","disposeLogout","disposeClientInit","disposeNetworkStatusChange","disposeThemeChange","disposeRealAccountSignupEnd","onUnmount","assertHasValidCache","root_store","local_storage_properties","session_storage_properties","store_name","setTimeout","setupReactionForLocalStorage","setupReactionForSessionStorage","properties","snapshot","toJS","isEmptyObject","reduce","result","assign","_this2","reaction","map","saveToStorage","STORAGES","LOCAL_STORAGE","_this3","SESSION_STORAGE","storage","JSON","stringify","getSnapshot","localStorage","setItem","sessionStorage","_this4","local_storage_snapshot","parse","getItem","session_storage_snapshot","k","propertyName","messages","_this5","x","includes","concat","_this6","rules","property","_this7","intercept","change","newValue","_this8","trigger","inputs","validator","Validator","isPassed","errors","_this9","error","listener","_this10","when","client","switch_broadcast","switchEndSignal","isProduction","console","_this11","pre_switch_broadcast","_this11$pre_switch_ac","setPreSwitchAccount","_this12","has_logged_out","_callee","_context","setLogout","t0","_this13","initialized_broadcast","_callee2","_context2","setInitialized","_this14","common","is_network_online","is_online","_this15","ui","is_dark_mode_on","_this16","has_real_account_signup_ended","setRealAccountSignupEnd","loginid","_len","reactions","Array","_key","act","freeze","_toConsumableArray","isArray","_arrayLikeToArray","_arrayWithoutHoles","from","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","toString","test","_callSuper","_getPrototypeOf","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","Boolean","valueOf","bind","_setPrototypeOf","CFDStore","_BaseStore","_ref","is_ctrader_transfer_modal_visible","is_jurisdiction_modal_visible","jurisdiction_selected_shortcode","is_compare_accounts_visible","is_mt5_trade_modal_visible","category","mt5_trade_account","new_account_response","map_type","has_cfd_error","error_message","is_sent_email_modal_enabled","is_account_being_created","is_cfd_success_dialog_enabled","is_mt5_financial_stp_modal_open","is_cfd_password_modal_enabled","is_mt5_password_invalid_format_modal_visible","is_mt5_password_changed_modal_visible","is_from_mt5_migration_modal","is_server_maintenance_modal_visible","is_account_unavailable_modal_visible","mt5_migration_error","current_account","is_nakala_banner_visible","error_type","error_details","dxtrade_tokens","ctrader_tokens","real_synthetic_accounts_existing_data","real_financial_accounts_existing_data","real_swapfree_accounts_existing_data","real_zerospread_accounts_existing_data","migrated_mt5_accounts","account_title","computed","current_list","onMount","override","checkShouldOpenAccount","realAccountSignupEndListener","resetFormErrors","clearCFDError","createCFDAccount","disableCFDPasswordModal","enableCFDPasswordModal","getName","migrateMT5Accounts","openMT5Account","openCFDAccount","beginRealSignupForMt5","enableMt5FinancialStpModal","setAccountType","setProduct","setCurrentAccount","setMT5TradeAccount","setIsAccountBeingCreated","setError","setCFDNewAccount","setCFDSuccessDialog","setMT5MigrationError","setMigratedMT5Accounts","setSentEmailModalStatus","setIsFromMt5MigrationModal","setServerMaintenanceModal","setAccountUnavailableModal","setNakalaBannerVisible","getAccountStatus","creatMT5Password","submitMt5Password","createCFDPassword","submitCFDPassword","toggleCompareAccountsModal","toggleCTraderTransferModal","getRealSyntheticAccountsExistingData","getRealFinancialAccountsExistingData","getRealSwapfreeAccountsExistingData","toggleJurisdictionModal","toggleMT5TradeModal","disableMt5FinancialStpModal","topUpVirtual","sendVerifyEmail","setJurisdictionSelectedShortcode","setDxtradeToken","setCTraderToken","loadDxtradeTokens","loadCTraderTokens","setIsMt5PasswordInvalidFormatModalVisible","setIsMt5PasswordChangedModalVisible","_inherits","traders_hub","show_eu_related_content","list","mt5_login_list","acc","landing_company_short","account","getAccountListKey","CFD_PLATFORMS","MT5","dxtrade_accounts_list","DXTRADE","ctrader_accounts_list","CTRADER","is_cfd_page","_account_type$split2","split","platform","set_password","removeItem","post_signup","_createCFDAccount","_ref2","account_creation_values","response","account_list","trading_platform_available_accounts_list_response","realCFDSignup","demoCFDSignup","startPerformanceEventTimer","setIsLandingCompanyLoaded","market_type","company","echo_req","trading_platform_accounts","trading_platform_new_account","responseTradingPlatformAccountsList","WS","transferBetweenAccounts","tradingPlatformAvailableAccounts","responseCTraderTradingPlatformAvailableAccounts","window","account_id","tradingPlatformAccountsList","setPerformanceValue","Jurisdiction","MALTA_INVEST","SVG","_x","status","first_name","account_settings","mt5_companies","join","_migrateMT5Accounts","actions","account_to_migrate","promises","_has_error$error","results","has_error","error_code","mt5_login_list_response","_has_error$error2","_has_error$error3","setSubmitting","eligible_to_migrate","_Object$entries$","entries","shortcode","login_id","login","to_account","requestMigrateAccount","setMT5MigrationModalEnabled","find","code","setStatus","authorized","mt5LoginList","responseMt5LoginList","tradingServers","t1","responseMT5TradingServers","message","toggleMT5MigrationModal","t2","warn","_x2","_x3","type_request","getAccountTypeFields","_this$root_store$clie","address_line_1","address_line_2","address_postcode","address_city","address_state","country_code","phone","mt5NewAccount","mainPassword","password","email","email_address","address","city","country","state","zipCode","migrate","server","LABUAN","JURISDICTION_MARKET_TYPES","FINANCIAL","_this$root_store$clie2","tradingPlatformNewAccount","openRealAccountSignup","fetchResidenceList","fetchStatesList","fetchAccountSettings","data","meta","visible","_obj$code","_obj$details","details","cfd_new_account","_getAccountStatus","_callee3","_context3","is_mt5_password_not_set","is_dxtrade_password_not_set","_x4","_creatMT5Password","_callee4","_context4","tradingPlatformPasswordChange","new_password","resetForm","success","_x5","_x6","_submitMt5Password","_callee5","_context5","is_mt5_migration_modal_enabled","mt5_new_account","_x7","_x8","_createCFDPassword","_callee6","_context6","_x9","_x10","_submitCFDPassword","_callee7","trading_platform_accounts_list_response","_context7","_x11","_x12","_topUpVirtual","_callee8","new_balance","_this$root_store$clie3","_this$root_store$clie4","_this$root_store$clie5","_context8","setTopUpInProgress","send","trading_platform_deposit","mt5Deposit","to_mt5","item","balance","runInAction","is_top_up_virtual_open","is_top_up_virtual_success","_x13","verifyEmail","service_token","token","has_existing_account","some","getServiceToken","url","open","accounts","_changePassword","_callee9","_ref4","_response","_response$error","old_password","_context9","password_type","tradingPlatformInvestorPasswordChange","_x14"],"sourceRoot":""}