{"version":3,"file":"wallets/js/wallets.cashier-modal-route.cd2cf3f6e257e5d8d7aa.js","mappings":"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","sources":["webpack://@deriv/wallets/../api-v2/src/utils/display-money.ts","webpack://@deriv/wallets/./src/components/WalletCurrencyCard/WalletCurrencyCard.tsx","webpack://@deriv/wallets/./src/components/WalletListCardBadge/WalletListCardBadge.tsx","webpack://@deriv/wallets/./src/components/WalletMarketCurrencyIcon/WalletMarketCurrencyIcon.tsx","webpack://@deriv/wallets/./src/components/WalletMarketIcon/WalletMarketIcon.tsx","webpack://@deriv/wallets/./src/components/WalletMoney/WalletMoney.tsx","webpack://@deriv/wallets/./src/features/cfd/components/PlatformStatusBadge/PlatformStatusBadge.tsx","webpack://@deriv/wallets/./src/components/WalletsErrorScreen/WalletsErrorScreen.tsx","webpack://@deriv/wallets/./src/constants/errorCodes.ts","webpack://@deriv/wallets/./src/features/cashier/screens/DepositErrorScreen/DepositErrorScreen.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/TransactionStatus/components/TransactionStatusError/TransactionStatusError.tsx","webpack://@deriv/wallets/./src/features/cashier/components/WalletActionModal/WalletActionModal.tsx","webpack://@deriv/wallets/./src/features/cashier/helpers/transaction-helpers.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/TransactionStatus/components/CryptoTransaction/CryptoTransaction.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/TransactionStatus/components/TransactionStatusSuccess/TransactionStatusSuccess.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/TransactionStatus/TransactionStatus.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/DepositCrypto/components/DepositCryptoAddress/DepositCryptoAddress.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/DepositCrypto/components/DepositCryptoCurrencyDetails/DepositCryptoCurrencyDetails.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/DepositCrypto/components/DepositCryptoDisclaimers/DepositCryptoDisclaimers.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/DepositCrypto/components/DepositCryptoInfoNotice/DepositCryptoInfoNotice.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/DepositCrypto/components/DepositCryptoTryFiatOnRamp/DepositCryptoTryFiatOnRamp.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/DepositCrypto/DepositCrypto.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/DepositFiat/DepositFiat.tsx","webpack://@deriv/wallets/./src/features/cashier/flows/WalletDeposit/WalletDeposit.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/FiatOnRamp/components/FiatOnRampDisclaimer/FiatOnRampDisclaimer.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/FiatOnRamp/components/FiatOnRampProviderCard/FiatOnRampProviderCard.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/FiatOnRamp/constants.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/FiatOnRamp/FiatOnRamp.tsx","webpack://@deriv/wallets/./src/features/cashier/flows/WalletFiatOnRamp/WalletFiatOnRamp.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/ResetBalance/ResetBalance.tsx","webpack://@deriv/wallets/./src/features/cashier/flows/WalletResetBalance/WalletResetBalance.tsx","webpack://@deriv/wallets/./src/components/ToggleSwitch/ToggleSwitch.tsx","webpack://@deriv/wallets/./src/features/cashier/context/CashierScrollContext.ts","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/constants/constants.ts","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsCompletedRow/components/TransactionsCompletedRowAccountDetails/TransactionsCompletedRowAccountDetails.tsx","webpack://@deriv/wallets/./src/features/cashier/constants/constants.ts","webpack://@deriv/wallets/./src/features/cashier/helpers/helpers.ts","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsCompletedRow/components/TransactionsCompletedRowTransferAccountDetails/TransactionsCompletedRowTransferAccountDetails.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsCompletedRow/TransactionsCompletedRow.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsNoDataState/TransactionsNoDataState.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsTable/TransactionsTable.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsCompleted/TransactionsCompleted.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsCompletedDemoResetBalance/TransactionsCompletedDemoResetBalance.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsPendingRow/components/TransactionsPendingRowField/TransactionsPendingRowField.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsPendingRow/TransactionsPendingRow.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsPending/TransactionsPending.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/Transactions.tsx","webpack://@deriv/wallets/./src/features/cashier/flows/WalletTransactions/WalletTransactions.tsx","webpack://@deriv/wallets/./src/features/cashier/screens/TransferErrorScreen/TransferErrorScreen.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/hooks/useExtendedTransferAccountProperties.ts","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/hooks/useSortedTransferAccounts.ts","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/provider/TransferProvider.tsx","webpack://@deriv/wallets/./src/components/Timer/Timer.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferFormAmountInput/TransferFormAmountInput.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferFormAccountCard/TransferFormAccountCard.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferFormAccountSelection/TransferFormAccountSelection.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferFormDropdown/TransferFormDropdown.tsx","webpack://@deriv/wallets/./src/components/FadedAnimatedList/FadedAnimatedList.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/hooks/useTransferMessages/utils/countLimitsMessageFn.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/hooks/useTransferMessages/utils/cumulativeAccountLimitsMessageFn.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/hooks/useTransferMessages/utils/insufficientBalanceMessageFn.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/hooks/useTransferMessages/utils/lifetimeAccountLimitsBetweenWalletsMessageFn.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/hooks/useTransferMessages/utils/minimumTransferLimitMessageFn.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/hooks/useTransferMessages/utils/tradingPlatformStatusMessageFn.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/hooks/useTransferMessages/utils/transferFeesBetweenWalletsMessageFn.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/hooks/useTransferMessages/useTransferMessages.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferMessages/TransferMessages.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferForm/TransferForm.tsx","webpack://@deriv/wallets/./src/components/AppCardBadge/AppCardBadge.tsx","webpack://@deriv/wallets/./src/components/AppCard/AppCard.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferReceipt/TransferReceipt.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/Transfer.tsx","webpack://@deriv/wallets/./src/features/cashier/screens/TransferNotAvailable/TransferNotAvailableProvider.tsx","webpack://@deriv/wallets/./src/features/cashier/screens/TransferNotAvailable/TransferNotAvailable.tsx","webpack://@deriv/wallets/./src/features/cashier/flows/WalletTransfer/WalletTransfer.tsx","webpack://@deriv/wallets/./src/features/cashier/screens/WithdrawalErrorScreen/WithdrawalErrorScreen.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoDisclaimer/WithdrawalCryptoDisclaimer.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/provider/WithdrawalCryptoProvider.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/utils/withdrawalCryptoValidators.ts","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoForm/components/WithdrawalCryptoAmountConverter/WithdrawalCryptoAmountConverter.tsx","webpack://@deriv/wallets/./src/components/WalletsPercentageSelector/WalletsPercentageSelectorBlock.tsx","webpack://@deriv/wallets/./src/components/WalletsPercentageSelector/WalletsPercentageSelector.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoForm/components/WithdrawalCryptoPercentageSelector/WithdrawalCryptoPercentageSelector.tsx","webpack://@deriv/wallets/./src/components/SkeletonLoader/WalletsPriorityCryptoWithdrawLoader/WalletsPriorityCryptoWithdrawLoader.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoForm/components/WithdrawalCryptoPriorityFeeInfo/WithdrawalCryptoPriorityFeeInfo.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoForm/components/WithdrawalCryptoPriority/WithdrawalCryptoPriority.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoForm/WithdrawalCryptoForm.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoReceipt/components/WithdrawalCryptoDestinationAddress/WithdrawalCryptoDestinationAddress.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoReceipt/WithdrawalCryptoReceipt.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/WithdrawalCrypto.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalFiat/WithdrawalFiat.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalVerification/WithdrawalVerificationRequest/WithdrawalVerificationRequest.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalVerification/WithdrawalVerificationSent/WithdrawalVerificationSent.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalVerification/WithdrawalVerification.tsx","webpack://@deriv/wallets/./src/features/cashier/screens/WithdrawalNoBalance/WithdrawalNoBalance.tsx","webpack://@deriv/wallets/./src/features/cashier/flows/WalletWithdrawal/WalletWithdrawal.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/CashierLocked/CashierLockedContent.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/CashierLocked/CashierLocked.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/DepositLocked/DepositLockedContent.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/DepositLocked/DepositLocked.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/TransferLocked/TransferLocked.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalLocked/WithdrawalLockedContent.tsx","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalLocked/WithdrawalLocked.tsx","webpack://@deriv/wallets/./src/features/cashier/components/WalletCashierContent/WalletCashierContent.tsx","webpack://@deriv/wallets/./src/features/cashier/components/WalletCashierHeader/WalletCashierHeader.tsx","webpack://@deriv/wallets/./src/features/cashier/WalletCashier.tsx","webpack://@deriv/wallets/./src/routes/CashierModalRoute/CashierModalRoute.tsx","webpack://@deriv/wallets/./src/components/AppCard/AppCard.scss","webpack://@deriv/wallets/./src/components/AppCardBadge/AppCardBadge.scss","webpack://@deriv/wallets/./src/components/FadedAnimatedList/FadedAnimatedList.scss","webpack://@deriv/wallets/./src/components/SkeletonLoader/WalletsPriorityCryptoWithdrawLoader/WalletsPriorityCryptoWithdrawLoader.scss","webpack://@deriv/wallets/./src/components/ToggleSwitch/ToggleSwitch.scss","webpack://@deriv/wallets/./src/components/WalletCurrencyCard/WalletCurrencyCard.scss","webpack://@deriv/wallets/./src/components/WalletListCardBadge/WalletListCardBadge.scss","webpack://@deriv/wallets/./src/components/WalletMarketCurrencyIcon/WalletMarketCurrencyIcon.scss","webpack://@deriv/wallets/./src/components/WalletsErrorScreen/WalletsErrorScreen.scss","webpack://@deriv/wallets/./src/components/WalletsPercentageSelector/WalletsPercentageSelector.scss","webpack://@deriv/wallets/./src/features/cashier/WalletCashier.scss","webpack://@deriv/wallets/./src/features/cashier/components/WalletActionModal/WalletActionModal.scss","webpack://@deriv/wallets/./src/features/cashier/components/WalletCashierHeader/WalletCashierHeader.scss","webpack://@deriv/wallets/./src/features/cashier/modules/CashierLocked/CashierLocked.scss","webpack://@deriv/wallets/./src/features/cashier/modules/DepositCrypto/DepositCrypto.scss","webpack://@deriv/wallets/./src/features/cashier/modules/DepositCrypto/components/DepositCryptoAddress/DepositCryptoAddress.scss","webpack://@deriv/wallets/./src/features/cashier/modules/DepositCrypto/components/DepositCryptoDisclaimers/DepositCryptoDisclaimers.scss","webpack://@deriv/wallets/./src/features/cashier/modules/DepositCrypto/components/DepositCryptoTryFiatOnRamp/DepositCryptoTryFiatOnRamp.scss","webpack://@deriv/wallets/./src/features/cashier/modules/DepositFiat/DepositFiat.scss","webpack://@deriv/wallets/./src/features/cashier/modules/DepositLocked/DepositLocked.scss","webpack://@deriv/wallets/./src/features/cashier/modules/FiatOnRamp/FiatOnRamp.scss","webpack://@deriv/wallets/./src/features/cashier/modules/FiatOnRamp/components/FiatOnRampDisclaimer/FiatOnRampDisclaimer.scss","webpack://@deriv/wallets/./src/features/cashier/modules/FiatOnRamp/components/FiatOnRampProviderCard/FiatOnRampProviderCard.scss","webpack://@deriv/wallets/./src/features/cashier/modules/TransactionStatus/TransactionStatus.scss","webpack://@deriv/wallets/./src/features/cashier/modules/TransactionStatus/components/CryptoTransaction/CryptoTransaction.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/Transactions.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsCompleted/TransactionsCompleted.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsCompletedDemoResetBalance/TransactionsCompletedDemoResetBalance.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsCompletedRow/TransactionsCompletedRow.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsCompletedRow/components/TransactionsCompletedRowAccountDetails/TransactionsCompletedRowAccountDetails.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsNoDataState/TransactionsNoDataState.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsPending/TransactionsPending.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsPendingRow/TransactionsPendingRow.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsPendingRow/components/TransactionsPendingRowField/TransactionsPendingRowField.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsTable/TransactionsTable.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferForm/TransferForm.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferFormAccountCard/TransferFormAccountCard.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferFormAccountSelection/TransferFormAccountSelection.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferFormAmountInput/TransferFormAmountInput.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferFormDropdown/TransferFormDropdown.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferMessages/TransferMessages.scss","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferReceipt/TransferReceipt.scss","webpack://@deriv/wallets/./src/features/cashier/modules/TransferLocked/TransferLocked.scss","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/WithdrawalCrypto.scss","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoDisclaimer/WithdrawalCryptoDisclaimer.scss","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoForm/WithdrawalCryptoForm.scss","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoForm/components/WithdrawalCryptoAmountConverter/WithdrawalCryptoAmountConverter.scss","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoForm/components/WithdrawalCryptoPercentageSelector/WithdrawalCryptoPercentageSelector.scss","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoForm/components/WithdrawalCryptoPriority/WithdrawalCryptoPriority.scss","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoForm/components/WithdrawalCryptoPriorityFeeInfo/WithdrawalCryptoPriorityFeeInfo.scss","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoReceipt/WithdrawalCryptoReceipt.scss","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoReceipt/components/WithdrawalCryptoDestinationAddress/WithdrawalCryptoDestinationAddress.scss","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalFiat/WithdrawalFiat.scss","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalLocked/WithdrawalLocked.scss","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalVerification/WithdrawalVerificationRequest/WithdrawalVerificationRequest.scss","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalVerification/WithdrawalVerificationSent/WithdrawalVerificationSent.scss","webpack://@deriv/wallets/./src/routes/CashierModalRoute/CashierModalRoute.scss","webpack://@deriv/wallets/./src/components/AppCard/AppCard.scss?f304","webpack://@deriv/wallets/./src/components/AppCardBadge/AppCardBadge.scss?eba0","webpack://@deriv/wallets/./src/components/FadedAnimatedList/FadedAnimatedList.scss?55c6","webpack://@deriv/wallets/./src/components/SkeletonLoader/WalletsPriorityCryptoWithdrawLoader/WalletsPriorityCryptoWithdrawLoader.scss?4a1e","webpack://@deriv/wallets/./src/components/ToggleSwitch/ToggleSwitch.scss?89e3","webpack://@deriv/wallets/./src/components/WalletCurrencyCard/WalletCurrencyCard.scss?d0c6","webpack://@deriv/wallets/./src/components/WalletListCardBadge/WalletListCardBadge.scss?f214","webpack://@deriv/wallets/./src/components/WalletMarketCurrencyIcon/WalletMarketCurrencyIcon.scss?10e2","webpack://@deriv/wallets/./src/components/WalletsErrorScreen/WalletsErrorScreen.scss?e9b4","webpack://@deriv/wallets/./src/components/WalletsPercentageSelector/WalletsPercentageSelector.scss?ef53","webpack://@deriv/wallets/./src/features/cashier/WalletCashier.scss?510c","webpack://@deriv/wallets/./src/features/cashier/components/WalletActionModal/WalletActionModal.scss?aef3","webpack://@deriv/wallets/./src/features/cashier/components/WalletCashierHeader/WalletCashierHeader.scss?7dbb","webpack://@deriv/wallets/./src/features/cashier/modules/CashierLocked/CashierLocked.scss?6f5e","webpack://@deriv/wallets/./src/features/cashier/modules/DepositCrypto/DepositCrypto.scss?b230","webpack://@deriv/wallets/./src/features/cashier/modules/DepositCrypto/components/DepositCryptoAddress/DepositCryptoAddress.scss?9087","webpack://@deriv/wallets/./src/features/cashier/modules/DepositCrypto/components/DepositCryptoDisclaimers/DepositCryptoDisclaimers.scss?1206","webpack://@deriv/wallets/./src/features/cashier/modules/DepositCrypto/components/DepositCryptoTryFiatOnRamp/DepositCryptoTryFiatOnRamp.scss?9293","webpack://@deriv/wallets/./src/features/cashier/modules/DepositFiat/DepositFiat.scss?394b","webpack://@deriv/wallets/./src/features/cashier/modules/DepositLocked/DepositLocked.scss?8f21","webpack://@deriv/wallets/./src/features/cashier/modules/FiatOnRamp/FiatOnRamp.scss?ec47","webpack://@deriv/wallets/./src/features/cashier/modules/FiatOnRamp/components/FiatOnRampDisclaimer/FiatOnRampDisclaimer.scss?7f78","webpack://@deriv/wallets/./src/features/cashier/modules/FiatOnRamp/components/FiatOnRampProviderCard/FiatOnRampProviderCard.scss?78c4","webpack://@deriv/wallets/./src/features/cashier/modules/TransactionStatus/TransactionStatus.scss?bff3","webpack://@deriv/wallets/./src/features/cashier/modules/TransactionStatus/components/CryptoTransaction/CryptoTransaction.scss?e93a","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/Transactions.scss?1b47","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsCompleted/TransactionsCompleted.scss?612c","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsCompletedDemoResetBalance/TransactionsCompletedDemoResetBalance.scss?ff1f","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsCompletedRow/TransactionsCompletedRow.scss?9659","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsCompletedRow/components/TransactionsCompletedRowAccountDetails/TransactionsCompletedRowAccountDetails.scss?bc37","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsNoDataState/TransactionsNoDataState.scss?eb76","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsPending/TransactionsPending.scss?084f","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsPendingRow/TransactionsPendingRow.scss?4b6a","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsPendingRow/components/TransactionsPendingRowField/TransactionsPendingRowField.scss?61a1","webpack://@deriv/wallets/./src/features/cashier/modules/Transactions/components/TransactionsTable/TransactionsTable.scss?ddbf","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferForm/TransferForm.scss?be7b","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferFormAccountCard/TransferFormAccountCard.scss?e044","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferFormAccountSelection/TransferFormAccountSelection.scss?8b2a","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferFormAmountInput/TransferFormAmountInput.scss?1037","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferFormDropdown/TransferFormDropdown.scss?cd0a","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferMessages/TransferMessages.scss?e7b2","webpack://@deriv/wallets/./src/features/cashier/modules/Transfer/components/TransferReceipt/TransferReceipt.scss?e1e4","webpack://@deriv/wallets/./src/features/cashier/modules/TransferLocked/TransferLocked.scss?b9cf","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/WithdrawalCrypto.scss?29cd","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoDisclaimer/WithdrawalCryptoDisclaimer.scss?71fa","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoForm/WithdrawalCryptoForm.scss?98b5","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoForm/components/WithdrawalCryptoAmountConverter/WithdrawalCryptoAmountConverter.scss?7de1","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoForm/components/WithdrawalCryptoPercentageSelector/WithdrawalCryptoPercentageSelector.scss?f788","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoForm/components/WithdrawalCryptoPriority/WithdrawalCryptoPriority.scss?df07","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoForm/components/WithdrawalCryptoPriorityFeeInfo/WithdrawalCryptoPriorityFeeInfo.scss?bdae","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoReceipt/WithdrawalCryptoReceipt.scss?ab97","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalCrypto/components/WithdrawalCryptoReceipt/components/WithdrawalCryptoDestinationAddress/WithdrawalCryptoDestinationAddress.scss?7dcb","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalFiat/WithdrawalFiat.scss?cd1f","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalLocked/WithdrawalLocked.scss?aebf","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalVerification/WithdrawalVerificationRequest/WithdrawalVerificationRequest.scss?8483","webpack://@deriv/wallets/./src/features/cashier/modules/WithdrawalVerification/WithdrawalVerificationSent/WithdrawalVerificationSent.scss?a251","webpack://@deriv/wallets/./src/routes/CashierModalRoute/CashierModalRoute.scss?6b75"],"sourcesContent":["import { FormatUtils } from '@deriv-com/utils';\nimport { useAuthorize } from '../hooks';\n\ntype TCurrency = NonNullable<ReturnType<typeof useAuthorize>['data']['currency']>;\n\nexport const displayMoney = (\n    amount = 0,\n    currency: TCurrency = '',\n    options?: {\n        fractional_digits?: number;\n    }\n) => {\n    const formattedAmount = FormatUtils.formatMoney(amount, {\n        decimalPlaces: options?.fractional_digits ?? 2,\n        locale: 'en-US',\n    });\n\n    return formattedAmount + (currency ? ` ${currency}` : '');\n};\n","/* eslint-disable sort-keys */\nimport React, { ComponentProps } from 'react';\nimport { fiatIcons } from '../../constants/icons';\nimport { THooks } from '../../types';\nimport { WalletCurrencyIcon } from '../WalletCurrencyIcon';\nimport { WalletGradientBackground } from '../WalletGradientBackground';\nimport './WalletCurrencyCard.scss';\n\nconst roundedIconWidth = {\n    xs: '12',\n    sm: '16',\n    md: '24',\n    lg: '32',\n    xl: '48',\n} as const;\n\nconst defaultIconWidth = {\n    xs: '18',\n    sm: '30',\n    md: '43',\n    lg: '58',\n    xl: '83',\n} as const;\n\ntype TProps = {\n    className?: string;\n    currency: THooks.WalletAccountsList['wallet_currency_type'];\n    isDemo?: ComponentProps<typeof WalletGradientBackground>['isDemo'];\n    size: keyof typeof defaultIconWidth | keyof typeof roundedIconWidth;\n};\n\nconst WalletCurrencyCard: React.FC<TProps> = ({ className, currency, isDemo, size = 'lg' }: TProps) => {\n    const isFiat = fiatIcons.includes(currency as typeof fiatIcons[number]);\n    const IconSize = isFiat && !isDemo ? roundedIconWidth[size] : defaultIconWidth[size];\n    return (\n        <WalletGradientBackground bodyClassName={className} currency={currency} isDemo={isDemo} type='card'>\n            <div className={`wallets-currency-card wallets-currency-card--${size}`}>\n                <WalletCurrencyIcon currency={isDemo ? 'DEMO' : currency} width={IconSize} />\n            </div>\n        </WalletGradientBackground>\n    );\n};\n\nexport default WalletCurrencyCard;\n","import React from 'react';\nimport { Localize } from '@deriv-com/translations';\nimport { Text } from '@deriv-com/ui';\nimport './WalletListCardBadge.scss';\n\nconst WalletListCardBadge: React.FC = () => (\n    <div className='wallets-list-card-badge' data-testid='dt_wallet_list_card_badge'>\n        <Text color='white' size='2xs' weight='bold'>\n            <Localize i18n_default_text='Demo' />\n        </Text>\n    </div>\n);\n\nexport default WalletListCardBadge;\n","import React, { ComponentProps, FC } from 'react';\nimport { CFDPlatformIcons, MT5GoldIcon, MT5MarketIcons } from '../../constants/icons';\nimport { CFD_PLATFORMS, MARKET_TYPE } from '../../features/cfd/constants';\nimport { THooks, TPlatforms } from '../../types';\nimport { WalletCurrencyCard } from '../WalletCurrencyCard';\nimport { WalletMarketIcon } from '../WalletMarketIcon';\nimport './WalletMarketCurrencyIcon.scss';\n\ntype TWalletMarketCurrencyIconProps = {\n    currency: Exclude<THooks.ActiveWalletAccount['currency'], undefined>;\n    isDemo: THooks.ActiveWalletAccount['is_virtual'];\n    marketType?: keyof typeof MT5MarketIcons;\n    platform?: TPlatforms.All;\n    product?: THooks.AvailableMT5Accounts['product'] | 'gold';\n    size?: ComponentProps<typeof WalletCurrencyCard>['size'];\n};\n\nconst WalletMarketCurrencyIcon: FC<TWalletMarketCurrencyIconProps> = ({\n    currency,\n    isDemo,\n    marketType,\n    platform = 'ctrader',\n    product,\n    size = 'sm',\n}) => {\n    const marketTypeAllkey = product ? `${marketType}_${product}` : platform;\n    let MarketTypeIcon;\n    if (marketType === MARKET_TYPE.ALL && platform && marketTypeAllkey in CFDPlatformIcons) {\n        MarketTypeIcon = marketTypeAllkey;\n    } else if (platform === CFD_PLATFORMS.MT5 && product && product in MT5GoldIcon) {\n        MarketTypeIcon = product;\n    } else if (platform === CFD_PLATFORMS.MT5 && marketType && marketType in MT5MarketIcons) {\n        MarketTypeIcon = marketType;\n    } else MarketTypeIcon = 'standard';\n\n    return (\n        <div className='wallets-market-currency-icon' data-testid='dt_wallet_market_icon'>\n            <div className='wallets-market-currency-icon__container'>\n                <WalletMarketIcon\n                    className='wallets-market-currency-icon__market-icon'\n                    icon={MarketTypeIcon as ComponentProps<typeof WalletMarketIcon>['icon']}\n                    size={size}\n                />\n                <WalletCurrencyCard\n                    className='wallets-market-currency-icon__currency-icon'\n                    currency={currency}\n                    isDemo={isDemo}\n                    size={size}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default WalletMarketCurrencyIcon;\n","/* eslint-disable sort-keys */\nimport React, { CSSProperties } from 'react';\nimport { AppIcons, CFDPlatformIcons, MT5GoldIcon, MT5MarketIcons, PlatformIcons } from '../../constants/icons';\nimport { TIconTypes } from '../../types';\n\nconst Icons: Record<string, React.ComponentType<React.SVGAttributes<SVGElement>>> | TIconTypes = {\n    ...AppIcons,\n    ...MT5MarketIcons,\n    ...CFDPlatformIcons,\n    ...PlatformIcons,\n    ...MT5GoldIcon,\n};\n\nconst IconSizes = {\n    xs: 16,\n    sm: 24,\n    md: 32,\n    lg: 48,\n    xl: 64,\n} as const;\n\ntype TWalletIconProps = {\n    className?: string;\n    height?: CSSProperties['height'];\n    icon: keyof typeof Icons;\n    size?: keyof typeof IconSizes;\n    width?: CSSProperties['width'];\n};\n\nconst WalletMarketIcon = ({ className = '', height, icon, size = 'md', width }: TWalletIconProps) => {\n    const IconSize = IconSizes[size];\n    const Icon = Icons[icon];\n\n    if (!Icon) {\n        return null;\n    }\n\n    return (\n        <Icon\n            className={className}\n            data-testid='dt_wallet_icon'\n            height={height ?? IconSize}\n            width={width ?? IconSize}\n        />\n    );\n};\n\nexport default WalletMarketIcon;\n","import React from 'react';\nimport { useCurrencyConfig } from '@deriv/api-v2';\nimport { displayMoney } from '@deriv/api-v2/src/utils';\n\ntype TProps = {\n    amount?: number;\n    currency?: string;\n    hasSign?: boolean;\n};\n\nconst WalletMoney: React.FC<TProps> = ({ amount = 0, currency = '', hasSign = false }) => {\n    const { getConfig } = useCurrencyConfig();\n    const currencyConfig = getConfig(currency);\n\n    const fractionalDigits = currencyConfig?.fractional_digits;\n    const displayCode = currencyConfig?.display_code;\n\n    let sign = '';\n    if (Number(amount) && (Number(amount) < 0 || hasSign)) {\n        sign = Number(amount) > 0 ? '+' : '-';\n    }\n\n    const value = hasSign ? Math.abs(Number(amount)) : amount;\n\n    const formattedAmount = displayMoney(value, '', {\n        fractional_digits: fractionalDigits,\n    });\n\n    return (\n        <>\n            <span dir='ltr'>{(hasSign ? sign : '') + formattedAmount}</span>\n            {currency ? `\\u00A0${displayCode}` : ''}\n        </>\n    );\n};\n\nexport default WalletMoney;\n","import React, { ComponentProps } from 'react';\nimport { LabelPairedCircleExclamationCaptionRegularIcon } from '@deriv/quill-icons';\nimport { useTranslations } from '@deriv-com/translations';\nimport { Badge, Text } from '@deriv-com/ui';\nimport { DISABLED_PLATFORM_STATUSES, MT5_ACCOUNT_STATUS, TRADING_PLATFORM_STATUS } from '../../constants';\n\ntype TProps = {\n    badgeSize: ComponentProps<typeof Badge>['badgeSize'];\n    className?: ComponentProps<typeof Badge>['className'];\n    status: (typeof DISABLED_PLATFORM_STATUSES)[number];\n};\n\nconst getBadgeText = (status: TProps['status'], localize: (key: string) => string) => {\n    switch (status) {\n        case TRADING_PLATFORM_STATUS.MAINTENANCE:\n        case MT5_ACCOUNT_STATUS.UNDER_MAINTENANCE:\n            return localize('Server maintenance');\n        case TRADING_PLATFORM_STATUS.UNAVAILABLE:\n        case MT5_ACCOUNT_STATUS.UNAVAILABLE:\n            return localize('Temporarily unavailable');\n        default:\n            return '';\n    }\n};\n\nconst PlatformStatusBadge: React.FC<TProps> = ({ badgeSize, className, status }) => {\n    const { localize } = useTranslations();\n\n    if (!getBadgeText(status, localize)) return null;\n\n    return (\n        <Badge\n            badgeSize={badgeSize}\n            className={className}\n            color='warning-secondary'\n            isBold\n            leftIcon={<LabelPairedCircleExclamationCaptionRegularIcon fill='#C47D00' />}\n            padding='loose'\n            rounded='sm'\n            variant='bordered'\n        >\n            <Text lineHeight='2xl' size='2xs' weight='bold'>\n                {getBadgeText(status, localize)}\n            </Text>\n        </Badge>\n    );\n};\n\nexport default PlatformStatusBadge;\n","import React, { ComponentProps } from 'react';\nimport { ActionScreen, Button } from '@deriv-com/ui';\nimport './WalletsErrorScreen.scss';\n\ntype TProps = {\n    buttonText?: React.ReactNode;\n    buttonVariant?: ComponentProps<typeof Button>['variant'];\n    message: React.ReactNode;\n    onClick?: () => void;\n    title: React.ReactNode;\n};\n\nconst WalletsErrorScreen: React.FC<TProps> = ({ buttonText, buttonVariant = 'contained', message, onClick, title }) => {\n    return (\n        <div className='wallets-error-screen'>\n            <ActionScreen\n                actionButtons={\n                    buttonText ? (\n                        <Button borderWidth='sm' onClick={onClick} size='lg' textSize='md' variant={buttonVariant}>\n                            {buttonText}\n                        </Button>\n                    ) : undefined\n                }\n                description={message}\n                title={title}\n            />\n        </div>\n    );\n};\n\nexport default WalletsErrorScreen;\n","export enum CryptoDepositErrorCodes {\n    CryptoConnectionError = 'CryptoConnectionError',\n    SuspendedCurrency = 'CryptoSuspendedCurrency',\n    SuspendedDeposit = 'CryptoDisabledCurrencyDeposit',\n}\n\nexport enum CryptoWithdrawalErrorCodes {\n    CryptoConnectionError = 'CryptoConnectionError',\n    CryptoInvalidAddress = 'CryptoInvalidAddress',\n    CryptoLimitAgeVerified = 'CryptoLimitAgeVerified',\n    InvalidToken = 'InvalidToken',\n    SuspendedCurrency = 'CryptoSuspendedCurrency',\n    SuspendedWithdrawal = 'CryptoDisabledCurrencyWithdrawal',\n}\n","import React, { useEffect } from 'react';\nimport { useActiveWalletAccount } from '@deriv/api-v2';\nimport { TSocketError } from '@deriv/api-v2/types';\nimport { getInitialLanguage, Localize, useTranslations } from '@deriv-com/translations';\nimport { WalletsErrorScreen } from '../../../../components';\nimport { CryptoDepositErrorCodes } from '../../../../constants/errorCodes';\n\ntype TProps = {\n    error: TSocketError<'cashier'>['error'];\n};\n\ntype TErrorContent = {\n    buttonText?: React.ReactNode;\n    message: React.ReactNode;\n    onClick?: () => void;\n    title: React.ReactNode;\n};\n\ntype TErrorCodeHandlers = Record<string, TErrorContent>;\n\nconst DepositErrorScreen: React.FC<TProps> = ({ error }) => {\n    const { data } = useActiveWalletAccount();\n    const { currentLang, localize } = useTranslations();\n    const i18nLanguage = getInitialLanguage();\n    const currency = data?.currency;\n\n    useEffect(() => {\n        // reload when language is switched to show error message for latest WS connection\n        if (currentLang !== i18nLanguage) {\n            window.location.reload();\n        }\n    }, [currentLang, i18nLanguage]);\n\n    const defaultContent: TErrorContent = {\n        buttonText: <Localize i18n_default_text='Refresh page' />,\n        message: error.message,\n        onClick: () => window.location.reload(),\n        title: <Localize i18n_default_text='Something went wrong' />,\n    };\n\n    const depositErrorCodeHandlers: TErrorCodeHandlers = {\n        [CryptoDepositErrorCodes.CryptoConnectionError]: {\n            ...defaultContent,\n            buttonText: undefined,\n            title: <Localize i18n_default_text='Maintenance in progress' />,\n        },\n        [CryptoDepositErrorCodes.SuspendedCurrency]: {\n            ...defaultContent,\n            buttonText: undefined,\n            message: localize(\n                'Due to system maintenance, deposits with your {{currency}} Wallet are unavailable at the moment. Please try again later.',\n                { currency }\n            ),\n            title: (\n                <Localize\n                    i18n_default_text='{{currency}} Wallet deposits are temporarily unavailable'\n                    values={{ currency }}\n                />\n            ),\n        },\n        [CryptoDepositErrorCodes.SuspendedDeposit]: {\n            ...defaultContent,\n            buttonText: undefined,\n            message: localize(\n                'Due to system maintenance, deposits with your {{currency}} Wallet are unavailable at the moment. Please try again later.',\n                { currency }\n            ),\n            title: (\n                <Localize\n                    i18n_default_text='{{currency}} Wallet deposits are temporarily unavailable'\n                    values={{ currency }}\n                />\n            ),\n        },\n    };\n\n    const content = depositErrorCodeHandlers[error.code] || defaultContent;\n\n    return <WalletsErrorScreen {...content} />;\n};\n\nexport default DepositErrorScreen;\n","import React from 'react';\nimport { Localize } from '@deriv-com/translations';\nimport { Button, Divider, Text } from '@deriv-com/ui';\n\ntype TTransactionStatusError = {\n    refresh: VoidFunction;\n};\n\nconst TransactionStatusError: React.FC<TTransactionStatusError> = ({ refresh }) => (\n    <React.Fragment>\n        <Text lineHeight='sm' size='xs'>\n            <Localize i18n_default_text='Unfortunately, we cannot retrieve the information at this time.' />\n        </Text>\n        <Divider color='var(--general-active)' />\n        <Button borderWidth='sm' color='black' isFullWidth={true} onClick={refresh} size='sm' variant='outlined'>\n            <Localize i18n_default_text='Refresh' />\n        </Button>\n    </React.Fragment>\n);\n\nexport default TransactionStatusError;\n","import React from 'react';\nimport { Button, Text, useDevice } from '@deriv-com/ui';\nimport { ModalWrapper } from '../../../../components/Base';\nimport './WalletActionModal.scss';\n\ntype TWalletActionModal = {\n    actionButtonsOptions: {\n        isPrimary?: boolean;\n        onClick: VoidFunction;\n        text: string;\n    }[];\n    description?: JSX.Element | string;\n    hideCloseButton?: React.ComponentProps<typeof ModalWrapper>['hideCloseButton'];\n    title: string;\n};\n\nconst WalletActionModal: React.FC<TWalletActionModal> = ({\n    actionButtonsOptions,\n    description,\n    hideCloseButton = false,\n    title,\n}) => {\n    const { isDesktop } = useDevice();\n\n    return (\n        <ModalWrapper hideCloseButton={hideCloseButton}>\n            <div className='wallets-action-modal'>\n                <Text align='start' lineHeight={isDesktop ? 'xl' : 'md'} weight='bold'>\n                    {title}\n                </Text>\n                <Text align='start' lineHeight={isDesktop ? 'lg' : 'sm'} size='sm'>\n                    {description}\n                </Text>\n                {!!actionButtonsOptions.length && (\n                    <div className='wallets-action-modal__buttons-container'>\n                        {actionButtonsOptions.map(action => (\n                            <Button\n                                borderWidth='sm'\n                                color={action.isPrimary ? 'primary' : 'black'}\n                                key={action.text}\n                                onClick={action.onClick}\n                                size='lg'\n                                textSize='md'\n                                variant={action.isPrimary ? 'contained' : 'outlined'}\n                            >\n                                {action.text}\n                            </Button>\n                        ))}\n                    </div>\n                )}\n            </div>\n        </ModalWrapper>\n    );\n};\n\nexport default WalletActionModal;\n","import React from 'react';\nimport { useSubscription } from '@deriv/api-v2';\nimport { Localize, localize } from '@deriv-com/translations';\n\ntype TTransaction = NonNullable<\n    NonNullable<ReturnType<typeof useSubscription<'cashier_payments'>>['data']>['cashier_payments']\n>['crypto'][number];\n\ntype TStatus = TTransaction['status_code'];\n\ntype TDepositStatus = 'CONFIRMED' | 'ERROR' | 'PENDING';\n\ntype TWithdrawalStatus = Exclude<TStatus, TDepositStatus>;\n\n// Since BE sends the `status_code` for both `deposit` and `withdrawal` in the same field,\n// Here we modify the BE type to make `status_code` type more specific to the `transaction_type` field.\nexport type TModifiedTransaction = Omit<TTransaction, 'status_code' | 'transaction_type'> &\n    (\n        | { statusCode: TDepositStatus; transactionType: 'deposit' }\n        | { statusCode: TWithdrawalStatus; transactionType: 'withdrawal' }\n    );\n\nexport const getStatusName = (statusCode: TModifiedTransaction['statusCode']) => {\n    switch (statusCode) {\n        case 'CONFIRMED':\n        case 'SENT':\n            return <Localize i18n_default_text='Successful' />;\n        case 'ERROR':\n        case 'REJECTED':\n        case 'REVERTED':\n            return <Localize i18n_default_text='Unsuccessful' />;\n        case 'PENDING':\n        case 'PERFORMING_BLOCKCHAIN_TXN':\n        case 'PROCESSING':\n        case 'REVERTING':\n        case 'VERIFIED':\n            return <Localize i18n_default_text='In process' />;\n        case 'CANCELLED':\n            return <Localize i18n_default_text='Cancelled' />;\n        case 'LOCKED':\n            return <Localize i18n_default_text='In review' />;\n        default:\n            return '';\n    }\n};\n\nexport const getStatusDescription = (\n    transactionType: TModifiedTransaction['transactionType'],\n    statusCode: TModifiedTransaction['statusCode']\n) => {\n    switch (statusCode) {\n        // deposit-specific:\n        case 'CONFIRMED':\n            return <Localize i18n_default_text='Your deposit is successful.' />;\n        case 'PENDING':\n            return (\n                <Localize i18n_default_text=\"We've received your request and are waiting for more blockchain confirmations.\" />\n            );\n        // withdrawal-specific:\n        case 'CANCELLED':\n            return <Localize i18n_default_text=\"You've cancelled your withdrawal request.\" />;\n        case 'LOCKED':\n            return (\n                <Localize i18n_default_text=\"We're reviewing your withdrawal request. You may still cancel this transaction if you wish. Once we start processing, you won't be able to cancel.\" />\n            );\n        case 'PERFORMING_BLOCKCHAIN_TXN':\n            return <Localize i18n_default_text=\"We're sending your request to the blockchain.\" />;\n        case 'PROCESSING':\n            return <Localize i18n_default_text=\"We're awaiting confirmation from the blockchain.\" />;\n        case 'REJECTED':\n        case 'REVERTED':\n            return (\n                <Localize i18n_default_text=\"Your withdrawal is unsuccessful. We've sent you an email with more information.\" />\n            );\n        case 'REVERTING':\n        case 'VERIFIED':\n            return <Localize i18n_default_text=\"We're processing your withdrawal.\" />;\n        case 'SENT':\n            return <Localize i18n_default_text='Your withdrawal is successful.' />;\n        // both:\n        case 'ERROR':\n            return transactionType === 'deposit' ? (\n                <Localize\n                    i18n_default_text='Your {{transactionType}} is unsuccessful due to an error on the blockchain. Please contact your crypto wallet service provider for more info.'\n                    values={{ transactionType }}\n                />\n            ) : (\n                <Localize\n                    i18n_default_text='Your {{transactionType}} is unsuccessful due to an error on the blockchain. Please contact us via live chat for more info.'\n                    values={{ transactionType }}\n                />\n            );\n        default:\n            return '';\n    }\n};\n\nexport const getFormattedConfirmations = (\n    confirmations: TModifiedTransaction['confirmations'],\n    statusCode: TModifiedTransaction['statusCode']\n) => {\n    switch (statusCode) {\n        case 'CONFIRMED':\n            return localize('Confirmed');\n        case 'ERROR':\n            return localize('NA');\n        default:\n            return confirmations?.toString() ?? localize('Pending');\n    }\n};\n","import React, { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { useCancelCryptoTransaction } from '@deriv/api-v2';\nimport { LegacyClose1pxIcon } from '@deriv/quill-icons';\nimport { getTruncatedString } from '@deriv/utils';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { Button, Text, useDevice } from '@deriv-com/ui';\nimport { FormatUtils } from '@deriv-com/utils';\nimport { WalletMoney } from '../../../../../../components';\nimport { useModal } from '../../../../../../components/ModalProvider';\nimport { THooks } from '../../../../../../types';\nimport { WalletActionModal } from '../../../../components/WalletActionModal';\nimport { getFormattedConfirmations, getStatusName } from '../../../../helpers/transaction-helpers';\nimport './CryptoTransaction.scss';\n\ntype TCryptoTransaction = {\n    currency: THooks.ActiveAccount['currency'];\n    currencyDisplayCode: THooks.CurrencyConfig['code'];\n    currencyDisplayFraction?: THooks.CurrencyConfig['fractional_digits'];\n    // TODO: Remove transaction_fee from transaction type once API is updated\n    /* eslint-disable-next-line camelcase */\n    transaction: THooks.CryptoTransactions & { transaction_fee?: number };\n};\n\nconst CryptoTransaction: React.FC<TCryptoTransaction> = ({\n    currency,\n    currencyDisplayCode,\n    currencyDisplayFraction,\n    transaction,\n}) => {\n    const { hide, show } = useModal();\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n    const formattedTransactionHash = transaction.transaction_hash\n        ? getTruncatedString(transaction.transaction_hash, { type: 'middle' })\n        : localize('Pending');\n    const formattedAddressHash = transaction.address_hash\n        ? getTruncatedString(transaction.address_hash, { type: 'middle' })\n        : localize('NA');\n    const formattedConfirmations = getFormattedConfirmations(transaction.confirmations, transaction.status_code);\n\n    const { mutate } = useCancelCryptoTransaction();\n\n    const cancelTransaction = useCallback(() => {\n        mutate({ payload: { id: transaction.id } });\n        hide();\n    }, [hide, mutate, transaction.id]);\n\n    const onCancelTransactionButtonClick = useCallback(() => {\n        show(\n            <WalletActionModal\n                actionButtonsOptions={[\n                    {\n                        onClick: hide,\n                        text: localize(\"No, don't cancel\"),\n                    },\n                    {\n                        isPrimary: true,\n                        onClick: cancelTransaction,\n                        text: localize('Yes, cancel'),\n                    },\n                ]}\n                description={localize('Are you sure you want to cancel this transaction?')}\n                hideCloseButton\n                title={localize('Cancel transaction')}\n            />,\n            {\n                defaultRootId: 'wallets_modal_root',\n            }\n        );\n    }, [cancelTransaction, hide, localize, show]);\n\n    return (\n        <div className='wallets-crypto-transaction'>\n            <div className='wallets-crypto-transaction__type-and-status'>\n                <Text align='start' lineHeight='sm' size='xs'>\n                    {transaction.is_deposit ? (\n                        <Localize i18n_default_text='Deposit {{currency}}' values={{ currency: currencyDisplayCode }} />\n                    ) : (\n                        <Localize\n                            i18n_default_text='Withdrawal {{currency}}'\n                            values={{ currency: currencyDisplayCode }}\n                        />\n                    )}\n                </Text>\n                <div className='wallets-crypto-transaction__status'>\n                    <div\n                        className={classNames(\n                            'wallets-crypto-transaction__status__dot',\n                            `wallets-crypto-transaction__status__dot--${transaction.status_code\n                                .toLowerCase()\n                                .replace('_', '-')}`\n                        )}\n                    />\n                    <Text align='start' lineHeight='2xs' size='2xs'>\n                        {getStatusName(transaction.status_code)}\n                    </Text>\n                    {!!transaction.is_valid_to_cancel && isDesktop && (\n                        <button\n                            className='wallets-crypto-transaction__cancel-button'\n                            data-testid='dt-wallets-crypto-transactions-cancel-button'\n                            onClick={onCancelTransactionButtonClick}\n                        >\n                            <LegacyClose1pxIcon iconSize='xs' />\n                        </button>\n                    )}\n                </div>\n            </div>\n            <div className='wallets-crypto-transaction__amount-and-date'>\n                <Text align='start' color='less-prominent' size='2xs'>\n                    <WalletMoney amount={transaction.amount} currency={currency} />\n                </Text>\n                <Text align='start' color='less-prominent' size='2xs'>\n                    {FormatUtils.getFormattedDateString(transaction.submit_date, {\n                        dateOptions: { day: 'numeric', month: 'short', year: 'numeric' },\n                        unix: true,\n                    })}\n                </Text>\n            </div>\n            {transaction?.transaction_fee && (\n                <Text align='start' color='less-prominent' lineHeight='xs' size='2xs'>\n                    <Localize\n                        i18n_default_text='Transaction fee: {{fee}} {{currency}}'\n                        values={{\n                            currency: currencyDisplayCode,\n                            fee: Number(transaction.transaction_fee).toFixed(currencyDisplayFraction),\n                        }}\n                    />\n                </Text>\n            )}\n            <Text align='start' lineHeight='2xs' size='2xs'>\n                <Localize\n                    components={[\n                        <a\n                            className='wallets-crypto-transaction__red-text'\n                            href={transaction.address_url}\n                            key={0}\n                            rel='noopener noreferrer'\n                            target='_blank'\n                        />,\n                    ]}\n                    i18n_default_text='Address: <0>{{address}}</0>'\n                    values={{ address: formattedAddressHash }}\n                />\n            </Text>\n            <Text align='start' lineHeight='2xs' size='2xs'>\n                <Localize\n                    components={[\n                        <a\n                            className='wallets-crypto-transaction__red-text'\n                            href={transaction.transaction_url}\n                            key={0}\n                            rel='noopener noreferrer'\n                            target='_blank'\n                        />,\n                    ]}\n                    i18n_default_text='Transaction hash: <0>{{hash}}</0>'\n                    values={{ hash: formattedTransactionHash }}\n                />\n            </Text>\n            {transaction.is_deposit && (\n                <div>\n                    <Text align='start' lineHeight='2xs' size='2xs'>\n                        <Localize\n                            components={[<span className='wallets-crypto-transaction__red-text' key={0} />]}\n                            i18n_default_text='Confirmations: <0>{{confirmations}}</0>'\n                            values={{ confirmations: formattedConfirmations }}\n                        />\n                    </Text>\n                </div>\n            )}\n            {!!transaction.is_valid_to_cancel && !isDesktop && (\n                <div className='wallets-crypto-transaction__cancel-button-container'>\n                    <Button\n                        borderWidth='sm'\n                        color='black'\n                        data-testid='dt-wallets-crypto-transactions-cancel-button'\n                        onClick={onCancelTransactionButtonClick}\n                        size='sm'\n                        variant='outlined'\n                    >\n                        <Localize i18n_default_text='Cancel transaction' />\n                    </Button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default CryptoTransaction;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Localize } from '@deriv-com/translations';\nimport { Button, Divider, Text } from '@deriv-com/ui';\nimport { THooks } from '../../../../../../types';\nimport { CryptoTransaction } from '../CryptoTransaction';\n\ntype TTransactionStatusSuccess = {\n    transactionType?: THooks.CryptoTransactions['transaction_type'];\n    transactions: THooks.CryptoTransactions[];\n    wallet: THooks.ActiveWalletAccount;\n};\n\nconst TransactionStatusSuccess: React.FC<TTransactionStatusSuccess> = ({ transactionType, transactions, wallet }) => {\n    const history = useHistory();\n\n    const filteredTransactions =\n        transactions?.filter(\n            el => !transactionType || (transactionType === 'deposit' ? el.is_deposit : el.is_withdrawal)\n        ) || [];\n\n    return (\n        <React.Fragment>\n            {filteredTransactions?.length > 0 ? (\n                <React.Fragment>\n                    {filteredTransactions?.slice(0, 3).map((transaction, index) => (\n                        <React.Fragment key={transaction.id}>\n                            <CryptoTransaction\n                                currency={wallet.currency || ''}\n                                currencyDisplayCode={wallet.currency_config?.code || ''}\n                                currencyDisplayFraction={wallet.currency_config?.fractional_digits || 0}\n                                key={transaction.id}\n                                transaction={transaction}\n                            />\n                            <Divider\n                                color={\n                                    index < filteredTransactions.length - 1 && index < 2\n                                        ? 'var(--wallets-banner-border-color)'\n                                        : 'var(--general-active)'\n                                }\n                            />\n                        </React.Fragment>\n                    ))}\n                    {filteredTransactions.length > 3 && (\n                        <Button\n                            borderWidth='sm'\n                            color='black'\n                            isFullWidth\n                            onClick={() => {\n                                // should navigate to transactions page with \"Pending transactions\" toggle on and filter set to `transactionType`\n                                history.push('/wallet/transactions', {\n                                    showPending: true,\n                                    transactionType,\n                                });\n                            }}\n                            size='sm'\n                            variant='outlined'\n                        >\n                            <Localize i18n_default_text='View more' />\n                        </Button>\n                    )}\n                </React.Fragment>\n            ) : (\n                <React.Fragment>\n                    <Text align='start' size='sm'>\n                        <Localize i18n_default_text='No recent transactions.' />\n                    </Text>\n                    <Divider />\n                </React.Fragment>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default TransactionStatusSuccess;\n","import React, { useCallback, useEffect } from 'react';\nimport { useActiveWalletAccount, useCryptoTransactions } from '@deriv/api-v2';\nimport { LegacyWarningIcon } from '@deriv/quill-icons';\nimport { Localize } from '@deriv-com/translations';\nimport { Divider, Text } from '@deriv-com/ui';\nimport { WalletLoader } from '../../../../components';\nimport { THooks } from '../../../../types';\nimport { TransactionStatusError } from './components/TransactionStatusError';\nimport { TransactionStatusSuccess } from './components/TransactionStatusSuccess';\nimport './TransactionStatus.scss';\n\ntype TTransactionStatus = {\n    transactionType?: THooks.CryptoTransactions['transaction_type'];\n};\n\nconst TransactionStatus: React.FC<TTransactionStatus> = ({ transactionType }) => {\n    const {\n        data: transactions,\n        error: recentTransactionsError,\n        isLoading: isTransactionsLoading,\n        resetData,\n        subscribe,\n        unsubscribe,\n    } = useCryptoTransactions();\n    const {\n        data: wallet,\n        error: activeWalletAccountError,\n        isLoading: isActiveWalletAccountLoading,\n        refetch,\n    } = useActiveWalletAccount();\n\n    useEffect(() => {\n        subscribe({ payload: { transaction_type: transactionType } });\n        return () => unsubscribe();\n    }, [subscribe, transactionType, unsubscribe]);\n\n    const isLoading = isTransactionsLoading || isActiveWalletAccountLoading;\n    const isError = !!activeWalletAccountError || !!recentTransactionsError;\n    const isTransactionStatusSuccessVisible = !isLoading && !isError && wallet;\n\n    const refresh = useCallback(() => {\n        unsubscribe();\n        resetData();\n        subscribe({ payload: { transaction_type: transactionType } });\n        refetch();\n    }, [refetch, resetData, subscribe, transactionType, unsubscribe]);\n\n    return (\n        <div className='wallets-transaction-status'>\n            <div className='wallets-transaction-status__header'>\n                <Text align='start' size='sm' weight='bold'>\n                    <Localize i18n_default_text='Transaction status' />\n                </Text>\n                {isError && <LegacyWarningIcon fill='var(--status-warning)' iconSize='xs' />}\n            </div>\n            <Divider color='var(--general-active)' />\n            <div className='wallets-transaction-status__body'>\n                {isLoading && (\n                    <div className='wallets-transaction-status__loader'>\n                        <WalletLoader />\n                    </div>\n                )}\n                {isError && !isLoading && <TransactionStatusError refresh={refresh} />}\n                {isTransactionStatusSuccessVisible && (\n                    <TransactionStatusSuccess\n                        transactionType={transactionType}\n                        transactions={transactions || []}\n                        wallet={wallet}\n                    />\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default TransactionStatus;\n","import React from 'react';\nimport QRCode from 'qrcode.react';\nimport { Text, useDevice } from '@deriv-com/ui';\nimport { WalletClipboard } from '../../../../../../components/Base';\nimport useIsRtl from '../../../../../../hooks/useIsRtl';\nimport './DepositCryptoAddress.scss';\n\ntype TProps = {\n    depositCryptoAddress?: string;\n};\n\nconst DepositCryptoAddress: React.FC<TProps> = ({ depositCryptoAddress }) => {\n    const { isDesktop } = useDevice();\n    const isRtl = useIsRtl();\n    const mobileAlignment = isRtl ? 'right' : 'left';\n\n    return (\n        <div className='wallets-deposit-crypto-address'>\n            <QRCode data-testid='dt_deposit-crypto-address-qr-code' size={128} value={depositCryptoAddress || ''} />\n            <div className='wallets-deposit-crypto-address__hash'>\n                <div className='wallets-deposit-crypto-address__hash-text'>\n                    <Text size='sm' weight='bold'>\n                        {depositCryptoAddress}\n                    </Text>\n                </div>\n                <div className='wallets-deposit-crypto-address__hash-clipboard'>\n                    <WalletClipboard\n                        className='wallets-deposit-crypto-address__clipboard'\n                        popoverAlignment={isDesktop ? 'bottom' : mobileAlignment}\n                        textCopy={depositCryptoAddress || ''}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DepositCryptoAddress;\n","import React from 'react';\nimport { useActiveWalletAccount } from '@deriv/api-v2';\nimport { Localize } from '@deriv-com/translations';\nimport { Text } from '@deriv-com/ui';\n\nconst DepositCryptoCurrencyDetails = () => {\n    const { data } = useActiveWalletAccount();\n\n    return (\n        <Text align='center' size='md' weight='bold'>\n            <Localize\n                i18n_default_text='Send only {{currencyConfigName}} ({{currencyConfigCode}}) to this address'\n                values={{\n                    currencyConfigCode: data?.currency_config?.display_code,\n                    currencyConfigName: data?.currency_config?.name,\n                }}\n            />\n        </Text>\n    );\n};\n\nexport default DepositCryptoCurrencyDetails;\n","import React from 'react';\nimport { useActiveWalletAccount, useCryptoConfig } from '@deriv/api-v2';\nimport { Localize } from '@deriv-com/translations';\nimport { InlineMessage, Text } from '@deriv-com/ui';\nimport './DepositCryptoDisclaimers.scss';\n\n// Check with BE to see if we can get the network name from the API.\nconst cryptoCurrencyToNetworkMapper: Record<string, string> = {\n    BTC: 'Bitcoin (BTC)',\n    ETH: 'Ethereum (ETH)',\n    eUSDT: 'Ethereum (ERC20) ',\n    LTC: 'Litecoin (LTC)',\n    tUSDT: 'Tron (TRC20) ',\n    USDC: 'Ethereum (ERC20)',\n    UST: 'Omnicore',\n};\n\nconst DepositCryptoDisclaimers = () => {\n    const { data } = useActiveWalletAccount();\n    const { data: cryptoConfig } = useCryptoConfig();\n    const { currency } = data || {};\n    const formattedMinimumDepositValue = cryptoConfig?.minimum_deposit?.toFixed(\n        data?.currency_config?.fractional_digits\n    );\n\n    const minimumDepositDisclaimer = data?.currency_config?.is_tUSDT ? (\n        <li>\n            <Localize\n                components={[<strong key={0} />]}\n                i18n_default_text='A minimum deposit value of <0>{{formattedMinimumDepositValue}}</0> {{currency}} is required. Otherwise, a fee is applied.'\n                values={{ currency, formattedMinimumDepositValue }}\n            />\n        </li>\n    ) : (\n        <li>\n            <Localize\n                components={[<strong key={0} />]}\n                i18n_default_text='A minimum deposit value of <0>{{formattedMinimumDepositValue}}</0> {{currency}} is required. Otherwise, the funds will be lost and cannot be recovered.'\n                values={{ currency, formattedMinimumDepositValue }}\n            />\n        </li>\n    );\n\n    return (\n        <div className='wallets-deposit-crypto-disclaimers'>\n            <InlineMessage iconPosition='top' variant='warning'>\n                <div className='wallets-deposit-crypto-disclaimers__content'>\n                    <Text size='2xs' weight='bold'>\n                        <Localize i18n_default_text='To avoid loss of funds:' />\n                    </Text>\n                    <ul className='wallets-deposit-crypto-disclaimers__points'>\n                        {cryptoConfig?.minimum_deposit && minimumDepositDisclaimer}\n                        <li>\n                            <Localize\n                                i18n_default_text='Only send {{currencyConfigName}} ({{currencyConfigCode}}) to this address.'\n                                values={{\n                                    currencyConfigCode: data?.currency_config?.display_code,\n                                    currencyConfigName: data?.currency_config?.name,\n                                }}\n                            />\n                        </li>\n                        <li>\n                            <Localize\n                                i18n_default_text='Make sure to copy the Deriv {{currency}} Wallet address above and paste it into your crypto wallet.'\n                                values={{ currency }}\n                            />\n                        </li>\n                        <li>\n                            <Localize\n                                components={[<strong key={0} />]}\n                                i18n_default_text='In your crypto wallet, select the <0>{{currency}} network</0> when transferring to Deriv. Incorrect transfers may result in the loss of funds.'\n                                values={{ currency: currency && cryptoCurrencyToNetworkMapper[currency] }}\n                            />\n                        </li>\n                    </ul>\n                </div>\n            </InlineMessage>\n            <div className='wallets-deposit-crypto-disclaimers__note'>\n                <Text size='xs'>\n                    <Localize\n                        components={[<strong key={0} />]}\n                        i18n_default_text=\"<0>Note:</0> You'll receive an email when your deposit starts being processed.\"\n                    />\n                </Text>\n            </div>\n        </div>\n    );\n};\n\nexport default DepositCryptoDisclaimers;\n","import React from 'react';\nimport { Localize } from '@deriv-com/translations';\nimport { SectionMessage, Text } from '@deriv-com/ui';\n\nconst DepositCryptoInfoNotice = () => {\n    return (\n        <SectionMessage title={<Localize i18n_default_text='Important:' />} variant='info'>\n            <Text align='start' size='sm'>\n                <Localize i18n_default_text='Verify the address on this page before each deposit to avoid losing funds. Occasionally, the address could be updated.' />\n            </Text>\n        </SectionMessage>\n    );\n};\n\nexport default DepositCryptoInfoNotice;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Localize } from '@deriv-com/translations';\nimport { Text } from '@deriv-com/ui';\nimport './DepositCryptoTryFiatOnRamp.scss';\n\nconst DepositCryptoTryFiatOnRamp = () => {\n    const history = useHistory();\n\n    return (\n        <div className='wallets-deposit-crypto-try-fiat-onramp__container'>\n            <Text align='center' className='wallets-deposit-crypto-try-fiat-onramp__content' size='xs'>\n                <Localize\n                    components={[\n                        <a\n                            className='link wallets-deposit-crypto-try-fiat-onramp__link'\n                            key={0}\n                            onClick={() => history.push('/wallet/on-ramp')}\n                        />,\n                    ]}\n                    i18n_default_text='Looking for a way to buy cryptocurrencies? <0>Try Fiat onramp</0>.'\n                />\n            </Text>\n        </div>\n    );\n};\n\nexport default DepositCryptoTryFiatOnRamp;\n","import React from 'react';\nimport { useActiveWalletAccount, useCurrencyConfig, useDepositCryptoAddress } from '@deriv/api-v2';\nimport { Divider, useDevice } from '@deriv-com/ui';\nimport { WalletLoader } from '../../../../components';\nimport { isServerError } from '../../../../utils/utils';\nimport { DepositErrorScreen } from '../../screens';\nimport { TransactionStatus } from '../TransactionStatus';\nimport DepositCryptoAddress from './components/DepositCryptoAddress/DepositCryptoAddress';\nimport DepositCryptoCurrencyDetails from './components/DepositCryptoCurrencyDetails/DepositCryptoCurrencyDetails';\nimport DepositCryptoDisclaimers from './components/DepositCryptoDisclaimers/DepositCryptoDisclaimers';\nimport DepositCryptoInfoNotice from './components/DepositCryptoInfoNotice/DepositCryptoInfoNotice';\nimport DepositCryptoTryFiatOnRamp from './components/DepositCryptoTryFiatOnRamp/DepositCryptoTryFiatOnRamp';\nimport './DepositCrypto.scss';\n\nconst DepositCrypto = () => {\n    const { data: depositCryptoAddress, error, isLoading } = useDepositCryptoAddress();\n    const { data: activeWallet } = useActiveWalletAccount();\n    const { getConfig } = useCurrencyConfig();\n    const { isDesktop } = useDevice();\n\n    const depositCryptoError = error?.error;\n    const isTUSDT = activeWallet?.currency && getConfig(activeWallet.currency)?.is_tUSDT;\n    const isOnrampAvailable = activeWallet?.currency_config && activeWallet.currency_config.platform.ramp.length > 0;\n\n    if (isLoading) return <WalletLoader />;\n\n    if (isServerError(depositCryptoError)) {\n        return <DepositErrorScreen error={depositCryptoError} />;\n    }\n\n    return (\n        <div className='wallets-deposit-crypto'>\n            <div className='wallets-deposit-crypto__left-content' /> {/* This div is used for alignment */}\n            <div className='wallets-deposit-crypto__main-content'>\n                {isTUSDT && <DepositCryptoInfoNotice />}\n                <DepositCryptoCurrencyDetails />\n                <DepositCryptoAddress depositCryptoAddress={depositCryptoAddress} />\n                <DepositCryptoDisclaimers />\n                {(!isDesktop || isOnrampAvailable) && <Divider color='var(--border-divider)' height={2} />}\n                {isOnrampAvailable && <DepositCryptoTryFiatOnRamp />}\n            </div>\n            <div className='wallets-deposit-crypto__right-content'>\n                <TransactionStatus transactionType='deposit' />\n            </div>\n        </div>\n    );\n};\n\nexport default DepositCrypto;\n","import React, { useEffect, useState } from 'react';\nimport { useCashierFiatDepositAddress } from '@deriv/api-v2';\nimport { WalletLoader } from '../../../../components';\nimport { isServerError } from '../../../../utils/utils';\nimport { DepositErrorScreen } from '../../screens';\nimport './DepositFiat.scss';\n\nconst DepositFiat: React.FC = () => {\n    const { data: iframeUrl, error, isAuthorizing, isLoading } = useCashierFiatDepositAddress();\n    const [isIframeLoading, setIsIframeLoading] = useState(true);\n    const depositFiatError = error?.error;\n\n    useEffect(() => {\n        if (isAuthorizing) {\n            setIsIframeLoading(true);\n        }\n    }, [isAuthorizing]);\n\n    if (isLoading || isAuthorizing) return <WalletLoader />;\n\n    if (isServerError(depositFiatError)) {\n        return <DepositErrorScreen error={depositFiatError} />;\n    }\n\n    return (\n        <React.Fragment>\n            {isIframeLoading && <WalletLoader />}\n            {iframeUrl && (\n                <iframe\n                    className='wallets-deposit-fiat__iframe'\n                    data-testid='dt_deposit-fiat-iframe'\n                    key={iframeUrl}\n                    onLoad={() => setIsIframeLoading(false)}\n                    src={iframeUrl}\n                    style={{ display: isIframeLoading ? 'none' : 'block' }}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default DepositFiat;\n","import React from 'react';\nimport { useActiveWalletAccount } from '@deriv/api-v2';\nimport { WalletLoader } from '../../../../components';\nimport { DepositCryptoModule, DepositFiatModule } from '../../modules';\n\nconst WalletDeposit = () => {\n    const { data: activeWallet } = useActiveWalletAccount();\n\n    if (!activeWallet?.currency_config) return <WalletLoader />;\n\n    const isCryptoProvider = activeWallet.currency_config.platform.cashier.includes('crypto');\n\n    return isCryptoProvider ? <DepositCryptoModule /> : <DepositFiatModule />;\n};\n\nexport default WalletDeposit;\n","import React, { MouseEventHandler, useCallback, useEffect } from 'react';\nimport { useMutation } from '@deriv/api-v2';\nimport { Localize } from '@deriv-com/translations';\nimport { Button, Text } from '@deriv-com/ui';\nimport './FiatOnRampDisclaimer.scss';\n\ntype TFiatOnRampDisclaimer = {\n    handleDisclaimer: MouseEventHandler<HTMLButtonElement>;\n};\n\nconst FiatOnRampDisclaimer: React.FC<TFiatOnRampDisclaimer> = ({ handleDisclaimer }) => {\n    const { data: provider, isLoading, mutate } = useMutation('service_token');\n\n    const redirectToBanxa = useCallback(() => {\n        const banxaUrl = provider?.service_token?.banxa?.url ?? '';\n        if (banxaUrl) {\n            window.open(banxaUrl, '_blank');\n        }\n    }, [provider?.service_token?.banxa?.url]);\n\n    useEffect(() => {\n        mutate({ payload: { referrer: window.location.href, service: 'banxa' } });\n    }, [mutate]);\n\n    return (\n        <div className='wallets-fiat-onramp-disclaimer'>\n            <Text align='start' color='prominent' size='xs' weight='bold'>\n                <Localize i18n_default_text='Disclaimer' />\n            </Text>\n            <Text align='start' size='xs'>\n                <Localize\n                    components={[<strong key={0} />]}\n                    i18n_default_text=\"By clicking <0>Continue</0>, you'll be redirected to Banxa, a third-party payment service provider. Please note that Deriv is not responsible for the content or services provided by Banxa. If you encounter any issues related to Banxa services, you should contact Banxa directly.\"\n                />\n            </Text>\n            <div className='wallets-fiat-onramp-disclaimer__buttons'>\n                <Button borderWidth='sm' color='black' onClick={handleDisclaimer} size='md' variant='outlined'>\n                    <Localize i18n_default_text='Back' />\n                </Button>\n                <Button isLoading={isLoading} onClick={() => redirectToBanxa()} size='md'>\n                    <Localize i18n_default_text='Continue' />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default FiatOnRampDisclaimer;\n","import React, { MouseEventHandler } from 'react';\nimport { Localize } from '@deriv-com/translations';\nimport { Button, Text } from '@deriv-com/ui';\nimport './FiatOnRampProviderCard.scss';\n\ntype TFiatOnRampProvider = {\n    description: React.ReactNode;\n    getPaymentIcons: () => { icon: JSX.Element; name: string }[];\n    handleDisclaimer: MouseEventHandler<HTMLButtonElement>;\n    icon: React.ReactNode;\n    name: React.ReactNode;\n};\nconst FiatOnRampProviderCard: React.FC<TFiatOnRampProvider> = ({\n    description,\n    getPaymentIcons,\n    handleDisclaimer,\n    icon,\n    name,\n}) => {\n    const paymentIcons = getPaymentIcons();\n\n    return (\n        <div className='wallets-fiat-onramp-provider'>\n            <div className='wallets-fiat-onramp-provider__logo'>{icon}</div>\n            <div className='wallets-fiat-onramp-provider__content'>\n                <Text align='start' color='prominent' size='md' weight='bold'>\n                    {name}\n                </Text>\n                <Text align='start' size='sm'>\n                    {description}\n                </Text>\n                <div className='wallets-fiat-onramp-provider__icons'>\n                    {paymentIcons.map(paymentIcon => (\n                        <div\n                            className='wallets-fiat-onramp-provider__payment-icon'\n                            key={`payment-method-icon-${paymentIcon.name}`}\n                        >\n                            {paymentIcon.icon}\n                        </div>\n                    ))}\n                </div>\n            </div>\n            <div className='wallets-fiat-onramp-provider__mobile-icons'>\n                {paymentIcons.map(paymentIcon => (\n                    <div\n                        className='wallets-fiat-onramp-provider__payment-icon'\n                        key={`payment-method-mobile-icon-${paymentIcon.name}`}\n                    >\n                        {paymentIcon.icon}\n                    </div>\n                ))}\n            </div>\n            <Button onClick={handleDisclaimer} size='md'>\n                <Localize i18n_default_text='Select' />\n            </Button>\n        </div>\n    );\n};\n\nexport default FiatOnRampProviderCard;\n","import React from 'react';\nimport {\n    PaymentMethodApplePayBrandIcon,\n    PaymentMethodBanxaBrandIcon,\n    PaymentMethodMastercardBrandIcon,\n    PaymentMethodVisaBrandIcon,\n} from '@deriv/quill-icons';\nimport { Localize } from '@deriv-com/translations';\n\nexport const fiatOnRampProvider = {\n    description: (\n        <Localize i18n_default_text='A fast and secure fiat-to-crypto payment service. Deposit cryptocurrencies from anywhere in the world using your credit/debit cards and bank transfers.' />\n    ),\n    getPaymentIcons: () => [\n        {\n            icon: <PaymentMethodApplePayBrandIcon />,\n            name: 'apple-pay',\n        },\n        {\n            icon: <PaymentMethodMastercardBrandIcon />,\n            name: 'mastercard',\n        },\n        {\n            icon: <PaymentMethodVisaBrandIcon />,\n            name: 'visa',\n        },\n    ],\n    icon: <PaymentMethodBanxaBrandIcon key='banxa' />,\n    name: <Localize i18n_default_text='Banxa' />,\n};\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { LegacyArrowLeft2pxIcon, LegacyArrowRight2pxIcon } from '@deriv/quill-icons';\nimport { Localize } from '@deriv-com/translations';\nimport { Button, Text } from '@deriv-com/ui';\nimport useIsRtl from '../../../../hooks/useIsRtl';\nimport { FiatOnRampDisclaimer, FiatOnRampProviderCard } from './components';\nimport { fiatOnRampProvider } from './constants';\nimport './FiatOnRamp.scss';\n\nconst FiatOnRamp = () => {\n    const history = useHistory();\n    const isRtl = useIsRtl();\n    const [disclaimer, setDisclaimer] = useState(false);\n\n    const handleDisclaimer = () => setDisclaimer(disclaimer => !disclaimer);\n\n    return (\n        <React.Fragment>\n            {disclaimer ? (\n                <FiatOnRampDisclaimer handleDisclaimer={handleDisclaimer} />\n            ) : (\n                <div className='wallets-fiat-onramp'>\n                    <div className='wallets-fiat-onramp__actions'>\n                        <Button\n                            color='white'\n                            icon={\n                                isRtl ? (\n                                    <LegacyArrowRight2pxIcon iconSize='xs' />\n                                ) : (\n                                    <LegacyArrowLeft2pxIcon iconSize='xs' />\n                                )\n                            }\n                            onClick={() => history.push('/wallet/deposit')}\n                        >\n                            <Localize i18n_default_text='Back' />\n                        </Button>\n                    </div>\n                    <div className='wallets-fiat-onramp__content'>\n                        <div className='wallets-fiat-onramp__description'>\n                            <Text align='center' color='primary' size='xs'>\n                                <Localize i18n_default_text=\"Fiat onramp is a cashier service that allows you to convert fiat currencies to cryptocurrencies to top up your Deriv crypto Wallet(s). Listed here are third-party cryptocurrency exchanges. You'll need to create an account with them to use their services.\" />\n                            </Text>\n                        </div>\n                        <FiatOnRampProviderCard\n                            description={fiatOnRampProvider.description}\n                            getPaymentIcons={fiatOnRampProvider.getPaymentIcons}\n                            handleDisclaimer={handleDisclaimer}\n                            icon={fiatOnRampProvider.icon}\n                            name={fiatOnRampProvider.name}\n                        />\n                    </div>\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default FiatOnRamp;\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useActiveWalletAccount } from '@deriv/api-v2';\nimport { FiatOnRampModule } from '../../modules';\n\nconst WalletFiatOnRamp = () => {\n    const { data: activeWallet } = useActiveWalletAccount();\n    const history = useHistory();\n    const isOnrampAvailable = activeWallet?.currency_config && activeWallet.currency_config.platform.ramp.length > 0;\n\n    useEffect(() => {\n        if (!isOnrampAvailable) {\n            history.push('/wallet/deposit');\n        }\n    }, [history, isOnrampAvailable]);\n\n    return <FiatOnRampModule />;\n};\n\nexport default WalletFiatOnRamp;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useActiveWalletAccount, useMutation } from '@deriv/api-v2';\nimport { DerivLightDemoResetBalanceIcon, DerivLightDemoResetBalanceSuccessfulIcon } from '@deriv/quill-icons';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { ActionScreen, Button } from '@deriv-com/ui';\nimport { WalletLoader } from '../../../../components';\nimport useAllBalanceSubscription from '../../../../hooks/useAllBalanceSubscription';\n\nconst ResetBalance = () => {\n    const history = useHistory();\n    const { localize } = useTranslations();\n    const { isLoading: isResetBalanceLoading, isSuccess: isResetBalanceSuccess, mutate } = useMutation('topup_virtual');\n    const { data: balanceData, isLoading: isBalanceLoading } = useAllBalanceSubscription();\n    const { data: activeWallet } = useActiveWalletAccount();\n\n    const resetBalance = () => {\n        mutate();\n    };\n\n    const navigateToTransfer = () => history.push('/wallet/account-transfer');\n    const isResetBalanceAvailable = balanceData && balanceData?.[activeWallet?.loginid ?? '']?.balance < 10000;\n\n    if (isBalanceLoading) {\n        return <WalletLoader />;\n    }\n\n    if (isResetBalanceSuccess) {\n        return (\n            <ActionScreen\n                actionButtons={\n                    <Button borderWidth='sm' onClick={navigateToTransfer} size='lg' textSize='md'>\n                        <Localize i18n_default_text='Transfer funds' />\n                    </Button>\n                }\n                description={localize('Your balance has been reset to 10,000.00 USD.')}\n                icon={<DerivLightDemoResetBalanceSuccessfulIcon height={128} />}\n                title={localize('Success')}\n            />\n        );\n    }\n\n    if (isResetBalanceAvailable || isResetBalanceLoading) {\n        return (\n            <ActionScreen\n                actionButtons={\n                    <Button borderWidth='sm' onClick={resetBalance} size='lg' textSize='md'>\n                        <Localize i18n_default_text='Reset balance' />\n                    </Button>\n                }\n                description={localize('Reset your virtual balance to 10,000.00 USD.')}\n                icon={<DerivLightDemoResetBalanceIcon height={128} />}\n                title={localize('Reset balance')}\n            />\n        );\n    }\n\n    return (\n        <ActionScreen\n            description={localize('You can reset your balance when it is below USD 10,000.00')}\n            icon={<DerivLightDemoResetBalanceIcon height={128} />}\n            title={localize('Reset balance unavailable')}\n        />\n    );\n};\n\nexport default ResetBalance;\n","import React from 'react';\nimport { ResetBalanceModule } from '../../modules';\n\nconst WalletResetBalance = () => <ResetBalanceModule />;\n\nexport default WalletResetBalance;\n","import React, { ChangeEvent, forwardRef } from 'react';\nimport './ToggleSwitch.scss';\n\ninterface ToggleSwitchProps {\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    value: boolean;\n}\n\nconst ToggleSwitch = forwardRef<HTMLInputElement, ToggleSwitchProps>(({ onChange, value }, ref) => (\n    <label className='wallets-toggle-switch'>\n        <input checked={value} data-testid='dt_wallets_toggle_switch' onChange={onChange} ref={ref} type='checkbox' />\n        <span className='wallets-toggle-switch__slider' />\n    </label>\n));\n\nToggleSwitch.displayName = 'ToggleSwitch';\nexport default ToggleSwitch;\n","import { createContext, useContext } from 'react';\n\ntype TCashierScrollContext = {\n    onCashierScroll: React.UIEventHandler<HTMLDivElement> | null;\n    setOnCashierScroll: React.Dispatch<React.UIEventHandler<HTMLDivElement> | null>;\n};\n\nexport const CashierScrollContext = createContext<TCashierScrollContext | null>(null);\n\nexport const useCashierScroll = () => {\n    const context = useContext(CashierScrollContext);\n\n    if (!context) {\n        throw new Error(\"Seems you didn't wrap your components in <CashierScrollContext.Provider />\");\n    }\n\n    return context;\n};\n","import { useTranslations } from '@deriv-com/translations';\n\nexport const getTransactionLabels = (localize: ReturnType<typeof useTranslations>['localize']) => ({\n    all: localize('All'),\n    deposit: localize('Deposit'),\n    reset_balance: localize('Reset balance'),\n    transfer: localize('Transfer'),\n    withdrawal: localize('Withdrawal'),\n});\n","import React from 'react';\nimport { Localize } from '@deriv-com/translations';\nimport { Text, useDevice } from '@deriv-com/ui';\nimport { WalletCurrencyCard, WalletMarketCurrencyIcon } from '../../../../../../../../components';\nimport { THooks, TPlatforms } from '../../../../../../../../types';\nimport './TransactionsCompletedRowAccountDetails.scss';\n\ntype TProps = {\n    accountType: string;\n    actionType: NonNullable<(THooks.InfiniteTransactions | THooks.Transactions)['action_type']>;\n    currency: string;\n    displayAccountName: JSX.Element | string;\n    displayActionType: string;\n    isDemo: boolean;\n    isInterWallet?: boolean;\n    marketType?: string;\n    product?: THooks.AvailableMT5Accounts['product'];\n    transactionID?: number;\n};\n\nconst TransactionsCompletedRowAccountDetails: React.FC<TProps> = ({\n    accountType,\n    actionType,\n    currency,\n    displayAccountName,\n    displayActionType,\n    isDemo,\n    isInterWallet = false,\n    marketType,\n    product,\n    transactionID,\n}) => {\n    const { isDesktop } = useDevice();\n\n    return (\n        <div className='wallets-transactions-completed-row-account-details'>\n            {actionType !== 'transfer' || isInterWallet ? (\n                <WalletCurrencyCard\n                    className='wallets-transactions-completed-row-account-details__currency-card'\n                    currency={currency}\n                    isDemo={isDemo}\n                    size='md'\n                />\n            ) : (\n                <WalletMarketCurrencyIcon\n                    currency={currency}\n                    isDemo={isDemo}\n                    marketType={marketType}\n                    platform={accountType as TPlatforms.All}\n                    product={product}\n                />\n            )}\n            <div\n                className='wallets-transactions-completed-row-account-details__type-and-wallet-name \n            wallets-transactions-completed-row-account-details__column'\n            >\n                <Text color='primary' size='xs'>\n                    {displayActionType}\n                </Text>\n                <div className='wallets-transactions-completed-row-account-details__wallet-name'>\n                    <Text color='general' size='xs' weight='bold'>\n                        {displayAccountName}\n                    </Text>\n                </div>\n                {!isDesktop && (\n                    <Text\n                        as='div'\n                        className='wallets-transactions-completed-row-account-details__transaction-id'\n                        color='less-prominent'\n                        size='xs'\n                    >\n                        <Localize i18n_default_text='Ref. ID: {{transactionID}}' values={{ transactionID }} />\n                    </Text>\n                )}\n            </div>\n            {isDesktop && (\n                <div className='wallets-transactions-completed-row-account-details__column'>\n                    <Text as='div' color='less-prominent' size='2xs'>\n                        <Localize i18n_default_text='Ref. ID' />\n                    </Text>\n                    <Text as='div' color='general' size='2xs'>\n                        {transactionID}\n                    </Text>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default TransactionsCompletedRowAccountDetails;\n","import { localize } from '@deriv-com/translations';\nimport {\n    TMarketTypes,\n    TMT5LandingCompanyName,\n    TProductForMarketDetails,\n    TWalletLandingCompanyName,\n} from '../../../types';\n\ntype TDefinedMT5LandingCompanyName = Exclude<TMT5LandingCompanyName, 'malta' | 'seychelles' | undefined>;\n\ninterface TDefinedMT5LandingCompanyDetails {\n    name: TDefinedMT5LandingCompanyName;\n    shortcode: string;\n}\n\ninterface TMT5MarketTypeDetails extends TMT5MarketTypeDetailsCommon {\n    landingCompany?: Record<TWalletLandingCompanyName, TWalletLandingCompanyDetails>;\n    product?: Partial<Record<TProductForMarketDetails, TMT5MarketTypeDetailsCommon>>;\n}\n\ninterface TMT5MarketTypeDetailsCommon {\n    name: TMarketTypes.All;\n    title: string;\n}\n\ninterface TWalletLandingCompanyDetails {\n    name: TWalletLandingCompanyName;\n    title: string;\n}\n\nexport const LandingCompanyDetails: Record<TDefinedMT5LandingCompanyName, TDefinedMT5LandingCompanyDetails> = {\n    bvi: {\n        name: 'bvi',\n        shortcode: 'BVI',\n    },\n    labuan: {\n        name: 'labuan',\n        shortcode: 'Labuan',\n    },\n    maltainvest: {\n        name: 'maltainvest',\n        shortcode: 'Maltainvest',\n    },\n    svg: {\n        name: 'svg',\n        shortcode: 'SVG',\n    },\n    vanuatu: {\n        name: 'vanuatu',\n        shortcode: 'Vanuatu',\n    },\n} as const;\n\nexport const MT5MarketTypeDetails: Record<TMarketTypes.All, TMT5MarketTypeDetails> = {\n    all: {\n        name: 'all',\n        product: {\n            swap_free: {\n                name: 'all',\n                title: 'MT5 Swap-Free',\n            },\n            zero_spread: {\n                name: 'all',\n                title: 'MT5 Zero Spread',\n            },\n        },\n        title: 'MT5 Swap-Free',\n    },\n    financial: {\n        landingCompany: {\n            malta: {\n                name: 'malta',\n                title: 'MT5 CFDs',\n            },\n            svg: {\n                name: 'svg',\n                title: 'MT5 Financial',\n            },\n            virtual: {\n                name: 'virtual',\n                title: 'MT5 CFDs',\n            },\n        },\n        name: 'financial',\n        product: {\n            gold: {\n                name: 'financial',\n                title: 'MT5 Gold',\n            },\n            stp: {\n                name: 'financial',\n                title: 'MT5 Financial STP',\n            },\n        },\n        title: 'MT5 Financial',\n    },\n    synthetic: {\n        name: 'synthetic',\n        title: 'MT5 Standard',\n    },\n} as const;\n\nexport const PlatformDetails = {\n    ctrader: {\n        name: 'ctrader',\n        title: 'Deriv cTrader',\n    },\n    derivez: {\n        name: 'derivez',\n        title: 'DerivEZ',\n    },\n    dxtrade: {\n        name: 'dxtrade',\n        title: 'Deriv X',\n    },\n    mt5: {\n        marketType: { ...MT5MarketTypeDetails },\n        name: 'mt5',\n        title: 'Deriv MT5',\n    },\n    standard: {\n        name: 'standard',\n        title: localize('Options'),\n    },\n} as const;\n","import { localize } from '@deriv-com/translations';\nimport { THooks, TMarketTypes, TWalletLandingCompanyName } from '../../../types';\nimport { PRODUCT } from '../../cfd/constants';\nimport { LandingCompanyDetails, MT5MarketTypeDetails, PlatformDetails } from '../constants';\n\ntype TGetAccountNameProps = {\n    accountCategory: THooks.TransferAccount['account_category'];\n    accountType: THooks.TransferAccount['account_type'];\n    displayCurrencyCode?: THooks.CurrencyConfig['display_code'];\n    landingCompanyName: TWalletLandingCompanyName;\n    mt5MarketType?: TMarketTypes.SortedMT5Accounts;\n    product?: THooks.AvailableMT5Accounts['product'] | 'gold' | 'stp';\n};\n\n//TODO: remove this function when landing_company_name will be added to transfer_between_accounts response in API for mt5 accounts\nexport const getLandingCompanyNameOfMT5Account = (mt5Group?: string) => {\n    if (mt5Group?.includes(LandingCompanyDetails.bvi.name)) return LandingCompanyDetails.bvi.name;\n    if (mt5Group?.includes(LandingCompanyDetails.labuan.name)) return LandingCompanyDetails.labuan.name;\n    if (mt5Group?.includes(LandingCompanyDetails.svg.name)) return LandingCompanyDetails.svg.name;\n    if (mt5Group?.includes(LandingCompanyDetails.vanuatu.name)) return LandingCompanyDetails.vanuatu.name;\n    return LandingCompanyDetails.svg.name;\n};\n\nexport const getAccountName = ({\n    accountCategory,\n    accountType,\n    displayCurrencyCode,\n    landingCompanyName,\n    mt5MarketType,\n    product,\n}: TGetAccountNameProps) => {\n    const getMT5FinancialTitle = () => {\n        switch (product) {\n            case 'stp':\n                return MT5MarketTypeDetails.financial.product?.stp?.title;\n            case 'gold':\n                return MT5MarketTypeDetails.financial.product?.gold?.title;\n            default:\n                return MT5MarketTypeDetails.financial.landingCompany?.svg.title;\n        }\n    };\n\n    switch (accountCategory) {\n        case 'wallet':\n            return localize('{{currency}} Wallet', { currency: displayCurrencyCode });\n        case 'trading': {\n            switch (accountType) {\n                case PlatformDetails.standard.name:\n                    return PlatformDetails.standard.title;\n                case PlatformDetails.dxtrade.name:\n                    return PlatformDetails.dxtrade.title;\n                case PlatformDetails.ctrader.name:\n                    return PlatformDetails.ctrader.title;\n                case PlatformDetails.mt5.name: {\n                    switch (mt5MarketType) {\n                        case MT5MarketTypeDetails.financial.name:\n                            return [\n                                MT5MarketTypeDetails.financial.landingCompany?.svg.name,\n                                MT5MarketTypeDetails.financial.landingCompany?.virtual.name,\n                            ].includes(\n                                landingCompanyName as Extract<\n                                    TGetAccountNameProps['landingCompanyName'],\n                                    'svg' | 'virtual'\n                                >\n                            )\n                                ? getMT5FinancialTitle()\n                                : MT5MarketTypeDetails.financial.landingCompany?.malta.title;\n                        case MT5MarketTypeDetails.synthetic.name:\n                            return MT5MarketTypeDetails.synthetic.title;\n                        case MT5MarketTypeDetails.all.name:\n                            if (product === PRODUCT.ZEROSPREAD) {\n                                return MT5MarketTypeDetails.all.product?.zero_spread?.title;\n                            }\n                            return MT5MarketTypeDetails.all.title;\n                        default:\n                            return '';\n                    }\n                }\n                default:\n                    return '';\n            }\n        }\n        default:\n            return '';\n    }\n};\n","import React from 'react';\nimport { useActiveWalletAccount } from '@deriv/api-v2';\nimport { THooks, TWalletLandingCompanyName } from '../../../../../../../../types';\nimport { getAccountName } from '../../../../../../helpers';\nimport { TransactionsCompletedRowAccountDetails } from '../TransactionsCompletedRowAccountDetails';\n\ntype TProps = {\n    accounts: THooks.AllAccountsList;\n    displayActionType: string;\n    loginid: string;\n    transactionID?: number;\n};\n\nconst TransactionsCompletedRowTransferAccountDetails: React.FC<TProps> = ({\n    accounts,\n    displayActionType,\n    loginid,\n    transactionID,\n}) => {\n    const { data: activeWallet } = useActiveWalletAccount();\n\n    const wallet = accounts.wallets?.find(account => account.loginid === loginid);\n    const dtradeAccount = accounts.dtrade?.find(account => account.loginid === loginid);\n    const dxtradeAccount = accounts.dxtrade?.find(account => account.account_id === loginid);\n    const mt5Account = accounts.mt5?.find(account => account.login === loginid);\n    const ctraderAccount = accounts.ctrader?.find(account => account.account_id === loginid);\n\n    const transferAccount = [wallet, dtradeAccount, dxtradeAccount, mt5Account, ctraderAccount].find(Boolean);\n\n    if (transferAccount) {\n        const derivAccountType = transferAccount === wallet ? 'wallet' : 'standard';\n        const accountType = transferAccount?.platform !== 'deriv' ? transferAccount.platform : derivAccountType;\n        const displayAccountName = getAccountName({\n            accountCategory: transferAccount === wallet ? 'wallet' : 'trading',\n            //@ts-expect-error this needs backend typing\n            accountType,\n            displayCurrencyCode: transferAccount.currency_config?.display_code ?? 'USD',\n            landingCompanyName: activeWallet?.landing_company_name as TWalletLandingCompanyName,\n            mt5MarketType: transferAccount === mt5Account ? mt5Account.market_type : undefined,\n            product: mt5Account?.product,\n        });\n\n        return (\n            <TransactionsCompletedRowAccountDetails\n                accountType={accountType}\n                actionType='transfer'\n                currency={transferAccount.currency ?? 'USD'}\n                displayAccountName={displayAccountName ?? ''}\n                displayActionType={displayActionType}\n                isDemo={Boolean(transferAccount.is_virtual)}\n                isInterWallet={transferAccount === wallet}\n                marketType={transferAccount === mt5Account ? mt5Account.market_type : undefined}\n                product={mt5Account?.product}\n                transactionID={transactionID}\n            />\n        );\n    }\n\n    return null;\n};\n\nexport default TransactionsCompletedRowTransferAccountDetails;\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { useDebounceCallback } from 'usehooks-ts';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { Divider, Text } from '@deriv-com/ui';\nimport { FormatUtils } from '@deriv-com/utils';\nimport { WalletClipboard, WalletMoney } from '../../../../../../components';\nimport { THooks } from '../../../../../../types';\nimport { getTransactionLabels } from '../../constants';\nimport { TransactionsCompletedRowAccountDetails, TransactionsCompletedRowTransferAccountDetails } from './components';\nimport './TransactionsCompletedRow.scss';\n\ntype TProps = {\n    accounts: THooks.AllAccountsList;\n    transaction: THooks.InfiniteTransactions | THooks.Transactions;\n    wallet: THooks.ActiveWalletAccount;\n};\n\ntype TTransactionsCompletedRowContentProps = TProps & {\n    displayNonTransferActionType: string;\n    displayTransferActionType: string;\n    displayWalletName: string;\n    shouldShowTraceId: boolean;\n};\n\nconst TransactionsCompletedRowContent: React.FC<TTransactionsCompletedRowContentProps> = ({\n    accounts,\n    displayNonTransferActionType,\n    displayTransferActionType,\n    displayWalletName,\n    shouldShowTraceId,\n    transaction,\n    wallet,\n}) => {\n    const { action_type: actionType, longcode = '', transaction_id: transactionId } = transaction;\n    const { account_type: accountType = '', currency = 'USD', is_virtual: isVirtual } = wallet;\n    const { addressHash, blockchainHash, splitLongcode } = FormatUtils.parseCryptoLongcode(longcode);\n    let descriptions = [longcode];\n\n    if (addressHash || blockchainHash) {\n        descriptions = splitLongcode?.map(\n            description => `${description[0].toLocaleUpperCase()}${description.slice(1)}`\n        );\n    }\n    if (shouldShowTraceId && transaction.longcode) {\n        return (\n            <Text align='center' as='div'>\n                {descriptions.map((description, index) => {\n                    return (\n                        <React.Fragment key={description}>\n                            <Text align='center' as='p' lineHeight='xs' size='xs'>\n                                {description}\n                            </Text>\n                            <div>\n                                {blockchainHash && index === descriptions.length - 1 && (\n                                    <WalletClipboard popoverAlignment='top' textCopy={blockchainHash} />\n                                )}\n                                {addressHash &&\n                                    transaction.action_type === 'withdrawal' &&\n                                    index === descriptions.length - 1 && (\n                                        <WalletClipboard popoverAlignment='top' textCopy={addressHash} />\n                                    )}\n                            </div>\n                        </React.Fragment>\n                    );\n                })}\n            </Text>\n        );\n    }\n    return (\n        <>\n            {actionType && actionType !== 'transfer' ? (\n                <TransactionsCompletedRowAccountDetails\n                    accountType={accountType}\n                    actionType={actionType}\n                    currency={currency}\n                    displayAccountName={displayWalletName}\n                    displayActionType={displayNonTransferActionType}\n                    isDemo={Boolean(isVirtual)}\n                    transactionID={transactionId}\n                />\n            ) : (\n                <TransactionsCompletedRowTransferAccountDetails\n                    accounts={accounts}\n                    displayActionType={displayTransferActionType}\n                    loginid={\n                        [transaction.from?.loginid, transaction.to?.loginid].find(\n                            loginid => loginid !== wallet?.loginid\n                        ) ?? ''\n                    }\n                    transactionID={transaction.transaction_id}\n                />\n            )}\n            <div className='wallets-transactions-completed-row__transaction-details'>\n                <Text\n                    color={transaction.amount && transaction.amount > 0 ? 'success' : 'error'}\n                    size='xs'\n                    weight='bold'\n                >\n                    <WalletMoney amount={transaction.amount} currency={currency} hasSign />\n                </Text>\n                <Text color='primary' size='2xs'>\n                    <Localize\n                        i18n_default_text='Balance: {{balance}}'\n                        values={{\n                            balance: transaction.display_balance_after,\n                        }}\n                    />\n                </Text>\n            </div>\n        </>\n    );\n};\n\nconst TransactionsCompletedRow: React.FC<TProps> = ({ accounts, transaction, wallet }) => {\n    const { localize } = useTranslations();\n    const [shouldShowTraceId, setShouldShowTraceId] = useState(false);\n    const debouncedSetShouldShowTraceId = useDebounceCallback(() => setShouldShowTraceId(false), 5000);\n\n    if (!transaction.action_type || !transaction.amount) return null;\n\n    const displayCurrency = wallet?.currency_config?.display_code || 'USD';\n    const displayWalletName = localize('{{currency}} Wallet', { currency: displayCurrency });\n    const displayNonTransferActionType =\n        wallet.is_virtual && ['deposit', 'withdrawal'].includes(transaction.action_type)\n            ? getTransactionLabels(localize).reset_balance\n            : //@ts-expect-error we only need partial action types\n              getTransactionLabels(localize)[transaction.action_type];\n    const displayTransferActionType =\n        transaction.from?.loginid === wallet?.loginid ? localize('Transfer to') : localize('Transfer from');\n\n    const handleRowClick = () => {\n        setShouldShowTraceId(!shouldShowTraceId);\n        debouncedSetShouldShowTraceId();\n    };\n\n    return (\n        <React.Fragment>\n            <Divider color='var(--border-divider)' />\n            <div\n                className={classNames('wallets-transactions-completed-row', {\n                    'wallets-transactions-completed-row--active': shouldShowTraceId,\n                })}\n                onClick={handleRowClick}\n                onKeyDown={handleRowClick}\n            >\n                <TransactionsCompletedRowContent\n                    accounts={accounts}\n                    displayNonTransferActionType={displayNonTransferActionType}\n                    displayTransferActionType={displayTransferActionType}\n                    displayWalletName={displayWalletName}\n                    shouldShowTraceId={shouldShowTraceId}\n                    transaction={transaction}\n                    wallet={wallet}\n                />\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default TransactionsCompletedRow;\n","import React from 'react';\nimport { DerivLightNoRecentTransactionsIcon } from '@deriv/quill-icons';\nimport { useTranslations } from '@deriv-com/translations';\nimport { ActionScreen } from '@deriv-com/ui';\nimport './TransactionsNoDataState.scss';\n\nconst TransactionsNoDataState = () => {\n    const { localize } = useTranslations();\n\n    return (\n        <div className='wallets-transactions-no-data-state'>\n            <ActionScreen\n                icon={<DerivLightNoRecentTransactionsIcon width={128} />}\n                title={localize('No transactions found')}\n            />\n        </div>\n    );\n};\n\nexport default TransactionsNoDataState;\n","import React, { useMemo } from 'react';\nimport { ColumnDef, getCoreRowModel, getGroupedRowModel, GroupingState, useReactTable } from '@tanstack/react-table';\nimport './TransactionsTable.scss';\n\ntype TProps<T> = {\n    columns: ColumnDef<T>[];\n    data: T[];\n    groupBy?: GroupingState;\n    rowGroupRender: (data: T) => JSX.Element;\n    rowRender: (data: T) => JSX.Element;\n};\n\nconst TransactionsTable = <T,>({ columns, data, groupBy, rowGroupRender, rowRender }: TProps<T>) => {\n    const table = useReactTable({\n        columns,\n        data,\n        getCoreRowModel: getCoreRowModel<T>(),\n        getGroupedRowModel: getGroupedRowModel<T>(),\n        state: { grouping: useMemo(() => groupBy, [groupBy]) },\n    });\n\n    return (\n        <div className='wallets-transactions-table'>\n            {table.getRowModel().rows.map(rowGroup => (\n                <div className='wallets-transactions-table__row' key={rowGroup.id}>\n                    {rowGroupRender(rowGroup.original)}\n                    {rowGroup.subRows.map(row => (\n                        <div key={row.id}>{rowRender(row.original)}</div>\n                    ))}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default TransactionsTable;\n","import React, { useCallback, useEffect } from 'react';\nimport { useActiveWalletAccount, useAllAccountsList, useInfiniteTransactions } from '@deriv/api-v2';\nimport { TSocketRequestPayload } from '@deriv/api-v2/types';\nimport { Text } from '@deriv-com/ui';\nimport { FormatUtils } from '@deriv-com/utils';\nimport { WalletLoader } from '../../../../../../components';\nimport { useCashierScroll } from '../../../../context';\nimport { TransactionsCompletedRow } from '../TransactionsCompletedRow';\nimport { TransactionsNoDataState } from '../TransactionsNoDataState';\nimport { TransactionsTable } from '../TransactionsTable';\nimport './TransactionsCompleted.scss';\n\ntype TFilter = NonNullable<TSocketRequestPayload<'statement'>['payload']>['action_type'];\n\ntype TProps = {\n    filter?: TFilter;\n};\n\nconst TransactionsCompleted: React.FC<TProps> = ({ filter }) => {\n    const {\n        data: transactions,\n        fetchNextPage,\n        isFetching,\n        isLoading: isTransactionListLoading,\n        setFilter,\n    } = useInfiniteTransactions();\n    const { data: wallet, isLoading: isWalletLoading } = useActiveWalletAccount();\n    const { data: accounts, isLoading: isAccountsListLoading } = useAllAccountsList();\n\n    const isLoading = isTransactionListLoading || isWalletLoading || isAccountsListLoading;\n\n    const { setOnCashierScroll } = useCashierScroll();\n\n    const fetchMoreOnBottomReached = useCallback(\n        (e: React.UIEvent<HTMLDivElement>) => {\n            if (e && e.currentTarget) {\n                const { clientHeight, scrollHeight, scrollTop } = e.currentTarget;\n                // once the user has scrolled within 300px of the bottom of the table, fetch more data if there is any\n                if (scrollHeight - scrollTop - clientHeight < 300 && !isFetching) {\n                    fetchNextPage();\n                }\n            }\n        },\n        [fetchNextPage, isFetching]\n    );\n\n    useEffect(() => {\n        if (Number(transactions?.length) > 0) setOnCashierScroll(() => fetchMoreOnBottomReached);\n        return () => setOnCashierScroll(null);\n    }, [fetchMoreOnBottomReached, setOnCashierScroll, transactions?.length]);\n\n    useEffect(() => {\n        setFilter(filter);\n    }, [filter]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    if (!wallet || (!transactions && (isFetching || isLoading))) return <WalletLoader />;\n\n    if (!transactions) return <TransactionsNoDataState />;\n\n    return (\n        <TransactionsTable\n            columns={[\n                {\n                    accessorFn: row =>\n                        row.transaction_time &&\n                        FormatUtils.getFormattedDateString(row.transaction_time, {\n                            dateOptions: { day: '2-digit', month: 'short', year: 'numeric' },\n                            format: 'DD MMM YYYY',\n                            unix: true,\n                        }),\n                    accessorKey: 'date',\n                    header: 'Date',\n                },\n            ]}\n            data={transactions}\n            groupBy={['date']}\n            rowGroupRender={transaction => (\n                <div className='wallets-transactions-completed__group-title'>\n                    <Text color='primary' size='2xs'>\n                        {transaction.transaction_time &&\n                            FormatUtils.getFormattedDateString(transaction.transaction_time, {\n                                dateOptions: { day: '2-digit', month: 'short', year: 'numeric' },\n                                format: 'DD MMM YYYY',\n                                unix: true,\n                            })}\n                    </Text>\n                </div>\n            )}\n            rowRender={transaction => (\n                <TransactionsCompletedRow accounts={accounts} transaction={transaction} wallet={wallet} />\n            )}\n        />\n    );\n};\n\nexport default TransactionsCompleted;\n","import React, { useEffect } from 'react';\nimport { useActiveWalletAccount, useAllAccountsList, useTransactions } from '@deriv/api-v2';\nimport { Text } from '@deriv-com/ui';\nimport { FormatUtils } from '@deriv-com/utils';\nimport { WalletLoader } from '../../../../../../components';\nimport { TransactionsCompletedRow } from '../TransactionsCompletedRow';\nimport { TransactionsNoDataState } from '../TransactionsNoDataState';\nimport { TransactionsTable } from '../TransactionsTable';\nimport './TransactionsCompletedDemoResetBalance.scss';\n\nconst TransactionsCompletedDemoResetBalance: React.FC = () => {\n    const {\n        data: depositDemoTransactions,\n        isLoading: isDemoDepositsListLoading,\n        setFilter: setDepositFilter,\n    } = useTransactions();\n    const {\n        data: withdrawalDemoTransactions,\n        isLoading: isDemoWithdrawalsListLoading,\n        setFilter: setWithdrawalFilter,\n    } = useTransactions();\n    const { data: wallet, isLoading: isWalletLoading } = useActiveWalletAccount();\n    const { data: accounts, isLoading: isAccountsListLoading } = useAllAccountsList();\n\n    useEffect(() => {\n        setDepositFilter('deposit');\n        setWithdrawalFilter('withdrawal');\n    }, [setDepositFilter, setWithdrawalFilter]);\n\n    const isLoading =\n        isDemoDepositsListLoading || isDemoWithdrawalsListLoading || isWalletLoading || isAccountsListLoading;\n\n    const resetBalanceTransactions = [...(depositDemoTransactions ?? []), ...(withdrawalDemoTransactions ?? [])].sort(\n        (a, b) => (b.transaction_time ?? 0) - (a.transaction_time ?? 0)\n    );\n\n    if (!wallet || isLoading) return <WalletLoader />;\n\n    if (!resetBalanceTransactions.length) return <TransactionsNoDataState />;\n\n    return (\n        <TransactionsTable\n            columns={[\n                {\n                    accessorFn: row =>\n                        row.transaction_time &&\n                        FormatUtils.getFormattedDateString(row.transaction_time, {\n                            dateOptions: { day: '2-digit', month: 'short', year: 'numeric' },\n                            format: 'DD MMM YYYY',\n                            unix: true,\n                        }),\n                    accessorKey: 'date',\n                    header: 'Date',\n                },\n            ]}\n            data={resetBalanceTransactions}\n            groupBy={['date']}\n            rowGroupRender={transaction => (\n                <div className='wallets-transactions-completed-demo-reset-balance__group-title'>\n                    <Text color='primary' size='2xs'>\n                        {transaction.transaction_time &&\n                            FormatUtils.getFormattedDateString(transaction.transaction_time, {\n                                dateOptions: { day: '2-digit', month: 'short', year: 'numeric' },\n                                format: 'DD MMM YYYY',\n                                unix: true,\n                            })}\n                    </Text>\n                </div>\n            )}\n            rowRender={transaction => (\n                <TransactionsCompletedRow accounts={accounts} transaction={transaction} wallet={wallet} />\n            )}\n        />\n    );\n};\n\nexport default TransactionsCompletedDemoResetBalance;\n","import React, { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { useTranslations } from '@deriv-com/translations';\nimport { Text, Tooltip, useDevice } from '@deriv-com/ui';\nimport { useModal } from '../../../../../../../../components/ModalProvider';\nimport { WalletActionModal } from '../../../../../../components/WalletActionModal';\nimport './TransactionsPendingRowField.scss';\n\ntype TProps = {\n    className?: classNames.ArgumentArray[number];\n    hint?: {\n        link?: string;\n        text: string;\n        tooltipAlignment?: React.ComponentProps<typeof Tooltip>['tooltipPosition'];\n    };\n    name: string;\n    value: JSX.Element | string;\n    valueTextProps?: Omit<React.ComponentProps<typeof Text>, 'children'>;\n};\n\nconst TransactionsPendingRowField: React.FC<TProps> = ({ className, hint, name, value, valueTextProps }) => {\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n    const { show } = useModal();\n\n    const onValueClick = useCallback(() => {\n        show(\n            <WalletActionModal\n                actionButtonsOptions={\n                    hint?.link\n                        ? [\n                              {\n                                  isPrimary: true,\n                                  onClick: () => window.open(hint?.link),\n                                  text: localize('View'),\n                              },\n                          ]\n                        : []\n                }\n                description={hint?.text}\n                title={localize('Transaction details')}\n            />,\n            { defaultRootId: 'wallets_modal_root' }\n        );\n    }, [hint?.link, hint?.text, localize, show]);\n\n    return (\n        <div className={classNames('wallets-transactions-pending-row-field', className)} key={name}>\n            <Text align='start' color='primary' size='xs'>\n                {name}\n            </Text>\n            {hint ? (\n                <Tooltip\n                    as='div'\n                    hideTooltip={!isDesktop}\n                    tooltipContent={hint.text}\n                    tooltipPosition={hint.tooltipAlignment}\n                >\n                    <Text {...{ align: 'start', color: 'red', size: 'xs', weight: 'bold', ...valueTextProps }}>\n                        {isDesktop ? (\n                            <a\n                                className='wallets-transactions-pending-row-field__link'\n                                href={hint.link}\n                                rel='noopener noreferrer'\n                                target='_blank'\n                            >\n                                {value}\n                            </a>\n                        ) : (\n                            <button className='wallets-transactions-pending-row-field__button' onClick={onValueClick}>\n                                {value}\n                            </button>\n                        )}\n                    </Text>\n                </Tooltip>\n            ) : (\n                <Text align='start' color='red' size='xs' weight='bold' {...valueTextProps}>\n                    {value}\n                </Text>\n            )}\n        </div>\n    );\n};\n\nexport default TransactionsPendingRowField;\n","import React, { useCallback, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useActiveWalletAccount, useCancelCryptoTransaction } from '@deriv/api-v2';\nimport { LegacyClose1pxIcon } from '@deriv/quill-icons';\nimport { getTruncatedString } from '@deriv/utils';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { Button, Divider, Text, Tooltip, useDevice } from '@deriv-com/ui';\nimport { FormatUtils } from '@deriv-com/utils';\nimport { WalletCurrencyCard, WalletMoney } from '../../../../../../components';\nimport { useModal } from '../../../../../../components/ModalProvider';\nimport useIsRtl from '../../../../../../hooks/useIsRtl';\nimport { THooks } from '../../../../../../types';\nimport { WalletActionModal } from '../../../../components/WalletActionModal';\nimport {\n    getFormattedConfirmations,\n    getStatusDescription,\n    getStatusName,\n} from '../../../../helpers/transaction-helpers';\nimport { getTransactionLabels } from '../../constants';\nimport { TransactionsPendingRowField } from './components/TransactionsPendingRowField';\nimport './TransactionsPendingRow.scss';\n\ntype TProps = {\n    transaction: THooks.CryptoTransactions;\n};\n\nconst TransactionsPendingRow: React.FC<TProps> = ({ transaction }) => {\n    const { data: activeWallet } = useActiveWalletAccount();\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n    const displayCode = useMemo(() => activeWallet?.currency_config?.display_code || 'USD', [activeWallet]);\n    const modal = useModal();\n    const isRtl = useIsRtl();\n    const formattedTransactionHash = transaction.transaction_hash\n        ? getTruncatedString(transaction.transaction_hash, { type: 'middle' })\n        : localize('Pending');\n    const formattedAddressHash = transaction.address_hash\n        ? getTruncatedString(transaction.address_hash, { type: 'middle' })\n        : localize('NA');\n    const formattedConfirmations = getFormattedConfirmations(transaction.confirmations, transaction.status_code);\n    const statusDescription = getStatusDescription(transaction.transaction_type, transaction.status_code);\n    const tooltipAlignment = isRtl ? 'left' : 'right';\n\n    const { mutate } = useCancelCryptoTransaction();\n\n    const cancelTransaction = useCallback(() => {\n        mutate({ payload: { id: transaction.id } });\n        modal.hide();\n    }, [modal, mutate, transaction.id]);\n\n    const onCancelButtonClick = useCallback(() => {\n        modal.show(\n            <WalletActionModal\n                actionButtonsOptions={[\n                    {\n                        onClick: modal.hide,\n                        text: localize(\"No, don't cancel\"),\n                    },\n                    {\n                        isPrimary: true,\n                        onClick: cancelTransaction,\n                        text: localize('Yes, cancel'),\n                    },\n                ]}\n                description={localize('Are you sure you want to cancel this transaction?')}\n                hideCloseButton\n                title={localize('Cancel transaction')}\n            />,\n            { defaultRootId: 'wallets_modal_root' }\n        );\n    }, [cancelTransaction, localize, modal]);\n\n    const onMobileStatusClick = useCallback(() => {\n        if (!isDesktop) {\n            modal.show(\n                <WalletActionModal\n                    actionButtonsOptions={[\n                        {\n                            isPrimary: true,\n                            onClick: modal.hide,\n                            text: localize('Ok'),\n                        },\n                    ]}\n                    description={statusDescription}\n                    hideCloseButton\n                    title={localize('Transaction details')}\n                />,\n                { defaultRootId: 'wallets_modal_root' }\n            );\n        }\n    }, [isDesktop, localize, modal, statusDescription]);\n\n    return (\n        <React.Fragment>\n            <Divider color='var(--border-divider)' />\n            <div className='wallets-transactions-pending-row'>\n                <div className='wallets-transactions-pending-row__wallet-info'>\n                    <WalletCurrencyCard\n                        currency={activeWallet?.currency || 'USD'}\n                        isDemo={activeWallet?.is_virtual}\n                        size='md'\n                    />\n                    <div className='wallets-transactions-pending-row__column'>\n                        <Text align='start' color='primary' size='xs'>\n                            {getTransactionLabels(localize)[transaction.transaction_type]}\n                        </Text>\n                        <Text align='start' color='general' size='xs' weight='bold'>\n                            <Localize i18n_default_text='{{currency}} Wallet' values={{ currency: displayCode }} />\n                        </Text>\n                    </div>\n                </div>\n                <div className='wallets-transactions-pending-row__fields-container'>\n                    <TransactionsPendingRowField\n                        className={{ 'wallets-transactions-pending-row__transaction-hash': isDesktop }}\n                        hint={\n                            transaction.transaction_url\n                                ? {\n                                      link: transaction.transaction_url,\n                                      text: localize('View transaction hash on Blockchain'),\n                                      tooltipAlignment,\n                                  }\n                                : undefined\n                        }\n                        name={localize('Transaction hash')}\n                        value={formattedTransactionHash}\n                    />\n                    <TransactionsPendingRowField\n                        className={{ 'wallets-transactions-pending-row__transaction-address': isDesktop }}\n                        hint={{\n                            link: transaction.address_url,\n                            text: localize('View address on Blockchain'),\n                            tooltipAlignment,\n                        }}\n                        name={localize('Address')}\n                        value={formattedAddressHash}\n                    />\n                    <TransactionsPendingRowField\n                        className={{ 'wallets-transactions-pending-row__transaction-confirmations': isDesktop }}\n                        name={localize('Confirmations')}\n                        value={formattedConfirmations}\n                    />\n                    {!isDesktop && (\n                        <React.Fragment>\n                            <TransactionsPendingRowField\n                                name={localize('Amount')}\n                                value={\n                                    <WalletMoney\n                                        amount={\n                                            transaction.is_deposit ? transaction.amount : -(transaction.amount || 0)\n                                        }\n                                        currency={activeWallet?.currency}\n                                        hasSign\n                                    />\n                                }\n                                valueTextProps={{\n                                    color: transaction.is_deposit ? 'success' : 'red',\n                                }}\n                            />\n                            <TransactionsPendingRowField\n                                name={localize('Date')}\n                                value={FormatUtils.getFormattedDateString(transaction.submit_date, {\n                                    dateOptions: { day: '2-digit', month: 'short', year: 'numeric' },\n                                    unix: true,\n                                })}\n                                valueTextProps={{\n                                    color: 'general',\n                                }}\n                            />\n                        </React.Fragment>\n                    )}\n                    <TransactionsPendingRowField\n                        className={{ 'wallets-transactions-pending-row__transaction-time': isDesktop }}\n                        name={localize('Time')}\n                        value={\n                            isDesktop\n                                ? `${FormatUtils.getFormattedDateString(transaction.submit_date, { unix: true })} ${FormatUtils.getFormattedTimeString(transaction.submit_date, true)}`\n                                : `${FormatUtils.getFormattedTimeString(transaction.submit_date, true)}`\n                        }\n                        valueTextProps={{\n                            color: 'general',\n                            size: isDesktop ? '2xs' : 'xs',\n                            weight: isDesktop ? 'regular' : 'bold',\n                        }}\n                    />\n                    {isDesktop && (\n                        <div className='wallets-transactions-pending-row__transaction-amount'>\n                            <Text\n                                align='end'\n                                color={transaction.is_deposit ? 'success' : 'red'}\n                                size='sm'\n                                weight='bold'\n                            >\n                                <WalletMoney\n                                    amount={transaction.is_deposit ? transaction.amount : -(transaction.amount || 0)}\n                                    currency={activeWallet?.currency}\n                                    hasSign\n                                />\n                            </Text>\n                        </div>\n                    )}\n                </div>\n                <div className='wallets-transactions-pending-row__transaction-status'>\n                    <Tooltip\n                        as='button'\n                        className='wallets-transactions-pending-row__transaction-status-button'\n                        data-testid='dt_transaction_status_button'\n                        hideTooltip={!isDesktop}\n                        onClick={onMobileStatusClick}\n                        tooltipContent={statusDescription}\n                        tooltipPosition={isRtl ? 'right' : 'left'}\n                    >\n                        <div\n                            className={classNames(\n                                'wallets-transactions-pending-row__transaction-status-dot',\n                                `wallets-transactions-pending-row__transaction-status-dot--${transaction.status_code\n                                    .toLowerCase()\n                                    .replace('_', '-')}`\n                            )}\n                        />\n                        <Text align='start' color='general' size='sm'>\n                            {getStatusName(transaction.status_code)}\n                        </Text>\n                    </Tooltip>\n                    {isDesktop && !!transaction.is_valid_to_cancel && (\n                        <button\n                            className='wallets-transactions-pending-row__transaction-cancel-button'\n                            onClick={onCancelButtonClick}\n                        >\n                            <LegacyClose1pxIcon iconSize='xs' />\n                        </button>\n                    )}\n                </div>\n\n                {!isDesktop && !!transaction.is_valid_to_cancel && (\n                    <Button\n                        borderWidth='sm'\n                        color='black'\n                        isFullWidth\n                        onClick={onCancelButtonClick}\n                        size='sm'\n                        variant='outlined'\n                    >\n                        <Localize i18n_default_text='Cancel transaction' />\n                    </Button>\n                )}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default TransactionsPendingRow;\n","import React, { useEffect } from 'react';\nimport { useCryptoTransactions } from '@deriv/api-v2';\nimport { Text } from '@deriv-com/ui';\nimport { FormatUtils } from '@deriv-com/utils';\nimport { WalletLoader } from '../../../../../../components';\nimport { TransactionsNoDataState } from '../TransactionsNoDataState';\nimport { TransactionsPendingRow } from '../TransactionsPendingRow';\nimport { TransactionsTable } from '../TransactionsTable';\nimport './TransactionsPending.scss';\n\ntype TProps = {\n    filter?: NonNullable<\n        NonNullable<NonNullable<Parameters<ReturnType<typeof useCryptoTransactions>['subscribe']>>[0]>['payload']\n    >['transaction_type'];\n};\n\nconst TransactionsPending: React.FC<TProps> = ({ filter = 'all' }) => {\n    const { data: transactions, isLoading, isSubscribed, resetData, subscribe, unsubscribe } = useCryptoTransactions();\n\n    useEffect(() => {\n        resetData();\n        subscribe({ payload: { transaction_type: filter } });\n\n        return () => unsubscribe();\n    }, [filter, resetData, subscribe, unsubscribe]);\n\n    if (!isSubscribed || isLoading) return <WalletLoader />;\n\n    if (!transactions) return <TransactionsNoDataState />;\n\n    return (\n        <div className='wallets-transactions-pending'>\n            <TransactionsTable\n                columns={[\n                    {\n                        accessorFn: row =>\n                            FormatUtils.getFormattedDateString(row.submit_date, {\n                                dateOptions: { day: '2-digit', month: 'short', year: 'numeric' },\n                                format: 'DD MMM YYYY',\n                                unix: true,\n                            }),\n                        accessorKey: 'date',\n                        header: 'Date',\n                    },\n                ]}\n                data={transactions}\n                groupBy={['date']}\n                rowGroupRender={transaction => (\n                    <div className='wallets-transactions-pending__group-title'>\n                        <Text color='primary' size='2xs'>\n                            {transaction.submit_date &&\n                                FormatUtils.getFormattedDateString(transaction.submit_date, {\n                                    dateOptions: { day: '2-digit', month: 'short', year: 'numeric' },\n                                    format: 'DD MMM YYYY',\n                                    unix: true,\n                                })}\n                        </Text>\n                    </div>\n                )}\n                rowRender={transaction => <TransactionsPendingRow transaction={transaction} />}\n            />\n        </div>\n    );\n};\n\nexport default TransactionsPending;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { useHistory } from 'react-router-dom';\nimport { useActiveWalletAccount, useCurrencyConfig } from '@deriv/api-v2';\nimport { LegacyFilter1pxIcon } from '@deriv/quill-icons';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { Dropdown, Text, useDevice } from '@deriv-com/ui';\nimport { ToggleSwitch } from '../../../../components';\nimport { TransactionsCompleted, TransactionsCompletedDemoResetBalance, TransactionsPending } from './components';\nimport { getTransactionLabels } from './constants';\nimport './Transactions.scss';\n\ntype TTransactionsPendingFilter = React.ComponentProps<typeof TransactionsPending>['filter'];\ntype TTransactionCompletedFilter = React.ComponentProps<typeof TransactionsCompleted>['filter'];\ntype TFilterValue = TTransactionCompletedFilter | TTransactionsPendingFilter;\n\nconst filtersMapper: Record<string, Record<string, TFilterValue>> = {\n    completed: {\n        all: undefined,\n        deposit: 'deposit',\n        withdrawal: 'withdrawal',\n        // eslint-disable-next-line sort-keys\n        transfer: 'transfer',\n    },\n    pending: {\n        all: 'all',\n        deposit: 'deposit',\n        withdrawal: 'withdrawal',\n    },\n};\n\nconst Transactions = () => {\n    const { data: wallet } = useActiveWalletAccount();\n\n    const { localize } = useTranslations();\n\n    const { isLoading } = useCurrencyConfig();\n    const { isDesktop } = useDevice();\n\n    const { location } = useHistory();\n    const initialShowPending = Boolean(\n        location.pathname === '/wallet/transactions' ? location.state?.showPending : false\n    );\n    const initialTransactionType =\n        (location.pathname === '/wallet/transactions' ? location.state?.transactionType : undefined) ?? 'all';\n\n    const [isPendingActive, setIsPendingActive] = useState(initialShowPending);\n    const [filterValue, setFilterValue] = useState(initialTransactionType);\n\n    const filterOptionsList = useMemo(\n        () =>\n            Object.keys(filtersMapper[isPendingActive ? 'pending' : 'completed'])\n                // Filtering out withdrawal option for demo wallets\n                .filter(key => !wallet?.is_virtual || key !== 'withdrawal')\n                .map(key => ({\n                    text:\n                        key === 'deposit' && wallet?.is_virtual\n                            ? getTransactionLabels(localize).reset_balance\n                            : //@ts-expect-error we only need partial filter values\n                              getTransactionLabels(localize)[key],\n                    value: key,\n                })),\n        [isPendingActive, wallet?.is_virtual, localize]\n    );\n\n    useEffect(() => {\n        if (!isLoading && !wallet?.is_crypto && isPendingActive) {\n            setIsPendingActive(false);\n        }\n    }, [isLoading, wallet?.is_crypto, isPendingActive]);\n\n    useEffect(() => {\n        if (isPendingActive && !Object.keys(filtersMapper.pending).includes(filterValue)) {\n            setFilterValue('all');\n        }\n        if (!isPendingActive && !Object.keys(filtersMapper.completed).includes(filterValue)) {\n            setFilterValue('all');\n        }\n    }, [filterValue, isPendingActive]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <div\n            className={classNames('wallets-transactions', {\n                'wallets-transactions--crypto-mobile': wallet?.is_crypto && !isDesktop,\n            })}\n        >\n            <div className='wallets-transactions__header'>\n                {wallet?.is_crypto && (\n                    <div className='wallets-transactions__toggle'>\n                        <Text align='start' size='sm'>\n                            <Localize i18n_default_text='Pending Transactions' />\n                        </Text>\n                        <ToggleSwitch onChange={() => setIsPendingActive(!isPendingActive)} value={isPendingActive} />\n                    </div>\n                )}\n                <div className='wallets-transactions__dropdown'>\n                    <Dropdown\n                        data-testid='dt_wallets_transactions_dropdown'\n                        icon={<LegacyFilter1pxIcon iconSize='xs' />}\n                        isFullWidth\n                        label={localize('Filter')}\n                        list={filterOptionsList}\n                        name='wallets-transactions__dropdown'\n                        onSelect={value => {\n                            if (typeof value === 'string') {\n                                setFilterValue(value);\n                            }\n                        }}\n                        value={filterValue}\n                        variant='comboBox'\n                    />\n                </div>\n            </div>\n            {isPendingActive && (\n                <TransactionsPending filter={filtersMapper.pending[filterValue] as TTransactionsPendingFilter} />\n            )}\n            {!isPendingActive &&\n                (wallet?.is_virtual && filterValue === 'deposit' ? (\n                    <TransactionsCompletedDemoResetBalance />\n                ) : (\n                    <TransactionsCompleted\n                        filter={filtersMapper.completed[filterValue] as TTransactionCompletedFilter}\n                    />\n                ))}\n        </div>\n    );\n};\n\nexport default Transactions;\n","import React from 'react';\nimport { TransactionsModule } from '../../modules';\n\nconst WalletTransactions = () => <TransactionsModule />;\n\nexport default WalletTransactions;\n","import React from 'react';\nimport { TSocketError } from '@deriv/api-v2/types';\nimport { Localize } from '@deriv-com/translations';\nimport { WalletsErrorScreen } from '../../../../components';\n\ntype TProps = {\n    error: TSocketError<'cashier'>['error'];\n    resetError?: VoidFunction;\n};\n\ntype TErrorContent = {\n    buttonText?: React.ReactNode;\n    message: React.ReactNode;\n    onClick?: () => void;\n    title: React.ReactNode;\n};\n\nconst TransferErrorScreen: React.FC<TProps> = ({ error, resetError }) => {\n    const defaultContent: TErrorContent = {\n        buttonText: <Localize i18n_default_text='Make another transfer' />,\n        message: error.message,\n        onClick: () => {\n            resetError?.();\n        },\n        title: <Localize i18n_default_text='Error' />,\n    };\n\n    return <WalletsErrorScreen {...defaultContent} />;\n};\n\nexport default TransferErrorScreen;\n","import { useMemo } from 'react';\nimport { useActiveWalletAccount, useCurrencyConfig, useTradingPlatformStatus } from '@deriv/api-v2';\nimport { displayMoney } from '@deriv/api-v2/src/utils';\nimport { THooks, TWalletLandingCompanyName } from '../../../../../types';\nimport { CFD_PLATFORMS } from '../../../../cfd/constants';\nimport { PlatformDetails } from '../../../constants';\nimport { getAccountName, getLandingCompanyNameOfMT5Account } from '../../../helpers';\n\ntype TCFDPlatform = Exclude<(typeof CFD_PLATFORMS)[keyof typeof CFD_PLATFORMS], 'CFDs'>;\n\n/** A custom hook that enhances the transfer accounts response by adding additional properties for convenient UI rendering. */\nconst useExtendedTransferAccountProperties = (accounts?: THooks.TransferAccount[]) => {\n    const { data: activeWallet, isLoading: isActiveWalletLoading } = useActiveWalletAccount();\n    const { getConfig, isLoading: isCurrencyConfigLoading } = useCurrencyConfig();\n    const { getPlatformStatus } = useTradingPlatformStatus();\n\n    const isLoading = isCurrencyConfigLoading || isActiveWalletLoading;\n\n    const extendedTransferAccounts = useMemo(() => {\n        //populating transfer accounts with extra fields\n        const updatedAccounts = accounts?.map(account => {\n            const currencyConfig = account.currency ? getConfig(account.currency) : undefined;\n            const accountName = getAccountName({\n                accountCategory: account.account_category,\n                accountType: account.account_type,\n                displayCurrencyCode: currencyConfig?.display_code,\n                landingCompanyName: activeWallet?.landing_company_name as TWalletLandingCompanyName,\n                mt5MarketType: account.market_type,\n                product: account.product,\n            });\n            const displayBalance = displayMoney(Number(account.balance), currencyConfig?.display_code, {\n                fractional_digits: currencyConfig?.fractional_digits,\n            });\n            const landingCompanyName =\n                account.account_type === PlatformDetails.mt5.name\n                    ? getLandingCompanyNameOfMT5Account(account.mt5_group)\n                    : (activeWallet?.landing_company_name as TWalletLandingCompanyName);\n            const isCFDAccount =\n                account?.account_category === 'trading' &&\n                [CFD_PLATFORMS.CTRADER, CFD_PLATFORMS.DXTRADE, CFD_PLATFORMS.MT5].includes(\n                    account?.account_type as TCFDPlatform\n                );\n\n            return {\n                ...account,\n                accountName,\n                currencyConfig,\n                displayBalance,\n                landingCompanyName,\n                ...(isCFDAccount && {\n                    platformStatus: getPlatformStatus(account.account_type ?? ''),\n                }),\n            } as const;\n        });\n\n        const tradingAccounts = updatedAccounts?.filter(account => account.account_category === 'trading') || [];\n        const walletAccounts = updatedAccounts?.filter(account => account.account_category === 'wallet') || [];\n\n        return { tradingAccounts, walletAccounts };\n    }, [accounts, activeWallet?.landing_company_name, getConfig, getPlatformStatus]);\n\n    const modifiedActiveWallet = useMemo(() => {\n        return extendedTransferAccounts.walletAccounts.find(account => account.loginid === activeWallet?.loginid);\n    }, [activeWallet?.loginid, extendedTransferAccounts.walletAccounts]);\n\n    return { accounts: extendedTransferAccounts, activeWallet: modifiedActiveWallet, isLoading };\n};\n\nexport default useExtendedTransferAccountProperties;\n","import { useMemo } from 'react';\nimport { MT5MarketTypeDetails, PlatformDetails } from '../../../constants';\nimport { TAccount, TAccountsList } from '../types';\n\nconst useSortedTransferAccounts = (accounts: TAccountsList) => {\n    return useMemo(\n        () => ({\n            tradingAccounts: accounts.tradingAccounts.sort(sortTradingAccounts),\n            walletAccounts: accounts.walletAccounts.sort(sortWalletsAccounts),\n        }),\n        [accounts]\n    );\n};\n\nexport default useSortedTransferAccounts;\n\n/** A custom hook that sort trading and wallet accounts to display on the screen. */\nconst sortWalletsAccounts = (a: TAccount, b: TAccount) => {\n    if (!a?.currency || !b?.currency) return 0;\n\n    if (a.account_type === 'doughflow' && b.account_type === 'doughflow') {\n        return a.currency.localeCompare(b.currency);\n    } else if (a.account_type === 'crypto' && b.account_type === 'crypto') {\n        return a.currency.localeCompare(b.currency);\n    } else if (a.account_type === 'doughflow') {\n        // 'doughflow' comes first\n        return -1;\n    }\n    // 'crypto' comes next\n    return 1;\n};\n\ntype TMt5LandingCompanyName = 'bvi' | 'labuan' | 'svg' | 'vanuatu';\n\nconst sortTradingAccounts = (a: TAccount, b: TAccount) => {\n    if (!a?.account_type || !b?.account_type) return 0;\n\n    const accountTypeOrder = {\n        binary: 6,\n        ctrader: 2,\n        derivez: 4,\n        dxtrade: 3,\n        mt5: 1,\n        standard: 5,\n    };\n\n    const marketTypeOrder = {\n        all: 3,\n        financial: 2,\n        synthetic: 1,\n    } as const;\n\n    const landingCompanyNameOrderOfMt5Account = {\n        bvi: 2,\n        labuan: 4,\n        svg: 1,\n        vanuatu: 3,\n    } as const;\n\n    // Remove type casting when all account types will be added to accountTypeOrder object\n    const typeA = a.account_type as Extract<NonNullable<TAccount>['account_type'], keyof typeof accountTypeOrder>;\n    const typeB = b.account_type as Extract<NonNullable<TAccount>['account_type'], keyof typeof accountTypeOrder>;\n\n    // Compare account types\n    if (accountTypeOrder[typeA] !== accountTypeOrder[typeB]) {\n        return accountTypeOrder[typeA] - accountTypeOrder[typeB];\n    }\n\n    // For mt5 accounts, compare market types\n    if (typeA === PlatformDetails.mt5.name) {\n        const marketTypeA = a.market_type;\n        const marketTypeB = b.market_type;\n\n        if (\n            marketTypeOrder[marketTypeA ?? MT5MarketTypeDetails.all.name] !==\n            marketTypeOrder[marketTypeB ?? MT5MarketTypeDetails.all.name]\n        ) {\n            return (\n                marketTypeOrder[marketTypeA ?? MT5MarketTypeDetails.all.name] -\n                marketTypeOrder[(marketTypeB ?? MT5MarketTypeDetails.all.name) as keyof typeof marketTypeOrder]\n            );\n        }\n\n        // For 'synthetic' and 'financial' market types, compare landing company name\n        if (\n            marketTypeA === MT5MarketTypeDetails.synthetic.name ||\n            marketTypeA === MT5MarketTypeDetails.financial.name\n        ) {\n            const landingCompanyTypeA = a.landingCompanyName as TMt5LandingCompanyName;\n            const landingCompanyTypeB = b.landingCompanyName as TMt5LandingCompanyName;\n\n            return (\n                landingCompanyNameOrderOfMt5Account[landingCompanyTypeA] -\n                landingCompanyNameOrderOfMt5Account[landingCompanyTypeB]\n            );\n        }\n    }\n\n    // No need to change the order for other account types\n    return 0;\n};\n","import React, { createContext, useCallback, useContext, useState } from 'react';\nimport { useAccountLimits, useGetExchangeRate, useTransferBetweenAccounts } from '@deriv/api-v2';\nimport type { THooks } from '../../../../../types';\nimport { DISABLED_PLATFORM_STATUSES } from '../../../../cfd/constants';\nimport { useExtendedTransferAccountProperties, useSortedTransferAccounts } from '../hooks';\nimport type { TInitialTransferFormValues } from '../types';\n\ntype TReceipt = {\n    feeAmount?: string;\n    fromAccount: TInitialTransferFormValues['fromAccount'];\n    fromAmount: number;\n    toAccount: TInitialTransferFormValues['toAccount'];\n    toAmount: number;\n};\n\nexport type TTransferContext = {\n    USDExchangeRates?: THooks.ExchangeRate;\n    accountLimits?: THooks.AccountLimits;\n    accounts: ReturnType<typeof useExtendedTransferAccountProperties>['accounts'];\n    activeWallet: ReturnType<typeof useExtendedTransferAccountProperties>['activeWallet'];\n    activeWalletExchangeRates?: THooks.ExchangeRate;\n    error: ReturnType<typeof useTransferBetweenAccounts>['error'];\n    hasPlatformStatus: (account: TInitialTransferFormValues['fromAccount']) => boolean;\n    isLoading: boolean;\n    receipt?: TReceipt;\n    refetchAccountLimits: ReturnType<typeof useAccountLimits>['refetch'];\n    refetchExchangeRates: ReturnType<typeof useGetExchangeRate>['refetch'];\n    requestTransferBetweenAccounts: (values: TInitialTransferFormValues) => void;\n    resetTransfer: VoidFunction;\n};\n\nconst TransferContext = createContext<TTransferContext | null>(null);\n\nexport const useTransfer = () => {\n    const context = useContext(TransferContext);\n\n    if (!context) throw new Error('useTransfer() must be called within a component wrapped in TransferProvider.');\n\n    return context;\n};\n\ntype TProps = {\n    accounts?: THooks.TransferAccount[];\n};\n\nconst TransferProvider: React.FC<React.PropsWithChildren<TProps>> = ({ accounts: transferAccounts, children }) => {\n    const {\n        data,\n        error,\n        isLoading: isTransferAccountsLoading,\n        mutateAsync,\n        refetch: requestTransferAccounts,\n    } = useTransferBetweenAccounts();\n    const {\n        accounts,\n        activeWallet,\n        isLoading: isModifiedAccountsLoading,\n    } = useExtendedTransferAccountProperties(data?.accounts ?? transferAccounts);\n    const [isResettingAccounts, setIsResettingAccounts] = useState(false);\n    const [receipt, setReceipt] = useState<TReceipt>();\n    const sortedAccounts = useSortedTransferAccounts(accounts);\n\n    const hasPlatformStatus = (account: TInitialTransferFormValues['fromAccount']) =>\n        DISABLED_PLATFORM_STATUSES.includes(\n            (account?.status || account?.platformStatus) as (typeof DISABLED_PLATFORM_STATUSES)[number]\n        );\n\n    const { data: accountLimits, refetch: refetchAccountLimits } = useAccountLimits();\n\n    const { data: activeWalletExchangeRates, refetch: refetchActiveWalletExchangeRates } = useGetExchangeRate({\n        base_currency: activeWallet?.currency ?? 'USD',\n        loginid: activeWallet?.loginid,\n    });\n\n    const { data: USDExchangeRates, refetch: refetchUSDExchangeRates } = useGetExchangeRate({\n        base_currency: 'USD',\n        loginid: activeWallet?.loginid,\n    });\n\n    const refetchExchangeRates = useCallback(() => {\n        refetchUSDExchangeRates();\n        const updatedActiveWalletExchangeRates = refetchActiveWalletExchangeRates();\n\n        return updatedActiveWalletExchangeRates;\n    }, [refetchUSDExchangeRates, refetchActiveWalletExchangeRates]);\n\n    const isLoading = isTransferAccountsLoading || isModifiedAccountsLoading || isResettingAccounts || !activeWallet;\n\n    const requestTransferBetweenAccounts = useCallback(\n        (values: TInitialTransferFormValues) => {\n            const { fromAccount, fromAmount, toAccount, toAmount } = values;\n\n            const parsedFromAmount = Number.parseFloat(fromAmount);\n            const parsedToAmount = Number.parseFloat(toAmount);\n\n            mutateAsync({\n                account_from: fromAccount?.loginid,\n                account_to: toAccount?.loginid,\n                amount: parsedFromAmount,\n                currency: fromAccount?.currency,\n            }).then(() => {\n                const isSameCurrency = fromAccount?.currency === toAccount?.currency;\n                let feePercentage, feeAmount;\n\n                if (!isSameCurrency) {\n                    feePercentage =\n                        fromAccount?.currencyConfig?.transfer_between_accounts.fees[toAccount?.currency || ''] || 0;\n                    feeAmount = ((feePercentage / 100) * parsedFromAmount).toFixed(\n                        fromAccount?.currencyConfig?.fractional_digits\n                    );\n                }\n\n                setReceipt({\n                    feeAmount,\n                    fromAccount,\n                    fromAmount: parsedFromAmount,\n                    toAccount,\n                    toAmount: parsedToAmount,\n                });\n            });\n        },\n        [mutateAsync]\n    );\n\n    const resetTransfer = useCallback(async () => {\n        setReceipt(undefined);\n        refetchAccountLimits();\n        setIsResettingAccounts(true);\n        await requestTransferAccounts();\n        setIsResettingAccounts(false);\n    }, [refetchAccountLimits, requestTransferAccounts]);\n\n    return (\n        <TransferContext.Provider\n            value={{\n                accountLimits,\n                accounts: sortedAccounts,\n                activeWallet,\n                activeWalletExchangeRates,\n                error,\n                hasPlatformStatus,\n                isLoading,\n                receipt,\n                refetchAccountLimits,\n                refetchExchangeRates,\n                requestTransferBetweenAccounts,\n                resetTransfer,\n                USDExchangeRates,\n            }}\n        >\n            {children}\n        </TransferContext.Provider>\n    );\n};\n\nexport default TransferProvider;\n","import React, { useEffect } from 'react';\nimport { useCountdown } from 'usehooks-ts';\nimport { Localize } from '@deriv-com/translations';\nimport { Text } from '@deriv-com/ui';\n\ntype TTimerProps = {\n    countStart?: number;\n    intervalMs?: number;\n    onComplete?: VoidFunction;\n};\n\nconst Timer = ({ countStart = 60, intervalMs = 1000, onComplete }: TTimerProps) => {\n    const [count, { resetCountdown, startCountdown }] = useCountdown({\n        countStart,\n        intervalMs,\n    });\n\n    useEffect(() => startCountdown(), [startCountdown]);\n\n    useEffect(() => {\n        if (count === 0) {\n            onComplete?.();\n            resetCountdown();\n            startCountdown();\n        }\n    }, [count, onComplete, resetCountdown, startCountdown]);\n\n    return (\n        <Text as='p' color='less-prominent' size='sm'>\n            <Localize i18n_default_text='{{count}}s' values={{ count }} />\n        </Text>\n    );\n};\n\nexport default Timer;\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport { useFormikContext } from 'formik';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { Button } from '@deriv-com/ui';\nimport { Timer, WalletTransferAmountInput } from '../../../../../../components';\nimport { useTransfer } from '../../provider';\nimport type { TInitialTransferFormValues } from '../../types';\nimport './TransferFormAmountInput.scss';\n\ntype TProps = {\n    fieldName: 'fromAmount' | 'toAmount';\n};\n\nconst DASH_VALUE = '--';\nconst MAX_DIGITS = 14;\n\nconst TransferFormAmountInput: React.FC<TProps> = ({ fieldName }) => {\n    const { setFieldValue, setValues, values } = useFormikContext<TInitialTransferFormValues>();\n    const { fromAccount, fromAmount, toAccount, toAmount } = values;\n    const { localize } = useTranslations();\n\n    const { activeWallet, activeWalletExchangeRates, hasPlatformStatus, refetchAccountLimits, refetchExchangeRates } =\n        useTransfer();\n\n    const refetchExchangeRatesAndLimits = useCallback(() => {\n        refetchAccountLimits();\n        const newRates = refetchExchangeRates();\n\n        return newRates;\n    }, [refetchAccountLimits, refetchExchangeRates]);\n\n    const hasFunds = Number(fromAccount?.balance) > 0;\n    const isFromAmountField = fieldName === 'fromAmount';\n    const isSameCurrency = fromAccount?.currency === toAccount?.currency;\n    const isAmountInputDisabled =\n        !hasFunds || (fieldName === 'toAmount' && !toAccount) || [fromAccount, toAccount].some(hasPlatformStatus);\n    const isAmountFieldActive = fieldName === values.activeAmountFieldName;\n    const isTimerVisible =\n        !isFromAmountField && toAccount && !isSameCurrency && Number(fromAmount) > 0 && Number(toAmount) > 0;\n    const prevTimerVisible = useRef(isTimerVisible);\n    const isMaxBtnVisible = isFromAmountField && activeWallet?.account_type === 'crypto';\n\n    const amountValue = isFromAmountField ? fromAmount : toAmount;\n    const toAmountLabel = isSameCurrency || !toAccount ? localize('Amount you receive') : localize('Estimated amount');\n    const amountLabel = isFromAmountField ? localize('Amount you send') : toAmountLabel;\n\n    const currency = isFromAmountField ? fromAccount?.currency : toAccount?.currency;\n    const fractionDigits = isFromAmountField\n        ? fromAccount?.currencyConfig?.fractional_digits\n        : toAccount?.currencyConfig?.fractional_digits;\n\n    const amountConverterHandler = useCallback(\n        (value: number) => {\n            if (\n                !toAccount?.currency ||\n                !fromAccount?.currency ||\n                !activeWalletExchangeRates?.rates ||\n                !isAmountFieldActive ||\n                amountValue === DASH_VALUE\n            )\n                return;\n\n            const fromRate = activeWalletExchangeRates.rates[fromAccount.currency];\n            const toRate = activeWalletExchangeRates.rates[toAccount.currency];\n\n            if (isFromAmountField) {\n                const convertedToAmount = (toRate ? value * toRate : value / fromRate).toFixed(\n                    toAccount?.currencyConfig?.fractional_digits\n                );\n                setFieldValue('toAmount', convertedToAmount);\n            } else {\n                const convertedFromAmount = (toRate ? value / toRate : value * fromRate).toFixed(\n                    fromAccount?.currencyConfig?.fractional_digits\n                );\n                setFieldValue('fromAmount', convertedFromAmount);\n            }\n        },\n        [\n            activeWalletExchangeRates?.rates,\n            amountValue,\n            fromAccount?.currency,\n            fromAccount?.currencyConfig?.fractional_digits,\n            isAmountFieldActive,\n            isFromAmountField,\n            setFieldValue,\n            toAccount?.currency,\n            toAccount?.currencyConfig?.fractional_digits,\n        ]\n    );\n\n    // If the source and target currencies are the same, set the target amount to the source amount\n    useEffect(() => {\n        if (isSameCurrency && toAccount?.currency) {\n            setFieldValue('toAmount', fromAmount);\n        }\n    }, [isSameCurrency, toAccount?.currency, fromAmount, setFieldValue]);\n\n    // Refetch exchange rates and limits when the target account (toAccount) changes or the timer becomes visible\n    useEffect(() => {\n        const shouldRefetchExchangeRatesAndLimits =\n            (!isSameCurrency && !isFromAmountField && toAccount?.currency && !prevTimerVisible.current) ||\n            isTimerVisible;\n\n        if (shouldRefetchExchangeRatesAndLimits) {\n            refetchExchangeRatesAndLimits();\n        }\n\n        prevTimerVisible.current = isTimerVisible;\n    }, [isFromAmountField, isSameCurrency, isTimerVisible, refetchExchangeRatesAndLimits, toAccount?.currency]);\n\n    useEffect(() => {\n        if (!isSameCurrency && Number(amountValue) > 0) {\n            amountConverterHandler(Number(amountValue));\n        }\n    }, [amountConverterHandler, amountValue, isSameCurrency]);\n\n    const onBlurHandler = useCallback(() => {\n        if (!isSameCurrency && Number(amountValue) > 0) {\n            amountConverterHandler(Number(amountValue));\n        }\n\n        setFieldValue('activeAmountFieldName', undefined);\n    }, [amountConverterHandler, amountValue, isSameCurrency, setFieldValue]);\n\n    const onFocusHandler = useCallback(\n        (e: React.FocusEvent<HTMLInputElement>) => {\n            const { value } = e.currentTarget;\n            const trimmedValue = value.trim();\n\n            // If the value is a dash, set the other field value to empty\n            if (trimmedValue === DASH_VALUE) {\n                setFieldValue('toAmount', '');\n                setFieldValue('fromAmount', '');\n            }\n\n            setFieldValue('activeAmountFieldName', fieldName);\n            setFieldValue('lastFocusedField', fieldName);\n        },\n        [fieldName, setFieldValue]\n    );\n\n    const onChangeHandler = useCallback(\n        (value: string) => {\n            // Remove leading and trailing whitespace\n            const trimmedValue = value.trim();\n\n            // Check if the value is a valid number (only numbers with an optional decimal point are allowed)\n            if (!/^\\d*\\.?\\d*$/.test(trimmedValue)) return;\n\n            // Check if the value has more decimal places than the allowed fraction digits\n            const [, decimalPart] = trimmedValue.split('.');\n            if (decimalPart && decimalPart.length > (fractionDigits ?? 0)) return;\n\n            if (!isAmountFieldActive) return;\n\n            // Reset the opposite field value when the input is empty or invalid\n            if (Number.isNaN(Number(trimmedValue)) || Number(trimmedValue) === 0) {\n                // Need to wrap in setTimeout to avoid race condition\n                setTimeout(() => {\n                    setFieldValue('fromAmount', isFromAmountField ? trimmedValue : '');\n                    setFieldValue('toAmount', isFromAmountField ? '' : trimmedValue);\n                });\n                return;\n            }\n\n            if (isSameCurrency) {\n                setValues(prev => ({ ...prev, fromAmount: trimmedValue, toAmount: trimmedValue }));\n            } else {\n                // If the value is empty, set the other field value to empty\n                if (value === '') {\n                    setValues(prev => ({ ...prev, fromAmount: '', toAmount: '' }));\n                    return;\n                }\n                setFieldValue(fieldName, trimmedValue);\n            }\n        },\n        [fieldName, fractionDigits, isAmountFieldActive, isFromAmountField, isSameCurrency, setFieldValue, setValues]\n    );\n\n    const onTimerCompleteHandler = useCallback(() => {\n        refetchExchangeRatesAndLimits().then(res => {\n            const newRates = res.data?.exchange_rates;\n\n            if (!newRates?.rates || !fromAccount?.currency || !toAccount?.currency || amountValue === DASH_VALUE)\n                return;\n\n            const fromRate = newRates.rates[fromAccount.currency];\n            const toRate = newRates.rates[toAccount.currency];\n\n            const convertedFromAmount = (fromRate ? Number(toAmount) * fromRate : Number(toAmount) / toRate).toFixed(\n                fromAccount?.currencyConfig?.fractional_digits\n            );\n            const convertedToAmount = (toRate ? Number(fromAmount) * toRate : Number(fromAmount) / fromRate).toFixed(\n                toAccount?.currencyConfig?.fractional_digits\n            );\n\n            // if focused into the receiving account amount field, change the other (\"from\") field value\n            if (values.activeAmountFieldName === 'toAmount') {\n                setFieldValue('fromAmount', Number(convertedFromAmount) === 0 ? '' : convertedFromAmount);\n            } else {\n                setFieldValue('toAmount', Number(convertedToAmount) === 0 ? '' : convertedToAmount);\n            }\n        });\n    }, [\n        refetchExchangeRatesAndLimits,\n        fromAccount?.currency,\n        fromAccount?.currencyConfig?.fractional_digits,\n        toAccount?.currency,\n        toAccount?.currencyConfig?.fractional_digits,\n        toAmount,\n        fromAmount,\n        values.activeAmountFieldName,\n        setFieldValue,\n        amountValue,\n    ]);\n\n    const onMaxBtnClickHandler = useCallback(\n        async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            const walletBalance = fromAccount?.balance;\n            e.preventDefault();\n            await setFieldValue('activeAmountFieldName', 'fromAmount');\n            await setFieldValue('lastFocusedField', 'fromAmount');\n            setFieldValue('fromAmount', walletBalance);\n        },\n        [fromAccount?.balance, setFieldValue]\n    );\n\n    return (\n        <div className='wallets-transfer-form-amount-input'>\n            <WalletTransferAmountInput\n                currency={currency}\n                disabled={isAmountInputDisabled}\n                fractionDigits={fractionDigits}\n                isError={values.isError}\n                isLastFocusedField={values.lastFocusedField === fieldName}\n                label={amountLabel}\n                maxDigits={MAX_DIGITS}\n                onBlur={onBlurHandler}\n                onChange={onChangeHandler}\n                onFocus={onFocusHandler}\n                value={amountValue}\n            />\n            {isTimerVisible && (\n                <div className='wallets-transfer-form-amount-input__timer'>\n                    <Timer onComplete={onTimerCompleteHandler} />\n                </div>\n            )}\n            {isMaxBtnVisible && (\n                <Button\n                    className='wallets-transfer-form-amount-input__max-btn'\n                    color='black'\n                    disabled={!hasFunds}\n                    onClick={onMaxBtnClickHandler}\n                    size='sm'\n                    type='button'\n                    variant='outlined'\n                >\n                    <Localize i18n_default_text='Max' />\n                </Button>\n            )}\n        </div>\n    );\n};\n\nexport default TransferFormAmountInput;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Localize } from '@deriv-com/translations';\nimport { Text, useDevice } from '@deriv-com/ui';\nimport { WalletCurrencyCard, WalletListCardBadge, WalletMarketCurrencyIcon } from '../../../../../../components';\nimport { TPlatforms } from '../../../../../../types';\nimport { PlatformStatusBadge } from '../../../../../cfd/components/PlatformStatusBadge';\nimport { DISABLED_PLATFORM_STATUSES } from '../../../../../cfd/constants';\nimport type { TAccount } from '../../types';\nimport './TransferFormAccountCard.scss';\n\ntype TProps = {\n    account?: TAccount;\n    hasPlatformStatus: (account: TAccount) => boolean;\n    type?: 'input' | 'modal';\n};\n\nconst TransferFormAccountCard: React.FC<TProps> = ({ account, hasPlatformStatus, type = 'modal' }) => {\n    const { isDesktop } = useDevice();\n    const isInput = type === 'input';\n    const isModal = type === 'modal';\n\n    return (\n        <div\n            className={classNames('wallets-transfer-form-account-card', {\n                'wallets-transfer-form-account-card--is-input': isInput,\n                'wallets-transfer-form-account-card--is-modal': isModal,\n            })}\n        >\n            <div className='wallets-transfer-form-account-card__icon-with-badge'>\n                <div className='wallets-transfer-form-account-card__icon'>\n                    {account?.account_category === 'wallet' ? (\n                        <WalletCurrencyCard\n                            currency={account?.currencyConfig?.display_code || 'USD'}\n                            isDemo={Boolean(account?.demo_account)}\n                            size='sm'\n                        />\n                    ) : (\n                        <WalletMarketCurrencyIcon\n                            currency={account?.currency ?? ''}\n                            isDemo={Boolean(account?.demo_account)}\n                            marketType={account?.market_type}\n                            platform={account?.account_type as TPlatforms.All}\n                            product={account?.product}\n                            size='xs'\n                        />\n                    )}\n                </div>\n                {isInput && !isDesktop && !!account?.demo_account && <WalletListCardBadge />}\n            </div>\n\n            <div className='wallets-transfer-form-account-card__content'>\n                <Text as='p' size={isInput ? '2xs' : 'sm'} weight='bold'>\n                    {account?.accountName}\n                </Text>\n                {!hasPlatformStatus(account) && (\n                    <Text size={isInput ? '2xs' : 'xs'}>\n                        <Localize\n                            i18n_default_text='Balance: {{balance}}'\n                            values={{\n                                balance: account?.displayBalance,\n                            }}\n                        />\n                    </Text>\n                )}\n                {isModal && hasPlatformStatus(account) && (\n                    <PlatformStatusBadge\n                        badgeSize='sm'\n                        className='wallets-transfer-form-account-card--badge'\n                        status={\n                            (account?.status || account?.platformStatus) as (typeof DISABLED_PLATFORM_STATUSES)[number]\n                        }\n                    />\n                )}\n            </div>\n\n            {isModal && !!account?.demo_account && (\n                <div className='wallets-transfer-form-account-card__modal-badge'>\n                    <WalletListCardBadge />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default TransferFormAccountCard;\n","import React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { LegacyClose2pxIcon } from '@deriv/quill-icons';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { Divider, Text, useDevice } from '@deriv-com/ui';\nimport { useModal } from '../../../../../../components/ModalProvider';\nimport type { TAccount, TAccountsList } from '../../types';\nimport { TransferFormAccountCard } from '../TransferFormAccountCard';\nimport './TransferFormAccountSelection.scss';\n\ntype TProps = {\n    accountsList: TAccountsList;\n    activeWallet: TAccount;\n    fromAccount?: TAccount;\n    hasPlatformStatus: (account: TAccount) => boolean;\n    isFromAccountDropdown: boolean;\n    label: string;\n    onSelect: (value?: TAccount) => void;\n    selectedAccount?: TAccount;\n    toAccount?: TAccount;\n};\n\nconst TitleLine = () => (\n    <div\n        className='wallets-transfer-form-account-selection__title-line'\n        data-testid='dt_wallets_transfer_form_account_selection_title_line'\n    />\n);\n\nconst TransferFormAccountSelection: React.FC<TProps> = ({\n    accountsList,\n    activeWallet,\n    fromAccount,\n    hasPlatformStatus,\n    isFromAccountDropdown,\n    label,\n    onSelect,\n    selectedAccount,\n    toAccount,\n}) => {\n    const { isDesktop } = useDevice();\n    const modal = useModal();\n    const { localize } = useTranslations();\n\n    const transferToHint = useMemo(() => {\n        const isTransferToHintVisible = !isFromAccountDropdown && toAccount?.loginid === activeWallet?.loginid;\n\n        return isTransferToHintVisible ? (\n            <Localize\n                i18n_default_text='You can only transfers funds from the {{fromAccountName}} to the linked {{activeWalletName}}.'\n                values={{\n                    activeWalletName: activeWallet?.accountName,\n                    fromAccountName: fromAccount?.accountName,\n                }}\n            />\n        ) : (\n            ''\n        );\n    }, [\n        activeWallet?.accountName,\n        activeWallet?.loginid,\n        fromAccount?.accountName,\n        isFromAccountDropdown,\n        toAccount?.loginid,\n    ]);\n\n    const isSingleAccountsGroup = useMemo(\n        () => Object.values(accountsList).filter(accounts => accounts.length > 0).length === 1,\n        [accountsList]\n    );\n\n    return (\n        <div className='wallets-transfer-form-account-selection'>\n            <div className='wallets-transfer-form-account-selection__header'>\n                <div className='wallets-transfer-form-account-selection__label'>\n                    <Text size='md' weight='bold'>\n                        {label}\n                    </Text>\n                </div>\n                <button\n                    className='wallets-transfer-form-account-selection__close-button'\n                    data-testid='dt_wallets_transfer_form_account_selection_close_button'\n                    onClick={() => modal.hide()}\n                >\n                    <LegacyClose2pxIcon iconSize='xs' />\n                </button>\n            </div>\n            <div className='wallets-transfer-form-account-selection__accounts'>\n                {Object.entries(accountsList).map(([accountsGroupName, accounts], index) => {\n                    if (accounts.length === 0) return null;\n\n                    const groupTitle =\n                        accountsGroupName === 'tradingAccounts' ? (\n                            <Localize\n                                i18n_default_text='Trading accounts linked with {{wallet}}'\n                                values={{\n                                    wallet: localize('{{currency}} Wallet', {\n                                        currency: activeWallet?.currencyConfig?.display_code,\n                                    }),\n                                }}\n                            />\n                        ) : (\n                            <Localize i18n_default_text='Wallets' />\n                        );\n                    const isLastAccountsGroup = index === Object.keys(accountsList).length - 1;\n                    const shouldShowDivider = isDesktop && !isSingleAccountsGroup && !isLastAccountsGroup;\n\n                    return (\n                        <React.Fragment key={accountsGroupName}>\n                            <div\n                                className='wallets-transfer-form-account-selection__accounts-group'\n                                data-testid='dt_wallets_transfer_form_account_selection_accounts_group'\n                            >\n                                <div className='wallets-transfer-form-account-selection__accounts-group-title'>\n                                    <Text size='sm' weight='bold'>\n                                        {groupTitle}\n                                    </Text>\n                                    {!isDesktop && <TitleLine />}\n                                </div>\n                                <div className='wallets-transfer-form-account-selection__grouped-accounts'>\n                                    {accounts.map(account => (\n                                        <button\n                                            className={classNames('wallets-transfer-form-account-selection__account', {\n                                                'wallets-transfer-form-account-selection__account--selected':\n                                                    account?.loginid === selectedAccount?.loginid,\n                                            })}\n                                            data-testid='dt_wallets_transfer_form_account_selection_account'\n                                            key={`account-selection-${account?.loginid}`}\n                                            onClick={() => {\n                                                onSelect(account);\n                                                modal.hide();\n                                            }}\n                                        >\n                                            <TransferFormAccountCard\n                                                account={account}\n                                                hasPlatformStatus={hasPlatformStatus}\n                                            />\n                                        </button>\n                                    ))}\n                                </div>\n                            </div>\n                            {shouldShowDivider && <Divider color='var(--border-divider)' height={4} />}\n                        </React.Fragment>\n                    );\n                })}\n                {transferToHint && (\n                    <div className='wallets-transfer-form-account-selection__transfer-to-hint'>\n                        <Text align='center' as='p' color='primary' size='xs'>\n                            {transferToHint}\n                        </Text>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default TransferFormAccountSelection;\n","import React, { RefObject, useCallback, useEffect, useMemo } from 'react';\nimport { useFormikContext } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport { LegacyChevronDown2pxIcon } from '@deriv/quill-icons';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { Text, useDevice } from '@deriv-com/ui';\nimport { WalletListCardBadge } from '../../../../../../components';\nimport { useModal } from '../../../../../../components/ModalProvider';\nimport { useTransfer } from '../../provider';\nimport { TInitialTransferFormValues, TToAccount } from '../../types';\nimport { TransferFormAccountCard } from '../TransferFormAccountCard';\nimport { TransferFormAccountSelection } from '../TransferFormAccountSelection';\nimport './TransferFormDropdown.scss';\n\ntype TProps = {\n    fieldName: keyof TInitialTransferFormValues;\n    mobileAccountsListRef: RefObject<HTMLElement>;\n};\n\nconst TransferFormDropdown: React.FC<TProps> = ({ fieldName, mobileAccountsListRef }) => {\n    const { setValues, values } = useFormikContext<TInitialTransferFormValues>();\n    const { accounts, activeWallet, hasPlatformStatus } = useTransfer();\n    const { localize } = useTranslations();\n    const { fromAccount, toAccount } = values;\n    const { isDesktop } = useDevice();\n    const modal = useModal();\n\n    const isFromAccountDropdown = fieldName === 'fromAccount';\n\n    const fromAccountList = useMemo(() => {\n        if (!activeWallet) return { tradingAccounts: [], walletAccounts: [] };\n        return {\n            ...accounts,\n            walletAccounts: [activeWallet],\n        };\n    }, [accounts, activeWallet]);\n\n    const toAccountList = useMemo(() => {\n        if (!activeWallet) return { tradingAccounts: [], walletAccounts: [] };\n        if (fromAccount?.loginid === activeWallet.loginid) {\n            return {\n                tradingAccounts: accounts?.tradingAccounts,\n                walletAccounts: accounts?.walletAccounts.filter(account => account.loginid !== activeWallet?.loginid),\n            };\n        }\n        return { tradingAccounts: [], walletAccounts: [activeWallet] };\n    }, [accounts?.tradingAccounts, accounts?.walletAccounts, activeWallet, fromAccount?.loginid]);\n\n    const selectedAccount = isFromAccountDropdown ? fromAccount : toAccount;\n    const accountsList = isFromAccountDropdown ? fromAccountList : toAccountList;\n    const label = isFromAccountDropdown ? localize('Transfer from') : localize('Transfer to');\n    const { location } = useHistory();\n    const toAccountLoginId =\n        location.pathname === '/wallet/account-transfer' ? location.state?.toAccountLoginId : undefined;\n    const shouldDefaultUSDWallet =\n        location.pathname === '/wallet/account-transfer' ? location.state?.shouldSelectDefaultWallet : false;\n\n    const toDefaultAccount = useMemo(\n        () => toAccountList.walletAccounts.find(wallet => wallet.currency === 'USD'),\n        [toAccountList.walletAccounts]\n    );\n    // This sets a 'To transfer' to USD Wallet account to be selected by default when user transfers from a crypto wallet\n    if (!toAccount && toDefaultAccount && shouldDefaultUSDWallet) {\n        setValues(prev => ({\n            ...prev,\n            toAccount: toDefaultAccount,\n        }));\n    }\n\n    useEffect(() => {\n        const toAccount: TToAccount = Object.values(accounts)\n            .flatMap(account => account)\n            .find(account => account.loginid === toAccountLoginId);\n\n        if (toAccountLoginId && toAccount) {\n            setValues(prev => ({\n                ...prev,\n                toAccount,\n            }));\n        }\n    }, [accounts, toAccountLoginId, setValues]);\n\n    const handleSelect = useCallback(\n        (account: TInitialTransferFormValues['fromAccount']) => {\n            if (account?.loginid === selectedAccount?.loginid) return;\n\n            if (isFromAccountDropdown) {\n                setValues(prev => {\n                    const toAccount = account?.loginid !== activeWallet?.loginid ? activeWallet : undefined;\n\n                    return {\n                        ...prev,\n                        activeAmountFieldName: undefined,\n                        fromAccount: account,\n                        fromAmount: '',\n                        toAccount,\n                        toAmount: '',\n                    };\n                });\n            } else {\n                setValues(prev => ({\n                    ...prev,\n                    activeAmountFieldName: 'fromAmount',\n                    toAccount: account,\n                    toAmount: '',\n                }));\n            }\n        },\n        [activeWallet, isFromAccountDropdown, selectedAccount?.loginid, setValues]\n    );\n\n    return (\n        <button\n            className='wallets-transfer-form-dropdown'\n            data-testid='dt_wallets_transfer_form_dropdown'\n            onClick={() => {\n                modal.show(\n                    <TransferFormAccountSelection\n                        accountsList={accountsList}\n                        activeWallet={activeWallet}\n                        fromAccount={fromAccount}\n                        hasPlatformStatus={hasPlatformStatus}\n                        isFromAccountDropdown={isFromAccountDropdown}\n                        label={label}\n                        onSelect={handleSelect}\n                        selectedAccount={selectedAccount}\n                        toAccount={toAccount}\n                    />,\n                    {\n                        rootRef: !isDesktop ? mobileAccountsListRef : undefined,\n                    }\n                );\n            }}\n            type='button'\n        >\n            <div className='wallets-transfer-form-dropdown__content'>\n                <div className='wallets-transfer-form-dropdown__header'>\n                    <Text size='sm'>{label}</Text>\n\n                    {!isDesktop && <LegacyChevronDown2pxIcon iconSize='xs' />}\n                </div>\n\n                {selectedAccount ? (\n                    <TransferFormAccountCard\n                        account={selectedAccount}\n                        hasPlatformStatus={hasPlatformStatus}\n                        type='input'\n                    />\n                ) : (\n                    <div className='wallets-transfer-form-dropdown__select-account-cta'>\n                        <Text size='sm' weight='bold'>\n                            {activeWallet?.demo_account === 0 ? (\n                                <Localize i18n_default_text='Select a trading account or a Wallet' />\n                            ) : (\n                                <Localize i18n_default_text='Select a trading account' />\n                            )}\n                        </Text>\n                    </div>\n                )}\n            </div>\n\n            {isDesktop && (\n                <>\n                    {selectedAccount?.demo_account ? (\n                        <div className='wallets-transfer-form-dropdown__badge'>\n                            <WalletListCardBadge />\n                        </div>\n                    ) : null}\n                    <LegacyChevronDown2pxIcon className='wallets-transfer-form-dropdown__icon-dropdown' iconSize='xs' />\n                </>\n            )}\n        </button>\n    );\n};\n\nexport default TransferFormDropdown;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport './FadedAnimatedList.scss';\n\ntype TProps = {\n    animateOnMount?: boolean;\n    children: JSX.Element[];\n    className?: string;\n};\n\nconst FadedAnimatedList: React.FC<TProps> = ({ animateOnMount = false, children, className }) => {\n    return (\n        <TransitionGroup className={classNames('wallets-faded-animated-list', className)}>\n            {children.map(child => {\n                return (\n                    <CSSTransition\n                        appear={animateOnMount}\n                        classNames='wallets-faded-animated-list__list-item'\n                        key={child.key}\n                        timeout={250}\n                    >\n                        <div className='wallets-faded-animated-list__list-item--display-grid'>{child}</div>\n                    </CSSTransition>\n                );\n            })}\n        </TransitionGroup>\n    );\n};\n\nexport default FadedAnimatedList;\n","import React from 'react';\nimport { Localize } from '@deriv-com/translations';\nimport { TMessageFnProps, TTransferMessage } from '../../../types';\n\nlet message: TTransferMessage['message'], type: TTransferMessage['type'];\n\nconst countLimitMessageFn = ({ activeWallet, limits, sourceAccount, targetAccount }: TMessageFnProps) => {\n    if (!targetAccount) return null;\n\n    const isTransferBetweenWallets =\n        sourceAccount.account_category === 'wallet' && targetAccount.account_category === 'wallet';\n\n    const isDemoTransfer = activeWallet?.is_virtual;\n\n    const keyAccountType =\n        [sourceAccount, targetAccount].find(acc => acc.account_category !== 'wallet')?.account_type ?? 'internal';\n\n    const platformKey = keyAccountType === 'standard' ? 'dtrade' : keyAccountType;\n\n    const allowedCount = isDemoTransfer\n        ? //@ts-expect-error needs backend type\n          (limits?.daily_transfers?.virtual?.allowed as number)\n        : //@ts-expect-error needs backend type\n          (limits?.daily_transfers?.[platformKey]?.allowed as number);\n\n    const availableCount = isDemoTransfer\n        ? //@ts-expect-error needs backend type\n          (limits?.daily_transfers?.virtual?.available as number)\n        : //@ts-expect-error needs backend type\n          (limits?.daily_transfers?.[platformKey]?.available as number);\n\n    if (allowedCount === undefined || availableCount === undefined) return null;\n\n    if (availableCount === 0 && isDemoTransfer) {\n        message = (\n            <Localize\n                i18n_default_text='You have reached your daily transfer limit of {{allowedCount}} transfers for your virtual funds. The limit will reset at 00:00 GMT.'\n                values={{ allowedCount }}\n            />\n        );\n        type = 'error' as const;\n\n        return {\n            message,\n            type,\n        };\n    }\n\n    if (availableCount === 0) {\n        message = isTransferBetweenWallets ? (\n            <Localize\n                i18n_default_text='You have reached your daily transfer limit of {{allowedCount}} transfers between your Wallets. The limit will reset at 00:00 GMT.'\n                values={{ allowedCount }}\n            />\n        ) : (\n            <Localize\n                i18n_default_text='You have reached your daily transfer limit of {{allowedCount}} transfers between your {{sourceAccountName}} and {{targetAccountName}}. The limit will reset at 00:00 GMT.'\n                values={{\n                    allowedCount,\n                    sourceAccountName: sourceAccount.accountName,\n                    targetAccountName: targetAccount.accountName,\n                }}\n            />\n        );\n        type = 'error' as const;\n\n        return {\n            message,\n            type,\n        };\n    }\n\n    return null;\n};\n\nexport default countLimitMessageFn;\n","import React from 'react';\nimport { Localize } from '@deriv-com/translations';\nimport { TMessageFnProps, TTransferMessage } from '../../../types';\n\nlet message: TTransferMessage['message'];\n\nconst cumulativeAccountLimitsMessageFn = ({\n    activeWallet,\n    activeWalletExchangeRates,\n    displayMoney,\n    limits,\n    sourceAccount,\n    sourceAmount,\n    targetAccount,\n}: TMessageFnProps) => {\n    if (!targetAccount) return null;\n\n    const isTransferBetweenWallets =\n        sourceAccount.account_category === 'wallet' && targetAccount.account_category === 'wallet';\n\n    const isDemoTransfer = activeWallet?.is_virtual;\n\n    const keyAccountType =\n        [sourceAccount, targetAccount].find(acc => acc.account_category !== 'wallet')?.account_type ?? 'internal';\n\n    const platformKey = keyAccountType === 'standard' ? 'dtrade' : keyAccountType;\n\n    const allowedSumUSD = isDemoTransfer\n        ? //@ts-expect-error needs backend type\n          Number(limits?.daily_cumulative_amount_transfers?.virtual?.allowed)\n        : //@ts-expect-error needs backend type\n          Number(limits?.daily_cumulative_amount_transfers?.[platformKey]?.allowed);\n\n    const availableSumUSD = isDemoTransfer\n        ? //@ts-expect-error needs backend type\n          Number(limits?.daily_cumulative_amount_transfers?.virtual?.available)\n        : //@ts-expect-error needs backend type\n          Number(limits?.daily_cumulative_amount_transfers?.[platformKey]?.available);\n\n    if (\n        !sourceAccount.currency ||\n        !targetAccount.currency ||\n        !sourceAccount.currencyConfig ||\n        !targetAccount.currencyConfig ||\n        (allowedSumUSD !== 0 && !allowedSumUSD) ||\n        (availableSumUSD !== 0 && !availableSumUSD)\n    )\n        return null;\n\n    const formattedDemoLimit = displayMoney?.(\n        availableSumUSD,\n        sourceAccount.currencyConfig.display_code,\n        sourceAccount.currencyConfig.fractional_digits\n    );\n\n    if (isDemoTransfer) {\n        if (sourceAmount && allowedSumUSD === availableSumUSD) {\n            message = (\n                <Localize\n                    i18n_default_text='Your daily transfer limit for virtual funds is {{formattedDemoLimit}}'\n                    values={{ formattedDemoLimit }}\n                />\n            );\n\n            return {\n                message,\n                type: 'success' as const,\n            };\n        }\n\n        message = (\n            <Localize\n                i18n_default_text='Your remaining daily transfer limit for virtual funds is {{formattedDemoLimit}}.'\n                values={{ formattedDemoLimit }}\n            />\n        );\n\n        return {\n            message,\n            type: 'success' as const,\n        };\n    }\n\n    // separated the exchangeRates check to prevent checking for demo transfer\n    if (\n        (sourceAccount.currency !== activeWallet.currency &&\n            !activeWalletExchangeRates?.rates?.[sourceAccount.currency]) ||\n        (targetAccount.currency !== activeWallet.currency &&\n            !activeWalletExchangeRates?.rates?.[targetAccount.currency])\n    )\n        return null;\n\n    const USDToSourceRate =\n        activeWallet.currency === sourceAccount.currency\n            ? 1 / (activeWalletExchangeRates?.rates?.USD ?? 1)\n            : // if the source (\"from\") account is not the active wallet,\n              // compute USD -> sourceCurrency rate as activeWalletCurrency -> sourceCurrency rate,\n              // divided by activeWalletCurrency -> USD rate\n              (activeWalletExchangeRates?.rates?.[sourceAccount.currency] ?? 1) /\n              (activeWalletExchangeRates?.rates?.USD ?? 1);\n\n    const sourceCurrencyLimit = allowedSumUSD * USDToSourceRate;\n    const sourceCurrencyRemainder = Number(\n        (availableSumUSD * USDToSourceRate).toFixed(sourceAccount.currencyConfig.fractional_digits)\n    );\n\n    const formattedSourceCurrencyLimit = displayMoney?.(\n        sourceCurrencyLimit,\n        sourceAccount.currencyConfig.display_code,\n        sourceAccount.currencyConfig.fractional_digits\n    );\n\n    const formattedSourceCurrencyRemainder = displayMoney?.(\n        sourceCurrencyRemainder,\n        sourceAccount.currencyConfig.display_code,\n        sourceAccount.currencyConfig.fractional_digits\n    );\n\n    if (availableSumUSD === 0) {\n        message = isTransferBetweenWallets ? (\n            <Localize\n                i18n_default_text='You have reached your daily transfer limit of {{formattedSourceCurrencyLimit}} between your Wallets. The limit will reset at 00:00 GMT.'\n                values={{ formattedSourceCurrencyLimit }}\n            />\n        ) : (\n            <Localize\n                i18n_default_text='You have reached your daily transfer limit of {{formattedSourceCurrencyLimit}} between your {{sourceAccountName}} and {{targetAccountName}}. The limit will reset at 00:00 GMT.'\n                values={{\n                    formattedSourceCurrencyLimit,\n                    sourceAccountName: sourceAccount.accountName,\n                    targetAccountName: targetAccount.accountName,\n                }}\n            />\n        );\n\n        return {\n            message,\n            type: 'error' as const,\n        };\n    }\n\n    if (sourceAmount && allowedSumUSD === availableSumUSD) {\n        message = isTransferBetweenWallets ? (\n            <Localize\n                i18n_default_text='The daily transfer limit between your Wallets is {{formattedSourceCurrencyLimit}}.'\n                values={{ formattedSourceCurrencyLimit }}\n            />\n        ) : (\n            <Localize\n                i18n_default_text='The daily transfer limit between your {{sourceAccountName}} and {{targetAccountName}} is {{formattedSourceCurrencyLimit}}.'\n                values={{\n                    formattedSourceCurrencyLimit,\n                    sourceAccountName: sourceAccount.accountName,\n                    targetAccountName: targetAccount.accountName,\n                }}\n            />\n        );\n\n        return {\n            message,\n            type: sourceAmount > sourceCurrencyRemainder ? ('error' as const) : ('success' as const),\n        };\n    }\n\n    if (sourceAmount && sourceCurrencyRemainder - sourceAmount <= 1000) {\n        message = isTransferBetweenWallets ? (\n            <Localize\n                i18n_default_text='The remaining daily transfer limit between your Wallets is {{formattedSourceCurrencyRemainder}}.'\n                values={{ formattedSourceCurrencyRemainder }}\n            />\n        ) : (\n            <Localize\n                i18n_default_text='The remaining daily transfer limit between your {{sourceAccountName}} and {{targetAccountName}} is {{formattedSourceCurrencyRemainder}}.'\n                values={{\n                    formattedSourceCurrencyRemainder,\n                    sourceAccountName: sourceAccount.accountName,\n                    targetAccountName: targetAccount.accountName,\n                }}\n            />\n        );\n\n        return {\n            message,\n            type: sourceAmount > sourceCurrencyRemainder ? ('error' as const) : ('success' as const),\n        };\n    }\n\n    return null;\n};\n\nexport default cumulativeAccountLimitsMessageFn;\n","import React from 'react';\nimport { Localize } from '@deriv-com/translations';\nimport { TMessageFnProps } from '../../../types';\n\nconst insufficientBalanceMessageFn = ({ sourceAccount, sourceAmount }: TMessageFnProps) => {\n    if (!sourceAccount.accountName || isNaN(Number(sourceAccount.balance))) return null;\n\n    const sourceAccountBalance = Number(sourceAccount.balance);\n\n    if (sourceAccountBalance === 0 || sourceAccountBalance < sourceAmount) {\n        const message = (\n            <Localize\n                i18n_default_text='Your {{sourceAccountName}} has insufficient balance.'\n                values={{ sourceAccountName: sourceAccount.accountName }}\n            />\n        );\n\n        return {\n            message,\n            type: 'error' as const,\n        };\n    }\n\n    return null;\n};\n\nexport default insufficientBalanceMessageFn;\n","import React from 'react';\nimport { Localize } from '@deriv-com/translations';\nimport { TMessageFnProps, TTransferMessage } from '../../../types';\n\nlet message: TTransferMessage['message'];\n\nconst verifyPOIAction = {\n    buttonLabel: <Localize i18n_default_text='Verify' />,\n    navigateTo: '/account/proof-of-identity',\n    shouldOpenInNewTab: true,\n};\n\nconst lifetimeAccountLimitsBetweenWalletsMessageFn = ({\n    activeWallet,\n    activeWalletExchangeRates,\n    displayMoney,\n    limits,\n    sourceAccount,\n    sourceAmount,\n    targetAccount,\n}: TMessageFnProps) => {\n    if (sourceAccount?.account_category !== 'wallet' || targetAccount?.account_category !== 'wallet') return null;\n\n    const sourceWalletType = sourceAccount.account_type === 'crypto' ? 'crypto' : 'fiat';\n    const targetWalletType = targetAccount.account_type === 'crypto' ? 'crypto' : 'fiat';\n    const limitsCaseKey = `${sourceWalletType}_to_${targetWalletType}` as const;\n\n    //@ts-expect-error needs backend type\n    const allowedSumActiveWalletCurrency = Number(limits?.lifetime_transfers?.[limitsCaseKey]?.allowed);\n    //@ts-expect-error needs backend type\n    const availableSumActiveWalletCurrency = Number(limits?.lifetime_transfers?.[limitsCaseKey]?.available);\n\n    if (\n        !sourceAccount.currency ||\n        (sourceAccount.currency !== activeWallet.currency &&\n            !activeWalletExchangeRates?.rates?.[sourceAccount.currency]) ||\n        !targetAccount.currency ||\n        (targetAccount.currency !== activeWallet.currency &&\n            !activeWalletExchangeRates?.rates?.[targetAccount.currency]) ||\n        !sourceAccount.currencyConfig ||\n        !targetAccount.currencyConfig\n    )\n        return null;\n\n    const availableSumConverted =\n        availableSumActiveWalletCurrency * (activeWalletExchangeRates?.rates?.[targetAccount.currency] ?? 1);\n\n    const formattedSourceCurrencyLimit = displayMoney?.(\n        allowedSumActiveWalletCurrency,\n        sourceAccount.currencyConfig.display_code,\n        sourceAccount.currencyConfig.fractional_digits\n    );\n\n    const formattedSourceCurrencyLimitInUSD = displayMoney?.(\n        allowedSumActiveWalletCurrency * (activeWalletExchangeRates?.rates?.USD ?? 1),\n        activeWalletExchangeRates?.rates?.USD ? 'USD' : sourceAccount.currencyConfig.display_code,\n        activeWalletExchangeRates?.rates?.USD ? 2 : sourceAccount.currencyConfig.fractional_digits\n    );\n\n    const formattedSourceCurrencyRemainder = displayMoney?.(\n        availableSumActiveWalletCurrency,\n        sourceAccount.currencyConfig.display_code,\n        sourceAccount.currencyConfig.fractional_digits\n    );\n\n    const formattedConvertedSourceCurrencyRemainder = displayMoney?.(\n        availableSumConverted,\n        targetAccount.currencyConfig.display_code,\n        targetAccount.currencyConfig.fractional_digits\n    );\n\n    const formattedSourceCurrencyRemainderInUSD = displayMoney?.(\n        availableSumActiveWalletCurrency * (activeWalletExchangeRates?.rates?.USD ?? 1),\n        activeWalletExchangeRates?.rates?.USD ? 'USD' : sourceAccount.currencyConfig.display_code,\n        activeWalletExchangeRates?.rates?.USD ? 2 : sourceAccount.currencyConfig.fractional_digits\n    );\n\n    if (availableSumActiveWalletCurrency === 0) {\n        message =\n            targetWalletType === 'crypto' ? (\n                <Localize\n                    i18n_default_text=\"You've reached the lifetime transfer limit from your {{sourceAccountName}} to any cryptocurrency Wallets. Verify your account to upgrade the limit.\"\n                    values={{ sourceAccountName: sourceAccount.accountName }}\n                />\n            ) : (\n                <Localize\n                    i18n_default_text=\"You've reached the lifetime transfer limit from your {{sourceAccountName}} to {{targetAccountName}}. Verify your account to upgrade the limit.\"\n                    values={{\n                        sourceAccountName: sourceAccount.accountName,\n                        targetAccountName: targetAccount.accountName,\n                    }}\n                />\n            );\n\n        return {\n            action: verifyPOIAction,\n            message,\n            type: 'error' as const,\n        };\n    } else if (sourceAmount > availableSumActiveWalletCurrency) {\n        switch (limitsCaseKey) {\n            case 'fiat_to_crypto':\n            case 'crypto_to_fiat':\n                message = (\n                    <Localize\n                        i18n_default_text='The lifetime transfer limit is up to {{formattedSourceCurrencyRemainder}} ({{formattedConvertedSourceCurrencyRemainder}}). Verify your account to upgrade the limit.'\n                        values={{ formattedConvertedSourceCurrencyRemainder, formattedSourceCurrencyRemainder }}\n                    />\n                );\n\n                return {\n                    action: verifyPOIAction,\n                    message,\n                    type: 'error' as const,\n                };\n            case 'crypto_to_crypto':\n                message = (\n                    <Localize\n                        i18n_default_text='The lifetime transfer limit is up to {{formattedSourceCurrencyRemainder}} ({{formattedSourceCurrencyRemainderInUSD}}). Verify your account to upgrade the limit.'\n                        values={{ formattedSourceCurrencyRemainder, formattedSourceCurrencyRemainderInUSD }}\n                    />\n                );\n\n                return {\n                    action: verifyPOIAction,\n                    message,\n                    type: 'error' as const,\n                };\n            default:\n                return null;\n        }\n    }\n\n    if (allowedSumActiveWalletCurrency === availableSumActiveWalletCurrency)\n        switch (limitsCaseKey) {\n            case 'fiat_to_crypto':\n            case 'crypto_to_fiat':\n                message =\n                    targetWalletType === 'crypto' ? (\n                        <Localize\n                            i18n_default_text='The lifetime transfer limit from {{sourceAccountName}} to any cryptocurrency Wallets is up to {{formattedSourceCurrencyLimit}}.'\n                            values={{ formattedSourceCurrencyLimit, sourceAccountName: sourceAccount.accountName }}\n                        />\n                    ) : (\n                        <Localize\n                            i18n_default_text='The lifetime transfer limit from {{sourceAccountName}} to {{targetAccountName}} is up to {{formattedSourceCurrencyLimit}} (Approximate to {{formattedSourceCurrencyLimitInUSD}}).'\n                            values={{\n                                formattedSourceCurrencyLimit,\n                                formattedSourceCurrencyLimitInUSD,\n                                sourceAccountName: sourceAccount.accountName,\n                                targetAccountName: targetAccount.accountName,\n                            }}\n                        />\n                    );\n\n                return {\n                    message,\n                    type: 'success' as const,\n                };\n            case 'crypto_to_crypto':\n                message = (\n                    <Localize\n                        i18n_default_text='The lifetime transfer limit between cryptocurrency Wallets is up to {{formattedSourceCurrencyLimit}} (Approximate to {{formattedSourceCurrencyLimitInUSD}}).'\n                        values={{ formattedSourceCurrencyLimit, formattedSourceCurrencyLimitInUSD }}\n                    />\n                );\n\n                return {\n                    message,\n                    type: 'success' as const,\n                };\n            default:\n                return null;\n        }\n\n    switch (limitsCaseKey) {\n        case 'fiat_to_crypto':\n        case 'crypto_to_fiat':\n            message =\n                targetWalletType === 'crypto' ? (\n                    <Localize\n                        i18n_default_text='Your remaining lifetime transfer limit from {{sourceAccountName}} to any cryptocurrency Wallets is {{formattedSourceCurrencyRemainder}}. Verify your account to upgrade the limit.'\n                        values={{ formattedSourceCurrencyRemainder, sourceAccountName: sourceAccount.accountName }}\n                    />\n                ) : (\n                    <Localize\n                        i18n_default_text='Your remaining lifetime transfer limit from {{sourceAccountName}} to {{targetAccountName}} is {{formattedSourceCurrencyRemainder}} (Approximate to {{formattedSourceCurrencyRemainderInUSD}}). Verify your account to upgrade the limit.'\n                        values={{\n                            formattedSourceCurrencyRemainder,\n                            formattedSourceCurrencyRemainderInUSD,\n                            sourceAccountName: sourceAccount.accountName,\n                            targetAccountName: targetAccount.accountName,\n                        }}\n                    />\n                );\n\n            return {\n                action: verifyPOIAction,\n                message,\n                type: 'success' as const,\n            };\n        case 'crypto_to_crypto':\n            message = (\n                <Localize\n                    i18n_default_text='Your remaining lifetime transfer limit between cryptocurrency Wallets is {{formattedSourceCurrencyRemainder}} (Approximate to {{formattedSourceCurrencyRemainderInUSD}}). Verify your account to upgrade the limit.'\n                    values={{ formattedSourceCurrencyRemainder, formattedSourceCurrencyRemainderInUSD }}\n                />\n            );\n\n            return {\n                action: verifyPOIAction,\n                message,\n                type: 'success' as const,\n            };\n        default:\n            return null;\n    }\n};\n\nexport default lifetimeAccountLimitsBetweenWalletsMessageFn;\n","import React from 'react';\nimport { Localize } from '@deriv-com/translations';\nimport { TMessageFnProps } from '../../../types';\n\nconst minimumTransferLimitMessageFn = ({\n    displayMoney,\n    sourceAccount,\n    sourceAmount,\n    targetAccount,\n}: TMessageFnProps) => {\n    if (!sourceAccount || !targetAccount || !sourceAmount) return null;\n\n    // Determine the account type for limit selection\n    const isCtraderTransfer = [sourceAccount, targetAccount].some(acc => acc.account_type === 'ctrader');\n    const isMT5Transfer = [sourceAccount, targetAccount].some(acc => acc.account_type === 'mt5');\n    const isDxtradeTransfer = [sourceAccount, targetAccount].some(acc => acc.account_type === 'dxtrade');\n\n    // Get the appropriate minimum limit based on account types\n    let minLimit;\n    if (isCtraderTransfer) {\n        minLimit = sourceAccount.currencyConfig?.transfer_between_accounts?.limits_ctrader?.min;\n    } else if (isMT5Transfer) {\n        minLimit = sourceAccount.currencyConfig?.transfer_between_accounts?.limits_mt5?.min;\n    } else if (isDxtradeTransfer) {\n        minLimit = sourceAccount.currencyConfig?.transfer_between_accounts?.limits_dxtrade?.min;\n    } else {\n        minLimit = sourceAccount.currencyConfig?.transfer_between_accounts?.limits?.min;\n    }\n\n    // If min limit is not available or amount is greater than or equal to min limit, return null\n    if (!minLimit || typeof minLimit !== 'number' || sourceAmount >= minLimit) return null;\n\n    // Format the minimum limit for display\n    const formattedMinLimit = displayMoney?.(\n        minLimit,\n        sourceAccount.currency || '',\n        sourceAccount.currencyConfig?.fractional_digits || 2\n    );\n\n    // Create a single message format for all transfer types\n    const message = (\n        <Localize\n            i18n_default_text='Minimum required amount is {{formattedMinLimit}}'\n            values={{\n                formattedMinLimit,\n            }}\n        />\n    );\n\n    return {\n        message,\n        type: 'error' as const,\n    };\n};\n\nexport default minimumTransferLimitMessageFn;\n","import React from 'react';\nimport { Localize } from '@deriv-com/translations';\nimport { TRADING_PLATFORM_STATUS } from '../../../../../../cfd/constants';\nimport { TMessageFnProps } from '../../../types';\n\nconst tradingPlatformStatusMessageFn = ({ platformStatus }: TMessageFnProps) => {\n    const isMaintenance = platformStatus === TRADING_PLATFORM_STATUS.MAINTENANCE;\n\n    const message = isMaintenance ? (\n        <Localize i18n_default_text='We’re currently performing server maintenance. Service may be affected.' />\n    ) : (\n        <Localize i18n_default_text='Check back in a few minutes by refreshing the page.' />\n    );\n\n    return {\n        message,\n        type: 'error' as const,\n    };\n};\n\nexport default tradingPlatformStatusMessageFn;\n","import React from 'react';\nimport { Localize } from '@deriv-com/translations';\nimport { TMessageFnProps } from '../../../types';\n\nconst transferFeesBetweenWalletsMessageFn = ({\n    displayMoney,\n    fiatAccount,\n    sourceAccount,\n    sourceAmount,\n    targetAccount,\n    targetAmount,\n}: TMessageFnProps) => {\n    if (\n        !sourceAccount.currency ||\n        !sourceAccount.currencyConfig ||\n        !sourceAmount ||\n        !targetAmount ||\n        !targetAccount?.currency\n    )\n        return null;\n\n    const isTransferBetweenCryptoWallets =\n        sourceAccount.account_type === 'crypto' && targetAccount.account_type === 'crypto';\n    const minimumFeeAmount = 1 / Math.pow(10, sourceAccount.currencyConfig.fractional_digits);\n\n    const minimumFeeText = displayMoney?.(\n        minimumFeeAmount,\n        sourceAccount.currency,\n        sourceAccount.currencyConfig.fractional_digits\n    );\n\n    const feePercentage = sourceAccount.currencyConfig?.transfer_between_accounts.fees[targetAccount.currency];\n\n    const feeAmount = (feePercentage * sourceAmount) / 100;\n\n    const feeMessageText = displayMoney?.(\n        feeAmount > minimumFeeAmount ? feeAmount : minimumFeeAmount,\n        sourceAccount.currency,\n        sourceAccount.currencyConfig.fractional_digits\n    );\n\n    const message = isTransferBetweenCryptoWallets ? (\n        <Localize\n            i18n_default_text='Fee: {{feeMessageText}} ({{feePercentage}}% transfer fee or {{minimumFeeText}}, whichever is higher, applies for fund transfers between your cryptocurrency Wallets)'\n            values={{\n                feeMessageText,\n                feePercentage,\n                minimumFeeText,\n            }}\n        />\n    ) : (\n        <Localize\n            i18n_default_text='Fee: {{feeMessageText}} ({{feePercentage}}% transfer fee or {{minimumFeeText}}, whichever is higher, applies for fund transfers between your {{currencyType}} Wallet and cryptocurrency Wallets)'\n            values={{\n                currencyType: fiatAccount?.wallet_currency_type,\n                feeMessageText,\n                feePercentage,\n                minimumFeeText,\n            }}\n        />\n    );\n\n    return {\n        message,\n        type: 'info' as const,\n    };\n};\n\nexport default transferFeesBetweenWalletsMessageFn;\n","import { useCallback, useMemo } from 'react';\nimport { useActiveWalletAccount, usePOI, useTradingPlatformStatus, useWalletAccountsList } from '@deriv/api-v2';\nimport { displayMoney as displayMoney_ } from '@deriv/api-v2/src/utils';\nimport { THooks } from '../../../../../../types';\nimport { MT5_ACCOUNT_STATUS, TRADING_PLATFORM_STATUS } from '../../../../../cfd/constants';\nimport { TAccount, TInitialTransferFormValues, TMessageFnProps, TTransferMessage } from '../../types';\nimport {\n    countLimitMessageFn,\n    cumulativeAccountLimitsMessageFn,\n    insufficientBalanceMessageFn,\n    lifetimeAccountLimitsBetweenWalletsMessageFn,\n    minimumTransferLimitMessageFn,\n    tradingPlatformStatusMessageFn,\n    transferFeesBetweenWalletsMessageFn,\n} from './utils';\n\ntype TProps = {\n    USDExchangeRates?: THooks.ExchangeRate;\n    accountLimits?: THooks.AccountLimits;\n    activeWalletExchangeRates?: THooks.ExchangeRate;\n    formData: TInitialTransferFormValues;\n    fromAccount: NonNullable<TAccount> | undefined;\n    toAccount: NonNullable<TAccount> | undefined;\n};\n\nconst useTransferMessages = ({\n    USDExchangeRates,\n    accountLimits,\n    activeWalletExchangeRates,\n    formData,\n    fromAccount,\n    toAccount,\n}: TProps) => {\n    const { data: activeWallet } = useActiveWalletAccount();\n    const { data: walletAccounts } = useWalletAccountsList();\n    const { data: poi } = usePOI();\n    const { getPlatformStatus } = useTradingPlatformStatus();\n\n    const platformStatus =\n        getPlatformStatus(fromAccount?.account_type ?? '') || getPlatformStatus(toAccount?.account_type ?? '');\n\n    const isServerMaintenance =\n        platformStatus === TRADING_PLATFORM_STATUS.MAINTENANCE ||\n        [fromAccount?.status, toAccount?.status].includes(MT5_ACCOUNT_STATUS.UNDER_MAINTENANCE);\n    const isAccountUnavailable = [fromAccount?.status, toAccount?.status].includes(TRADING_PLATFORM_STATUS.UNAVAILABLE);\n    const hasTradingPlatformStatus = isServerMaintenance || isAccountUnavailable;\n\n    const isTransferBetweenWallets =\n        fromAccount?.account_category === 'wallet' && toAccount?.account_category === 'wallet';\n    const isAccountVerified = poi?.is_verified;\n\n    const displayMoney = useCallback(\n        (amount: number, currency: string, fractionalDigits: number) =>\n            displayMoney_(amount, currency, { fractional_digits: fractionalDigits }),\n        []\n    );\n\n    const memoizedMessages = useMemo(() => {\n        const fiatAccount = walletAccounts?.find(account => account.account_type === 'doughflow');\n\n        const sourceAmount = Number(formData.fromAmount);\n        const targetAmount = Number(formData.toAmount);\n\n        const messageFns: ((props: TMessageFnProps) => TTransferMessage | null)[] = [];\n        const messages: TTransferMessage[] = [];\n\n        // messageFns.push(validateNumber);\n\n        messageFns.push(minimumTransferLimitMessageFn);\n        messageFns.push(insufficientBalanceMessageFn);\n        messageFns.push(countLimitMessageFn);\n\n        if (!isAccountVerified && isTransferBetweenWallets) {\n            messageFns.push(lifetimeAccountLimitsBetweenWalletsMessageFn);\n        }\n        if (isAccountVerified || (!isAccountVerified && !isTransferBetweenWallets)) {\n            messageFns.push(cumulativeAccountLimitsMessageFn);\n        }\n        if (isTransferBetweenWallets) {\n            messageFns.push(transferFeesBetweenWalletsMessageFn);\n        }\n        if (hasTradingPlatformStatus) {\n            messageFns.push(tradingPlatformStatusMessageFn);\n        }\n\n        messageFns.forEach(messageFn => {\n            if (!activeWallet || !fromAccount) return;\n\n            const message = messageFn({\n                activeWallet,\n                activeWalletExchangeRates,\n                displayMoney,\n                fiatAccount,\n                limits: accountLimits,\n                platformStatus,\n                sourceAccount: fromAccount,\n                sourceAmount,\n                targetAccount: toAccount,\n                targetAmount,\n                USDExchangeRates,\n            });\n\n            if (message) messages.push(message);\n        });\n\n        if (messages.some(message => message.type === 'error')) {\n            const errorMessage = messages.filter(message => message.type === 'error')[0];\n            return [errorMessage];\n        }\n\n        return messages;\n    }, [\n        USDExchangeRates,\n        accountLimits,\n        activeWallet,\n        activeWalletExchangeRates,\n        displayMoney,\n        formData.fromAmount,\n        formData.toAmount,\n        fromAccount,\n        hasTradingPlatformStatus,\n        isAccountVerified,\n        isTransferBetweenWallets,\n        platformStatus,\n        toAccount,\n        walletAccounts,\n    ]);\n\n    return memoizedMessages;\n};\n\nexport default useTransferMessages;\n","import React, { useEffect } from 'react';\nimport { useFormikContext } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { getInitialLanguage } from '@deriv-com/translations';\nimport { Button } from '@deriv-com/ui';\nimport { FadedAnimatedList, WalletAlertMessage } from '../../../../../../components';\nimport useTransferMessages from '../../hooks/useTransferMessages';\nimport { useTransfer } from '../../provider';\nimport { TInitialTransferFormValues } from '../../types';\nimport './TransferMessages.scss';\n\nconst TransferMessages: React.FC = () => {\n    const { setFieldValue, values } = useFormikContext<TInitialTransferFormValues>();\n\n    const { USDExchangeRates, accountLimits, activeWalletExchangeRates } = useTransfer();\n    const language = getInitialLanguage();\n\n    const messages = useTransferMessages({\n        accountLimits,\n        activeWalletExchangeRates,\n        formData: values,\n        fromAccount: values.fromAccount,\n        toAccount: values.toAccount,\n        USDExchangeRates,\n    });\n\n    useEffect(() => {\n        const hasErrorMessage = messages.some(message => message.type === 'error');\n        setFieldValue('isError', hasErrorMessage);\n    }, [messages, setFieldValue]);\n\n    return (\n        <FadedAnimatedList className='wallets-transfer-messages'>\n            {messages.map(({ action, message, type }, idx) => {\n                return (\n                    <WalletAlertMessage key={`${idx}-${type}`} message={message} type={type}>\n                        {action?.buttonLabel && action?.navigateTo && (\n                            <div className='wallets-transfer-messages__action-button'>\n                                <Button borderWidth='sm' isFullWidth size='sm' type='button' variant='contained'>\n                                    <Link\n                                        className='wallets-transfer-messages__link'\n                                        to={\n                                            language === 'EN'\n                                                ? action.navigateTo\n                                                : `${action.navigateTo}?lang=${language}`\n                                        }\n                                        {...(action?.shouldOpenInNewTab && {\n                                            rel: 'noopener noreferrer',\n                                            target: '_blank',\n                                        })}\n                                    >\n                                        {action.buttonLabel}\n                                    </Link>\n                                </Button>\n                            </div>\n                        )}\n                    </WalletAlertMessage>\n                );\n            })}\n        </FadedAnimatedList>\n    );\n};\n\nexport default TransferMessages;\n","import React, { useCallback, useRef } from 'react';\nimport classnames from 'classnames';\nimport { Formik } from 'formik';\nimport { Localize } from '@deriv-com/translations';\nimport { Button, useDevice } from '@deriv-com/ui';\nimport { WalletLoader } from '../../../../../../components';\nimport { useTransfer } from '../../provider';\nimport type { TInitialTransferFormValues } from '../../types';\nimport { TransferFormAmountInput } from '../TransferFormAmountInput';\nimport { TransferFormDropdown } from '../TransferFormDropdown';\nimport { TransferMessages } from '../TransferMessages';\nimport './TransferForm.scss';\n\nconst TransferForm = () => {\n    const { isDesktop } = useDevice();\n    const { activeWallet, hasPlatformStatus, isLoading, requestTransferBetweenAccounts } = useTransfer();\n    const mobileAccountsListRef = useRef<HTMLDivElement | null>(null);\n\n    const initialValues: TInitialTransferFormValues = {\n        activeAmountFieldName: undefined,\n        fromAccount: activeWallet,\n        fromAmount: '',\n        isError: false,\n        lastFocusedField: undefined,\n        toAccount: undefined,\n        toAmount: '',\n    };\n\n    const onSubmit = useCallback(\n        (values: TInitialTransferFormValues) => requestTransferBetweenAccounts(values),\n        [requestTransferBetweenAccounts]\n    );\n\n    if (isLoading) return <WalletLoader />;\n\n    return (\n        <div className='wallets-transfer'>\n            <Formik initialValues={initialValues} onSubmit={onSubmit}>\n                {({ handleSubmit, values }) => {\n                    const { fromAccount, fromAmount, isError, toAccount, toAmount } = values;\n                    const isTransferBtnDisabled =\n                        !Number(fromAmount) ||\n                        !Number(toAmount) ||\n                        isError ||\n                        [fromAccount, toAccount].some(hasPlatformStatus);\n\n                    return (\n                        <form className='wallets-transfer__form' onSubmit={handleSubmit}>\n                            <div className='wallets-transfer__fields'>\n                                <div\n                                    className={classnames('wallets-transfer__fields-section', {\n                                        'wallets-transfer__fields-section--error': isError,\n                                    })}\n                                >\n                                    <TransferFormAmountInput fieldName='fromAmount' />\n                                    <TransferFormDropdown\n                                        fieldName='fromAccount'\n                                        mobileAccountsListRef={mobileAccountsListRef}\n                                    />\n                                </div>\n                                <TransferMessages />\n                                <div\n                                    className={classnames('wallets-transfer__fields-section', {\n                                        'wallets-transfer__fields-section--error': isError,\n                                    })}\n                                >\n                                    <TransferFormAmountInput fieldName='toAmount' />\n                                    <TransferFormDropdown\n                                        fieldName='toAccount'\n                                        mobileAccountsListRef={mobileAccountsListRef}\n                                    />\n                                </div>\n                            </div>\n                            <div className='wallets-transfer__submit-button' data-testid='dt_transfer_form_submit_btn'>\n                                <Button\n                                    borderWidth='sm'\n                                    disabled={isTransferBtnDisabled}\n                                    size={isDesktop ? 'lg' : 'md'}\n                                    textSize={isDesktop ? 'md' : 'sm'}\n                                    type='submit'\n                                >\n                                    <Localize i18n_default_text='Transfer' />\n                                </Button>\n                            </div>\n                        </form>\n                    );\n                }}\n            </Formik>\n            {/* Portal for accounts list in mobile view */}\n            <div className='wallets-transfer__mobile-accounts-list' ref={mobileAccountsListRef} />\n        </div>\n    );\n};\n\nexport default TransferForm;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Localize } from '@deriv-com/translations';\nimport { Text } from '@deriv-com/ui';\nimport { THooks } from '../../types';\nimport './AppCardBadge.scss';\n\ntype TProps = {\n    isDemo: THooks.ActiveWalletAccount['is_virtual'];\n};\n\nconst AppCardBadge: React.FC<TProps> = ({ isDemo }) => {\n    const className = classNames('wallets-app-card-badge', {\n        'wallets-app-card-badge--demo': isDemo,\n        'wallets-app-card-badge--real': !isDemo,\n    });\n\n    const formattedLabel = isDemo ? <Localize i18n_default_text='Demo' /> : <Localize i18n_default_text='Real' />;\n\n    return (\n        <div className={className}>\n            <Text color='white' size='2xs' weight='bold'>\n                {formattedLabel}\n            </Text>\n        </div>\n    );\n};\n\nexport default AppCardBadge;\n","import React from 'react';\nimport { Text } from '@deriv-com/ui';\nimport type { TGenericSizes, THooks } from '../../types';\nimport { AppCardBadge } from '../AppCardBadge';\nimport { WalletGradientBackground } from '../WalletGradientBackground';\nimport { WalletMarketCurrencyIcon } from '../WalletMarketCurrencyIcon';\nimport './AppCard.scss';\n\ntype TProps = {\n    activeWalletCurrency?: THooks.ActiveWalletAccount['currency'];\n    appName?: JSX.Element | string;\n    balance?: JSX.Element | string;\n    cardSize: Extract<TGenericSizes, 'lg' | 'md' | 'sm'>;\n    device: 'desktop' | 'mobile';\n    isDemoWallet?: THooks.ActiveWalletAccount['is_virtual'];\n    marketType?: React.ComponentProps<typeof WalletMarketCurrencyIcon>['marketType'];\n    platform?: React.ComponentProps<typeof WalletMarketCurrencyIcon>['platform'];\n    product?: React.ComponentProps<typeof WalletMarketCurrencyIcon>['product'];\n    walletName?: JSX.Element | string;\n};\n\nconst AppCard: React.FC<TProps> = ({\n    activeWalletCurrency,\n    appName,\n    balance,\n    cardSize = 'md',\n    device = 'desktop',\n    isDemoWallet = false,\n    marketType,\n    platform,\n    product,\n    walletName,\n}) => {\n    return (\n        <div\n            className={`wallets-app-card wallets-app-card--border-radius--${cardSize}`}\n            data-testid='dt_wallets_app_card'\n        >\n            <WalletGradientBackground currency='' hasShine theme='grey'>\n                {cardSize !== 'sm' && (\n                    <div className='wallets-app-card__badge'>\n                        <AppCardBadge isDemo={isDemoWallet} />\n                    </div>\n                )}\n                <div className={`wallets-app-card__content wallets-app-card__content--${device}--${cardSize}`}>\n                    <div className='wallets-app-card__top'>\n                        <WalletMarketCurrencyIcon\n                            currency={activeWalletCurrency ?? ''}\n                            isDemo={isDemoWallet}\n                            marketType={marketType}\n                            platform={platform}\n                            product={product}\n                        />\n                    </div>\n                    {cardSize !== 'sm' && (\n                        <div className='wallets-app-card__bottom'>\n                            <Text size='2xs'>{appName}</Text>\n                            <Text color='less-prominent' size='2xs'>\n                                {walletName}\n                            </Text>\n                            <Text size='sm' weight='bold'>\n                                {balance}\n                            </Text>\n                        </div>\n                    )}\n                </div>\n            </WalletGradientBackground>\n        </div>\n    );\n};\n\nexport default AppCard;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { LegacyArrowLeft2pxIcon, LegacyArrowRight2pxIcon } from '@deriv/quill-icons';\nimport { Localize } from '@deriv-com/translations';\nimport { Button, Text, useDevice } from '@deriv-com/ui';\nimport { AppCard, WalletCard, WalletMoney } from '../../../../../../components';\nimport useIsRtl from '../../../../../../hooks/useIsRtl';\nimport { TPlatforms } from '../../../../../../types';\nimport { useTransfer } from '../../provider';\nimport './TransferReceipt.scss';\n\ntype TReceiptCardProps = {\n    account: NonNullable<ReturnType<typeof useTransfer>['receipt']>['fromAccount'];\n    activeWallet: ReturnType<typeof useTransfer>['activeWallet'];\n    balance: JSX.Element | string;\n};\n\nconst ReceiptCard: React.FC<TReceiptCardProps> = ({ account, activeWallet, balance }) => {\n    const { isDesktop } = useDevice();\n    const isTradingApp = account?.account_category === 'trading';\n    const isWallet = account?.account_category === 'wallet';\n\n    if (isTradingApp)\n        return (\n            <AppCard\n                activeWalletCurrency={activeWallet?.currency}\n                appName={account?.accountName}\n                balance={balance}\n                cardSize='md'\n                device={isDesktop ? 'desktop' : 'mobile'}\n                isDemoWallet={Boolean(activeWallet?.demo_account)}\n                marketType={account?.market_type}\n                platform={account?.account_type as TPlatforms.All}\n                product={account?.product}\n                walletName={activeWallet?.accountName}\n            />\n        );\n\n    if (isWallet)\n        return (\n            <WalletCard\n                balance={balance}\n                currency={account.currency ?? ''}\n                iconSize='md'\n                isDemo={Boolean(account?.demo_account)}\n            />\n        );\n\n    return null;\n};\n\nconst TransferReceipt = () => {\n    const { activeWallet, receipt, resetTransfer } = useTransfer();\n    const { isDesktop } = useDevice();\n    const isRtl = useIsRtl();\n\n    if (!receipt) return null;\n\n    const { feeAmount, fromAccount, fromAmount, toAccount, toAmount } = receipt;\n\n    const isSameCurrency = fromAccount?.currency === toAccount?.currency;\n\n    const feeMessage = feeAmount ? (\n        <Localize\n            i18n_default_text='Transfer fees: {{feeAmount}} {{displayCode}}'\n            values={{\n                displayCode: fromAccount?.currencyConfig?.display_code,\n                feeAmount,\n            }}\n        />\n    ) : (\n        ''\n    );\n\n    return (\n        <div className='wallets-transfer-receipt'>\n            <div className='wallets-transfer-receipt__cards'>\n                <ReceiptCard\n                    account={fromAccount}\n                    activeWallet={activeWallet}\n                    balance={<WalletMoney amount={-fromAmount} currency={fromAccount?.currency} hasSign />}\n                />\n                <div className='wallets-transfer-receipt__arrow-icon'>\n                    {isRtl ? <LegacyArrowLeft2pxIcon iconSize='xs' /> : <LegacyArrowRight2pxIcon iconSize='xs' />}\n                </div>\n                <ReceiptCard\n                    account={toAccount}\n                    activeWallet={activeWallet}\n                    balance={<WalletMoney amount={toAmount} currency={toAccount?.currency} hasSign />}\n                />\n            </div>\n            <div\n                className={classNames('wallets-transfer-receipt__info', {\n                    'wallets-transfer-receipt__info--with-fee': Boolean(receipt?.feeAmount),\n                })}\n            >\n                <div className='wallets-transfer-receipt__amount'>\n                    {isSameCurrency && (\n                        <Text size='xl' weight='bold'>\n                            <WalletMoney amount={fromAmount} currency={fromAccount?.currency} />\n                        </Text>\n                    )}\n                    {!isSameCurrency && (\n                        <div className='wallets-transfer-receipt__amount-conversion'>\n                            <Text as='div' size='xl' weight='bold'>\n                                <WalletMoney amount={fromAmount} currency={fromAccount?.currency} />\n                                {'\\u00A0'}\n                            </Text>\n                            <Text as='div' size='xl' weight='bold'>\n                                {'('}\n                                <WalletMoney amount={toAmount} currency={toAccount?.currency} />\n                                {')'}\n                            </Text>\n                        </div>\n                    )}\n                    {Boolean(feeMessage) && (\n                        <Text color='less-prominent' size='md'>\n                            {feeMessage}\n                        </Text>\n                    )}\n                </div>\n                <Text align='center' size='lg' weight='bold'>\n                    <Localize i18n_default_text='Your transfer is successful!' />\n                </Text>\n            </div>\n            <div className='wallets-transfer-receipt__button'>\n                <Button\n                    borderWidth='sm'\n                    onClick={() => resetTransfer()}\n                    size={isDesktop ? 'lg' : 'md'}\n                    textSize={isDesktop ? 'sm' : 'md'}\n                >\n                    <Localize i18n_default_text='Make a new transfer' />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default TransferReceipt;\n","import React from 'react';\nimport type { THooks } from '../../../../types';\nimport { TransferErrorScreen } from '../../screens/TransferErrorScreen';\nimport { TransferForm, TransferReceipt } from './components';\nimport { TransferProvider, useTransfer } from './provider';\n\ntype TProps = {\n    accounts: THooks.TransferAccount[];\n};\n\nconst TransferModule: React.FC<TProps> = ({ accounts }) => {\n    return (\n        <TransferProvider accounts={accounts}>\n            <Transfer />\n        </TransferProvider>\n    );\n};\n\nconst Transfer: React.FC = () => {\n    const { error, receipt, resetTransfer } = useTransfer();\n    const transferError = error?.error;\n\n    if (transferError) return <TransferErrorScreen error={transferError} resetError={resetTransfer} />;\n\n    if (receipt) return <TransferReceipt />;\n\n    return <TransferForm />;\n};\n\nexport default TransferModule;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Localize } from '@deriv-com/translations';\nimport { Button, Text } from '@deriv-com/ui';\nimport { THooks } from '../../../../types';\n\ntype TGetMessageProps = {\n    currency: string;\n    hasAccountsForTransfer: boolean;\n    hasTransferAccountsWithFunds: boolean;\n    history: ReturnType<typeof useHistory>;\n    isVirtual?: THooks.ActiveWalletAccount['is_virtual'];\n};\n\nconst getMessage = ({\n    currency,\n    hasAccountsForTransfer,\n    hasTransferAccountsWithFunds,\n    history,\n    isVirtual,\n}: TGetMessageProps) => {\n    if (!hasAccountsForTransfer) {\n        const title = isVirtual ? (\n            <Localize i18n_default_text='No trading accounts are available to receive funds' />\n        ) : (\n            <Localize i18n_default_text='No trading accounts or other wallets are available to receive funds' />\n        );\n        const description = isVirtual ? (\n            <Text align='center' size='md'>\n                <Localize i18n_default_text=\"Add a demo trading account in Trader's hub to receive funds from this Wallet to start trading.\" />\n            </Text>\n        ) : (\n            <Text align='center' size='md'>\n                <Localize i18n_default_text=\"Add a trading account or Wallet in Trader's hub to receive funds from this Wallet.\" />\n            </Text>\n        );\n\n        return {\n            actionButton: (\n                <Button borderWidth='sm' onClick={() => history.push('/')} size='lg' textSize='md'>\n                    <Localize i18n_default_text=\"Back to Trader's hub\" />\n                </Button>\n            ),\n            description,\n            title,\n        };\n    }\n\n    if (!hasTransferAccountsWithFunds) {\n        const title = isVirtual ? (\n            <Localize i18n_default_text='No funds in Demo wallet and demo trading accounts' />\n        ) : (\n            <Localize i18n_default_text='No funds in any trading accounts or wallets' />\n        );\n        const description = isVirtual ? (\n            <Text align='center' size='md'>\n                <Localize i18n_default_text='Please reset the balance of your Demo Wallet to make a transfer.' />\n            </Text>\n        ) : (\n            <Text align='center' size='md'>\n                <Localize\n                    i18n_default_text='Please make a deposit to your {{currency}} Wallet to make a transfer.'\n                    values={{ currency }}\n                />\n            </Text>\n        );\n        const locationPathName = `/wallet/${isVirtual ? 'reset-balance' : 'deposit'}` as const;\n        const buttonText = isVirtual ? (\n            <Localize i18n_default_text='Reset balance' />\n        ) : (\n            <Localize i18n_default_text='Deposit' />\n        );\n\n        return {\n            actionButton: (\n                <Button borderWidth='sm' onClick={() => history.push(locationPathName)} size='lg' textSize='md'>\n                    {buttonText}\n                </Button>\n            ),\n            description,\n            title,\n        };\n    }\n};\n\nexport default getMessage;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useActiveWalletAccount } from '@deriv/api-v2';\nimport { ActionScreen } from '@deriv-com/ui';\nimport type { THooks } from '../../../../types';\nimport getMessage from './TransferNotAvailableProvider';\n\ntype TProps = {\n    accounts: THooks.TransferAccount[];\n};\n\nconst TransferNotAvailable: React.FC<React.PropsWithChildren<TProps>> = ({ accounts, children }) => {\n    const history = useHistory();\n    const { data: activeWallet } = useActiveWalletAccount();\n    const hasAccountsForTransfer = accounts.length > 1;\n    const hasTransferAccountsWithFunds = accounts.some(account => Number(account.balance) > 0);\n\n    const state = getMessage({\n        currency: activeWallet?.currency || 'USD',\n        hasAccountsForTransfer,\n        hasTransferAccountsWithFunds,\n        history,\n        isVirtual: activeWallet?.is_virtual,\n    });\n\n    if (state) {\n        return (\n            <ActionScreen\n                actionButtons={state.actionButton}\n                description={state.description}\n                title={state.title}\n                titleSize='xl'\n            />\n        );\n    }\n\n    return <>{children}</>;\n};\n\nexport default TransferNotAvailable;\n","import React from 'react';\nimport { useTransferBetweenAccounts } from '@deriv/api-v2';\nimport { WalletLoader } from '../../../../components';\nimport { TransferModule } from '../../modules';\nimport { TransferNotAvailable } from '../../screens/TransferNotAvailable';\n\nconst WalletTransfer = () => {\n    const { data, isLoading: isTransferAccountsLoading } = useTransferBetweenAccounts();\n\n    if (isTransferAccountsLoading || !data?.accounts) return <WalletLoader />;\n\n    return (\n        <TransferNotAvailable accounts={data.accounts}>\n            <TransferModule accounts={data.accounts} />\n        </TransferNotAvailable>\n    );\n};\n\nexport default WalletTransfer;\n","import React, { ComponentProps, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useActiveWalletAccount } from '@deriv/api-v2';\nimport { TSocketError } from '@deriv/api-v2/types';\nimport { getInitialLanguage, Localize, useTranslations } from '@deriv-com/translations';\nimport { Button } from '@deriv-com/ui';\nimport { WalletsErrorScreen } from '../../../../components';\nimport { CryptoWithdrawalErrorCodes } from '../../../../constants/errorCodes';\n\ntype TProps = {\n    error: TSocketError<'cashier'>['error'];\n    resetError?: VoidFunction;\n    setResendEmail?: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\ntype TErrorContent = {\n    buttonText?: React.ReactNode;\n    buttonVariant?: ComponentProps<typeof Button>['variant'];\n    message: React.ReactNode;\n    onClick?: () => void;\n    title: React.ReactNode;\n};\n\ntype TErrorCodeHandlers = Record<string, TErrorContent>;\n\nconst WithdrawalErrorScreen: React.FC<TProps> = ({ error, resetError, setResendEmail }) => {\n    const history = useHistory();\n    const { data } = useActiveWalletAccount();\n    const { currentLang, localize } = useTranslations();\n    const i18nLanguage = getInitialLanguage();\n    const currency = data?.currency;\n\n    useEffect(() => {\n        // reload when language is switched to show error message for latest WS connection\n        if (currentLang !== i18nLanguage) {\n            window.location.reload();\n        }\n    }, [currentLang, i18nLanguage]);\n\n    const defaultContent: TErrorContent = {\n        buttonText: <Localize i18n_default_text='Refresh page' />,\n        buttonVariant: 'ghost',\n        message: error.message,\n        onClick: () => window.location.reload(),\n        title: <Localize i18n_default_text='Something went wrong' />,\n    };\n\n    const withdrawalErrorCodeHandlers: TErrorCodeHandlers = {\n        [CryptoWithdrawalErrorCodes.InvalidToken]: {\n            ...defaultContent,\n            buttonText: <Localize i18n_default_text='Resend email' />,\n            buttonVariant: 'contained',\n            message: localize('The verification link you used is invalid or expired. Please request for a new one.'),\n            onClick: () => {\n                resetError?.();\n                setResendEmail?.(true);\n            },\n            title: <Localize i18n_default_text='Email verification failed' />,\n        },\n        [CryptoWithdrawalErrorCodes.CryptoInvalidAddress]: {\n            ...defaultContent,\n            onClick: resetError,\n            title: <Localize i18n_default_text='Error' />,\n        },\n        [CryptoWithdrawalErrorCodes.CryptoLimitAgeVerified]: {\n            ...defaultContent,\n            buttonText: <Localize i18n_default_text='Verify identity' />,\n            buttonVariant: 'contained',\n            onClick: () => {\n                // @ts-expect-error the following link is not part of wallets routes config\n                history.push('/account/proof-of-identity');\n            },\n            title: <Localize i18n_default_text='Error' />,\n        },\n        [CryptoWithdrawalErrorCodes.SuspendedCurrency]: {\n            ...defaultContent,\n            buttonText: undefined,\n            message: localize(\n                'Due to system maintenance, withdrawals with your {{currency}} Wallet are unavailable at the moment. Please try again later.',\n                { currency }\n            ),\n            title: (\n                <Localize\n                    i18n_default_text='{{currency}} Wallet withdrawals are temporarily unavailable'\n                    values={{ currency }}\n                />\n            ),\n        },\n        [CryptoWithdrawalErrorCodes.SuspendedWithdrawal]: {\n            ...defaultContent,\n            buttonText: undefined,\n            message: localize(\n                'Due to system maintenance, withdrawals with your {{currency}} Wallet are unavailable at the moment. Please try again later.',\n                { currency }\n            ),\n            title: (\n                <Localize\n                    i18n_default_text='{{currency}} Wallet withdrawals are temporarily unavailable'\n                    values={{ currency }}\n                />\n            ),\n        },\n        [CryptoWithdrawalErrorCodes.CryptoConnectionError]: {\n            ...defaultContent,\n            buttonText: undefined,\n            title: <Localize i18n_default_text='Maintenance in progress' />,\n        },\n    };\n\n    const content = withdrawalErrorCodeHandlers[error.code] || defaultContent;\n\n    return <WalletsErrorScreen {...content} />;\n};\n\nexport default WithdrawalErrorScreen;\n","import React from 'react';\nimport { Localize } from '@deriv-com/translations';\nimport { InlineMessage, Text } from '@deriv-com/ui';\nimport './WithdrawalCryptoDisclaimer.scss';\n\nconst WithdrawalCryptoDisclaimer = () => (\n    <InlineMessage className='wallets-withdrawal-crypto-disclaimer' iconPosition='top' variant='warning'>\n        <ul className='wallets-withdrawal-crypto-disclaimer__items'>\n            <Text align='start' as='li' className='wallets-withdrawal-crypto-disclaimer__text'>\n                <Localize i18n_default_text='Do not enter an address linked to an initial coin offering (ICO) purchase or crowdsale. If you do, the initial coin offering (ICO) tokens will not be credited into your account.' />\n            </Text>\n            <Text align='start' as='li' className='wallets-withdrawal-crypto-disclaimer__text'>\n                <Localize i18n_default_text=\"Please note that your maximum and minimum withdrawal limits aren't fixed. They change due to the high volatility of cryptocurrency.\" />\n            </Text>\n        </ul>\n    </InlineMessage>\n);\n\nexport default WithdrawalCryptoDisclaimer;\n","import React, { createContext, useContext, useEffect, useState } from 'react';\nimport {\n    useAccountLimits,\n    useActiveWalletAccount,\n    useCryptoConfig,\n    useCryptoEstimations,\n    useCryptoWithdrawal,\n    useCurrencyConfig,\n    useExchangeRateSubscription,\n    usePOA,\n    usePOI,\n} from '@deriv/api-v2';\nimport { TSocketError } from '@deriv/api-v2/types';\nimport { THooks } from '../../../../../types';\nimport { TWithdrawalReceipt } from '../types';\n\nexport type TWithdrawalCryptoContext = {\n    accountLimits: ReturnType<typeof useAccountLimits>['data'];\n    activeWallet: ReturnType<typeof useActiveWalletAccount>['data'];\n    countDownEstimationFee: ReturnType<typeof useCryptoEstimations>['countDown'];\n    cryptoConfig: ReturnType<typeof useCryptoConfig>['data'];\n    cryptoEstimationsError: ReturnType<typeof useCryptoEstimations>['error'];\n    cryptoEstimationsFee: ReturnType<typeof useCryptoEstimations>['cryptoEstimationsFee'];\n    cryptoEstimationsFeeUniqueId: ReturnType<typeof useCryptoEstimations>['cryptoEstimationsFeeUniqueId'];\n    error: TSocketError<'cashier'>['error'] | undefined;\n    exchangeRates: Partial<ReturnType<typeof useExchangeRateSubscription>>;\n    fractionalDigits: {\n        crypto?: number;\n        fiat?: number;\n    };\n    getConvertedCryptoAmount: (fiatInput: number | string) => string;\n    getConvertedFiatAmount: (cryptoInput: number | string) => string;\n    getCryptoEstimations: ReturnType<typeof useCryptoEstimations>['getCryptoEstimations'];\n    getCurrencyConfig: ReturnType<typeof useCurrencyConfig>['getConfig'];\n    isClientVerified: boolean | undefined;\n    isLoading: boolean;\n    isLoadingCryptoEstimationFee: ReturnType<typeof useCryptoEstimations>['isLoading'];\n    isWithdrawalSuccess: ReturnType<typeof useCryptoWithdrawal>['isSuccess'];\n    requestCryptoWithdrawal: (values: Parameters<THooks.CryptoWithdrawal>[0]) => void;\n    serverTime: ReturnType<typeof useCryptoEstimations>['serverTime'];\n    setCurrencyCode: ReturnType<typeof useCryptoEstimations>['setCurrencyCode'];\n    setError: React.Dispatch<\n        React.SetStateAction<\n            | {\n                  code: string;\n                  message: string;\n              }\n            | undefined\n        >\n    >;\n    unsubscribeCryptoEstimations: ReturnType<typeof useCryptoEstimations>['unsubscribeCryptoEstimations'];\n    withdrawalReceipt: TWithdrawalReceipt;\n};\n\ntype TWithdrawalCryptoContextProps = {\n    verificationCode: string;\n};\n\nconst WithdrawalCryptoContext = createContext<TWithdrawalCryptoContext | null>(null);\n\nexport const useWithdrawalCryptoContext = () => {\n    const context = useContext(WithdrawalCryptoContext);\n\n    if (!context)\n        throw new Error(\n            'useWithdrawalCryptoContext() must be called within a component wrapped in WithdrawalCryptoProvider.'\n        );\n\n    return context;\n};\n\nconst WithdrawalCryptoProvider: React.FC<React.PropsWithChildren<TWithdrawalCryptoContextProps>> = ({\n    children,\n    verificationCode,\n}) => {\n    const { data: accountLimits } = useAccountLimits();\n    const { data: activeWallet } = useActiveWalletAccount();\n    const { data: cryptoConfig, error: cryptoConfigError, isLoading: isCryptoConfigLoading } = useCryptoConfig();\n    const { data: poaStatus } = usePOA();\n    const { data: poiStatus } = usePOI();\n    const { isSuccess: isWithdrawalSuccess, mutateAsync } = useCryptoWithdrawal();\n    const {\n        countDown: countDownEstimationFee,\n        cryptoEstimationsFee,\n        cryptoEstimationsFeeUniqueId,\n        error: cryptoEstimationsError,\n        getCryptoEstimations,\n        isLoading: isLoadingCryptoEstimationFee,\n        serverTime,\n        setCurrencyCode,\n        unsubscribeCryptoEstimations,\n    } = useCryptoEstimations();\n    const { getConfig } = useCurrencyConfig();\n    const [error, setError] = useState<TSocketError<'cashier'>['error'] | undefined>();\n    const [isTokenValidationLoading, setIsTokenValidationLoading] = useState(true);\n    const [withdrawalReceipt, setWithdrawalReceipt] = useState<TWithdrawalReceipt>({});\n    const { data: exchangeRates, subscribe, unsubscribe } = useExchangeRateSubscription();\n    const FRACTIONAL_DIGITS_CRYPTO = activeWallet?.currency_config?.fractional_digits;\n    const FRACTIONAL_DIGITS_FIAT = getConfig('USD')?.fractional_digits;\n\n    useEffect(() => {\n        if (activeWallet?.currency)\n            subscribe({\n                base_currency: 'USD',\n                loginid: activeWallet.loginid,\n                target_currency: activeWallet.currency,\n            });\n        return () => unsubscribe();\n    }, [activeWallet?.currency, activeWallet?.loginid, subscribe, unsubscribe]);\n\n    useEffect(() => {\n        if (cryptoConfigError) {\n            setError(cryptoConfigError?.error);\n        }\n    }, [cryptoConfigError]);\n\n    useEffect(() => {\n        if (verificationCode) {\n            mutateAsync({ dry_run: 1, verification_code: verificationCode })\n                .catch((response: TSocketError<'cashier'> | null) => {\n                    if (response?.error?.code === 'InvalidToken') setError(response?.error);\n                })\n                .finally(() => setIsTokenValidationLoading(false));\n        }\n    }, [mutateAsync, setError, verificationCode]);\n\n    const getClientVerificationStatus = () => {\n        const isVerified = poaStatus?.is_verified && poiStatus?.is_verified;\n        return isVerified;\n    };\n\n    const getConvertedCryptoAmount = (fiatInput: number | string) => {\n        const value = typeof fiatInput === 'string' ? parseFloat(fiatInput) : fiatInput;\n        const convertedValue =\n            !Number.isNaN(value) && exchangeRates?.rates && activeWallet?.currency\n                ? (value * exchangeRates?.rates[activeWallet?.currency]).toFixed(FRACTIONAL_DIGITS_CRYPTO)\n                : '';\n        return convertedValue;\n    };\n\n    const getConvertedFiatAmount = (cryptoInput: number | string) => {\n        const value = typeof cryptoInput === 'string' ? parseFloat(cryptoInput) : cryptoInput;\n        const convertedValue =\n            !Number.isNaN(value) && exchangeRates?.rates && activeWallet?.currency\n                ? (value / exchangeRates?.rates[activeWallet?.currency]).toFixed(FRACTIONAL_DIGITS_FIAT)\n                : '';\n\n        return convertedValue;\n    };\n\n    const requestCryptoWithdrawal = (values: Parameters<THooks.CryptoWithdrawal>[0]) => {\n        // eslint-disable-next-line camelcase\n        const { address, amount, estimated_fee_unique_id: estimatedFeeUniqueId } = values;\n        mutateAsync({\n            address,\n            amount,\n            estimated_fee_unique_id: estimatedFeeUniqueId,\n            verification_code: verificationCode,\n        })\n            .then(() => {\n                setWithdrawalReceipt({\n                    address,\n                    amount: Number(amount),\n                    amountReceived: estimatedFeeUniqueId ? Number(amount) - Number(cryptoEstimationsFee) : amount,\n                    currency: activeWallet?.currency,\n                    landingCompany: activeWallet?.landing_company_name,\n                    transactionFee: estimatedFeeUniqueId ? Number(cryptoEstimationsFee) : undefined,\n                });\n            })\n            .catch((error: TSocketError<'cashier'>) => {\n                setError(error.error);\n            });\n    };\n\n    const value = {\n        accountLimits,\n        activeWallet,\n        countDownEstimationFee,\n        cryptoConfig,\n        cryptoEstimationsError,\n        cryptoEstimationsFee,\n        cryptoEstimationsFeeUniqueId,\n        error,\n        exchangeRates: {\n            data: exchangeRates,\n            subscribe,\n            unsubscribe,\n        },\n        fractionalDigits: {\n            crypto: FRACTIONAL_DIGITS_CRYPTO,\n            fiat: FRACTIONAL_DIGITS_FIAT,\n        },\n        getConvertedCryptoAmount,\n        getConvertedFiatAmount,\n        getCryptoEstimations,\n        getCurrencyConfig: getConfig,\n        isClientVerified: getClientVerificationStatus(),\n        isLoading: isCryptoConfigLoading || isTokenValidationLoading,\n        isLoadingCryptoEstimationFee,\n        isWithdrawalSuccess,\n        requestCryptoWithdrawal,\n        serverTime,\n        setCurrencyCode,\n        setError,\n        unsubscribeCryptoEstimations,\n        withdrawalReceipt,\n    };\n\n    return <WithdrawalCryptoContext.Provider value={value}>{children}</WithdrawalCryptoContext.Provider>;\n};\n\nexport default WithdrawalCryptoProvider;\n","import { useTranslations } from '@deriv-com/translations';\nimport { TWithdrawalCryptoContext } from '../provider';\n\nconst helperMessageMapper = (localize: ReturnType<typeof useTranslations>['localize']) => ({\n    balanceLessThanMinWithdrawalLimit: (balance: string, min: string) =>\n        localize(\n            'Your balance ({{balance}}) is less than the current minimum withdrawal allowed ({{min}}). Please top up your wallet to continue with your withdrawal.',\n            { balance, min }\n        ),\n    decimalPlacesExceeded: (limit: number) => localize('Up to {{limit}} decimal places are allowed.', { limit }),\n    fieldRequired: localize('This field is required.'),\n    insufficientFunds: localize('Insufficient funds'),\n    invalidInput: localize('Should be a valid number.'),\n    withdrawalLimitError: (min: string, max: string) => {\n        return localize('The current allowed withdraw amount is {{min}} to {{max}}.', { max, min });\n    },\n});\n\nconst validateCryptoAddress = (localize: ReturnType<typeof useTranslations>['localize'], address?: string) => {\n    const MIN_ADDRESS_LENGTH = 25;\n    const MAX_ADDRESS_LENGTH = 64;\n\n    if (!address) return helperMessageMapper(localize).fieldRequired;\n\n    if (address.length < MIN_ADDRESS_LENGTH || address.length > MAX_ADDRESS_LENGTH) {\n        return localize('Your wallet address should have 25 to 64 characters.');\n    }\n\n    return undefined;\n};\n\nconst checkIfInvalidInput = (\n    fractionalDigits: TWithdrawalCryptoContext['fractionalDigits']['crypto' | 'fiat'],\n    localize: ReturnType<typeof useTranslations>['localize'],\n    value: string\n) => {\n    if (!fractionalDigits) return;\n\n    const splitValues = value.split('.');\n    const numberOfDecimalsPoints = splitValues.length - 1;\n    const integerPart = splitValues[0];\n    const fractionalPart = splitValues[1];\n\n    const isIntegerPartNumberRegex = new RegExp(/^\\d+$/);\n    const isFractionalPartNumberRegex = new RegExp(/^\\d+$/);\n    const fractionalPartPrecisionRegex = new RegExp(`^\\\\d{1,${fractionalDigits}}$`);\n\n    if (\n        (integerPart && !isIntegerPartNumberRegex.exec(integerPart)) ||\n        numberOfDecimalsPoints > 1 ||\n        (numberOfDecimalsPoints === 1 && !fractionalPart) ||\n        (fractionalPart && !isFractionalPartNumberRegex.exec(fractionalPart))\n    ) {\n        return helperMessageMapper(localize).invalidInput;\n    }\n\n    if (fractionalPart && !fractionalPartPrecisionRegex.exec(fractionalPart))\n        return helperMessageMapper(localize).decimalPlacesExceeded(fractionalDigits);\n};\n\nconst validateCryptoInput = (\n    activeWallet: {\n        balance: number;\n        currency: string;\n        displayBalance: string;\n    },\n    fractionalDigits: TWithdrawalCryptoContext['fractionalDigits'],\n    isClientVerified: TWithdrawalCryptoContext['isClientVerified'],\n    localize: ReturnType<typeof useTranslations>['localize'],\n    remainder: number,\n    value: string,\n    minimumWithdrawal?: number\n) => {\n    if (!activeWallet?.balance || !activeWallet?.currency || !fractionalDigits.crypto) return;\n\n    const isInvalidInput = checkIfInvalidInput(fractionalDigits.crypto, localize, value);\n\n    if (isInvalidInput) return isInvalidInput;\n\n    const amount = parseFloat(value);\n\n    if (amount > activeWallet.balance) return helperMessageMapper(localize).insufficientFunds;\n\n    const MIN_WITHDRAWAL_AMOUNT = activeWallet.currency === 'XRP' ? Math.pow(10, -fractionalDigits) : minimumWithdrawal;\n\n    if (MIN_WITHDRAWAL_AMOUNT && activeWallet.balance < MIN_WITHDRAWAL_AMOUNT) {\n        return helperMessageMapper(localize).balanceLessThanMinWithdrawalLimit(\n            activeWallet.displayBalance,\n            `${MIN_WITHDRAWAL_AMOUNT.toFixed(fractionalDigits.crypto)} ${activeWallet.currency}`\n        );\n    }\n\n    const MAX_WITHDRAWAL_AMOUNT =\n        !isClientVerified && remainder < activeWallet.balance ? remainder : activeWallet.balance;\n\n    if (MIN_WITHDRAWAL_AMOUNT && (amount < MIN_WITHDRAWAL_AMOUNT || amount > MAX_WITHDRAWAL_AMOUNT)) {\n        return helperMessageMapper(localize).withdrawalLimitError(\n            MIN_WITHDRAWAL_AMOUNT.toFixed(fractionalDigits.crypto),\n            `${MAX_WITHDRAWAL_AMOUNT.toFixed(fractionalDigits.crypto)} ${activeWallet.currency}`\n        );\n    }\n};\n\nconst validateFiatInput = (\n    fractionalDigits: TWithdrawalCryptoContext['fractionalDigits'],\n    localize: ReturnType<typeof useTranslations>['localize'],\n    value: string\n) => {\n    if (!value.length || !fractionalDigits.fiat) return;\n\n    const isInvalidInput = checkIfInvalidInput(fractionalDigits.fiat, localize, value);\n    if (isInvalidInput) return isInvalidInput;\n};\n\nexport { validateCryptoAddress, validateCryptoInput, validateFiatInput };\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Field, FieldProps, useFormikContext } from 'formik';\nimport { displayMoney } from '@deriv/api-v2/src/utils';\nimport { LegacyArrowLeft2pxIcon, LegacyArrowRight2pxIcon } from '@deriv/quill-icons';\nimport { useTranslations } from '@deriv-com/translations';\nimport { WalletTextField } from '../../../../../../../../components';\nimport useAllBalanceSubscription from '../../../../../../../../hooks/useAllBalanceSubscription';\nimport useIsRtl from '../../../../../../../../hooks/useIsRtl';\nimport { useWithdrawalCryptoContext } from '../../../../provider';\nimport type { TWithdrawalForm } from '../../../../types';\nimport { validateCryptoInput, validateFiatInput } from '../../../../utils';\nimport './WithdrawalCryptoAmountConverter.scss';\n\nconst WithdrawalCryptoAmountConverter: React.FC = () => {\n    const {\n        accountLimits,\n        activeWallet,\n        cryptoConfig,\n        fractionalDigits,\n        getConvertedCryptoAmount,\n        getConvertedFiatAmount,\n        isClientVerified,\n    } = useWithdrawalCryptoContext();\n    const isRtl = useIsRtl();\n    const { localize } = useTranslations();\n\n    const [isCryptoInputActive, setIsCryptoInputActive] = useState(true);\n    const { errors, setValues } = useFormikContext<TWithdrawalForm>();\n    const { data: balanceData } = useAllBalanceSubscription();\n    const balance = balanceData?.[activeWallet?.loginid ?? '']?.balance ?? 0;\n    const displayBalance = displayMoney(balance, activeWallet?.currency, {\n        fractional_digits: activeWallet?.currency_config?.fractional_digits,\n    });\n\n    const onChangeCryptoInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const convertedValue = !validateCryptoInput(\n            { balance, currency: activeWallet?.currency ?? '', displayBalance },\n            fractionalDigits,\n            isClientVerified,\n            localize,\n            accountLimits?.remainder ?? 0,\n            e.target.value,\n            cryptoConfig?.minimum_withdrawal\n        )\n            ? getConvertedFiatAmount(e.target.value)\n            : '';\n\n        setValues(values => ({\n            ...values,\n            cryptoAmount: e.target.value,\n            fiatAmount: convertedValue,\n        }));\n    };\n\n    const onChangeFiatInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const convertedValue = !validateFiatInput(fractionalDigits, localize, e.target.value)\n            ? getConvertedCryptoAmount(e.target.value)\n            : '';\n\n        setValues(values => ({\n            ...values,\n            cryptoAmount: convertedValue,\n            fiatAmount: e.target.value,\n        }));\n    };\n\n    return (\n        <div className='wallets-withdrawal-crypto-amount-converter'>\n            <Field\n                name='cryptoAmount'\n                validate={(value: string) =>\n                    validateCryptoInput(\n                        { balance, currency: activeWallet?.currency ?? '', displayBalance },\n                        fractionalDigits,\n                        isClientVerified,\n                        localize,\n                        accountLimits?.remainder ?? 0,\n                        value,\n                        cryptoConfig?.minimum_withdrawal\n                    )\n                }\n            >\n                {({ field }: FieldProps<string>) => (\n                    <WalletTextField\n                        {...field}\n                        data-testid='dt_withdrawal_crypto_amount_input'\n                        errorMessage={errors.cryptoAmount}\n                        isInvalid={Boolean(errors.cryptoAmount)}\n                        label={localize('Amount ({{currency}})', { currency: activeWallet?.currency })}\n                        onChange={onChangeCryptoInput}\n                        onFocus={() => setIsCryptoInputActive(true)}\n                        showMessage\n                    />\n                )}\n            </Field>\n            <div\n                className={classNames('wallets-withdrawal-crypto-amount-converter__arrow', {\n                    'wallets-withdrawal-crypto-amount-converter__arrow--inverted': !isCryptoInputActive,\n                })}\n                data-testid='dt_withdrawal_crypto_amount_converter_arrow'\n            >\n                {isRtl ? <LegacyArrowLeft2pxIcon iconSize='xs' /> : <LegacyArrowRight2pxIcon iconSize='xs' />}\n            </div>\n            <Field name='fiatAmount' validate={(value: string) => validateFiatInput(fractionalDigits, localize, value)}>\n                {({ field }: FieldProps<string>) => (\n                    <WalletTextField\n                        {...field}\n                        data-testid='dt_withdrawal_fiat_amount_input'\n                        errorMessage={errors.fiatAmount}\n                        isInvalid={Boolean(errors.fiatAmount)}\n                        label={localize('Amount (USD)')}\n                        message={localize('Approximate value')}\n                        onChange={onChangeFiatInput}\n                        onFocus={() => setIsCryptoInputActive(false)}\n                        showMessage\n                    />\n                )}\n            </Field>\n        </div>\n    );\n};\n\nexport default WithdrawalCryptoAmountConverter;\n","import React from 'react';\nimport { Text } from '@deriv-com/ui';\nimport './WalletsPercentageSelector.scss';\n\ntype TWalletsPercentageSelectorBlock = {\n    fillPercentage: number;\n    label: string;\n    onClick: VoidFunction;\n};\n\nconst WalletsPercentageSelectorBlock = ({ fillPercentage, label, onClick }: TWalletsPercentageSelectorBlock) => {\n    return (\n        <div className='wallets-percentage-selector-block-container'>\n            <Text color='prominent' size='xs'>\n                {label}\n            </Text>\n            <div className='wallets-percentage-selector-block' onClick={onClick}>\n                <div className='wallets-percentage-selector-block__fill' style={{ width: `${fillPercentage}%` }} />\n            </div>\n        </div>\n    );\n};\n\nexport default WalletsPercentageSelectorBlock;\n","import React, { useCallback, useMemo } from 'react';\nimport { useTranslations } from '@deriv-com/translations';\nimport WalletsPercentageSelectorBlock from './WalletsPercentageSelectorBlock';\nimport './WalletsPercentageSelector.scss';\n\nconst percentageBlockCount = 4;\nconst percentageBlockSize = 100 / percentageBlockCount;\n\nconst percentageSelectorOptions = (localize: ReturnType<typeof useTranslations>['localize']) =>\n    [...Array(percentageBlockCount).keys()].map(index => ({\n        label: index + 1 === percentageBlockCount ? localize('All') : `${((index + 1) * 100) / percentageBlockCount}%`,\n        percentage: ((index + 1) * 100) / percentageBlockCount,\n    }));\n\ntype TWalletsPercentageSelector = {\n    amount: number;\n    balance: number;\n    onChangePercentage: (percentage: number) => void;\n};\n\nconst WalletsPercentageSelector = ({ amount, balance, onChangePercentage }: TWalletsPercentageSelector) => {\n    const balancePercentage = useMemo(() => (balance > 0 ? (amount * 100) / balance : 0), [amount, balance]);\n    const { localize } = useTranslations();\n\n    const getBlockFillPercentage = useCallback(\n        (blockPercentage: number) => {\n            if (balancePercentage >= blockPercentage) return 100;\n            if (balancePercentage < blockPercentage - percentageBlockSize) return 0;\n            return ((balancePercentage - (blockPercentage - percentageBlockSize)) * 100) / percentageBlockSize;\n        },\n        [balancePercentage]\n    );\n\n    return (\n        <div className='wallets-percentage-selector'>\n            {percentageSelectorOptions(localize).map((option, index) => (\n                <WalletsPercentageSelectorBlock\n                    fillPercentage={getBlockFillPercentage(option.percentage)}\n                    key={`wallet-percentage-selector__${index}__${option.percentage}`}\n                    label={option.label}\n                    onClick={() => onChangePercentage(option.percentage)}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default WalletsPercentageSelector;\n","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { displayMoney } from '@deriv/api-v2/src/utils';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { Text } from '@deriv-com/ui';\nimport { WalletsPercentageSelector } from '../../../../../../../../components';\nimport useAllBalanceSubscription from '../../../../../../../../hooks/useAllBalanceSubscription';\nimport { useWithdrawalCryptoContext } from '../../../../provider';\nimport { TWithdrawalForm } from '../../../../types';\nimport { validateCryptoInput, validateFiatInput } from '../../../../utils';\nimport './WithdrawalCryptoPercentageSelector.scss';\n\nconst WithdrawalCryptoPercentageSelector: React.FC = () => {\n    const { setValues, values } = useFormikContext<TWithdrawalForm>();\n    const { accountLimits, activeWallet, cryptoConfig, fractionalDigits, getConvertedFiatAmount, isClientVerified } =\n        useWithdrawalCryptoContext();\n    const { localize } = useTranslations();\n\n    const { data: balanceData } = useAllBalanceSubscription();\n    const activeWalletBalance = balanceData?.[activeWallet?.loginid ?? '']?.balance ?? 0;\n    const activeWalletDisplayBalance = displayMoney(\n        balanceData?.[activeWallet?.loginid ?? '']?.balance,\n        activeWallet?.currency,\n        {\n            fractional_digits: activeWallet?.currency_config?.fractional_digits,\n        }\n    );\n\n    const getPercentageMessage = (value: string) => {\n        const amount = parseFloat(value);\n        if (!activeWalletBalance || !activeWalletDisplayBalance) return;\n\n        if (amount <= activeWalletBalance) {\n            const percentage = Math.round((amount * 100) / activeWalletBalance);\n            return (\n                <Localize\n                    i18n_default_text='{{percentage}}% of available balance ({{activeWalletDisplayBalance}})'\n                    values={{ activeWalletDisplayBalance, percentage }}\n                />\n            );\n        }\n    };\n\n    const isValidInput =\n        !validateCryptoInput(\n            {\n                balance: activeWalletBalance,\n                currency: activeWallet?.currency ?? '',\n                displayBalance: activeWalletDisplayBalance,\n            },\n            fractionalDigits,\n            isClientVerified,\n            localize,\n            accountLimits?.remainder ?? 0,\n            values.cryptoAmount,\n            cryptoConfig?.minimum_withdrawal\n        ) && !validateFiatInput(fractionalDigits, localize, values.fiatAmount);\n\n    return (\n        <div className='wallets-withdrawal-crypto-percentage__selector'>\n            <WalletsPercentageSelector\n                amount={\n                    activeWalletBalance &&\n                    !Number.isNaN(parseFloat(values.cryptoAmount)) &&\n                    parseFloat(values.cryptoAmount) <= activeWalletBalance\n                        ? parseFloat(values.cryptoAmount)\n                        : 0\n                }\n                balance={activeWalletBalance ?? 0}\n                onChangePercentage={percentage => {\n                    if (activeWalletBalance) {\n                        const fraction = percentage / 100;\n                        const cryptoAmount = (activeWalletBalance * fraction).toFixed(fractionalDigits.crypto);\n                        const fiatAmount = !validateCryptoInput(\n                            {\n                                balance: activeWalletBalance,\n                                currency: activeWallet?.currency ?? '',\n                                displayBalance: activeWalletDisplayBalance,\n                            },\n                            fractionalDigits,\n                            isClientVerified,\n                            localize,\n                            accountLimits?.remainder ?? 0,\n                            cryptoAmount,\n                            cryptoConfig?.minimum_withdrawal\n                        )\n                            ? getConvertedFiatAmount(cryptoAmount)\n                            : '';\n\n                        return setValues({\n                            ...values,\n                            cryptoAmount,\n                            fiatAmount,\n                        });\n                    }\n                }}\n            />\n            <div className='wallets-withdrawal-crypto-percentage__message'>\n                <Text color='less-prominent' size='xs'>\n                    {isValidInput && getPercentageMessage(values.cryptoAmount)}\n                </Text>\n            </div>\n        </div>\n    );\n};\n\nexport default WithdrawalCryptoPercentageSelector;\n","import React from 'react';\nimport './WalletsPriorityCryptoWithdrawLoader.scss';\n\nconst WalletsPriorityCryptoWithdrawLoader = () => {\n    return (\n        <div className='wallets-priority-crypto-withdrawal' data-testid='wallets_priority_crypto_withdrawal_loader'>\n            <div className='wallets-skeleton wallets-priority-crypto-withdrawal-div' />\n            <div className='wallets-skeleton wallets-priority-crypto-withdrawal-div' />\n            <hr className='wallets-priority-crypto-withdrawal-divider' />\n            <div className='wallets-skeleton wallets-priority-crypto-withdrawal-div' />\n        </div>\n    );\n};\n\nexport default WalletsPriorityCryptoWithdrawLoader;\n","import React from 'react';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { Text, Tooltip } from '@deriv-com/ui';\nimport { useWithdrawalCryptoContext } from '../../../../provider';\nimport './WithdrawalCryptoPriorityFeeInfo.scss';\n\nconst WithdrawalCryptoPriorityFeeInfo = ({ cryptoAmount }: { cryptoAmount: string }) => {\n    const { activeWallet, countDownEstimationFee, cryptoEstimationsFee, fractionalDigits, serverTime } =\n        useWithdrawalCryptoContext();\n    const { localize } = useTranslations();\n\n    return (\n        <div className='wallets-withdrawal-crypto-form__priority-withdrawal-info'>\n            <div className='wallets-withdrawal-crypto-form__priority-withdrawal-info--flex'>\n                <Text as='div' size='sm'>\n                    <Localize i18n_default_text='Withdrawal amount:' />\n                </Text>\n                <Text as='div' size='sm'>\n                    {Number(cryptoAmount).toFixed(fractionalDigits.crypto as number)} {activeWallet?.currency}\n                </Text>\n            </div>\n            <div className='wallets-withdrawal-crypto-form__priority-withdrawal-info--flex'>\n                <Text as='div' size='sm'>\n                    <Localize i18n_default_text='Transaction fee' />\n                    <Text as='span' size='sm' weight='light'>\n                        <Localize\n                            i18n_default_text='({{countDownEstimationFee}}s)'\n                            values={{ countDownEstimationFee }}\n                        />\n                    </Text>\n                    :\n                </Text>\n                <Tooltip\n                    as='div'\n                    tooltipContent={localize('Fee calculated at {{serverTime}} GMT', { serverTime })}\n                    tooltipPosition='top'\n                >\n                    <span className='wallets-withdrawal-crypto-form-underline'>\n                        <Text as='div' size='sm'>\n                            {cryptoEstimationsFee.toFixed(fractionalDigits.crypto as number)} {activeWallet?.currency}\n                        </Text>\n                    </span>\n                </Tooltip>\n            </div>\n            <hr className='wallets-withdrawal-crypto-form__priority-withdrawal-info-divider' />\n            <div className='wallets-withdrawal-crypto-form__priority-withdrawal-info--flex'>\n                <Text as='div' size='sm'>\n                    <Localize i18n_default_text='Amount received:' />\n                </Text>\n                <Text as='div' size='sm' weight='bold'>\n                    {Number(cryptoAmount) > 0\n                        ? (\n                              parseFloat(Number(cryptoAmount).toFixed(fractionalDigits.crypto as number)) -\n                              Number(cryptoEstimationsFee)\n                          ).toFixed(fractionalDigits.crypto as number)\n                        : Number(cryptoAmount).toFixed(fractionalDigits.crypto as number)}{' '}\n                    {activeWallet?.currency}\n                </Text>\n            </div>\n        </div>\n    );\n};\n\nexport default WithdrawalCryptoPriorityFeeInfo;\n","import React, { useEffect } from 'react';\nimport { useFormikContext } from 'formik';\nimport { LegacyInfo1pxIcon } from '@deriv/quill-icons';\nimport { useTranslations } from '@deriv-com/translations';\nimport { Checkbox, Tooltip } from '@deriv-com/ui';\nimport { WalletsPriorityCryptoWithdrawLoader } from '../../../../../../../../components';\nimport { useWithdrawalCryptoContext } from '../../../../provider';\nimport { WithdrawalCryptoPriorityFeeInfo } from '../WithdrawalCryptoPriorityFeeInfo';\nimport './WithdrawalCryptoPriority.scss';\n\nconst WithdrawalCryptoPriority = () => {\n    const { localize } = useTranslations();\n\n    const { handleChange, values } = useFormikContext<{\n        cryptoAmount: string;\n        priorityWithdrawal: boolean;\n    }>();\n\n    const {\n        activeWallet,\n        cryptoEstimationsError,\n        getCryptoEstimations,\n        isLoadingCryptoEstimationFee,\n        setCurrencyCode,\n        setError,\n        unsubscribeCryptoEstimations,\n    } = useWithdrawalCryptoContext();\n\n    useEffect(() => {\n        if (cryptoEstimationsError) {\n            setError(cryptoEstimationsError);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cryptoEstimationsError]);\n\n    useEffect(() => {\n        return () => {\n            unsubscribeCryptoEstimations();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <React.Fragment>\n            <div className='wallets-crypto-form-checkbox'>\n                <Checkbox\n                    checked={values.priorityWithdrawal}\n                    label={localize('Priority withdrawal')}\n                    name='priorityWithdrawal'\n                    onChange={e => {\n                        if (!values.priorityWithdrawal) {\n                            setCurrencyCode(activeWallet?.currency ?? '');\n                            getCryptoEstimations({\n                                payload: {\n                                    currency_code: activeWallet?.currency ?? '',\n                                },\n                            });\n                        }\n                        handleChange(e);\n                    }}\n                />\n                <Tooltip\n                    as='div'\n                    tooltipContent={localize(\n                        'Pay a small fee to prioritise your withdrawal, this fee will be deducted from the withdrawal amount.'\n                    )}\n                    tooltipPosition='top'\n                >\n                    <LegacyInfo1pxIcon width={16} />\n                </Tooltip>\n            </div>\n            {isLoadingCryptoEstimationFee && <WalletsPriorityCryptoWithdrawLoader />}\n            {!isLoadingCryptoEstimationFee && values.priorityWithdrawal && (\n                <WithdrawalCryptoPriorityFeeInfo cryptoAmount={values.cryptoAmount} />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default WithdrawalCryptoPriority;\n","import React from 'react';\nimport { Field, FieldProps, Formik } from 'formik';\nimport { useGrowthbookIsOn } from '@deriv/api-v2';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { Button } from '@deriv-com/ui';\nimport { WalletTextField } from '../../../../../../components';\nimport { useWithdrawalCryptoContext } from '../../provider';\nimport { validateCryptoAddress } from '../../utils';\nimport { WithdrawalCryptoAmountConverter } from './components/WithdrawalCryptoAmountConverter';\nimport { WithdrawalCryptoPercentageSelector } from './components/WithdrawalCryptoPercentageSelector';\nimport { WithdrawalCryptoPriority } from './components/WithdrawalCryptoPriority';\nimport './WithdrawalCryptoForm.scss';\n\nconst WithdrawalCryptoForm: React.FC = () => {\n    const { activeWallet, cryptoEstimationsFeeUniqueId, fractionalDigits, requestCryptoWithdrawal } =\n        useWithdrawalCryptoContext();\n    const { localize } = useTranslations();\n\n    const [isPriorityCryptoWithdrawalEnabled] = useGrowthbookIsOn({\n        featureFlag: 'priority_crypto_withdrawal',\n    });\n\n    return (\n        <Formik\n            initialValues={{\n                cryptoAddress: '',\n                cryptoAmount: '',\n                fiatAmount: '',\n                priorityWithdrawal: false,\n            }}\n            onSubmit={values =>\n                requestCryptoWithdrawal({\n                    address: values.cryptoAddress,\n                    amount: parseFloat(parseFloat(values.cryptoAmount).toFixed(fractionalDigits.crypto)),\n                    estimated_fee_unique_id: values.priorityWithdrawal ? cryptoEstimationsFeeUniqueId : undefined,\n                })\n            }\n        >\n            {({ errors, handleChange, handleSubmit, isSubmitting, setFieldTouched, setFieldValue, values }) => {\n                return (\n                    <form autoComplete='off' className='wallets-withdrawal-crypto-form' onSubmit={handleSubmit}>\n                        <div className='wallets-withdrawal-crypto-address'>\n                            <Field name='cryptoAddress' validate={validateCryptoAddress(localize)}>\n                                {({ field, meta }: FieldProps<string>) => (\n                                    <WalletTextField\n                                        {...field}\n                                        data-testid='dt_withdrawal_crypto_address_input'\n                                        errorMessage={meta.touched && errors.cryptoAddress}\n                                        isInvalid={meta.touched && Boolean(errors?.cryptoAddress)}\n                                        label={localize('Your {{currencyName}} cryptocurrency wallet address', {\n                                            currencyName: activeWallet?.currency_config?.name,\n                                        })}\n                                        onChange={event => {\n                                            setFieldValue(field.name, event.target.value, true);\n                                            setFieldTouched(field.name, true);\n                                            handleChange(event);\n                                        }}\n                                        showMessage\n                                    />\n                                )}\n                            </Field>\n                        </div>\n                        <WithdrawalCryptoPercentageSelector />\n                        <WithdrawalCryptoAmountConverter />\n                        {Boolean(isPriorityCryptoWithdrawalEnabled) && <WithdrawalCryptoPriority />}\n                        <div className='wallets-withdrawal-crypto-form__submit'>\n                            <Button\n                                borderWidth='sm'\n                                disabled={Object.keys(errors).length !== 0 || !values.cryptoAmount || isSubmitting}\n                                isLoading={isSubmitting}\n                                size='lg'\n                                textSize='md'\n                                type='submit'\n                            >\n                                <Localize i18n_default_text='Withdraw' />\n                            </Button>\n                        </div>\n                    </form>\n                );\n            }}\n        </Formik>\n    );\n};\n\nexport default WithdrawalCryptoForm;\n","import React from 'react';\nimport { Localize } from '@deriv-com/translations';\nimport { Text } from '@deriv-com/ui';\nimport { WalletClipboard } from '../../../../../../../../components';\nimport './WithdrawalCryptoDestinationAddress.scss';\n\nconst WithdrawalCryptoDestinationAddress: React.FC<{ address?: string }> = ({ address }) => {\n    return (\n        <div className='wallets-withdrawal-crypto-destination-address'>\n            <div className='wallets-withdrawal-crypto-destination-address__title'>\n                <Text color='less-prominent' size='2xs'>\n                    <Localize i18n_default_text='Destination address' />\n                </Text>\n            </div>\n            <div className='wallets-withdrawal-crypto-destination-address__content'>\n                <Text size='sm' weight='bold'>\n                    {address}\n                </Text>\n                <WalletClipboard textCopy={address ?? ''} />\n            </div>\n        </div>\n    );\n};\n\nexport default WithdrawalCryptoDestinationAddress;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { LegacyArrowDown2pxIcon } from '@deriv/quill-icons';\nimport { Localize } from '@deriv-com/translations';\nimport { Button, Text } from '@deriv-com/ui';\nimport { WalletCard, WalletMoney } from '../../../../../../components';\nimport { TWithdrawalReceipt } from '../../types';\nimport { WithdrawalCryptoDestinationAddress } from './components';\nimport './WithdrawalCryptoReceipt.scss';\n\ntype TProps = {\n    onClose: () => void;\n    withdrawalReceipt: TWithdrawalReceipt;\n};\n\nconst WithdrawalCryptoReceipt: React.FC<TProps> = ({ onClose, withdrawalReceipt }) => {\n    const history = useHistory();\n    const { address, amount = 0, amountReceived, currency, transactionFee } = withdrawalReceipt;\n\n    return (\n        <div className='wallets-withdrawal-crypto-receipt'>\n            <div className='wallets-withdrawal-crypto-receipt__accounts-info'>\n                <WalletCard\n                    balance={<WalletMoney amount={-amount} currency={currency} hasSign />}\n                    currency={currency ?? ''}\n                    iconSize='md'\n                />\n                <LegacyArrowDown2pxIcon iconSize='xs' />\n                <WithdrawalCryptoDestinationAddress address={address} />\n            </div>\n            <div className='wallets-withdrawal-crypto-receipt__withdrawal-info'>\n                <div className='wallets-withdrawal-crypto-receipt__amount-received-info'>\n                    <Text align='center' as='p' size='sm'>\n                        <Localize i18n_default_text='Amount received' />\n                    </Text>\n                    <Text align='center' data-testid='dt_amount_received' size='xl' weight='bold'>\n                        <WalletMoney amount={transactionFee ? amountReceived : amount} currency={currency} />\n                    </Text>\n                    {transactionFee && (\n                        <Text align='center' as='p' size='sm'>\n                            <Localize\n                                components={[<WalletMoney amount={transactionFee} currency={currency} key={0} />]}\n                                i18n_default_text='(Transaction fee: <0/>)'\n                            />\n                        </Text>\n                    )}\n                </div>\n\n                <Text align='center' as='p'>\n                    <Localize i18n_default_text=\"Your withdrawal is currently in review. It will be processed within 24 hours. We'll send you an email once your transaction has been processed.\" />\n                </Text>\n            </div>\n            <div className='wallets-withdrawal-crypto-receipt__actions'>\n                <Button\n                    color='black'\n                    onClick={() => history.push('/wallet/transactions')}\n                    size='lg'\n                    textSize='md'\n                    variant='outlined'\n                >\n                    <Localize i18n_default_text='View transactions' />\n                </Button>\n                <Button onClick={onClose} size='lg' textSize='md'>\n                    <Localize i18n_default_text='Close' />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default WithdrawalCryptoReceipt;\n","import React from 'react';\nimport { Localize } from '@deriv-com/translations';\nimport { Text } from '@deriv-com/ui';\nimport { WalletLoader } from '../../../../components';\nimport { isServerError } from '../../../../utils/utils';\nimport { WithdrawalErrorScreen } from '../../screens';\nimport { TransactionStatus } from '../TransactionStatus';\nimport { WithdrawalCryptoDisclaimer, WithdrawalCryptoForm, WithdrawalCryptoReceipt } from './components';\nimport { useWithdrawalCryptoContext, WithdrawalCryptoProvider } from './provider';\nimport './WithdrawalCrypto.scss';\n\ntype TWithdrawalCryptoProps = {\n    setResendEmail: React.Dispatch<React.SetStateAction<boolean>>;\n    setVerificationCode: React.Dispatch<React.SetStateAction<string>>;\n    verificationCode: string;\n};\n\nconst WithdrawalCrypto: React.FC<Pick<TWithdrawalCryptoProps, 'setResendEmail' | 'setVerificationCode'>> = ({\n    setResendEmail,\n    setVerificationCode,\n}) => {\n    const { activeWallet, error, getCurrencyConfig, isLoading, isWithdrawalSuccess, setError, withdrawalReceipt } =\n        useWithdrawalCryptoContext();\n\n    const onCloseHandler = () => setVerificationCode('');\n    const currency = activeWallet?.currency;\n\n    const resetError = () => {\n        onCloseHandler();\n        setError(undefined);\n    };\n\n    if (isLoading) return <WalletLoader />;\n\n    if (isServerError(error)) {\n        return <WithdrawalErrorScreen error={error} resetError={resetError} setResendEmail={setResendEmail} />;\n    }\n\n    if (isWithdrawalSuccess) {\n        return <WithdrawalCryptoReceipt onClose={onCloseHandler} withdrawalReceipt={withdrawalReceipt} />;\n    }\n\n    return (\n        <div className='wallets-withdrawal-crypto'>\n            <div className='wallets-withdrawal-crypto__left-content' /> {/* This div is used for alignment */}\n            <div className='wallets-withdrawal-crypto__main-content'>\n                <Text weight='bold'>\n                    <Localize\n                        i18n_default_text='Withdraw {{currencyName}} ({{currency}}) to your wallet'\n                        values={{ currency, currencyName: currency ? getCurrencyConfig(currency)?.name : '' }}\n                    />\n                </Text>\n                <WithdrawalCryptoDisclaimer />\n                <WithdrawalCryptoForm />\n            </div>\n            <div className='wallets-withdrawal-crypto__right-content'>\n                <TransactionStatus transactionType='withdrawal' />\n            </div>\n        </div>\n    );\n};\n\nconst WithdrawalCryptoModule: React.FC<TWithdrawalCryptoProps> = ({\n    setResendEmail,\n    setVerificationCode,\n    verificationCode,\n}) => {\n    return (\n        <WithdrawalCryptoProvider verificationCode={verificationCode}>\n            <WithdrawalCrypto setResendEmail={setResendEmail} setVerificationCode={setVerificationCode} />\n        </WithdrawalCryptoProvider>\n    );\n};\n\nexport default WithdrawalCryptoModule;\n","import React, { ButtonHTMLAttributes, useEffect, useState } from 'react';\nimport { useCashierFiatAddress } from '@deriv/api-v2';\nimport { TSocketError } from '@deriv/api-v2/types';\nimport { WalletLoader } from '../../../../components';\nimport { isServerError } from '../../../../utils/utils';\nimport { WithdrawalErrorScreen } from '../../screens';\nimport './WithdrawalFiat.scss';\n\ninterface WithdrawalFiatProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    setResendEmail: React.Dispatch<React.SetStateAction<boolean>>;\n    setVerificationCode: React.Dispatch<React.SetStateAction<string>>;\n    verificationCode?: string;\n}\n\nconst WithdrawalFiat: React.FC<WithdrawalFiatProps> = ({ setResendEmail, setVerificationCode, verificationCode }) => {\n    const { data: iframeUrl, isLoading: isWithdrawalFiatLoading, mutateAsync } = useCashierFiatAddress();\n    const [isIframeLoading, setIsIframeLoading] = useState(true);\n    const [error, setError] = useState<TSocketError<'cashier'>['error'] | undefined>();\n\n    useEffect(() => {\n        if (verificationCode) {\n            mutateAsync('withdraw', {\n                verification_code: verificationCode,\n            }).catch((response: TSocketError<'cashier'> | null) => {\n                if (isServerError(response?.error)) setError(response?.error);\n            });\n        }\n    }, [mutateAsync, verificationCode]);\n\n    const resetError = () => {\n        setVerificationCode('');\n        setError(undefined);\n    };\n\n    if (isWithdrawalFiatLoading) return <WalletLoader />;\n\n    if (error) {\n        return <WithdrawalErrorScreen error={error} resetError={resetError} setResendEmail={setResendEmail} />;\n    }\n\n    return (\n        <React.Fragment>\n            {isIframeLoading && <WalletLoader />}\n            {iframeUrl && (\n                <iframe\n                    className='wallets-withdrawal-fiat__iframe'\n                    data-testid='dt_wallets_withdrawal_fiat_iframe'\n                    key={iframeUrl}\n                    onLoad={() => setIsIframeLoading(false)}\n                    src={iframeUrl}\n                    style={{ display: isIframeLoading ? 'none' : 'block' }}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default WithdrawalFiat;\n","import React from 'react';\nimport { DerivLightEmailVerificationIcon } from '@deriv/quill-icons';\nimport { Localize } from '@deriv-com/translations';\nimport { ActionScreen, Button, Text } from '@deriv-com/ui';\nimport './WithdrawalVerificationRequest.scss';\n\ntype TProps = {\n    sendEmail: () => void;\n};\n\nconst WithdrawalVerificationRequest: React.FC<TProps> = ({ sendEmail }) => {\n    return (\n        <div className='wallets-withdrawal-verification-request'>\n            <ActionScreen\n                actionButtons={\n                    <Button onClick={sendEmail} size='lg' textSize='md'>\n                        <Localize i18n_default_text='Send link' />\n                    </Button>\n                }\n                description={\n                    <div className='wallets-withdrawal-verification-request__description'>\n                        <Text align='center'>\n                            <Localize i18n_default_text=\"To continue withdrawal, verify it's you. We will send a verification link to your email.\" />\n                        </Text>\n                    </div>\n                }\n                icon={\n                    <div\n                        className='wallets-withdrawal-verification-request__icon'\n                        data-testid='dt_withdrawal_verification_request_icon'\n                    >\n                        <DerivLightEmailVerificationIcon height={102} width={102} />\n                    </div>\n                }\n                title={<Localize i18n_default_text='Verification needed' />}\n            />\n        </div>\n    );\n};\n\nexport default WithdrawalVerificationRequest;\n","import React, { useState } from 'react';\nimport { DerivLightUnreadEmailNotificationIcon } from '@deriv/quill-icons';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { ActionScreen, Button } from '@deriv-com/ui';\nimport './WithdrawalVerificationSent.scss';\n\ntype TProps = {\n    counter: number;\n    sendEmail: () => void;\n};\n\nconst WithdrawalVerificationSent: React.FC<TProps> = ({ counter, sendEmail }) => {\n    const [showResend, setShowResend] = useState(false);\n    const { localize } = useTranslations();\n\n    return (\n        <div className='wallets-withdrawal-verification-sent'>\n            <ActionScreen\n                actionButtons={\n                    !showResend ? (\n                        <Button\n                            borderWidth='sm'\n                            color='primary-transparent'\n                            onClick={() => {\n                                sendEmail();\n                                setShowResend(!showResend);\n                            }}\n                            size='lg'\n                            textSize='md'\n                            variant='ghost'\n                        >\n                            <Localize i18n_default_text=\"Didn't receive the email?\" />\n                        </Button>\n                    ) : undefined\n                }\n                description={localize('Please check your email for the verification link to complete the process.')}\n                icon={\n                    <div\n                        className='wallets-withdrawal-verification-sent__icon'\n                        data-testid='dt_withdrawal_verification_sent_icon'\n                    >\n                        <DerivLightUnreadEmailNotificationIcon width={102} />\n                    </div>\n                }\n                title={<Localize i18n_default_text=\"We've sent you an email.\" />}\n            />\n            <div className='wallets-withdrawal-verification-sent__resend'>\n                {showResend && (\n                    <ActionScreen\n                        actionButtons={\n                            <Button disabled={!!counter} onClick={sendEmail} size='lg' textSize='md'>\n                                {counter ? (\n                                    <Localize i18n_default_text='Resend email in {{counter}}s' values={{ counter }} />\n                                ) : (\n                                    <Localize i18n_default_text='Resend email' />\n                                )}\n                            </Button>\n                        }\n                        description={localize(\n                            \"Check your spam or junk folder. If it's not there, try resending the email.\"\n                        )}\n                        title={<Localize i18n_default_text=\"Didn't receive the email?\" />}\n                    />\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default WithdrawalVerificationSent;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useCountdown } from 'usehooks-ts';\nimport { useSettings, useVerifyEmail } from '@deriv/api-v2';\nimport { WithdrawalVerificationRequest } from './WithdrawalVerificationRequest';\nimport { WithdrawalVerificationSent } from './WithdrawalVerificationSent';\n\ntype TProps = {\n    resendEmail?: boolean;\n};\n\nconst WithdrawalVerification: React.FC<TProps> = ({ resendEmail = false }) => {\n    const [emailSent, setEmailSent] = useState(false);\n    const { data } = useSettings();\n    const { mutate } = useVerifyEmail();\n    const [count, { resetCountdown, startCountdown }] = useCountdown({\n        countStart: 60,\n        intervalMs: 1000,\n    });\n\n    const handleSendEmail = useCallback(async () => {\n        if (data.email) {\n            await mutate({\n                type: 'payment_withdraw',\n                verify_email: data.email,\n            });\n            setEmailSent(true);\n            resetCountdown();\n            startCountdown();\n        }\n    }, [data.email, mutate, resetCountdown, startCountdown]);\n\n    useEffect(() => {\n        if (resendEmail && !emailSent) {\n            handleSendEmail();\n        }\n    }, [emailSent, handleSendEmail, resendEmail]);\n\n    if (emailSent) return <WithdrawalVerificationSent counter={count} sendEmail={handleSendEmail} />;\n    return <WithdrawalVerificationRequest sendEmail={handleSendEmail} />;\n};\n\nexport default WithdrawalVerification;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { DerivLightCashierNoBalanceIcon } from '@deriv/quill-icons';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { ActionScreen, Button } from '@deriv-com/ui';\nimport { THooks } from '../../../../types';\n\ntype TWithdrawalNoBalanceProps = {\n    activeWallet: THooks.ActiveWalletAccount;\n};\n\nconst WithdrawalNoBalance: React.FC<TWithdrawalNoBalanceProps> = ({ activeWallet }) => {\n    const history = useHistory();\n    const { localize } = useTranslations();\n\n    return (\n        <ActionScreen\n            actionButtons={\n                <Button onClick={() => history.push('/wallet/deposit')} size='lg' textSize='md'>\n                    <Localize i18n_default_text='Add funds' />\n                </Button>\n            }\n            description={localize(\"You don't have funds in your {{currency}} Wallet to complete a withdrawal.\", {\n                currency: activeWallet.currency,\n            })}\n            descriptionSize='md'\n            icon={<DerivLightCashierNoBalanceIcon height='128px' width='128px' />}\n            title={\n                <Localize\n                    i18n_default_text='No funds in {{currency}} Wallet'\n                    values={{ currency: activeWallet.currency }}\n                />\n            }\n        />\n    );\n};\n\nexport default WithdrawalNoBalance;\n","import React, { useEffect, useState } from 'react';\nimport { useActiveWalletAccount, useAuthorize } from '@deriv/api-v2';\nimport { WalletLoader } from '../../../../components';\nimport useAllBalanceSubscription from '../../../../hooks/useAllBalanceSubscription';\nimport { WithdrawalCryptoModule, WithdrawalFiatModule, WithdrawalVerificationModule } from '../../modules';\nimport { WithdrawalNoBalance } from '../../screens';\n\nconst WalletWithdrawal = () => {\n    const { switchAccount } = useAuthorize();\n    const { data: activeWallet } = useActiveWalletAccount();\n    const { data: balanceData, isLoading: isBalanceLoading } = useAllBalanceSubscription();\n    const [verificationCode, setVerificationCode] = useState('');\n    const [resendEmail, setResendEmail] = useState(false);\n\n    useEffect(() => {\n        const queryParams = new URLSearchParams(location.search);\n        const loginidQueryParam = queryParams.get('loginid');\n        const verificationQueryParam = queryParams.get('verification');\n        const localVerificationCode = localStorage.getItem('verification_code.payment_withdraw');\n\n        // if loginid query param doesn't match active wallet's loginid on mount, initiate account switching\n        if (loginidQueryParam && loginidQueryParam !== activeWallet?.loginid) {\n            switchAccount(loginidQueryParam);\n            return;\n        }\n\n        // for third party redirections where verification code is fetched from local storage value saved in client store\n        if (localVerificationCode) {\n            setVerificationCode(localVerificationCode);\n            localStorage.removeItem('verification_code.payment_withdraw');\n        }\n\n        // given that loginid query param matches active wallet's loginid on mount, clear query params and proceed\n        if (verificationQueryParam) {\n            setVerificationCode(verificationQueryParam);\n\n            const url = new URL(window.location.href);\n            url.searchParams.delete('loginid');\n            url.searchParams.delete('verification');\n            window.history.replaceState({}, document.title, url.toString());\n        }\n    }, [activeWallet?.loginid, switchAccount]);\n\n    if (!activeWallet || isBalanceLoading) {\n        return <WalletLoader />;\n    }\n\n    if (balanceData && !isBalanceLoading && balanceData[activeWallet?.loginid ?? 'USD'].balance <= 0) {\n        return <WithdrawalNoBalance activeWallet={activeWallet} />;\n    }\n\n    if (activeWallet?.currency_config && verificationCode && !isBalanceLoading) {\n        const isCryptoProvider = activeWallet.currency_config.platform.cashier.includes('crypto');\n\n        return isCryptoProvider ? (\n            <WithdrawalCryptoModule\n                setResendEmail={setResendEmail}\n                setVerificationCode={setVerificationCode}\n                verificationCode={verificationCode}\n            />\n        ) : (\n            <WithdrawalFiatModule\n                setResendEmail={setResendEmail}\n                setVerificationCode={setVerificationCode}\n                verificationCode={verificationCode}\n            />\n        );\n    }\n\n    return <WithdrawalVerificationModule resendEmail={resendEmail} />;\n};\n\nexport default WalletWithdrawal;\n","import React from 'react';\nimport { Chat } from '@deriv/utils';\nimport { Localize } from '@deriv-com/translations';\nimport { Text } from '@deriv-com/ui';\nimport { WalletLink } from '../../../../components';\n\ntype TSystemMaintenanceDescProps = {\n    currency?: string;\n    isCashierLocked?: boolean;\n    isCrypto?: boolean;\n    isDepositLocked?: boolean;\n    isWithdrawalLocked?: boolean;\n};\n\ntype TCashierLockedDescProps = {\n    askAuthenticate?: boolean;\n    askCurrency?: boolean;\n    askFinancialRiskApproval?: boolean;\n    askFixDetails?: boolean;\n    askSelfExclusionMaxTurnoverSet?: boolean;\n    askTinInformation?: boolean;\n    cashierLockedStatus?: boolean;\n    currency?: string;\n    disabledStatus?: boolean;\n    documentsExpired?: boolean;\n    financialAssessmentRequired?: boolean;\n    isEuRegion?: boolean;\n    module?: 'deposit' | 'transfer' | 'withdrawal';\n    noResidence?: boolean;\n    poaNeedsVerification?: boolean;\n    poiNeedsVerification?: boolean;\n};\n\nexport const getSystemMaintenanceContent = ({\n    currency,\n    isCashierLocked,\n    isCrypto,\n    isDepositLocked,\n    isWithdrawalLocked,\n}: TSystemMaintenanceDescProps) => {\n    let content = null;\n\n    if (isCashierLocked) {\n        content = {\n            description: (\n                <Text align='center'>\n                    <Localize\n                        i18n_default_text='Due to system maintenance, deposits and withdrawals with your {{currency}} Wallet are unavailable at the moment. Please try again later.'\n                        values={{ currency }}\n                    />\n                </Text>\n            ),\n            title: (\n                <Localize\n                    i18n_default_text='{{currency}} Wallet deposits and withdrawals are temporarily unavailable.'\n                    values={{ currency }}\n                />\n            ),\n        };\n    } else if (isCrypto) {\n        if (isDepositLocked) {\n            content = {\n                description: (\n                    <Text align='center'>\n                        <Localize\n                            i18n_default_text='Due to system maintenance, deposits with your {{currency}} Wallet are unavailable at the moment. Please try again later.'\n                            values={{ currency }}\n                        />\n                    </Text>\n                ),\n                title: (\n                    <Localize\n                        i18n_default_text='{{currency}} Wallet deposits are temporarily unavailable.'\n                        values={{ currency }}\n                    />\n                ),\n            };\n        } else if (isWithdrawalLocked) {\n            content = {\n                description: (\n                    <Text align='center'>\n                        <Localize\n                            i18n_default_text='Due to system maintenance, withdrawals with your {{currency}} Wallet are unavailable at the moment. Please try again later.'\n                            values={{ currency }}\n                        />\n                    </Text>\n                ),\n                title: (\n                    <Localize\n                        i18n_default_text='{{currency}} Wallet withdrawals are temporarily unavailable.'\n                        values={{ currency }}\n                    />\n                ),\n            };\n        }\n    }\n\n    return content;\n};\n\nconst getCashierLockedDesc = ({\n    askAuthenticate,\n    askCurrency,\n    askFinancialRiskApproval,\n    askFixDetails,\n    askSelfExclusionMaxTurnoverSet,\n    askTinInformation,\n    cashierLockedStatus,\n    currency,\n    disabledStatus,\n    documentsExpired,\n    financialAssessmentRequired,\n    isEuRegion,\n    module,\n    noResidence,\n    poaNeedsVerification,\n    poiNeedsVerification,\n}: TCashierLockedDescProps) => {\n    let description = null;\n\n    if (noResidence) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[<WalletLink href='/account/personal-details' key={0} variant='bold' />]}\n                    i18n_default_text=\"You've not set your country of residence. To access {{currency}} Wallet, please update your country of residence in the <0>Personal details section</0> in your account settings.\"\n                    values={{ currency }}\n                />\n            </Text>\n        );\n    } else if (documentsExpired) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    i18n_default_text='The identification documents you submitted have expired. Please submit valid identity documents to unlock your {{currency}} Wallet.'\n                    values={{ currency }}\n                />\n            </Text>\n        );\n    } else if (cashierLockedStatus || disabledStatus) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[\n                        <button className='wallets-link wallets-link__variant--bold' key={0} onClick={Chat.open} />,\n                    ]}\n                    i18n_default_text='Please contact us via <0>live chat</0> to enable deposits and withdrawals again.'\n                />\n            </Text>\n        );\n    } else if (askCurrency) {\n        description = (\n            <Text align='center'>\n                <Localize i18n_default_text='Please set your account currency to enable deposits and withdrawals.' />\n            </Text>\n        );\n    } else if (isEuRegion && askAuthenticate) {\n        if (module === 'transfer') {\n            description = (\n                <Text align='center'>\n                    <Localize i18n_default_text='You can make a funds transfer once the verification of your account is complete.' />\n                </Text>\n            );\n        } else if (module === 'withdrawal') {\n            description = (\n                <Text align='center'>\n                    <Localize i18n_default_text='You can make a withdrawal once the verification of your account is complete.' />\n                </Text>\n            );\n        } else {\n            description = (\n                <Text align='center'>\n                    <Localize i18n_default_text='You can make a new deposit once the verification of your account is complete.' />\n                </Text>\n            );\n        }\n    } else if (askAuthenticate && poiNeedsVerification) {\n        if (poaNeedsVerification) {\n            description = (\n                <Text align='center'>\n                    <Localize\n                        components={[\n                            <WalletLink href='/account/proof-of-identity' key={0} variant='bold' />,\n                            <WalletLink href='/account/proof-of-address' key={1} variant='bold' />,\n                        ]}\n                        i18n_default_text='Your account has not been authenticated. Please submit your <0>proof of identity</0> and <1>proof of address</1> to authenticate your account and access your {{currency}} Wallet.'\n                        values={{ currency }}\n                    />\n                </Text>\n            );\n        } else {\n            description = (\n                <Text align='center'>\n                    <Localize\n                        components={[<WalletLink href='/account/proof-of-identity' key={0} variant='bold' />]}\n                        i18n_default_text='Please submit your <0>proof of identity</0> to authenticate your account and access your {{currency} Wallet.'\n                        values={{ currency }}\n                    />\n                </Text>\n            );\n        }\n    } else if (askFinancialRiskApproval) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[<WalletLink href='/account/financial-assessment' key={0} variant='bold' />]}\n                    i18n_default_text='Please complete the <0>Appropriateness Test</0> to access your {{currency}} Wallet.'\n                    values={{ currency }}\n                />\n            </Text>\n        );\n    } else if (financialAssessmentRequired) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[<WalletLink href='/account/financial-assessment' key={0} variant='bold' />]}\n                    i18n_default_text='Please complete the <0>financial assessment</0> to unlock it.'\n                />\n            </Text>\n        );\n    } else if (askTinInformation) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[<WalletLink href='/account/personal-details' key={0} variant='bold' />]}\n                    i18n_default_text='You have not provided your tax identification number. This information is necessary for legal and regulatory requirements. Please go to <0>Personal details</0> in your account settings and fill in your latest tax identification number.'\n                />\n            </Text>\n        );\n    } else if (askSelfExclusionMaxTurnoverSet) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[<WalletLink href='/account/self-exclusion' key={0} variant='bold' />]}\n                    i18n_default_text='Your access to {{currency}} Wallet has been temporarily disabled as you have not set your 30-day turnover limit. Please go to <0>Self-exclusion</0> and set your 30-day turnover limit.'\n                    values={{ currency }}\n                />\n            </Text>\n        );\n    } else if (askFixDetails) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[<WalletLink href='/account/personal-details' key={0} variant='bold' />]}\n                    i18n_default_text='Your <0>personal details</0> are incomplete. Please go to your account settings and complete your personal details to enable deposits and withdrawals.'\n                />\n            </Text>\n        );\n    }\n\n    return description;\n};\n\nexport default getCashierLockedDesc;\n","import React from 'react';\nimport {\n    useAccountStatus,\n    useActiveWalletAccount,\n    useCashierValidation,\n    useIsEuRegion,\n    usePOA,\n    usePOI,\n} from '@deriv/api-v2';\nimport { Localize } from '@deriv-com/translations';\nimport { ActionScreen } from '@deriv-com/ui';\nimport { WalletLoader } from '../../../../components';\nimport getCashierLockedDesc, { getSystemMaintenanceContent } from './CashierLockedContent';\nimport './CashierLocked.scss';\n\ntype TCashierLockedProps = {\n    children?: React.ReactNode;\n    module?: 'deposit' | 'transfer' | 'withdrawal';\n};\n\nconst CashierLocked: React.FC<TCashierLockedProps> = ({ children, module }) => {\n    const { data: activeWallet } = useActiveWalletAccount();\n    const { data: poiStatus } = usePOI();\n    const { data: poaStatus } = usePOA();\n    const { data: cashierValidation } = useCashierValidation();\n    const { data: accountStatus, isLoading: isAccountStatusLoading } = useAccountStatus();\n    const { data: isEuRegion, isLoading: isEuRegionLoading } = useIsEuRegion();\n\n    const isLoading = isAccountStatusLoading || isEuRegionLoading;\n\n    const currency = activeWallet?.currency || 'USD';\n    const isVirtual = activeWallet?.is_virtual;\n    const isCrypto = activeWallet?.is_crypto;\n\n    const poaNeedsVerification = poaStatus?.poa_needs_verification;\n    const poiNeedsVerification = poiStatus?.poi_needs_verification;\n\n    const askAuthenticate = cashierValidation?.ask_authenticate;\n    const askCurrency = cashierValidation?.ask_currency;\n    const askFinancialRiskApproval = cashierValidation?.ask_financial_risk_approval;\n    const askFixDetails = cashierValidation?.ask_fix_details;\n    const askSelfExclusionMaxTurnoverSet = cashierValidation?.ask_self_exclusion_max_turnover_set;\n    const askTinInformation = cashierValidation?.ask_tin_information;\n    const cashierLockedStatus = cashierValidation?.cashier_locked_status;\n    const disabledStatus = cashierValidation?.disabled_status;\n    const documentsExpired = cashierValidation?.documents_expired;\n    const financialAssessmentRequired = cashierValidation?.financial_assessment_required;\n    const noResidence = cashierValidation?.no_residence;\n\n    const isSystemMaintenance = cashierValidation?.system_maintenance && !isVirtual;\n    const isCashierLocked = accountStatus?.is_cashier_locked && !isVirtual;\n    const isDepositLocked = accountStatus?.is_deposit_locked && module === 'deposit';\n    const isWithdrawalLocked = accountStatus?.is_withdrawal_locked && module === 'withdrawal';\n\n    const systemMaintenanceContent = getSystemMaintenanceContent({\n        currency,\n        isCashierLocked,\n        isCrypto,\n        isDepositLocked,\n        isWithdrawalLocked,\n    });\n\n    const cashierLockedDescription = getCashierLockedDesc({\n        askAuthenticate,\n        askCurrency,\n        askFinancialRiskApproval,\n        askFixDetails,\n        askSelfExclusionMaxTurnoverSet,\n        askTinInformation,\n        cashierLockedStatus,\n        currency,\n        disabledStatus,\n        documentsExpired,\n        financialAssessmentRequired,\n        isEuRegion,\n        module,\n        noResidence,\n        poaNeedsVerification,\n        poiNeedsVerification,\n    });\n\n    if (isLoading) {\n        return <WalletLoader />;\n    }\n\n    if (isSystemMaintenance && systemMaintenanceContent) {\n        return (\n            <div className='wallets-cashier-locked'>\n                <ActionScreen\n                    description={systemMaintenanceContent.description}\n                    title={systemMaintenanceContent.title}\n                />\n            </div>\n        );\n    }\n\n    if (isCashierLocked) {\n        return (\n            <div className='wallets-cashier-locked'>\n                <ActionScreen\n                    description={cashierLockedDescription}\n                    title={\n                        <Localize\n                            i18n_default_text='Your {{currency}} Wallet is temporarily locked.'\n                            values={{ currency }}\n                        />\n                    }\n                />\n            </div>\n        );\n    }\n\n    return <>{children}</>;\n};\n\nexport default CashierLocked;\n","import React from 'react';\nimport { Chat } from '@deriv/utils';\nimport { Localize } from '@deriv-com/translations';\nimport { Text } from '@deriv-com/ui';\nimport { WalletLink } from '../../../../components';\n\ntype TDepositLockedDescProps = {\n    askFixDetails?: boolean;\n    excludedUntil?: Date;\n    financialInformationNotComplete?: boolean;\n    hasAttemptedPOA?: boolean;\n    hasAttemptedPOI?: boolean;\n    isMFAccount?: boolean;\n    isTNCNeeded?: boolean;\n    poaNeedsVerification?: boolean;\n    poiNeedsVerification?: boolean;\n    selfExclusion?: boolean;\n    tradingExperienceNotComplete?: boolean;\n    unwelcomeStatus?: boolean;\n};\n\nconst getDepositLockedDesc = ({\n    askFixDetails,\n    excludedUntil,\n    financialInformationNotComplete,\n    hasAttemptedPOA,\n    hasAttemptedPOI,\n    isMFAccount,\n    isTNCNeeded,\n    poaNeedsVerification,\n    poiNeedsVerification,\n    selfExclusion,\n    tradingExperienceNotComplete,\n    unwelcomeStatus,\n}: TDepositLockedDescProps) => {\n    let description = null;\n\n    if (poiNeedsVerification && hasAttemptedPOI) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[<WalletLink href='/account/proof-of-identity' key={0} variant='bold' />]}\n                    i18n_default_text='You have reached the withdrawal limit. To enable deposits, you must check your <0>proof of identity document verification status</0>.'\n                />\n            </Text>\n        );\n    } else if (poaNeedsVerification && hasAttemptedPOA) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[<WalletLink href='/account/proof-of-address' key={0} variant='bold' />]}\n                    i18n_default_text='To enable deposits, you must check your <0>proof of address document verification status</0>.'\n                />\n            </Text>\n        );\n    } else if (isTNCNeeded) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[<WalletLink key={0} staticUrl='/terms-and-conditions/#clients' variant='bold' />]}\n                    i18n_default_text='To enable deposits, you must accept our <0>updated terms and conditions</0>.'\n                />\n            </Text>\n        );\n    } else if (isMFAccount && (financialInformationNotComplete || tradingExperienceNotComplete)) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[<WalletLink href='/account/financial-assessment' key={0} variant='bold' />]}\n                    i18n_default_text='To enable deposits, you must complete the <0>financial assessment form</0>.'\n                />\n            </Text>\n        );\n    } else if (askFixDetails) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[<WalletLink href='/account/personal-details' key={0} variant='bold' />]}\n                    i18n_default_text='Your <0>personal details</0> are incomplete. Please go to your account settings and complete your personal details to enable deposits.'\n                />\n            </Text>\n        );\n    } else if (selfExclusion) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[\n                        <button className='wallets-link wallets-link__variant--bold' key={0} onClick={Chat.open} />,\n                    ]}\n                    i18n_default_text='You have reached the withdrawal limit. You have chosen to exclude yourself from trading on our website until {{excludedUntil}}. If you are unable to place a trade or deposit after your self-exclusion period, please contact us via <0>live chat</0>.'\n                    values={{\n                        excludedUntil: excludedUntil?.toLocaleDateString('en-GB', {\n                            day: '2-digit',\n                            month: 'short',\n                            year: 'numeric',\n                        }),\n                    }}\n                />\n            </Text>\n        );\n    } else if (unwelcomeStatus) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[\n                        <button className='wallets-link wallets-link__variant--bold' key={0} onClick={Chat.open} />,\n                    ]}\n                    i18n_default_text='Please contact us via <0>live chat</0>.'\n                />\n            </Text>\n        );\n    }\n\n    return description;\n};\n\nexport default getDepositLockedDesc;\n","import React from 'react';\nimport {\n    useAccountStatus,\n    useActiveWalletAccount,\n    useCashierValidation,\n    usePOA,\n    usePOI,\n    useSettings,\n} from '@deriv/api-v2';\nimport { Localize } from '@deriv-com/translations';\nimport { ActionScreen } from '@deriv-com/ui';\nimport { WalletLoader } from '../../../../components';\nimport getDepositLockedDesc from './DepositLockedContent';\nimport './DepositLocked.scss';\n\nconst DepositLocked: React.FC<React.PropsWithChildren> = ({ children }) => {\n    const { data: activeWallet } = useActiveWalletAccount();\n    const { data: poiStatus } = usePOI();\n    const { data: poaStatus } = usePOA();\n    const { data: settings } = useSettings();\n    const { data: cashierValidation } = useCashierValidation();\n    const { data: accountStatus, isLoading: isAccountStatusLoading } = useAccountStatus();\n\n    const currency = activeWallet?.currency || 'USD';\n    const excludedUntil = activeWallet?.excluded_until;\n    const isMFAccount = activeWallet?.loginid?.startsWith('MF');\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore, NOTE: no tnc_status in settings type\n    const isTNCNeeded = settings?.tnc_status?.[activeWallet?.landing_company_name] === 0;\n\n    const poaNeedsVerification = poaStatus?.poa_needs_verification;\n    const poiNeedsVerification = poiStatus?.poi_needs_verification;\n    const hasAttemptedPOA = poaStatus?.has_attempted_poa;\n    const hasAttemptedPOI = poiStatus?.has_attempted_poi;\n\n    const askFixDetails = cashierValidation?.ask_fix_details;\n    const selfExclusion = cashierValidation?.self_exclusion;\n    const unwelcomeStatus = cashierValidation?.unwelcome_status;\n\n    const isDepositLocked = accountStatus?.is_deposit_locked;\n    const financialInformationNotComplete = accountStatus?.is_financial_information_not_complete;\n    const tradingExperienceNotComplete = accountStatus?.is_trading_experience_not_complete;\n\n    if (isAccountStatusLoading) {\n        return <WalletLoader />;\n    }\n\n    if (isDepositLocked) {\n        return (\n            <div className='wallets-deposit-locked'>\n                <ActionScreen\n                    description={getDepositLockedDesc({\n                        askFixDetails,\n                        excludedUntil,\n                        financialInformationNotComplete,\n                        hasAttemptedPOA,\n                        hasAttemptedPOI,\n                        isMFAccount,\n                        isTNCNeeded,\n                        poaNeedsVerification,\n                        poiNeedsVerification,\n                        selfExclusion,\n                        tradingExperienceNotComplete,\n                        unwelcomeStatus,\n                    })}\n                    title={\n                        <Localize\n                            i18n_default_text='Deposits into your {{currency}} Wallet are temporarily locked.'\n                            values={{ currency }}\n                        />\n                    }\n                />\n            </div>\n        );\n    }\n\n    return <>{children}</>;\n};\n\nexport default DepositLocked;\n","import React from 'react';\nimport { useAccountStatus, useActiveWalletAccount, useCashierValidation } from '@deriv/api-v2';\nimport { Localize } from '@deriv-com/translations';\nimport { ActionScreen, Text } from '@deriv-com/ui';\nimport { WalletLink, WalletLoader } from '../../../../components';\nimport './TransferLocked.scss';\n\ntype TCashierLockedProps = {\n    children?: React.ReactNode;\n};\n\nconst TransferLocked: React.FC<TCashierLockedProps> = ({ children }) => {\n    const { data: activeWallet } = useActiveWalletAccount();\n    const { data: cashierValidation } = useCashierValidation();\n    const { data: accountStatus, isLoading: isAccountStatusLoading } = useAccountStatus();\n\n    const currency = activeWallet?.currency || 'USD';\n    const askFinancialRiskApproval = cashierValidation?.ask_financial_risk_approval;\n    const financialInformationNotComplete = accountStatus?.is_financial_information_not_complete;\n    const tradingExperienceNotComplete = accountStatus?.is_trading_experience_not_complete;\n    const isMFTransferLocked =\n        activeWallet?.loginid?.startsWith('MF') &&\n        (financialInformationNotComplete || tradingExperienceNotComplete) &&\n        askFinancialRiskApproval;\n\n    if (isAccountStatusLoading) {\n        return <WalletLoader />;\n    }\n\n    if (isMFTransferLocked) {\n        return (\n            <div className='wallets-transfer-locked'>\n                <ActionScreen\n                    description={\n                        <Text align='center'>\n                            <Localize\n                                components={[\n                                    <WalletLink href='/account/financial-assessment' key={0} variant='bold' />,\n                                ]}\n                                i18n_default_text='To enable transfers, you must complete the <0>financial assessment form</0>.'\n                            />\n                        </Text>\n                    }\n                    title={\n                        <Localize\n                            i18n_default_text='Transfers from your {{currency}} Wallet are temporarily locked.'\n                            values={{ currency }}\n                        />\n                    }\n                />\n            </div>\n        );\n    }\n\n    return <>{children}</>;\n};\n\nexport default TransferLocked;\n","import React from 'react';\nimport { Chat } from '@deriv/utils';\nimport { Localize } from '@deriv-com/translations';\nimport { Text } from '@deriv-com/ui';\nimport { WalletLink } from '../../../../components';\n\ntype TWithdrawalLimitReachedDescProps = {\n    askFinancialRiskApproval?: boolean;\n    isVerified?: boolean;\n    poaNeedsVerification?: boolean;\n    poiNeedsVerification?: boolean;\n};\n\ntype TWithdrawalLockedDescProps = {\n    askAuthenticate?: boolean;\n    askFixDetails?: boolean;\n    financialAssessmentRequired?: boolean;\n    noWithdrawalOrTradingStatus?: boolean;\n    withdrawalLockedStatus?: boolean;\n};\n\nexport const getWithdrawalLimitReachedDesc = ({\n    askFinancialRiskApproval,\n    isVerified,\n    poaNeedsVerification,\n    poiNeedsVerification,\n}: TWithdrawalLimitReachedDescProps) => {\n    let description = null;\n\n    if (poiNeedsVerification || poaNeedsVerification || !isVerified) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[\n                        <WalletLink href='/account/proof-of-identity' key={0} variant='bold' />,\n                        <WalletLink href='/account/proof-of-address' key={1} variant='bold' />,\n                    ]}\n                    i18n_default_text='You have reached the withdrawal limit. Please check your <0>proof of identity</0> and <1>address</1> document verification status to lift the limit to continue your withdrawal.'\n                />\n            </Text>\n        );\n    } else if (askFinancialRiskApproval) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[<WalletLink href='/account/financial-assessment' key={0} variant='bold' />]}\n                    i18n_default_text='Please complete the <0>financial assessment form</0> to lift the limit to continue your withdrawal.'\n                />\n            </Text>\n        );\n    }\n\n    return description;\n};\n\nconst getWithdrawalLockedDesc = ({\n    askAuthenticate,\n    askFixDetails,\n    financialAssessmentRequired,\n    noWithdrawalOrTradingStatus,\n    withdrawalLockedStatus,\n}: TWithdrawalLockedDescProps) => {\n    let description = null;\n\n    if (financialAssessmentRequired) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[<WalletLink href='/account/financial-assessment' key={0} variant='bold' />]}\n                    i18n_default_text='Please complete the <0>financial assessment</0> to unlock withdrawals.'\n                />\n            </Text>\n        );\n    } else if (askAuthenticate) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[\n                        <WalletLink href='/account/proof-of-identity' key={0} variant='bold' />,\n                        <WalletLink href='/account/proof-of-address' key={1} variant='bold' />,\n                    ]}\n                    i18n_default_text='Your account has not been authenticated. Please submit your <0>proof of identity</0> and <1>proof of address</1> to authenticate your account and request for withdrawals.'\n                />\n            </Text>\n        );\n    } else if (askFixDetails) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[<WalletLink href='/account/personal-details' key={0} variant='bold' />]}\n                    i18n_default_text='Your <0>personal details</0> are incomplete. Please go to your account settings and complete your personal details to enable withdrawals.'\n                />\n            </Text>\n        );\n    } else if (noWithdrawalOrTradingStatus || withdrawalLockedStatus) {\n        description = (\n            <Text align='center'>\n                <Localize\n                    components={[\n                        <button className='wallets-link wallets-link__variant--bold' key={0} onClick={Chat.open} />,\n                    ]}\n                    i18n_default_text='Unfortunately, you can only make deposits. Please contact us via <0>live chat</0> to enable withdrawals.'\n                />\n            </Text>\n        );\n    }\n\n    return description;\n};\n\nexport default getWithdrawalLockedDesc;\n","import React from 'react';\nimport {\n    useAccountLimits,\n    useAccountStatus,\n    useActiveWalletAccount,\n    useCashierValidation,\n    useCryptoConfig,\n    useCurrencyConfig,\n    usePOA,\n    usePOI,\n} from '@deriv/api-v2';\nimport { Localize } from '@deriv-com/translations';\nimport { ActionScreen } from '@deriv-com/ui';\nimport { WalletLoader } from '../../../../components';\nimport getWithdrawalLockedDesc, { getWithdrawalLimitReachedDesc } from './WithdrawalLockedContent';\nimport './WithdrawalLocked.scss';\n\nconst WithdrawalLocked: React.FC<React.PropsWithChildren> = ({ children }) => {\n    const { data: activeWallet } = useActiveWalletAccount();\n    const { data: poiStatus } = usePOI();\n    const { data: poaStatus } = usePOA();\n    const { data: cashierValidation } = useCashierValidation();\n    const { data: accountLimits } = useAccountLimits();\n    const { data: accountStatus, isLoading: isAccountStatusLoading } = useAccountStatus();\n    const { isLoading: isCurrencyConfigLoading } = useCurrencyConfig();\n    const isCryptoProvider = activeWallet?.currency_config?.platform.cashier.includes('crypto');\n    const { data: cryptoConfig } = useCryptoConfig({\n        enabled: isCryptoProvider,\n    });\n\n    const currency = activeWallet?.currency || 'USD';\n\n    const poaNeedsVerification = poaStatus?.poa_needs_verification;\n    const poiNeedsVerification = poiStatus?.poi_needs_verification;\n    const isVerified = poiStatus?.is_verified || poaStatus?.is_verified;\n\n    const askAuthenticate = cashierValidation?.ask_authenticate;\n    const askFinancialRiskApproval = cashierValidation?.ask_financial_risk_approval;\n    const askFixDetails = cashierValidation?.ask_fix_details;\n    const financialAssessmentRequired = cashierValidation?.financial_assessment_required;\n    const noWithdrawalOrTradingStatus = cashierValidation?.no_withdrawal_or_trading_status;\n    const withdrawalLockedStatus = cashierValidation?.withdrawal_locked_status;\n\n    const isWithdrawalLocked = accountStatus?.is_withdrawal_locked;\n\n    const remainder = accountLimits?.remainder;\n    const fractionalDigits = activeWallet?.currency_config?.fractional_digits\n        ? 10 ** -activeWallet.currency_config.fractional_digits\n        : 0.01;\n    const minimumWithdrawal = isCryptoProvider ? cryptoConfig?.minimum_withdrawal : fractionalDigits;\n\n    const withdrawalLimitReached = !!(\n        typeof remainder !== 'undefined' &&\n        typeof minimumWithdrawal !== 'undefined' &&\n        +remainder < minimumWithdrawal\n    );\n    const isLoading = isCurrencyConfigLoading || isAccountStatusLoading;\n\n    if (isLoading) {\n        return <WalletLoader />;\n    }\n\n    if (withdrawalLimitReached) {\n        return (\n            <div className='wallets-withdrawal-locked'>\n                <ActionScreen\n                    description={getWithdrawalLimitReachedDesc({\n                        askFinancialRiskApproval,\n                        isVerified,\n                        poaNeedsVerification,\n                        poiNeedsVerification,\n                    })}\n                    title={\n                        <Localize\n                            i18n_default_text='Withdrawals from your {{currency}} Wallet are temporarily locked.'\n                            values={{ currency }}\n                        />\n                    }\n                />\n            </div>\n        );\n    }\n\n    if (isWithdrawalLocked) {\n        return (\n            <div className='wallets-withdrawal-locked'>\n                <ActionScreen\n                    description={getWithdrawalLockedDesc({\n                        askAuthenticate,\n                        askFixDetails,\n                        financialAssessmentRequired,\n                        noWithdrawalOrTradingStatus,\n                        withdrawalLockedStatus,\n                    })}\n                    title={\n                        <Localize\n                            i18n_default_text='Withdrawals from your {{currency}} Wallet are temporarily locked.'\n                            values={{ currency }}\n                        />\n                    }\n                />\n            </div>\n        );\n    }\n\n    return <>{children}</>;\n};\n\nexport default WithdrawalLocked;\n","import React, { useEffect } from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nimport { WalletDeposit } from '../../flows/WalletDeposit';\nimport { WalletFiatOnRamp } from '../../flows/WalletFiatOnRamp';\nimport { WalletResetBalance } from '../../flows/WalletResetBalance';\nimport { WalletTransactions } from '../../flows/WalletTransactions';\nimport { WalletTransfer } from '../../flows/WalletTransfer';\nimport { WalletWithdrawal } from '../../flows/WalletWithdrawal';\nimport { CashierLocked, DepositLocked, TransferLocked, WithdrawalLocked } from '../../modules';\n\nconst WalletCashierContent = () => {\n    const history = useHistory();\n\n    const isDeposit = useRouteMatch('/wallet/deposit');\n    const isFiatOnRamp = useRouteMatch('/wallet/on-ramp');\n    const isResetBalance = useRouteMatch('/wallet/reset-balance');\n    const isTransfer = useRouteMatch('/wallet/account-transfer');\n    const isTransactions = useRouteMatch('/wallet/transactions');\n    const isWithdraw = useRouteMatch('/wallet/withdrawal');\n\n    useEffect(() => {\n        // redirect to deposit page if no other page is matched\n        if (!isTransfer && !isDeposit && !isTransactions && !isWithdraw && !isResetBalance && !isFiatOnRamp) {\n            history.push('/wallet/deposit');\n        }\n    }, [isTransfer, isDeposit, isTransactions, isWithdraw, isResetBalance, isFiatOnRamp, history]);\n\n    if (isDeposit)\n        return (\n            <CashierLocked module='deposit'>\n                <DepositLocked>\n                    <WalletDeposit />\n                </DepositLocked>\n            </CashierLocked>\n        );\n\n    if (isFiatOnRamp)\n        return (\n            <CashierLocked module='deposit'>\n                <WalletFiatOnRamp />\n            </CashierLocked>\n        );\n\n    if (isResetBalance) return <WalletResetBalance />;\n\n    if (isTransfer)\n        return (\n            <CashierLocked module='transfer'>\n                <TransferLocked>\n                    <WalletTransfer />\n                </TransferLocked>\n            </CashierLocked>\n        );\n\n    if (isTransactions) return <WalletTransactions />;\n\n    if (isWithdraw) {\n        return (\n            <CashierLocked module='withdrawal'>\n                <WithdrawalLocked>\n                    <WalletWithdrawal />\n                </WithdrawalLocked>\n            </CashierLocked>\n        );\n    }\n\n    return <></>;\n};\n\nexport default WalletCashierContent;\n","import React, { useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useActiveWalletAccount } from '@deriv/api-v2';\nimport { displayMoney } from '@deriv/api-v2/src/utils';\nimport {\n    LabelPairedArrowsRotateMdRegularIcon,\n    LabelPairedArrowUpArrowDownMdRegularIcon,\n    LabelPairedMinusMdRegularIcon,\n    LabelPairedPlusMdRegularIcon,\n    LabelPairedSquareListMdRegularIcon,\n    LegacyClose2pxIcon,\n} from '@deriv/quill-icons';\nimport { Localize } from '@deriv-com/translations';\nimport { Text, useDevice } from '@deriv-com/ui';\nimport { WalletCurrencyIcon, WalletGradientBackground } from '../../../../components';\nimport { WalletListCardBadge } from '../../../../components/WalletListCardBadge';\nimport useAllBalanceSubscription from '../../../../hooks/useAllBalanceSubscription';\nimport './WalletCashierHeader.scss';\n\ntype TProps = {\n    hideWalletDetails: boolean;\n};\n\nconst getRealAccountTabs = () => {\n    const realAccountTabs = [\n        {\n            icon: <LabelPairedPlusMdRegularIcon />,\n            path: 'deposit',\n            text: <Localize i18n_default_text='Deposit' />,\n        },\n        {\n            icon: <LabelPairedMinusMdRegularIcon />,\n            path: 'withdrawal',\n            text: <Localize i18n_default_text='Withdraw' />,\n        },\n        {\n            icon: <LabelPairedArrowUpArrowDownMdRegularIcon />,\n            path: 'account-transfer',\n            text: <Localize i18n_default_text='Transfer' />,\n        },\n        {\n            icon: <LabelPairedSquareListMdRegularIcon />,\n            path: 'transactions',\n            text: <Localize i18n_default_text='Transactions' />,\n        },\n    ] as const;\n\n    return realAccountTabs;\n};\n\nconst getVirtualAccountTabs = () => {\n    const virtualAccountTabs = [\n        {\n            icon: <LabelPairedArrowsRotateMdRegularIcon />,\n            path: 'reset-balance',\n            text: <Localize i18n_default_text='Reset Balance' />,\n        },\n        {\n            icon: <LabelPairedArrowUpArrowDownMdRegularIcon />,\n            path: 'account-transfer',\n            text: <Localize i18n_default_text='Transfer' />,\n        },\n        {\n            icon: <LabelPairedSquareListMdRegularIcon />,\n            path: 'transactions',\n            text: <Localize i18n_default_text='Transactions' />,\n        },\n    ] as const;\n\n    return virtualAccountTabs;\n};\n\nconst WalletCashierHeader: React.FC<TProps> = ({ hideWalletDetails }) => {\n    const { data: activeWallet } = useActiveWalletAccount();\n    const { data: balanceData, isLoading: isBalanceLoading } = useAllBalanceSubscription();\n    const { isDesktop } = useDevice();\n    const activeTabRef = useRef<HTMLButtonElement>(null);\n    const history = useHistory();\n    const location = useLocation();\n    // Using type assertion to handle the property that might not be in all route states\n    const isFromDTrader = location?.state ? (location.state as Record<string, unknown>).is_from_dtrader : undefined;\n    const accountsActiveTabIndexRef = useRef<number>(location.state?.accountsActiveTabIndex ?? 0);\n\n    const tabs = activeWallet?.is_virtual ? getVirtualAccountTabs() : getRealAccountTabs();\n    const isDemo = activeWallet?.is_virtual;\n\n    useEffect(() => {\n        if (!isDesktop && activeTabRef.current) {\n            activeTabRef.current.scrollIntoView({ behavior: 'smooth', block: 'end', inline: 'center' });\n        }\n    }, [location.pathname, isDesktop]);\n\n    return (\n        <WalletGradientBackground\n            currency={activeWallet?.currency}\n            device={isDesktop ? 'desktop' : 'mobile'}\n            isDemo={isDemo}\n            theme='light'\n            type='header'\n        >\n            <main className='wallets-cashier-header'>\n                <section className='wallets-cashier-header__info'>\n                    <div className='wallets-cashier-header__top-left-info'>\n                        <div\n                            className={classNames('wallets-cashier-header__details', {\n                                'wallets-cashier-header__details--hide-details': hideWalletDetails,\n                            })}\n                        >\n                            <Text color={isDemo ? 'system-dark-2-general-text' : 'general'} size='md'>\n                                <Localize\n                                    i18n_default_text='{{currency}} Wallet'\n                                    values={{ currency: activeWallet?.currency }}\n                                />\n                            </Text>\n                            {isDemo && <WalletListCardBadge />}\n                        </div>\n                        {isBalanceLoading ? (\n                            <div\n                                className='wallets-skeleton wallets-cashier-header__loader'\n                                data-testid='dt_wallets_cashier_header_balance_loader'\n                            />\n                        ) : (\n                            <Text color={isDemo ? 'white' : 'general'} size='xl' weight='bold'>\n                                {displayMoney(\n                                    balanceData?.[activeWallet?.loginid ?? '']?.balance,\n                                    activeWallet?.currency,\n                                    {\n                                        fractional_digits: activeWallet?.currency_config?.fractional_digits,\n                                    }\n                                )}\n                            </Text>\n                        )}\n                    </div>\n                    <div className='wallets-cashier-header__top-right-info'>\n                        {activeWallet?.wallet_currency_type && (\n                            <div\n                                className={classNames('wallets-cashier-header__currency-icon', {\n                                    'wallets-cashier-header__currency-icon--hide-currency-icon': hideWalletDetails,\n                                })}\n                            >\n                                <WalletCurrencyIcon\n                                    currency={\n                                        activeWallet?.wallet_currency_type === 'Demo'\n                                            ? 'DEMO'\n                                            : activeWallet?.wallet_currency_type\n                                    }\n                                    size='xl'\n                                />\n                            </div>\n                        )}\n                        <LegacyClose2pxIcon\n                            className={classNames('wallets-cashier-header__close-icon', {\n                                'wallets-cashier-header__close-icon--white': isDemo,\n                            })}\n                            data-testid='dt_close_btn'\n                            iconSize='xs'\n                            onClick={() => {\n                                isFromDTrader\n                                    ? history.push('/dtrader')\n                                    : history.push('/', { accountsActiveTabIndex: accountsActiveTabIndexRef?.current });\n                            }}\n                        />\n                    </div>\n                </section>\n                <section className='wallets-cashier-header__tabs'>\n                    {tabs.map(tab => {\n                        const isActiveTab =\n                            location.pathname === `/wallet/on-ramp`\n                                ? tab.path === 'deposit'\n                                : location.pathname === `/wallet/${tab.path}`;\n                        return (\n                            <button\n                                className={`wallets-cashier-header__tab ${\n                                    isActiveTab ? 'wallets-cashier-header__tab--active' : ''\n                                }`}\n                                key={`cashier-tab-${tab.path}`}\n                                onClick={() => history.push(`/wallet/${tab.path}`)}\n                                ref={isActiveTab ? activeTabRef : null}\n                            >\n                                <div\n                                    className={classNames({\n                                        'wallets-cashier-header__tab-icon--system-dark-2-general-text':\n                                            isDemo && !isActiveTab,\n                                    })}\n                                >\n                                    {tab.icon}\n                                </div>\n                                <Text\n                                    color={isDemo && !isActiveTab ? 'system-dark-2-general-text' : 'general'}\n                                    size='sm'\n                                    weight={isActiveTab ? 'bold' : 'normal'}\n                                >\n                                    {tab.text}\n                                </Text>\n                            </button>\n                        );\n                    })}\n                </section>\n            </main>\n        </WalletGradientBackground>\n    );\n};\n\nexport default WalletCashierHeader;\n","import React, { useCallback, useState } from 'react';\nimport { useActiveWalletAccount } from '@deriv/api-v2';\nimport { WalletLoader } from '../../components';\nimport { WalletCashierContent, WalletCashierHeader } from './components';\nimport { CashierScrollContext } from './context';\nimport './WalletCashier.scss';\n\nconst WalletCashier = () => {\n    const { isLoading } = useActiveWalletAccount();\n\n    const [onCashierScroll, setOnCashierScroll] = useState<React.UIEventHandler<HTMLDivElement> | null>(null);\n\n    const [isContentScrolled, setIsContentScrolled] = useState(false);\n\n    const onContentScroll = useCallback(\n        (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n            const target = e.currentTarget as HTMLDivElement;\n            setIsContentScrolled(target.scrollTop > 0);\n            onCashierScroll?.(e);\n        },\n        [onCashierScroll]\n    );\n\n    if (isLoading) return <WalletLoader />;\n\n    return (\n        <div className='wallets-cashier'>\n            <WalletCashierHeader hideWalletDetails={isContentScrolled} />\n            <CashierScrollContext.Provider value={{ onCashierScroll, setOnCashierScroll }}>\n                <div\n                    className='wallets-cashier-content'\n                    data-testid='dt_wallets_cashier_content'\n                    onScroll={onContentScroll}\n                >\n                    <WalletCashierContent />\n                </div>\n            </CashierScrollContext.Provider>\n        </div>\n    );\n};\n\nexport default WalletCashier;\n","import React from 'react';\nimport { WalletCashier } from '../../features';\nimport './CashierModalRoute.scss';\n\nconst CashierModalRoute: React.FC = () => (\n    <div className='wallets-cashier-modal-route'>\n        <WalletCashier />\n    </div>\n);\n\nexport default CashierModalRoute;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-app-card{width:-moz-fit-content;width:fit-content;height:-moz-fit-content;height:fit-content;overflow:hidden}.wallets-app-card--border-radius--sm{border-radius:.4rem}.wallets-app-card--border-radius--md,.wallets-app-card--border-radius--lg{border-radius:.8rem}.wallets-app-card__content{display:flex;flex-direction:column;justify-content:space-between}.wallets-app-card__content--mobile--sm,.wallets-app-card__content--desktop--sm{width:6.4rem;height:4rem;padding:.2rem}.wallets-app-card__content--mobile--md{width:16rem;height:9.6rem;padding:.8rem}.wallets-app-card__content--mobile--lg{width:21.6rem;height:12.8rem;padding:1.6rem}.wallets-app-card__content--desktop--md{width:20rem;height:12rem;padding:1.6rem}.wallets-app-card__content--desktop--lg{width:24rem;height:14.4rem;padding:1.6rem}[dir=\\\"ltr\\\"] .wallets-app-card__badge{right:0}[dir=\\\"rtl\\\"] .wallets-app-card__badge{left:0}.wallets-app-card__badge{position:absolute;top:0}.wallets-app-card__bottom{display:flex;flex-direction:column}\", \"\",{\"version\":3,\"sources\":[\"webpack://./AppCard.scss\"],\"names\":[],\"mappings\":\"AAquBA,kBACI,sBAAA,CAAA,iBAAA,CACA,uBAAA,CAAA,kBAAA,CACA,eAAA,CAGI,qCACI,mBAAA,CAGJ,0EAEI,mBAAA,CAIR,2BACI,YAAA,CACA,qBAAA,CACA,6BAAA,CAII,+EACI,YAAA,CACA,WAAA,CACA,aAAA,CAKJ,uCACI,WAAA,CACA,aAAA,CACA,aAAA,CAGJ,uCACI,aAAA,CACA,cAAA,CACA,cAAA,CAKJ,wCACI,WAAA,CACA,YAAA,CACA,cAAA,CAGJ,wCACI,WAAA,CACA,cAAA,CACA,cAAA,CAKZ,qCAEI,OACA,CAHJ,qCAEI,MACA,CAHJ,yBACI,iBAAA,CAEA,KAAA,CAGJ,0BACI,YAAA,CACA,qBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-app-card {\\n    width: fit-content;\\n    height: fit-content;\\n    overflow: hidden;\\n\\n    &--border-radius {\\n        &--sm {\\n            border-radius: 0.4rem;\\n        }\\n\\n        &--md,\\n        &--lg {\\n            border-radius: 0.8rem;\\n        }\\n    }\\n\\n    &__content {\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: space-between;\\n\\n        &--mobile,\\n        &--desktop {\\n            &--sm {\\n                width: 6.4rem;\\n                height: 4rem;\\n                padding: 0.2rem;\\n            }\\n        }\\n\\n        &--mobile {\\n            &--md {\\n                width: 16rem;\\n                height: 9.6rem;\\n                padding: 0.8rem;\\n            }\\n\\n            &--lg {\\n                width: 21.6rem;\\n                height: 12.8rem;\\n                padding: 1.6rem;\\n            }\\n        }\\n\\n        &--desktop {\\n            &--md {\\n                width: 20rem;\\n                height: 12rem;\\n                padding: 1.6rem;\\n            }\\n\\n            &--lg {\\n                width: 24rem;\\n                height: 14.4rem;\\n                padding: 1.6rem;\\n            }\\n        }\\n    }\\n\\n    &__badge {\\n        position: absolute;\\n        inset-inline-end: 0;\\n        top: 0;\\n    }\\n\\n    &__bottom {\\n        display: flex;\\n        flex-direction: column;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"[dir=\\\"ltr\\\"] .wallets-app-card-badge{border-top-right-radius:.8rem}[dir=\\\"rtl\\\"] .wallets-app-card-badge{border-top-left-radius:.8rem}[dir=\\\"ltr\\\"] .wallets-app-card-badge{border-bottom-left-radius:.8rem}[dir=\\\"rtl\\\"] .wallets-app-card-badge{border-bottom-right-radius:.8rem}.wallets-app-card-badge{display:flex;width:-moz-fit-content;width:fit-content;padding:.4rem .8rem;justify-content:center;align-items:center;height:2.2rem}@media(max-width: 1279px){.wallets-app-card-badge{height:1.6rem;padding-top:.2rem;padding-bottom:.2rem}}.wallets-app-card-badge--demo{background:#377cfc;background:var(--status-light-information, #377cfc)}.wallets-app-card-badge--real{background:#ff444f;background:var(--brand-coral, #ff444f)}\", \"\",{\"version\":3,\"sources\":[\"webpack://./AppCardBadge.scss\"],\"names\":[],\"mappings\":\"AAquBA,oCAOI,6BACA,CARJ,oCAOI,4BACA,CARJ,oCAQI,+BAAA,CARJ,oCAQI,gCAAA,CARJ,wBACI,YAAA,CACA,sBAAA,CAAA,iBAAA,CACA,mBAAA,CACA,sBAAA,CACA,kBAAA,CACA,aAEA,CAvDA,0BA+CJ,wBAWQ,aAAA,CACA,iBAAA,CAAA,oBAAA,CAAA,CAGJ,8BACI,kBAAA,CAAA,mDAAA,CAGJ,8BACI,kBAAA,CAAA,sCAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-app-card-badge {\\n    display: flex;\\n    width: fit-content;\\n    padding: 0.4rem 0.8rem;\\n    justify-content: center;\\n    align-items: center;\\n    height: 2.2rem;\\n    border-start-end-radius: 0.8rem;\\n    border-end-start-radius: 0.8rem;\\n\\n    @include mobile-or-tablet-screen {\\n        height: 1.6rem;\\n        padding-block: 0.2rem;\\n    }\\n\\n    &--demo {\\n        background: var(--status-light-information, #377cfc);\\n    }\\n\\n    &--real {\\n        background: var(--brand-coral, #ff444f);\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-faded-animated-list__list-item-enter,.wallets-faded-animated-list__list-item-appear{opacity:0;grid-template-rows:0fr}.wallets-faded-animated-list__list-item-enter-active,.wallets-faded-animated-list__list-item-appear-active{opacity:1;grid-template-rows:1fr;transition:opacity 250ms ease-in,grid-template-rows 250ms ease-in-out}.wallets-faded-animated-list__list-item-exit{opacity:1;grid-template-rows:1fr}.wallets-faded-animated-list__list-item-exit-active{opacity:0;grid-template-rows:0fr;transition:opacity 250ms ease-in,grid-template-rows 250ms ease-in-out}.wallets-faded-animated-list__list-item--display-grid{display:grid}.wallets-faded-animated-list__list-item--display-grid>:first-child{overflow:hidden}\", \"\",{\"version\":3,\"sources\":[\"webpack://./FadedAnimatedList.scss\"],\"names\":[],\"mappings\":\"AAuuBQ,6FAEI,SAAA,CACA,sBAAA,CAGJ,2GAEI,SAAA,CACA,sBAAA,CACA,qEAAA,CAGJ,6CACI,SAAA,CACA,sBAAA,CAGJ,oDACI,SAAA,CACA,sBAAA,CACA,qEAAA,CAGJ,sDACI,YAAA,CAGJ,mEACI,eAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-faded-animated-list {\\n    &__list-item {\\n        &-enter,\\n        &-appear {\\n            opacity: 0;\\n            grid-template-rows: 0fr;\\n        }\\n\\n        &-enter-active,\\n        &-appear-active {\\n            opacity: 1;\\n            grid-template-rows: 1fr;\\n            transition: opacity 250ms ease-in, grid-template-rows 250ms ease-in-out;\\n        }\\n\\n        &-exit {\\n            opacity: 1;\\n            grid-template-rows: 1fr;\\n        }\\n\\n        &-exit-active {\\n            opacity: 0;\\n            grid-template-rows: 0fr;\\n            transition: opacity 250ms ease-in, grid-template-rows 250ms ease-in-out;\\n        }\\n\\n        &--display-grid {\\n            display: grid;\\n        }\\n\\n        &--display-grid > :first-child {\\n            overflow: hidden;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-priority-crypto-withdrawal{display:flex;flex-direction:column;align-items:center;padding:1.6rem 2.4rem;width:100%;gap:.4rem;background:#f2f3f4}.wallets-priority-crypto-withdrawal-div{height:1.6rem;width:100%}@media(max-width: 1279px){.wallets-priority-crypto-withdrawal-div{height:1.8rem}}.wallets-priority-crypto-withdrawal-divider{border:.5px solid #d6dadb;margin-bottom:.4rem;width:100%}@media(max-width: 1279px){.wallets-priority-crypto-withdrawal{width:100%}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WalletsPriorityCryptoWithdrawLoader.scss\"],\"names\":[],\"mappings\":\"AAquBA,oCACI,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,qBAAA,CACA,UAAA,CACA,SAAA,CACA,kBAAA,CAEA,wCACI,aAAA,CACA,UAAA,CA1DJ,0BAwDA,wCAIQ,aAAA,CAAA,CAIR,4CACI,yBAAA,CACA,mBAAA,CACA,UAAA,CAnEJ,0BA+CJ,oCAuBQ,UAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-priority-crypto-withdrawal {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    padding: 1.6rem 2.4rem;\\n    width: 100%;\\n    gap: 0.4rem;\\n    background: #f2f3f4;\\n\\n    &-div {\\n        height: 1.6rem;\\n        width: 100%;\\n        @include mobile-or-tablet-screen {\\n            height: 1.8rem;\\n        }\\n    }\\n\\n    &-divider {\\n        border: 0.5px solid #d6dadb;\\n        margin-bottom: 0.4rem;\\n        width: 100%;\\n    }\\n    @include mobile-or-tablet-screen {\\n        width: 100%;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-toggle-switch{position:relative;display:inline-flex;width:4.4rem;height:2.4rem}@media(max-width: 1279px){.wallets-toggle-switch{width:3.8rem}}.wallets-toggle-switch>input{visibility:hidden}.wallets-toggle-switch__slider{position:absolute;top:0;right:0;bottom:0;left:0;cursor:pointer;background-color:#d6d6d6;background-color:var(--light-4-disabled-text, #d6d6d6);transition:.4s;border-radius:1.6rem}.wallets-toggle-switch__slider:before{position:absolute;content:\\\"\\\";height:1.8rem;width:1.8rem;left:.3rem;bottom:.3rem;background-color:#fff;background-color:var(--system-dark-1-prominent-text, #fff);transition:.4s;border-radius:50%}@media(max-width: 1279px){.wallets-toggle-switch__slider:before{left:.4rem}}.wallets-toggle-switch input:checked+.wallets-toggle-switch__slider{background-color:#4bb4b3;background-color:var(--light-status-success, #4bb4b3)}.wallets-toggle-switch input:checked+.wallets-toggle-switch__slider:before{transform:translateX(2rem)}@media(max-width: 1279px){.wallets-toggle-switch input:checked+.wallets-toggle-switch__slider:before{transform:translateX(1.2rem)}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./ToggleSwitch.scss\"],\"names\":[],\"mappings\":\"AAquBA,uBACI,iBAAA,CACA,mBAAA,CACA,YAAA,CACA,aAAA,CAnDA,0BA+CJ,uBAOQ,YAAA,CAAA,CAGJ,6BACI,iBAAA,CAGJ,+BACI,iBAAA,CACA,KAAA,CAAA,OAAA,CAAA,QAAA,CAAA,MAAA,CACA,cAAA,CACA,wBAAA,CAAA,sDAAA,CACA,cAAA,CACA,oBAAA,CAEA,sCACI,iBAAA,CACA,UAAA,CACA,aAAA,CACA,YAAA,CACA,UAAA,CACA,YAAA,CACA,qBAAA,CAAA,0DAAA,CACA,cAAA,CACA,iBAAA,CA9ER,0BAqEI,sCAYQ,UAAA,CAAA,CAMhB,oEACI,wBAAA,CAAA,qDAAA,CAGJ,2EAGI,0BAAA,CA9FA,0BA2FJ,2EAQQ,4BAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-toggle-switch {\\n    position: relative;\\n    display: inline-flex;\\n    width: 4.4rem;\\n    height: 2.4rem;\\n\\n    @include mobile-or-tablet-screen {\\n        width: 3.8rem;\\n    }\\n\\n    & > input {\\n        visibility: hidden;\\n    }\\n\\n    &__slider {\\n        position: absolute;\\n        inset: 0;\\n        cursor: pointer;\\n        background-color: var(--light-4-disabled-text, #d6d6d6);\\n        transition: 0.4s;\\n        border-radius: 1.6rem;\\n\\n        &:before {\\n            position: absolute;\\n            content: '';\\n            height: 1.8rem;\\n            width: 1.8rem;\\n            left: 0.3rem;\\n            bottom: 0.3rem;\\n            background-color: var(--system-dark-1-prominent-text, #fff);\\n            transition: 0.4s;\\n            border-radius: 50%;\\n\\n            @include mobile-or-tablet-screen {\\n                left: 0.4rem;\\n            }\\n        }\\n    }\\n}\\n\\n.wallets-toggle-switch input:checked + .wallets-toggle-switch__slider {\\n    background-color: var(--light-status-success, #4bb4b3);\\n}\\n\\n.wallets-toggle-switch input:checked + .wallets-toggle-switch__slider:before {\\n    -webkit-transform: translateX(2rem);\\n    -ms-transform: translateX(2rem);\\n    transform: translateX(2rem);\\n\\n    @include mobile-or-tablet-screen {\\n        -webkit-transform: translateX(1.2rem);\\n        -ms-transform: translateX(1.2rem);\\n        transform: translateX(1.2rem);\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-currency-card{display:flex;justify-content:center;align-items:center;flex-shrink:0}.wallets-currency-card--xl{width:12.8rem;height:8rem}.wallets-currency-card--lg{width:8.4rem;height:5.2rem}.wallets-currency-card--md{width:6.4rem;height:4rem}.wallets-currency-card--sm{width:4rem;height:2.4rem}.wallets-currency-card--xs{width:2.4rem;height:1.4rem}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WalletCurrencyCard.scss\"],\"names\":[],\"mappings\":\"AAquBA,uBACI,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,aAAA,CAEA,2BACI,aAAA,CACA,WAAA,CAGJ,2BACI,YAAA,CACA,aAAA,CAGJ,2BACI,YAAA,CACA,WAAA,CAGJ,2BACI,UAAA,CACA,aAAA,CAGJ,2BACI,YAAA,CACA,aAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-currency-card {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    flex-shrink: 0;\\n\\n    &--xl {\\n        width: 12.8rem;\\n        height: 8rem;\\n    }\\n\\n    &--lg {\\n        width: 8.4rem;\\n        height: 5.2rem;\\n    }\\n\\n    &--md {\\n        width: 6.4rem;\\n        height: 4rem;\\n    }\\n\\n    &--sm {\\n        width: 4rem;\\n        height: 2.4rem;\\n    }\\n\\n    &--xs {\\n        width: 2.4rem;\\n        height: 1.4rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-list-card-badge{display:flex;padding-left:.4rem;padding-right:.4rem;justify-content:center;align-items:center;height:1.4rem;border-radius:.2rem;background:#377cfc;background:var(--status-light-information, #377cfc);outline:none}@media(max-width: 1279px){.wallets-list-card-badge{height:1.2rem}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WalletListCardBadge.scss\"],\"names\":[],\"mappings\":\"AAquBA,yBACI,YAAA,CACA,kBAAA,CAAA,mBAAA,CACA,sBAAA,CACA,kBAAA,CACA,aAAA,CACA,mBAAA,CACA,kBAAA,CAAA,mDAAA,CACA,YAAA,CAvDA,0BA+CJ,yBAWQ,aAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-list-card-badge {\\n    display: flex;\\n    padding-inline: 0.4rem;\\n    justify-content: center;\\n    align-items: center;\\n    height: 1.4rem;\\n    border-radius: 0.2rem;\\n    background: var(--status-light-information, #377cfc);\\n    outline: none;\\n\\n    @include mobile-or-tablet-screen {\\n        height: 1.2rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-market-currency-icon{display:inline-block;position:relative}[dir=rtl] .wallets-market-currency-icon{direction:ltr}.wallets-market-currency-icon__container{display:inline-flex;align-items:flex-start;justify-content:flex-start;width:100%;height:100%}.wallets-market-currency-icon__market-icon{z-index:1;position:relative}.wallets-market-currency-icon__currency-icon{transform:translate(-0.8rem, 1.2rem);border-radius:.4rem}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WalletMarketCurrencyIcon.scss\"],\"names\":[],\"mappings\":\"AAquBA,8BACI,oBAAA,CACA,iBAAA,CAhuBA,wCAmuBI,aAAA,CAGJ,yCACI,mBAAA,CACA,sBAAA,CACA,0BAAA,CACA,UAAA,CACA,WAAA,CAGJ,2CACI,SAAA,CACA,iBAAA,CAGJ,6CACI,oCAAA,CACA,mBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-market-currency-icon {\\n    display: inline-block;\\n    position: relative;\\n\\n    @include rtl {\\n        direction: ltr;\\n    }\\n\\n    &__container {\\n        display: inline-flex;\\n        align-items: flex-start;\\n        justify-content: flex-start;\\n        width: 100%;\\n        height: 100%;\\n    }\\n\\n    &__market-icon {\\n        z-index: 1;\\n        position: relative;\\n    }\\n\\n    &__currency-icon {\\n        transform: translate(-0.8rem, 1.2rem);\\n        border-radius: 0.4rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"@media(min-width: 1280px){.wallets-error-screen{margin-top:3.2rem}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WalletsErrorScreen.scss\"],\"names\":[],\"mappings\":\"AAgrBI,0BAqDJ,sBAEQ,iBAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-error-screen {\\n    @include desktop-screen {\\n        margin-top: 3.2rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-percentage-selector{display:flex;align-items:center;justify-content:space-between;width:100%;height:-moz-fit-content;height:fit-content;gap:4px}@media(max-width: 1279px){.wallets-percentage-selector{width:100%}}.wallets-percentage-selector-block{cursor:pointer;background-color:#f2f3f4;background-color:var(--general-section-1, #f2f3f4);height:2.4rem;width:100%}@media(max-width: 1279px){.wallets-percentage-selector-block{width:100%}}.wallets-percentage-selector-block__fill{background-color:#4bb4b3;background-color:var(--status-success, #4bb4b3);height:100%}.wallets-percentage-selector-block-container{align-items:center;display:flex;flex-direction:column;width:100%;gap:2px}@media(max-width: 1279px){.wallets-percentage-selector-block-container{flex:1}}.wallets-percentage-selector__text{margin-top:.4rem}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WalletsPercentageSelector.scss\"],\"names\":[],\"mappings\":\"AAquBA,6BACI,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,UAAA,CACA,uBAAA,CAAA,kBAAA,CACA,OAAA,CArDA,0BA+CJ,6BASQ,UAAA,CAAA,CAGJ,mCACI,cAAA,CACA,wBAAA,CAAA,kDAAA,CACA,aAAA,CACA,UAAA,CA/DJ,0BA2DA,mCAOQ,UAAA,CAAA,CAGJ,yCACI,wBAAA,CAAA,+CAAA,CACA,WAAA,CAIR,6CACI,kBAAA,CACA,YAAA,CACA,qBAAA,CACA,UAAA,CACA,OAAA,CAhFJ,0BA2EA,6CAQQ,MAAA,CAAA,CAIR,mCACI,gBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-percentage-selector {\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n    width: 100%;\\n    height: fit-content;\\n    gap: 4px;\\n\\n    @include mobile-or-tablet-screen {\\n        width: 100%;\\n    }\\n\\n    &-block {\\n        cursor: pointer;\\n        background-color: var(--general-section-1, #f2f3f4);\\n        height: 2.4rem;\\n        width: 100%;\\n\\n        @include mobile-or-tablet-screen {\\n            width: 100%;\\n        }\\n\\n        &__fill {\\n            background-color: var(--status-success, #4bb4b3);\\n            height: 100%;\\n        }\\n    }\\n\\n    &-block-container {\\n        align-items: center;\\n        display: flex;\\n        flex-direction: column;\\n        width: 100%;\\n        gap: 2px;\\n\\n        @include mobile-or-tablet-screen {\\n            flex: 1;\\n        }\\n    }\\n\\n    &__text {\\n        margin-top: 0.4rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-cashier{display:flex;flex-direction:column;height:calc(100vh - 8.4rem)}@media(max-width: 1279px){.wallets-cashier{height:calc(1vh*100 - 4rem);height:calc(var(--wallets-vh, 1vh)*100 - 4rem)}}.wallets-cashier-content{width:100%;max-width:128rem;display:flex;position:relative;justify-content:center;gap:2.4rem;flex:1;padding:4.8rem 1.6rem 0;margin:0 auto;background-color:#fff;overflow:scroll;overscroll-behavior:none;-ms-overflow-style:none;scrollbar-width:none}@media(min-width: 601px)and (max-width: 1279px){.wallets-cashier-content{width:60rem;margin-left:auto;margin-right:auto;overflow:visible}}@media(max-width: 1279px){.wallets-cashier-content{padding:2.4rem 1.6rem}}.wallets-cashier-content::-webkit-scrollbar{display:none}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WalletCashier.scss\"],\"names\":[],\"mappings\":\"AAquBA,iBACI,YAAA,CACA,qBAAA,CACA,2BAAA,CAlDA,0BA+CJ,iBAMQ,2BAAA,CAAA,8CAAA,CAAA,CAIR,yBACI,UAAA,CACA,gBAAA,CACA,YAAA,CACA,iBAAA,CACA,sBAAA,CACA,UAAA,CACA,MAAA,CACA,uBAAA,CACA,aAAA,CACA,qBAAA,CACA,eAAA,CAEA,wBAAA,CAeA,uBAAA,CACA,oBAAA,CAlGA,gDAqEJ,yBAgBQ,WAAA,CACA,gBAAA,CAAA,iBAAA,CACA,gBAAA,CAAA,CA3EJ,0BAyDJ,yBAsBQ,qBAAA,CAAA,CAGJ,4CACI,YAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-cashier {\\n    display: flex;\\n    flex-direction: column;\\n    height: calc(100vh - (4.8rem + 3.6rem));\\n\\n    @include mobile-or-tablet-screen {\\n        height: calc(var(--wallets-vh, 1vh) * 100 - 4rem);\\n    }\\n}\\n\\n.wallets-cashier-content {\\n    width: 100%;\\n    max-width: 128rem;\\n    display: flex;\\n    position: relative;\\n    justify-content: center;\\n    gap: 2.4rem;\\n    flex: 1;\\n    padding: 4.8rem 1.6rem 0;\\n    margin: 0 auto;\\n    background-color: #ffffff;\\n    overflow: scroll;\\n    //prevent content bouncing on scroll on iPhone devices\\n    overscroll-behavior: none;\\n\\n    @include tablet-screen {\\n        width: 60rem;\\n        margin-inline: auto;\\n        overflow: visible;\\n    }\\n\\n    @include mobile-or-tablet-screen {\\n        padding: 2.4rem 1.6rem;\\n    }\\n\\n    &::-webkit-scrollbar {\\n        display: none;\\n    }\\n    -ms-overflow-style: none;\\n    scrollbar-width: none;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-action-modal{width:44rem;padding:2.4rem;border-radius:.8rem;background:#fff;background:var(--system-light-8-primary-background, #fff);display:flex;flex-direction:column;gap:2.4rem}@media(max-width: 1279px){.wallets-action-modal{width:100%;padding:1.6rem;gap:1.6rem}}.wallets-action-modal__buttons-container{height:4rem;display:flex;justify-content:flex-end;gap:.8rem}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WalletActionModal.scss\"],\"names\":[],\"mappings\":\"AAquBA,sBACI,WAAA,CACA,cAAA,CACA,mBAAA,CACA,eAAA,CAAA,yDAAA,CACA,YAAA,CACA,qBAAA,CACA,UAAA,CAtDA,0BA+CJ,sBAUQ,UAAA,CACA,cAAA,CACA,UAAA,CAAA,CAGJ,yCACI,WAAA,CACA,YAAA,CACA,wBAAA,CACA,SAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-action-modal {\\n    width: 44rem;\\n    padding: 2.4rem;\\n    border-radius: 0.8rem;\\n    background: var(--system-light-8-primary-background, #fff);\\n    display: flex;\\n    flex-direction: column;\\n    gap: 2.4rem;\\n\\n    @include mobile-or-tablet-screen {\\n        width: 100%;\\n        padding: 1.6rem;\\n        gap: 1.6rem;\\n    }\\n\\n    &__buttons-container {\\n        height: 4rem;\\n        display: flex;\\n        justify-content: flex-end;\\n        gap: 0.8rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-cashier-header{width:100%;max-width:128rem;height:16rem;margin:0 auto;padding-top:2.4rem;position:relative;overflow:hidden;display:flex;flex-direction:column;justify-content:space-between;gap:1.6rem}@media(max-width: 1279px){.wallets-cashier-header{padding-top:0;height:-moz-fit-content;height:fit-content}}.wallets-cashier-header__loader{width:14rem;height:3.6rem}@media(max-width: 1279px){.wallets-cashier-header__loader{width:12rem;height:2.6rem}}.wallets-cashier-header__info{display:flex;justify-content:space-between;align-items:center;padding-left:4rem;padding-right:4rem}@media(max-width: 1279px){.wallets-cashier-header__info{padding:1.6rem 1.6rem 0rem}}.wallets-cashier-header__top-left-info{display:flex;flex-direction:column}@media(max-width: 1279px){.wallets-cashier-header__top-left-info{gap:.4rem}}.wallets-cashier-header__details{display:flex;gap:.8rem;align-items:center}@media(max-width: 1279px){.wallets-cashier-header__details{opacity:1;max-height:2rem;transition:opacity .25s ease,max-height .25s ease}.wallets-cashier-header__details--hide-details{max-height:0;opacity:0}}.wallets-cashier-header__top-right-info{display:flex;gap:1.6rem;align-items:start}@media(max-width: 1279px){.wallets-cashier-header__top-right-info{gap:.8rem}}@media(max-width: 1279px){.wallets-cashier-header__currency-icon>:first-child{max-height:4.8rem;transition:opacity .2s ease,max-height .2s ease}.wallets-cashier-header__currency-icon--hide-currency-icon>:first-child{max-height:0;opacity:0}}.wallets-cashier-header__close-icon{cursor:pointer}.wallets-cashier-header__close-icon--white path{fill:#fff;fill:var(--light-8-primary-background, #fff)}.wallets-cashier-header__tabs{display:flex;overflow-x:scroll;padding-left:4rem;padding-right:4rem;-ms-overflow-style:none;scrollbar-width:none}.wallets-cashier-header__tabs::-webkit-scrollbar{display:none}@media(max-width: 1279px){.wallets-cashier-header__tabs{padding-left:1.6rem;padding-right:1.6rem}}.wallets-cashier-header__tab{all:unset;display:flex;min-width:11.2rem;height:4.8rem;padding-left:1.6rem;padding-right:1.6rem;justify-content:center;align-items:center;gap:.8rem;flex-shrink:0;cursor:pointer}@media(max-width: 1279px){.wallets-cashier-header__tab{height:4rem;min-width:7.2rem}}.wallets-cashier-header__tab--active{border-radius:1.6rem 1.6rem 0rem 0rem;background:#fff;background:var(--light-8-primary-background, #fff)}.wallets-cashier-header__tab-icon--system-dark-2-general-text path{fill:#c2c2c2;fill:var(--system-dark-2-general-text, #c2c2c2)}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WalletCashierHeader.scss\"],\"names\":[],\"mappings\":\"AAquBA,wBACI,UAAA,CACA,gBAAA,CACA,YAAA,CACA,aAAA,CACA,kBAAA,CACA,iBAAA,CACA,eAAA,CACA,YAAA,CACA,qBAAA,CACA,6BAAA,CACA,UAAA,CA1DA,0BA+CJ,wBAcQ,aAAA,CACA,uBAAA,CAAA,kBAAA,CAAA,CAGJ,gCACI,WAAA,CACA,aAAA,CAnEJ,0BAiEA,gCAKQ,WAAA,CACA,aAAA,CAAA,CAIR,8BACI,YAAA,CACA,6BAAA,CACA,kBAAA,CACA,iBAAA,CAAA,kBAAA,CA/EJ,0BA2EA,8BAOQ,0BAAA,CAAA,CAIR,uCACI,YAAA,CACA,qBAAA,CAxFJ,0BAsFA,uCAKQ,SAAA,CAAA,CAIR,iCACI,YAAA,CACA,SAAA,CACA,kBAAA,CAlGJ,0BA+FA,iCAMQ,SAAA,CACA,eAAA,CACA,iDAAA,CAEA,+CACI,YAAA,CACA,SAAA,CAAA,CAKZ,wCACI,YAAA,CACA,UAAA,CACA,iBAAA,CAnHJ,0BAgHA,wCAMQ,SAAA,CAAA,CAtHR,0BA4HQ,oDACI,iBAAA,CACA,+CAAA,CAGJ,wEACI,YAAA,CACA,SAAA,CAAA,CAKZ,oCACI,cAAA,CAGI,gDACI,SAAA,CAAA,4CAAA,CAKZ,8BACI,YAAA,CACA,iBAAA,CACA,iBAAA,CAAA,kBAAA,CACA,uBAAA,CACA,oBAAA,CAEA,iDACI,YAAA,CA1JR,0BAkJA,8BAYQ,mBAAA,CAAA,oBAAA,CAAA,CAIR,6BACI,SAAA,CACA,YAAA,CACA,iBAAA,CACA,aAAA,CACA,mBAAA,CAAA,oBAAA,CACA,sBAAA,CACA,kBAAA,CACA,SAAA,CACA,aAAA,CACA,cAAA,CA5KJ,0BAkKA,6BAaQ,WAAA,CACA,gBAAA,CAAA,CAGJ,qCACI,qCAAA,CACA,eAAA,CAAA,kDAAA,CAMA,mEACI,YAAA,CAAA,+CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-cashier-header {\\n    width: 100%;\\n    max-width: 128rem;\\n    height: 16rem;\\n    margin: 0 auto;\\n    padding-top: 2.4rem;\\n    position: relative;\\n    overflow: hidden;\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: space-between;\\n    gap: 1.6rem;\\n\\n    @include mobile-or-tablet-screen {\\n        padding-top: 0;\\n        height: fit-content;\\n    }\\n\\n    &__loader {\\n        width: 14rem;\\n        height: 3.6rem;\\n\\n        @include mobile-or-tablet-screen {\\n            width: 12rem;\\n            height: 2.6rem;\\n        }\\n    }\\n\\n    &__info {\\n        display: flex;\\n        justify-content: space-between;\\n        align-items: center;\\n        padding-inline: 4rem;\\n\\n        @include mobile-or-tablet-screen {\\n            padding: 1.6rem 1.6rem 0rem;\\n        }\\n    }\\n\\n    &__top-left-info {\\n        display: flex;\\n        flex-direction: column;\\n\\n        @include mobile-or-tablet-screen {\\n            gap: 0.4rem;\\n        }\\n    }\\n\\n    &__details {\\n        display: flex;\\n        gap: 0.8rem;\\n        align-items: center;\\n\\n        @include mobile-or-tablet-screen {\\n            opacity: 1;\\n            max-height: 2rem;\\n            transition: opacity 0.25s ease, max-height 0.25s ease;\\n\\n            &--hide-details {\\n                max-height: 0;\\n                opacity: 0;\\n            }\\n        }\\n    }\\n\\n    &__top-right-info {\\n        display: flex;\\n        gap: 1.6rem;\\n        align-items: start;\\n\\n        @include mobile-or-tablet-screen {\\n            gap: 0.8rem;\\n        }\\n    }\\n\\n    &__currency-icon {\\n        @include mobile-or-tablet-screen {\\n            & > :first-child {\\n                max-height: 4.8rem;\\n                transition: opacity 0.2s ease, max-height 0.2s ease;\\n            }\\n\\n            &--hide-currency-icon > :first-child {\\n                max-height: 0;\\n                opacity: 0;\\n            }\\n        }\\n    }\\n\\n    &__close-icon {\\n        cursor: pointer;\\n\\n        &--white {\\n            path {\\n                fill: var(--light-8-primary-background, #fff);\\n            }\\n        }\\n    }\\n\\n    &__tabs {\\n        display: flex;\\n        overflow-x: scroll;\\n        padding-inline: 4rem;\\n        -ms-overflow-style: none;\\n        scrollbar-width: none;\\n\\n        &::-webkit-scrollbar {\\n            display: none;\\n        }\\n\\n        @include mobile-or-tablet-screen {\\n            padding-inline: 1.6rem;\\n        }\\n    }\\n\\n    &__tab {\\n        all: unset;\\n        display: flex;\\n        min-width: 11.2rem;\\n        height: 4.8rem;\\n        padding-inline: 1.6rem;\\n        justify-content: center;\\n        align-items: center;\\n        gap: 0.8rem;\\n        flex-shrink: 0;\\n        cursor: pointer;\\n\\n        @include mobile-or-tablet-screen {\\n            height: 4rem;\\n            min-width: 7.2rem;\\n        }\\n\\n        &--active {\\n            border-radius: 1.6rem 1.6rem 0rem 0rem;\\n            background: var(--light-8-primary-background, #fff);\\n        }\\n    }\\n\\n    &__tab-icon {\\n        &--system-dark-2-general-text {\\n            path {\\n                fill: var(--system-dark-2-general-text, #c2c2c2);\\n            }\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"@media(min-width: 1024px){.wallets-cashier-locked{margin-top:3.2rem}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./CashierLocked.scss\"],\"names\":[],\"mappings\":\"AAguBI,0BAKJ,wBAEQ,iBAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-cashier-locked {\\n    @include desktop {\\n        margin-top: 3.2rem; // 48px + 32px = 80px\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-deposit-crypto{position:relative;height:-moz-fit-content;height:fit-content;width:100%;display:grid;justify-content:center;grid-gap:2.4rem;gap:2.4rem;padding-bottom:2.4rem}@media(min-width: 1280px){.wallets-deposit-crypto{grid-template-columns:1fr 58.8rem 1fr}}@media(max-width: 1279px){.wallets-deposit-crypto{gap:1.6rem}}.wallets-deposit-crypto__placeholder{display:block}@media(max-width: 1279px){.wallets-deposit-crypto__placeholder{display:none}}.wallets-deposit-crypto__main-content{max-width:58.8rem;display:flex;flex-direction:column;gap:2.4rem;position:relative}@media(max-width: 1279px){.wallets-deposit-crypto__main-content{padding:0;gap:1.6rem}}.wallets-deposit-crypto__right-content{height:-moz-fit-content;height:fit-content;display:flex;flex:1 1 0;justify-content:flex-end}@media(min-width: 1280px){[dir=\\\"ltr\\\"] .wallets-deposit-crypto__right-content .wallets-transaction-status{margin-right:2.4rem}[dir=\\\"rtl\\\"] .wallets-deposit-crypto__right-content .wallets-transaction-status{margin-left:2.4rem}.wallets-deposit-crypto__right-content .wallets-transaction-status{margin-top:-2.4rem}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./DepositCrypto.scss\"],\"names\":[],\"mappings\":\"AAquBA,wBACI,iBAAA,CACA,uBAAA,CAAA,kBAAA,CACA,UAAA,CACA,YAAA,CACA,sBAAA,CACA,eAAA,CAAA,UAAA,CACA,qBAAA,CA5DA,0BAqDJ,wBAUQ,qCAAA,CAAA,CAzDJ,0BA+CJ,wBAcQ,UAAA,CAAA,CAGJ,qCACI,aAAA,CAjEJ,0BAgEA,qCAIQ,YAAA,CAAA,CAIR,sCACI,iBAAA,CACA,YAAA,CACA,qBAAA,CACA,UAAA,CACA,iBAAA,CA7EJ,0BAwEA,sCAQQ,SAAA,CACA,UAAA,CAAA,CAIR,uCACI,uBAAA,CAAA,kBAAA,CACA,YAAA,CACA,UAAA,CACA,wBAAA,CA/FJ,0BAiGI,+EAGQ,mBAAA,CAHR,+EAGQ,kBAAA,CAHR,mEAEQ,kBACA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-deposit-crypto {\\n    position: relative;\\n    height: fit-content;\\n    width: 100%;\\n    display: grid;\\n    justify-content: center;\\n    gap: 2.4rem;\\n    padding-bottom: 2.4rem;\\n\\n    @include desktop-screen {\\n        grid-template-columns: 1fr 58.8rem 1fr;\\n    }\\n\\n    @include mobile-or-tablet-screen {\\n        gap: 1.6rem;\\n    }\\n\\n    &__placeholder {\\n        display: block;\\n\\n        @include mobile-or-tablet-screen {\\n            display: none;\\n        }\\n    }\\n\\n    &__main-content {\\n        max-width: 58.8rem;\\n        display: flex;\\n        flex-direction: column;\\n        gap: 2.4rem;\\n        position: relative;\\n\\n        @include mobile-or-tablet-screen {\\n            padding: 0;\\n            gap: 1.6rem;\\n        }\\n    }\\n\\n    &__right-content {\\n        height: fit-content;\\n        display: flex;\\n        flex: 1 1 0;\\n        justify-content: flex-end;\\n\\n        .wallets-transaction-status {\\n            @include desktop-screen {\\n                margin-top: -2.4rem;\\n                margin-inline-end: 2.4rem;\\n            }\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-deposit-crypto-address{display:flex;flex-direction:column;align-items:center;gap:2.4rem;min-height:6rem;width:100%}.wallets-deposit-crypto-address__hash{width:-moz-fit-content;width:fit-content;display:flex;align-items:center;justify-content:space-between;border:.1rem solid #e6e6e6;border-radius:.4rem}@media(max-width: 1279px){.wallets-deposit-crypto-address__hash{width:100%}}.wallets-deposit-crypto-address__hash-text{overflow-x:hidden;padding:.8rem;text-overflow:ellipsis}.wallets-deposit-crypto-address__hash-clipboard{display:flex;align-items:center;height:100%;gap:.8rem}[dir=\\\"ltr\\\"] .wallets-deposit-crypto-address__clipboard{border-left:1px solid #e6e6e6}[dir=\\\"rtl\\\"] .wallets-deposit-crypto-address__clipboard{border-right:1px solid #e6e6e6}.wallets-deposit-crypto-address__clipboard{padding:1rem;box-sizing:border-box}\", \"\",{\"version\":3,\"sources\":[\"webpack://./DepositCryptoAddress.scss\"],\"names\":[],\"mappings\":\"AAquBA,gCACI,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,UAAA,CACA,eAAA,CACA,UAAA,CAEA,sCACI,sBAAA,CAAA,iBAAA,CACA,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,0BAAA,CACA,mBAAA,CA7DJ,0BAuDA,sCASQ,UAAA,CAAA,CAGJ,2CACI,iBAAA,CACA,aAAA,CACA,sBAAA,CAGJ,gDACI,YAAA,CACA,kBAAA,CACA,WAAA,CACA,SAAA,CAIR,uDAEI,6BACA,CAHJ,uDAEI,8BACA,CAHJ,2CACI,YAAA,CAEA,qBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-deposit-crypto-address {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    gap: 2.4rem;\\n    min-height: 6rem;\\n    width: 100%;\\n\\n    &__hash {\\n        width: fit-content;\\n        display: flex;\\n        align-items: center;\\n        justify-content: space-between;\\n        border: 0.1rem solid #e6e6e6;\\n        border-radius: 0.4rem;\\n\\n        @include mobile-or-tablet-screen {\\n            width: 100%;\\n        }\\n\\n        &-text {\\n            overflow-x: hidden;\\n            padding: 0.8rem;\\n            text-overflow: ellipsis;\\n        }\\n\\n        &-clipboard {\\n            display: flex;\\n            align-items: center;\\n            height: 100%;\\n            gap: 0.8rem;\\n        }\\n    }\\n\\n    &__clipboard {\\n        padding: 1rem;\\n        border-inline-start: 1px solid #e6e6e6;\\n        box-sizing: border-box;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-deposit-crypto-disclaimers{display:flex;flex-direction:column;justify-content:center;gap:2.4rem}@media(max-width: 1279px){.wallets-deposit-crypto-disclaimers{gap:1.6rem}}.wallets-deposit-crypto-disclaimers__content{display:flex;flex-direction:column;align-items:flex-start;line-height:1.4rem;gap:1rem}@media(max-width: 1279px){.wallets-deposit-crypto-disclaimers__content{gap:.8rem}}[dir=\\\"ltr\\\"] .wallets-deposit-crypto-disclaimers__points{margin-left:1.4rem}[dir=\\\"rtl\\\"] .wallets-deposit-crypto-disclaimers__points{margin-right:1.4rem}.wallets-deposit-crypto-disclaimers__points{list-style:disc}.wallets-deposit-crypto-disclaimers__note{display:flex;justify-content:center}@media(max-width: 1279px){.wallets-deposit-crypto-disclaimers__note{justify-content:initial}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./DepositCryptoDisclaimers.scss\"],\"names\":[],\"mappings\":\"AAquBA,oCACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,UAAA,CAnDA,0BA+CJ,oCAOQ,UAAA,CAAA,CAGJ,6CACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,QAAA,CA9DJ,0BAyDA,6CAQQ,SAAA,CAAA,CAIR,wDAEI,kBAAA,CAFJ,wDAEI,mBAAA,CAFJ,4CACI,eACA,CAGJ,0CACI,YAAA,CACA,sBAAA,CA5EJ,0BA0EA,0CAKQ,uBAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-deposit-crypto-disclaimers {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    gap: 2.4rem;\\n\\n    @include mobile-or-tablet-screen {\\n        gap: 1.6rem;\\n    }\\n\\n    &__content {\\n        display: flex;\\n        flex-direction: column;\\n        align-items: flex-start;\\n        line-height: 1.4rem;\\n        gap: 1rem;\\n\\n        @include mobile-or-tablet-screen {\\n            gap: 0.8rem;\\n        }\\n    }\\n\\n    &__points {\\n        list-style: disc;\\n        margin-inline-start: 1.4rem;\\n    }\\n\\n    &__note {\\n        display: flex;\\n        justify-content: center;\\n\\n        @include mobile-or-tablet-screen {\\n            justify-content: unset;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-deposit-crypto-try-fiat-onramp__container{display:flex;width:100%;margin:0 auto}@media(min-width: 1280px){.wallets-deposit-crypto-try-fiat-onramp__container{max-width:40rem}}.wallets-deposit-crypto-try-fiat-onramp__content{background-color:#f2f3f4;background-color:var(--general-section-1, #f2f3f4);border-radius:.8rem;padding:1.6rem 2.4rem;width:100%}.wallets-deposit-crypto-try-fiat-onramp__link{font-weight:400}\", \"\",{\"version\":3,\"sources\":[\"webpack://./DepositCryptoTryFiatOnRamp.scss\"],\"names\":[],\"mappings\":\"AAsuBI,mDACI,YAAA,CACA,UAAA,CACA,aAAA,CAzDJ,0BAsDA,mDAMQ,eAAA,CAAA,CAIR,iDACI,wBAAA,CAAA,kDAAA,CACA,mBAAA,CACA,qBAAA,CACA,UAAA,CAGJ,8CACI,eAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-deposit-crypto-try-fiat-onramp {\\n    &__container {\\n        display: flex;\\n        width: 100%;\\n        margin: 0 auto;\\n\\n        @include desktop-screen {\\n            max-width: 40rem;\\n        }\\n    }\\n\\n    &__content {\\n        background-color: var(--general-section-1, #f2f3f4);\\n        border-radius: 0.8rem;\\n        padding: 1.6rem 2.4rem;\\n        width: 100%;\\n    }\\n\\n    &__link {\\n        font-weight: 400;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-deposit-fiat__iframe{position:relative;width:50%;height:100%;max-width:58.8rem;border:none}@media(max-width: 1279px){.wallets-deposit-fiat__iframe{width:100%}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./DepositFiat.scss\"],\"names\":[],\"mappings\":\"AAsuBI,8BACI,iBAAA,CACA,SAAA,CACA,WAAA,CACA,iBAAA,CACA,WAAA,CArDJ,0BAgDA,8BAQQ,UAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-deposit-fiat {\\n    &__iframe {\\n        position: relative;\\n        width: 50%;\\n        height: 100%;\\n        max-width: 58.8rem;\\n        border: none;\\n\\n        @include mobile-or-tablet-screen {\\n            width: 100%;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"@media(min-width: 1024px){.wallets-deposit-locked{margin-top:3.2rem}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./DepositLocked.scss\"],\"names\":[],\"mappings\":\"AAguBI,0BAKJ,wBAEQ,iBAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-deposit-locked {\\n    @include desktop {\\n        margin-top: 3.2rem; // 48px + 32px = 80px\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-fiat-onramp{position:relative;align-items:flex-start;display:flex;flex:1 0 0}@media(max-width: 1279px){.wallets-fiat-onramp{flex:initial;flex-direction:column;padding:0}}[dir=\\\"ltr\\\"] .wallets-fiat-onramp__actions{left:.4rem}[dir=\\\"rtl\\\"] .wallets-fiat-onramp__actions{right:.4rem}.wallets-fiat-onramp__actions{position:absolute;top:-2.4rem}@media(max-width: 1279px){.wallets-fiat-onramp__actions{top:-0.8rem}}.wallets-fiat-onramp__content{align-items:center;display:flex;flex-direction:column;width:100%}@media(max-width: 1279px){.wallets-fiat-onramp__content{flex-direction:column-reverse;justify-content:space-between;padding-top:4rem;flex:1}}.wallets-fiat-onramp__description{align-items:center;display:flex;padding-bottom:1.6rem;max-width:79.2rem}@media(max-width: 1279px){.wallets-fiat-onramp__description{padding:1.6rem 0 0;box-shadow:0 .2rem 0 0 #f2f3f4 inset}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./FiatOnRamp.scss\"],\"names\":[],\"mappings\":\"AAquBA,qBACI,iBAAA,CACA,sBAAA,CACA,YAAA,CACA,UAAA,CAnDA,0BA+CJ,qBAOQ,YAAA,CACA,qBAAA,CACA,SAAA,CAAA,CAGJ,0CAGI,UAAA,CAHJ,0CAGI,WAAA,CAHJ,8BACI,iBAAA,CACA,WACA,CA9DJ,0BA2DA,8BAMQ,WAAA,CAAA,CAIR,8BACI,kBAAA,CACA,YAAA,CACA,qBAAA,CACA,UAAA,CAzEJ,0BAqEA,8BAOQ,6BAAA,CACA,6BAAA,CACA,gBAAA,CACA,MAAA,CAAA,CAIR,kCACI,kBAAA,CACA,YAAA,CACA,qBAAA,CACA,iBAAA,CAvFJ,0BAmFA,kCAOQ,kBAAA,CACA,oCAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-fiat-onramp {\\n    position: relative;\\n    align-items: flex-start;\\n    display: flex;\\n    flex: 1 0 0;\\n\\n    @include mobile-or-tablet-screen {\\n        flex: unset;\\n        flex-direction: column;\\n        padding: 0;\\n    }\\n\\n    &__actions {\\n        position: absolute;\\n        top: -2.4rem;\\n        inset-inline-start: 0.4rem;\\n\\n        @include mobile-or-tablet-screen {\\n            top: -0.8rem;\\n        }\\n    }\\n\\n    &__content {\\n        align-items: center;\\n        display: flex;\\n        flex-direction: column;\\n        width: 100%;\\n\\n        @include mobile-or-tablet-screen {\\n            flex-direction: column-reverse;\\n            justify-content: space-between;\\n            padding-top: 4rem;\\n            flex: 1;\\n        }\\n    }\\n\\n    &__description {\\n        align-items: center;\\n        display: flex;\\n        padding-bottom: 1.6rem;\\n        max-width: 79.2rem;\\n\\n        @include mobile-or-tablet-screen {\\n            padding: 1.6rem 0 0;\\n            box-shadow: 0 0.2rem 0 0 #f2f3f4 inset;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-fiat-onramp-disclaimer{align-items:flex-start;display:flex;flex-direction:column;max-width:79.2rem}@media(max-width: 1279px){.wallets-fiat-onramp-disclaimer{justify-content:flex-start;gap:.8rem}}.wallets-fiat-onramp-disclaimer__buttons{display:flex;gap:.8rem;justify-content:flex-end;padding-top:4.2rem;width:100%}@media(max-width: 1279px){.wallets-fiat-onramp-disclaimer__buttons{padding-top:.8rem}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./FiatOnRampDisclaimer.scss\"],\"names\":[],\"mappings\":\"AAquBA,gCACI,sBAAA,CACA,YAAA,CACA,qBAAA,CACA,iBAAA,CAnDA,0BA+CJ,gCAOQ,0BAAA,CACA,SAAA,CAAA,CAGJ,yCACI,YAAA,CACA,SAAA,CACA,wBAAA,CACA,kBAAA,CACA,UAAA,CA/DJ,0BA0DA,yCAQQ,iBAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-fiat-onramp-disclaimer {\\n    align-items: flex-start;\\n    display: flex;\\n    flex-direction: column;\\n    max-width: 79.2rem;\\n\\n    @include mobile-or-tablet-screen {\\n        justify-content: flex-start;\\n        gap: 0.8rem;\\n    }\\n\\n    &__buttons {\\n        display: flex;\\n        gap: 0.8rem;\\n        justify-content: flex-end;\\n        padding-top: 4.2rem;\\n        width: 100%;\\n\\n        @include mobile-or-tablet-screen {\\n            padding-top: 0.8rem;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"[dir=\\\"ltr\\\"] .wallets-fiat-onramp-provider{padding-right:3.2rem}[dir=\\\"rtl\\\"] .wallets-fiat-onramp-provider{padding-left:3.2rem}.wallets-fiat-onramp-provider{align-items:center;background:#fff;background:var(--system-light-8-primary-background, #fff);border-radius:.8rem;box-shadow:0 1.6rem 2rem 0 rgba(0,0,0,.05),0 0 2rem 0 rgba(0,0,0,.05);display:flex;flex-direction:row;gap:1.6rem;max-width:79.2rem;padding:1.6rem}@media(max-width: 1279px){[dir=\\\"ltr\\\"] .wallets-fiat-onramp-provider{padding-right:1.6rem}[dir=\\\"rtl\\\"] .wallets-fiat-onramp-provider{padding-left:1.6rem}.wallets-fiat-onramp-provider{align-items:flex-start;display:grid;grid-gap:.8rem;grid-template-columns:repeat(4, 1fr);grid-template-rows:repeat(2, auto)}}.wallets-fiat-onramp-provider__content{display:flex;flex-direction:column;align-items:flex-start;gap:.8rem}@media(max-width: 1279px){.wallets-fiat-onramp-provider__content{grid-column:2/5;grid-row-start:1}}.wallets-fiat-onramp-provider__icons{display:flex;flex-direction:row;padding-top:.8rem}@media(max-width: 1279px){.wallets-fiat-onramp-provider__icons{display:none}}.wallets-fiat-onramp-provider__logo{height:8rem;width:12.8rem}.wallets-fiat-onramp-provider__logo *{height:inherit;width:inherit}@media(max-width: 1279px){.wallets-fiat-onramp-provider__logo{grid-column:1/2;grid-row-start:1;height:4.5rem;width:7.2rem}}.wallets-fiat-onramp-provider__mobile-icons{display:none}@media(max-width: 1279px){.wallets-fiat-onramp-provider__mobile-icons{display:flex;flex-direction:row;grid-column:1/4;grid-row-start:2;justify-content:space-evenly}}.wallets-fiat-onramp-provider__payment-icon{height:4rem;width:6.4rem}.wallets-fiat-onramp-provider__payment-icon *{height:inherit;width:inherit}\", \"\",{\"version\":3,\"sources\":[\"webpack://./FiatOnRampProviderCard.scss\"],\"names\":[],\"mappings\":\"AAquBA,0CAUI,oBAAA,CAVJ,0CAUI,mBAAA,CAVJ,8BACI,kBAAA,CACA,eAAA,CAAA,yDAAA,CACA,mBAAA,CACA,qEAAA,CACA,YAAA,CACA,kBAAA,CACA,UAAA,CACA,iBAAA,CACA,cACA,CAzDA,0BA+CJ,0CAkBQ,oBAAA,CAlBR,0CAkBQ,mBAAA,CAlBR,8BAaQ,sBAAA,CACA,YAAA,CACA,cAAA,CACA,oCAAA,CACA,kCACA,CAAA,CAGJ,uCACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,SAAA,CAxEJ,0BAoEA,uCAOQ,eAAA,CACA,gBAAA,CAAA,CAIR,qCACI,YAAA,CACA,kBAAA,CACA,iBAAA,CAnFJ,0BAgFA,qCAMQ,YAAA,CAAA,CAIR,oCACI,WAAA,CACA,aAAA,CACA,sCACI,cAAA,CACA,aAAA,CA/FR,0BA0FA,oCASQ,eAAA,CACA,gBAAA,CACA,aAAA,CACA,YAAA,CAAA,CAIR,4CACI,YAAA,CA3GJ,0BA0GA,4CAIQ,YAAA,CACA,kBAAA,CACA,eAAA,CACA,gBAAA,CACA,4BAAA,CAAA,CAIR,4CACI,WAAA,CACA,YAAA,CACA,8CACI,cAAA,CACA,aAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-fiat-onramp-provider {\\n    align-items: center;\\n    background: var(--system-light-8-primary-background, #fff);\\n    border-radius: 0.8rem;\\n    box-shadow: 0 1.6rem 2rem 0 rgba(0, 0, 0, 0.05), 0 0 2rem 0 rgba(0, 0, 0, 0.05);\\n    display: flex;\\n    flex-direction: row;\\n    gap: 1.6rem;\\n    max-width: 79.2rem;\\n    padding: 1.6rem;\\n    padding-inline-end: 3.2rem;\\n\\n    @include mobile-or-tablet-screen {\\n        align-items: flex-start;\\n        display: grid;\\n        grid-gap: 0.8rem;\\n        grid-template-columns: repeat(4, 1fr);\\n        grid-template-rows: repeat(2, auto);\\n        padding-inline-end: 1.6rem;\\n    }\\n\\n    &__content {\\n        display: flex;\\n        flex-direction: column;\\n        align-items: flex-start;\\n        gap: 0.8rem;\\n\\n        @include mobile-or-tablet-screen {\\n            grid-column: 2 / 5;\\n            grid-row-start: 1;\\n        }\\n    }\\n\\n    &__icons {\\n        display: flex;\\n        flex-direction: row;\\n        padding-top: 0.8rem;\\n\\n        @include mobile-or-tablet-screen {\\n            display: none;\\n        }\\n    }\\n\\n    &__logo {\\n        height: 8rem;\\n        width: 12.8rem;\\n        * {\\n            height: inherit;\\n            width: inherit;\\n        }\\n\\n        @include mobile-or-tablet-screen {\\n            grid-column: 1 / 2;\\n            grid-row-start: 1;\\n            height: 4.5rem;\\n            width: 7.2rem;\\n        }\\n    }\\n\\n    &__mobile-icons {\\n        display: none;\\n\\n        @include mobile-or-tablet-screen {\\n            display: flex;\\n            flex-direction: row;\\n            grid-column: 1 / 4;\\n            grid-row-start: 2;\\n            justify-content: space-evenly;\\n        }\\n    }\\n\\n    &__payment-icon {\\n        height: 4rem;\\n        width: 6.4rem;\\n        * {\\n            height: inherit;\\n            width: inherit;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transaction-status{width:100%;display:flex;align-self:stretch;flex-direction:column;gap:.8rem;background-color:#f2f3f4;background-color:var(--general-section-1, #f2f3f4);border-radius:.8rem;padding:1.6rem 2.4rem}@media(min-width: 1024px){.wallets-transaction-status{width:28.2rem}}.wallets-transaction-status__header{width:100%;display:flex;justify-content:space-between;align-items:center}.wallets-transaction-status__body{position:relative;width:100%;display:flex;flex-direction:column;gap:.8rem}@media(max-width: 1279px){.wallets-transaction-status{width:100%}}.wallets-transaction-status__loader{margin:4rem 0}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransactionStatus.scss\"],\"names\":[],\"mappings\":\"AAquBA,4BACI,UAAA,CAMA,YAAA,CACA,kBAAA,CACA,qBAAA,CACA,SAAA,CACA,wBAAA,CAAA,kDAAA,CACA,mBAAA,CACA,qBAAA,CAlBA,0BAKJ,4BAIQ,aAAA,CAAA,CAWJ,oCACI,UAAA,CACA,YAAA,CACA,6BAAA,CACA,kBAAA,CAGJ,kCACI,iBAAA,CACA,UAAA,CACA,YAAA,CACA,qBAAA,CACA,SAAA,CA1EJ,0BA+CJ,4BA+BQ,UAAA,CAAA,CAGJ,oCACI,aAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transaction-status {\\n    width: 100%;\\n\\n    @include desktop {\\n        width: 28.2rem;\\n    }\\n\\n    display: flex;\\n    align-self: stretch;\\n    flex-direction: column;\\n    gap: 0.8rem;\\n    background-color: var(--general-section-1, #f2f3f4);\\n    border-radius: 0.8rem;\\n    padding: 1.6rem 2.4rem;\\n\\n    &__header {\\n        width: 100%;\\n        display: flex;\\n        justify-content: space-between;\\n        align-items: center;\\n    }\\n\\n    &__body {\\n        position: relative;\\n        width: 100%;\\n        display: flex;\\n        flex-direction: column;\\n        gap: 0.8rem;\\n    }\\n\\n    @include mobile-or-tablet-screen {\\n        width: 100%;\\n    }\\n\\n    &__loader {\\n        margin: 4rem 0;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-crypto-transaction{position:relative;width:100%;display:flex;flex-direction:column;flex:1}.wallets-crypto-transaction__type-and-status{width:100%;display:flex;justify-content:space-between;align-items:flex-start}.wallets-crypto-transaction__amount-and-date{width:100%;display:flex;justify-content:space-between;align-items:center;margin:.4rem 0}.wallets-crypto-transaction__status{display:flex;align-items:center;gap:.2rem}.wallets-crypto-transaction__status__dot{width:.4rem;height:.4rem;border-radius:.2rem}.wallets-crypto-transaction__status__dot--pending,.wallets-crypto-transaction__status__dot--locked,.wallets-crypto-transaction__status__dot--performing-blockchain-txn,.wallets-crypto-transaction__status__dot--processing,.wallets-crypto-transaction__status__dot--reverting,.wallets-crypto-transaction__status__dot--verified{background:#ffad3a;background:var(--status-warning, #ffad3a)}.wallets-crypto-transaction__status__dot--confirmed,.wallets-crypto-transaction__status__dot--sent{background:#4bb4b3;background:var(--status-success, #4bb4b3)}.wallets-crypto-transaction__status__dot--error,.wallets-crypto-transaction__status__dot--cancelled,.wallets-crypto-transaction__status__dot--rejected,.wallets-crypto-transaction__status__dot--reverted{background:#ec3f3f;background:var(--status-danger, #ec3f3f)}.wallets-crypto-transaction__cancel-button-container{margin-top:.4rem}[dir=\\\"ltr\\\"] .wallets-crypto-transaction__cancel-button{margin-left:.3rem}[dir=\\\"rtl\\\"] .wallets-crypto-transaction__cancel-button{margin-right:.3rem}.wallets-crypto-transaction__cancel-button{display:flex;padding:0;border:none;outline:none;cursor:pointer}.wallets-crypto-transaction__red-text{color:#ff444f;color:var(--brand-coral, #ff444f);text-decoration:none}.wallets-action-modal{width:40rem}\", \"\",{\"version\":3,\"sources\":[\"webpack://./CryptoTransaction.scss\"],\"names\":[],\"mappings\":\"AAquBA,4BACI,iBAAA,CACA,UAAA,CACA,YAAA,CACA,qBAAA,CACA,MAAA,CAEA,6CACI,UAAA,CACA,YAAA,CACA,6BAAA,CACA,sBAAA,CAGJ,6CACI,UAAA,CACA,YAAA,CACA,6BAAA,CACA,kBAAA,CACA,cAAA,CAGJ,oCACI,YAAA,CACA,kBAAA,CACA,SAAA,CAEA,yCACI,WAAA,CACA,YAAA,CACA,mBAAA,CAEA,mUAMI,kBAAA,CAAA,yCAAA,CAGJ,mGAEI,kBAAA,CAAA,yCAAA,CAGJ,0MAII,kBAAA,CAAA,wCAAA,CAKZ,qDACI,gBAAA,CAGJ,uDAEI,iBAIA,CANJ,uDAEI,kBAIA,CANJ,2CACI,YAAA,CAEA,SAAA,CACA,WAAA,CACA,YAAA,CACA,cAAA,CAGJ,sCACI,aAAA,CAAA,iCAAA,CACA,oBAAA,CAIR,sBACI,WAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-crypto-transaction {\\n    position: relative;\\n    width: 100%;\\n    display: flex;\\n    flex-direction: column;\\n    flex: 1;\\n\\n    &__type-and-status {\\n        width: 100%;\\n        display: flex;\\n        justify-content: space-between;\\n        align-items: flex-start;\\n    }\\n\\n    &__amount-and-date {\\n        width: 100%;\\n        display: flex;\\n        justify-content: space-between;\\n        align-items: center;\\n        margin: 0.4rem 0;\\n    }\\n\\n    &__status {\\n        display: flex;\\n        align-items: center;\\n        gap: 0.2rem;\\n\\n        &__dot {\\n            width: 0.4rem;\\n            height: 0.4rem;\\n            border-radius: 0.2rem;\\n\\n            &--pending,\\n            &--locked,\\n            &--performing-blockchain-txn,\\n            &--processing,\\n            &--reverting,\\n            &--verified {\\n                background: var(--status-warning, #ffad3a);\\n            }\\n\\n            &--confirmed,\\n            &--sent {\\n                background: var(--status-success, #4bb4b3);\\n            }\\n\\n            &--error,\\n            &--cancelled,\\n            &--rejected,\\n            &--reverted {\\n                background: var(--status-danger, #ec3f3f);\\n            }\\n        }\\n    }\\n\\n    &__cancel-button-container {\\n        margin-top: 0.4rem;\\n    }\\n\\n    &__cancel-button {\\n        display: flex;\\n        margin-inline-start: 0.3rem;\\n        padding: 0;\\n        border: none;\\n        outline: none;\\n        cursor: pointer;\\n    }\\n\\n    &__red-text {\\n        color: var(--brand-coral, #ff444f);\\n        text-decoration: none;\\n    }\\n}\\n\\n.wallets-action-modal {\\n    width: 40rem;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transactions{width:100%;height:-moz-fit-content;height:fit-content;min-height:100%;display:flex;flex-direction:column;align-items:center;margin-top:-4.8rem}@media(max-width: 1279px){.wallets-transactions{margin-top:-2.4rem}}.wallets-transactions__dropdown{max-width:19.5rem}@media(max-width: 1279px){.wallets-transactions__dropdown{max-width:none;max-width:initial}}.wallets-transactions__dropdown .deriv-dropdown__items--xs{max-height:none;max-height:initial}[dir=\\\"ltr\\\"] .wallets-transactions__dropdown .deriv-input__field{text-align:left}[dir=\\\"rtl\\\"] .wallets-transactions__dropdown .deriv-input__field{text-align:right}[dir=\\\"ltr\\\"] .wallets-transactions__dropdown .deriv-input__left-content{margin-right:.8rem}[dir=\\\"rtl\\\"] .wallets-transactions__dropdown .deriv-input__left-content{margin-left:.8rem}[dir=\\\"ltr\\\"] .wallets-transactions__dropdown .deriv-input__right-content{margin-left:1.6rem}[dir=\\\"rtl\\\"] .wallets-transactions__dropdown .deriv-input__right-content{margin-right:1.6rem}[dir=\\\"ltr\\\"] .wallets-transactions__dropdown .deriv-input__label{left:1.6rem}[dir=\\\"rtl\\\"] .wallets-transactions__dropdown .deriv-input__label{right:1.6rem}[dir=\\\"ltr\\\"] .wallets-transactions__dropdown .deriv-input__label{right:auto;right:initial}[dir=\\\"rtl\\\"] .wallets-transactions__dropdown .deriv-input__label{left:auto;left:initial}.wallets-transactions__header{position:sticky;top:-4.8rem;width:100%;max-width:80rem;padding:2.4rem 0 .8rem;display:flex;gap:1.6rem;justify-content:flex-end;z-index:2;background-color:#fff;background-color:var(--system-light-8-primary-background, #fff)}@media(min-width: 1280px){.wallets-transactions__header{height:8rem}}@media(max-width: 1279px){.wallets-transactions__header{top:-2.4rem;padding:1.6rem 0;flex-direction:column}}.wallets-transactions #toggle-pending{position:absolute}.wallets-transactions__toggle{display:flex;align-items:center;gap:.4rem;color:#333;color:var(--system-light-2-general-text, #333)}@media(max-width: 1279px){.wallets-transactions__toggle{align-self:flex-end}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./Transactions.scss\"],\"names\":[],\"mappings\":\"AAquBA,sBACI,UAAA,CACA,uBAAA,CAAA,kBAAA,CACA,eAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CAGA,kBAAA,CAxDA,0BA+CJ,sBAYQ,kBAAA,CAAA,CAGJ,gCACI,iBAAA,CA/DJ,0BA8DA,gCAIQ,cAAA,CAAA,iBAAA,CAAA,CAIJ,2DACI,eAAA,CAAA,kBAAA,CAKA,gEACI,eAAA,CADJ,gEACI,gBAAA,CAGJ,uEACI,kBAAA,CADJ,uEACI,iBAAA,CAGJ,wEACI,kBAAA,CADJ,wEACI,mBAAA,CAGJ,gEACI,WACA,CAFJ,gEACI,YACA,CAFJ,gEAEI,UAAA,CAAA,aAAA,CAFJ,gEAEI,SAAA,CAAA,YAAA,CAKZ,8BACI,eAAA,CACA,WAAA,CACA,UAAA,CACA,eAAA,CACA,sBAAA,CACA,YAAA,CACA,UAAA,CACA,wBAAA,CACA,SAAA,CACA,qBAAA,CAAA,+DAAA,CA/GJ,0BAqGA,8BAaQ,WAAA,CAAA,CA5GR,0BA+FA,8BAiBQ,WAAA,CACA,gBAAA,CACA,qBAAA,CAAA,CAIR,sCACI,iBAAA,CAGJ,8BACI,YAAA,CACA,kBAAA,CACA,SAAA,CACA,UAAA,CAAA,8CAAA,CA9HJ,0BA0HA,8BAOQ,mBAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transactions {\\n    width: 100%;\\n    height: fit-content;\\n    min-height: 100%;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n\\n    // ignore CashierContent top padding\\n    margin-top: -4.8rem;\\n\\n    @include mobile-or-tablet-screen {\\n        margin-top: -2.4rem;\\n    }\\n\\n    &__dropdown {\\n        max-width: 19.5rem;\\n\\n        @include mobile-or-tablet-screen {\\n            max-width: unset;\\n        }\\n\\n        /* stylelint-disable-next-line selector-class-pattern */\\n        .deriv-dropdown__items--xs {\\n            max-height: unset;\\n        }\\n\\n        /* stylelint-disable-next-line selector-class-pattern */\\n        .deriv-input {\\n            &__field {\\n                text-align: start;\\n            }\\n\\n            &__left-content {\\n                margin-inline-end: 0.8rem;\\n            }\\n\\n            &__right-content {\\n                margin-inline-start: 1.6rem;\\n            }\\n\\n            &__label {\\n                inset-inline-start: 1.6rem;\\n                inset-inline-end: unset;\\n            }\\n        }\\n    }\\n\\n    &__header {\\n        position: sticky;\\n        top: -4.8rem; // ignore CashierContent padding\\n        width: 100%;\\n        max-width: 80rem;\\n        padding: 2.4rem 0 0.8rem;\\n        display: flex;\\n        gap: 1.6rem;\\n        justify-content: flex-end;\\n        z-index: 2;\\n        background-color: var(--system-light-8-primary-background, #fff);\\n\\n        @include desktop-screen {\\n            height: 8rem;\\n        }\\n\\n        @include mobile-or-tablet-screen {\\n            top: -2.4rem;\\n            padding: 1.6rem 0;\\n            flex-direction: column;\\n        }\\n    }\\n\\n    #toggle-pending {\\n        position: absolute;\\n    }\\n\\n    &__toggle {\\n        display: flex;\\n        align-items: center;\\n        gap: 0.4rem;\\n        color: var(--system-light-2-general-text, #333);\\n\\n        @include mobile-or-tablet-screen {\\n            align-self: flex-end;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transactions-completed{position:relative}[dir=\\\"ltr\\\"] .wallets-transactions-completed__group-title{margin-left:1.6rem}[dir=\\\"rtl\\\"] .wallets-transactions-completed__group-title{margin-right:1.6rem}.wallets-transactions-completed__group-title{margin-bottom:.8rem}@media(max-width: 1279px){[dir=\\\"ltr\\\"] .wallets-transactions-completed__group-title{margin-left:0}[dir=\\\"rtl\\\"] .wallets-transactions-completed__group-title{margin-right:0}}[dir=rtl] .wallets-transactions-completed__group-title{direction:ltr;display:flex;justify-content:flex-end}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransactionsCompleted.scss\"],\"names\":[],\"mappings\":\"AAquBA,gCACI,iBAAA,CAEA,yDAEI,kBAAA,CAFJ,yDAEI,mBAAA,CAFJ,6CACI,mBACA,CApDJ,0BAkDA,yDAKQ,aAAA,CALR,yDAKQ,cAAA,CAAA,CAtuBR,uDA0uBQ,aAAA,CACA,YAAA,CACA,wBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transactions-completed {\\n    position: relative;\\n\\n    &__group-title {\\n        margin-bottom: 0.8rem;\\n        margin-inline-start: 1.6rem;\\n\\n        @include mobile-or-tablet-screen {\\n            margin-inline-start: 0;\\n        }\\n\\n        @include rtl {\\n            direction: ltr;\\n            display: flex;\\n            justify-content: flex-end;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transactions-completed-demo-reset-balance{position:relative}[dir=\\\"ltr\\\"] .wallets-transactions-completed-demo-reset-balance__group-title{margin-left:1.6rem}[dir=\\\"rtl\\\"] .wallets-transactions-completed-demo-reset-balance__group-title{margin-right:1.6rem}.wallets-transactions-completed-demo-reset-balance__group-title{margin-bottom:.8rem}@media(max-width: 1279px){[dir=\\\"ltr\\\"] .wallets-transactions-completed-demo-reset-balance__group-title{margin-left:0}[dir=\\\"rtl\\\"] .wallets-transactions-completed-demo-reset-balance__group-title{margin-right:0}}[dir=rtl] .wallets-transactions-completed-demo-reset-balance__group-title{direction:ltr;display:flex;justify-content:flex-end}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransactionsCompletedDemoResetBalance.scss\"],\"names\":[],\"mappings\":\"AAquBA,mDACI,iBAAA,CAEA,4EAEI,kBAAA,CAFJ,4EAEI,mBAAA,CAFJ,gEACI,mBACA,CApDJ,0BAkDA,4EAKQ,aAAA,CALR,4EAKQ,cAAA,CAAA,CAtuBR,0EA0uBQ,aAAA,CACA,YAAA,CACA,wBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transactions-completed-demo-reset-balance {\\n    position: relative;\\n\\n    &__group-title {\\n        margin-bottom: 0.8rem;\\n        margin-inline-start: 1.6rem;\\n\\n        @include mobile-or-tablet-screen {\\n            margin-inline-start: 0;\\n        }\\n\\n        @include rtl {\\n            direction: ltr;\\n            display: flex;\\n            justify-content: flex-end;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transactions-completed-row{align-items:center;display:flex;justify-content:space-between;padding:1.6rem;width:100%;min-height:7.2rem}@media(max-width: 1279px){.wallets-transactions-completed-row{padding:1.6rem 0}}@media(hover: hover){.wallets-transactions-completed-row:hover{background-color:#e6e9e9;background-color:var(--du-general-hover, #e6e9e9);cursor:pointer}}.wallets-transactions-completed-row__type-and-wallet-name{display:flex;flex-direction:column;justify-content:center}.wallets-transactions-completed-row__wallet-name{display:flex;flex-direction:row;gap:.4rem;align-items:center}.wallets-transactions-completed-row__account-details{display:flex;width:-moz-max-content;width:max-content;gap:.8rem}.wallets-transactions-completed-row__transaction-details{display:flex;flex-direction:column;align-items:flex-end;gap:.4rem}.wallets-transactions-completed-row--active{background-color:#f2f3f4;background-color:var(--du-general-section-1, #f2f3f4);justify-content:center;align-items:center}@media(max-width: 1279px){.wallets-transactions-completed-row--active{padding:.12em;line-break:anywhere}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransactionsCompletedRow.scss\"],\"names\":[],\"mappings\":\"AAquBA,oCACI,kBAAA,CACA,YAAA,CACA,6BAAA,CACA,cAAA,CACA,UAAA,CACA,iBAAA,CArDA,0BA+CJ,oCAQQ,gBAAA,CAAA,CAEJ,qBACI,0CACI,wBAAA,CAAA,iDAAA,CACA,cAAA,CAAA,CAIR,0DACI,YAAA,CACA,qBAAA,CACA,sBAAA,CAGJ,iDACI,YAAA,CACA,kBAAA,CACA,SAAA,CACA,kBAAA,CAGJ,qDACI,YAAA,CACA,sBAAA,CAAA,iBAAA,CACA,SAAA,CAGJ,yDACI,YAAA,CACA,qBAAA,CACA,oBAAA,CACA,SAAA,CAEJ,4CACI,wBAAA,CAAA,qDAAA,CACA,sBAAA,CACA,kBAAA,CA5FJ,0BAyFA,4CAKQ,aAAA,CACA,mBAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transactions-completed-row {\\n    align-items: center;\\n    display: flex;\\n    justify-content: space-between;\\n    padding: 1.6rem;\\n    width: 100%;\\n    min-height: 7.2rem;\\n    @include mobile-or-tablet-screen {\\n        padding: 1.6rem 0;\\n    }\\n    @media (hover: hover) {\\n        &:hover {\\n            background-color: var(--du-general-hover, #e6e9e9);\\n            cursor: pointer;\\n        }\\n    }\\n\\n    &__type-and-wallet-name {\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: center;\\n    }\\n\\n    &__wallet-name {\\n        display: flex;\\n        flex-direction: row;\\n        gap: 0.4rem;\\n        align-items: center;\\n    }\\n\\n    &__account-details {\\n        display: flex;\\n        width: max-content;\\n        gap: 0.8rem;\\n    }\\n\\n    &__transaction-details {\\n        display: flex;\\n        flex-direction: column;\\n        align-items: flex-end;\\n        gap: 0.4rem;\\n    }\\n    &--active {\\n        background-color: var(--du-general-section-1, #f2f3f4);\\n        justify-content: center;\\n        align-items: center;\\n        @include mobile-or-tablet-screen {\\n            padding: 0.12em;\\n            line-break: anywhere;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transactions-completed-row-account-details{display:flex;width:-moz-max-content;width:max-content;gap:.8rem}.wallets-transactions-completed-row-account-details__currency-card{border-radius:.4rem;max-height:4rem}.wallets-transactions-completed-row-account-details__type-and-wallet-name{display:flex;flex-direction:column;justify-content:center;align-items:flex-start}.wallets-transactions-completed-row-account-details__wallet-name{display:flex;flex-direction:row;gap:.4rem;align-items:center}.wallets-transactions-completed-row-account-details__column{display:flex;flex-direction:column;justify-content:center;align-items:flex-start;min-width:10.4rem}@media(max-width: 1279px){.wallets-transactions-completed-row-account-details__transaction-id{margin-top:.4rem}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransactionsCompletedRowAccountDetails.scss\"],\"names\":[],\"mappings\":\"AAquBA,oDACI,YAAA,CACA,sBAAA,CAAA,iBAAA,CACA,SAAA,CAEA,mEACI,mBAAA,CACA,eAAA,CAGJ,0EACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,sBAAA,CAGJ,iEACI,YAAA,CACA,kBAAA,CACA,SAAA,CACA,kBAAA,CAGJ,4DACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,sBAAA,CACA,iBAAA,CA5EJ,0BA8EA,oEAEQ,gBAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transactions-completed-row-account-details {\\n    display: flex;\\n    width: max-content;\\n    gap: 0.8rem;\\n\\n    &__currency-card {\\n        border-radius: 0.4rem;\\n        max-height: 4rem;\\n    }\\n\\n    &__type-and-wallet-name {\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: center;\\n        align-items: flex-start;\\n    }\\n\\n    &__wallet-name {\\n        display: flex;\\n        flex-direction: row;\\n        gap: 0.4rem;\\n        align-items: center;\\n    }\\n\\n    &__column {\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: center;\\n        align-items: flex-start;\\n        min-width: 10.4rem;\\n    }\\n    &__transaction-id {\\n        @include mobile-or-tablet-screen {\\n            margin-top: 0.4rem;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transactions-no-data-state{margin-top:2.4rem}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransactionsNoDataState.scss\"],\"names\":[],\"mappings\":\"AAquBA,oCACI,iBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transactions-no-data-state {\\n    margin-top: 2.4rem;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transactions-pending{position:relative;width:100%;max-width:80rem;display:flex;flex-grow:1}[dir=\\\"ltr\\\"] .wallets-transactions-pending__group-title{margin-left:1.6rem}[dir=\\\"rtl\\\"] .wallets-transactions-pending__group-title{margin-right:1.6rem}.wallets-transactions-pending__group-title{margin-bottom:.8rem}@media(max-width: 1279px){[dir=\\\"ltr\\\"] .wallets-transactions-pending__group-title{margin-left:0}[dir=\\\"rtl\\\"] .wallets-transactions-pending__group-title{margin-right:0}}[dir=rtl] .wallets-transactions-pending__group-title{direction:ltr;display:flex;justify-content:flex-end}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransactionsPending.scss\"],\"names\":[],\"mappings\":\"AAquBA,8BACI,iBAAA,CACA,UAAA,CACA,eAAA,CACA,YAAA,CACA,WAAA,CAEA,uDAEI,kBAAA,CAFJ,uDAEI,mBAAA,CAFJ,2CACI,mBACA,CAxDJ,0BAsDA,uDAKQ,aAAA,CALR,uDAKQ,cAAA,CAAA,CA1uBR,qDA8uBQ,aAAA,CACA,YAAA,CACA,wBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transactions-pending {\\n    position: relative;\\n    width: 100%;\\n    max-width: 80rem;\\n    display: flex;\\n    flex-grow: 1;\\n\\n    &__group-title {\\n        margin-bottom: 0.8rem;\\n        margin-inline-start: 1.6rem;\\n\\n        @include mobile-or-tablet-screen {\\n            margin-inline-start: 0;\\n        }\\n\\n        @include rtl {\\n            direction: ltr;\\n            display: flex;\\n            justify-content: flex-end;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transactions-pending-row{width:100%;height:7.8rem;display:flex;gap:1.6rem;align-items:flex-start;padding:1.6rem}@media(max-width: 1279px){.wallets-transactions-pending-row{height:auto;height:initial;flex-wrap:wrap;gap:.4rem;padding:1.6rem 0}}.wallets-transactions-pending-row__column{display:flex;flex-direction:column}.wallets-transactions-pending-row__wallet-info{display:flex;order:-2;align-items:center;width:-moz-max-content;width:max-content;max-width:14.2rem;gap:.8rem}.wallets-transactions-pending-row__fields-container{height:100%;display:flex;flex-grow:1;gap:1.6rem;align-items:flex-start}@media(max-width: 1279px){.wallets-transactions-pending-row__fields-container{order:0;flex-wrap:wrap;gap:.8rem}.wallets-transactions-pending-row__fields-container .wallets-transactions-pending-row__column{gap:.4rem}}.wallets-transactions-pending-row__transaction-address{width:7rem}.wallets-transactions-pending-row__transaction-amount{width:13.2rem;align-self:center;white-space:nowrap}.wallets-transactions-pending-row__transaction-confirmations{width:7.6rem}.wallets-transactions-pending-row__transaction-hash{width:9.2rem}.wallets-transactions-pending-row__transaction-status{display:flex;flex-grow:1;justify-content:flex-end;align-items:center;align-self:center}@media(max-width: 1279px){.wallets-transactions-pending-row__transaction-status{align-self:flex-start;order:-1}}.wallets-transactions-pending-row__transaction-status-button{display:flex;flex-grow:1;justify-content:flex-end;align-items:center;border:medium none currentColor;border:initial;padding:0;padding:initial;background-color:transparent;background-color:initial;text-align:inherit}@media(max-width: 1279px){.wallets-transactions-pending-row__transaction-status-button{align-self:flex-start;order:-1}}[dir=\\\"ltr\\\"] .wallets-transactions-pending-row__transaction-status-dot{margin-right:.4rem}[dir=\\\"rtl\\\"] .wallets-transactions-pending-row__transaction-status-dot{margin-left:.4rem}.wallets-transactions-pending-row__transaction-status-dot{width:.8rem;height:.8rem;border-radius:.4rem}.wallets-transactions-pending-row__transaction-status-dot--pending,.wallets-transactions-pending-row__transaction-status-dot--locked,.wallets-transactions-pending-row__transaction-status-dot--performing-blockchain-txn,.wallets-transactions-pending-row__transaction-status-dot--processing,.wallets-transactions-pending-row__transaction-status-dot--reverting,.wallets-transactions-pending-row__transaction-status-dot--verified{background:#ffad3a;background:var(--status-warning, #ffad3a)}.wallets-transactions-pending-row__transaction-status-dot--confirmed,.wallets-transactions-pending-row__transaction-status-dot--sent{background:#4bb4b3;background:var(--status-success, #4bb4b3)}.wallets-transactions-pending-row__transaction-status-dot--error,.wallets-transactions-pending-row__transaction-status-dot--cancelled,.wallets-transactions-pending-row__transaction-status-dot--rejected,.wallets-transactions-pending-row__transaction-status-dot--reverted{background:#ec3f3f;background:var(--status-danger, #ec3f3f)}.wallets-transactions-pending-row__transaction-time{width:6.5rem}[dir=\\\"ltr\\\"] .wallets-transactions-pending-row__transaction-cancel-button{margin-left:.8rem}[dir=\\\"rtl\\\"] .wallets-transactions-pending-row__transaction-cancel-button{margin-right:.8rem}.wallets-transactions-pending-row__transaction-cancel-button{display:flex;padding:0;border:none;cursor:pointer;background-color:rgba(0,0,0,0)}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransactionsPendingRow.scss\"],\"names\":[],\"mappings\":\"AAquBA,kCAEI,UAAA,CACA,aAAA,CACA,YAAA,CACA,UAAA,CACA,sBAAA,CACA,cAAA,CAtDA,0BA+CJ,kCAUQ,WAAA,CAAA,cAAA,CACA,cAAA,CACA,SAAA,CACA,gBAAA,CAAA,CAGJ,0CACI,YAAA,CACA,qBAAA,CAGJ,+CACI,YAAA,CACA,QAAA,CACA,kBAAA,CACA,sBAAA,CAAA,iBAAA,CACA,iBAAA,CACA,SAAA,CAGJ,oDACI,WAAA,CACA,YAAA,CACA,WAAA,CACA,UAAA,CACA,sBAAA,CAlFJ,0BA6EA,oDAQQ,OAAA,CACA,cAAA,CACA,SAAA,CAEA,8FACI,SAAA,CAAA,CAMR,uDACI,UAAA,CAGJ,sDACI,aAAA,CACA,iBAAA,CACA,kBAAA,CAGJ,6DACI,YAAA,CAGJ,oDACI,YAAA,CAGJ,sDACI,YAAA,CACA,WAAA,CACA,wBAAA,CACA,kBAAA,CACA,iBAAA,CAvHR,0BAkHI,sDAQQ,qBAAA,CACA,QAAA,CAAA,CAGJ,6DACI,YAAA,CACA,WAAA,CACA,wBAAA,CACA,kBAAA,CAGA,+BAAA,CAAA,cAAA,CACA,SAAA,CAAA,eAAA,CACA,4BAAA,CAAA,wBAAA,CACA,kBAAA,CAxIZ,0BA8HQ,6DAaQ,qBAAA,CACA,QAAA,CAAA,CAIR,sEACI,kBAGA,CAJJ,sEACI,iBAGA,CAJJ,0DAEI,WAAA,CACA,YAAA,CACA,mBAAA,CAEA,yaAMI,kBAAA,CAAA,yCAAA,CAGJ,qIAEI,kBAAA,CAAA,yCAAA,CAGJ,8QAII,kBAAA,CAAA,wCAAA,CAKZ,oDACI,YAAA,CAGJ,yEAEI,iBAIA,CANJ,yEAEI,kBAIA,CANJ,6DACI,YAAA,CAEA,SAAA,CACA,WAAA,CACA,cAAA,CACA,8BAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transactions-pending-row {\\n    $root: &;\\n    width: 100%;\\n    height: 7.8rem;\\n    display: flex;\\n    gap: 1.6rem;\\n    align-items: flex-start;\\n    padding: 1.6rem;\\n\\n    @include mobile-or-tablet-screen {\\n        height: unset;\\n        flex-wrap: wrap;\\n        gap: 0.4rem;\\n        padding: 1.6rem 0;\\n    }\\n\\n    &__column {\\n        display: flex;\\n        flex-direction: column;\\n    }\\n\\n    &__wallet-info {\\n        display: flex;\\n        order: -2;\\n        align-items: center;\\n        width: max-content;\\n        max-width: 14.2rem;\\n        gap: 0.8rem;\\n    }\\n\\n    &__fields-container {\\n        height: 100%;\\n        display: flex;\\n        flex-grow: 1;\\n        gap: 1.6rem;\\n        align-items: flex-start;\\n\\n        @include mobile-or-tablet-screen {\\n            order: 0;\\n            flex-wrap: wrap;\\n            gap: 0.8rem;\\n\\n            #{$root}__column {\\n                gap: 0.4rem;\\n            }\\n        }\\n    }\\n\\n    &__transaction {\\n        &-address {\\n            width: 7rem;\\n        }\\n\\n        &-amount {\\n            width: 13.2rem;\\n            align-self: center;\\n            white-space: nowrap;\\n        }\\n\\n        &-confirmations {\\n            width: 7.6rem;\\n        }\\n\\n        &-hash {\\n            width: 9.2rem;\\n        }\\n\\n        &-status {\\n            display: flex;\\n            flex-grow: 1;\\n            justify-content: flex-end;\\n            align-items: center;\\n            align-self: center;\\n\\n            @include mobile-or-tablet-screen {\\n                align-self: flex-start;\\n                order: -1;\\n            }\\n\\n            &-button {\\n                display: flex;\\n                flex-grow: 1;\\n                justify-content: flex-end;\\n                align-items: center;\\n\\n                // unset default button style\\n                border: unset;\\n                padding: unset;\\n                background-color: unset;\\n                text-align: unset;\\n\\n                @include mobile-or-tablet-screen {\\n                    align-self: flex-start;\\n                    order: -1;\\n                }\\n            }\\n\\n            &-dot {\\n                margin-inline-end: 0.4rem;\\n                width: 0.8rem;\\n                height: 0.8rem;\\n                border-radius: 0.4rem;\\n\\n                &--pending,\\n                &--locked,\\n                &--performing-blockchain-txn,\\n                &--processing,\\n                &--reverting,\\n                &--verified {\\n                    background: var(--status-warning, #ffad3a);\\n                }\\n\\n                &--confirmed,\\n                &--sent {\\n                    background: var(--status-success, #4bb4b3);\\n                }\\n\\n                &--error,\\n                &--cancelled,\\n                &--rejected,\\n                &--reverted {\\n                    background: var(--status-danger, #ec3f3f);\\n                }\\n            }\\n        }\\n\\n        &-time {\\n            width: 6.5rem;\\n        }\\n\\n        &-cancel-button {\\n            display: flex;\\n            margin-inline-start: 0.8rem;\\n            padding: 0;\\n            border: none;\\n            cursor: pointer;\\n            background-color: transparent;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transactions-pending-row-field{display:flex;flex-direction:column}@media(max-width: 1279px){.wallets-transactions-pending-row-field{flex:1 1 34%}}.wallets-transactions-pending-row-field__button{border:medium none currentColor;border:initial;padding:0;padding:initial;color:inherit;background-color:transparent;background-color:initial;font-family:inherit;font-size:inherit;font-weight:inherit}.wallets-transactions-pending-row-field__link{color:#ff444f;color:var(--brand-coral, #ff444f);text-decoration:none}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransactionsPendingRowField.scss\"],\"names\":[],\"mappings\":\"AAquBA,wCACI,YAAA,CACA,qBAAA,CAjDA,0BA+CJ,wCAKQ,YAAA,CAAA,CAGJ,gDAEI,+BAAA,CAAA,cAAA,CACA,SAAA,CAAA,eAAA,CACA,aAAA,CACA,4BAAA,CAAA,wBAAA,CACA,mBAAA,CACA,iBAAA,CACA,mBAAA,CAGJ,8CACI,aAAA,CAAA,iCAAA,CACA,oBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transactions-pending-row-field {\\n    display: flex;\\n    flex-direction: column;\\n\\n    @include mobile-or-tablet-screen {\\n        flex: 1 1 34%; // basis width for columns on mobile is \\\"more than a third of parent's\\\". This way we get 2 columns\\n    }\\n\\n    &__button {\\n        // unset default button style\\n        border: unset;\\n        padding: unset;\\n        color: unset;\\n        background-color: unset;\\n        font-family: unset;\\n        font-size: unset;\\n        font-weight: unset;\\n    }\\n\\n    &__link {\\n        color: var(--brand-coral, #ff444f);\\n        text-decoration: none;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transactions-table{width:100%;max-width:80rem;display:flex;flex-direction:column;align-items:center;gap:1.6rem}@media(min-width: 1024px){.wallets-transactions-table{overflow:auto}}.wallets-transactions-table::-webkit-scrollbar{display:none}.wallets-transactions-table__row{width:100%;display:flex;flex-direction:column}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransactionsTable.scss\"],\"names\":[],\"mappings\":\"AAquBA,4BACI,UAAA,CACA,eAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,UAAA,CAXA,0BAKJ,4BASQ,aAAA,CAAA,CAGJ,+CACI,YAAA,CAGJ,iCACI,UAAA,CACA,YAAA,CACA,qBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transactions-table {\\n    width: 100%;\\n    max-width: 80rem;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    gap: 1.6rem;\\n\\n    @include desktop {\\n        overflow: auto;\\n    }\\n\\n    &::-webkit-scrollbar {\\n        display: none;\\n    }\\n\\n    &__row {\\n        width: 100%;\\n        display: flex;\\n        flex-direction: column;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transfer{display:flex;flex-direction:column;align-items:center;width:65rem}@media(max-width: 1279px){.wallets-transfer{width:100%;align-self:flex-start}}.wallets-transfer__form{display:flex;flex-direction:column;width:100%;gap:4.8rem}.wallets-transfer__fields-section{border:1px solid #d6dadb;border:1px solid var(--light-5-active-background, #d6dadb);border-radius:.4rem;color:#333;color:var(--system-light-2-general-text, #333);display:grid;grid-template-columns:1fr 1fr;padding:.8rem}.wallets-transfer__fields-section--error{border-color:#ec3f3f;border-color:var(--status-light-danger, #ec3f3f)}@media(max-width: 1279px){.wallets-transfer__fields-section{min-height:9rem;grid-template-columns:60% 40%}}[dir=\\\"ltr\\\"] .wallets-transfer__submit-button{margin-left:auto}[dir=\\\"rtl\\\"] .wallets-transfer__submit-button{margin-right:auto}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransferForm.scss\"],\"names\":[],\"mappings\":\"AAquBA,kBACI,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,WAAA,CAnDA,0BA+CJ,kBAOQ,UAAA,CACA,qBAAA,CAAA,CAGJ,wBACI,YAAA,CACA,qBAAA,CACA,UAAA,CACA,UAAA,CAGJ,kCACI,wBAAA,CAAA,0DAAA,CACA,mBAAA,CACA,UAAA,CAAA,8CAAA,CACA,YAAA,CACA,6BAAA,CACA,aAAA,CAEA,yCACI,oBAAA,CAAA,gDAAA,CA1ER,0BAiEA,kCAaQ,eAAA,CACA,6BAAA,CAAA,CAIR,6CACI,gBAAA,CADJ,6CACI,iBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transfer {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    width: 65rem;\\n\\n    @include mobile-or-tablet-screen {\\n        width: 100%;\\n        align-self: flex-start;\\n    }\\n\\n    &__form {\\n        display: flex;\\n        flex-direction: column;\\n        width: 100%;\\n        gap: 4.8rem;\\n    }\\n\\n    &__fields-section {\\n        border: 1px solid var(--light-5-active-background, #d6dadb);\\n        border-radius: 0.4rem;\\n        color: var(--system-light-2-general-text, #333);\\n        display: grid;\\n        grid-template-columns: 1fr 1fr;\\n        padding: 0.8rem;\\n\\n        &--error {\\n            border-color: var(--status-light-danger, #ec3f3f);\\n        }\\n\\n        @include mobile-or-tablet-screen {\\n            min-height: 9rem;\\n            grid-template-columns: 60% 40%;\\n        }\\n    }\\n\\n    &__submit-button {\\n        margin-inline-start: auto;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transfer-form-account-card{display:flex;align-items:center;justify-content:flex-start;flex-grow:1}.wallets-transfer-form-account-card--badge{border:1px solid #ffad3a;border:1px solid var(--status-warning, #ffad3a);border-radius:1rem;margin-top:.4rem}[dir=\\\"ltr\\\"] .wallets-transfer-form-account-card--is-input .wallets-transfer-form-account-card__icon{margin-right:.8rem}[dir=\\\"rtl\\\"] .wallets-transfer-form-account-card--is-input .wallets-transfer-form-account-card__icon{margin-left:.8rem}.wallets-transfer-form-account-card--is-input .wallets-transfer-form-account-card__icon .wallets-market-currency-icon{margin-bottom:.4rem}.wallets-transfer-form-account-card--is-input .wallets-transfer-form-account-card__icon .wallets-market-currency-icon__currency-icon{transform:translate(-0.3rem, 0.7rem)}[dir=\\\"ltr\\\"] .wallets-transfer-form-account-card--is-modal .wallets-transfer-form-account-card__icon{margin-right:1.6rem}[dir=\\\"rtl\\\"] .wallets-transfer-form-account-card--is-modal .wallets-transfer-form-account-card__icon{margin-left:1.6rem}.wallets-transfer-form-account-card--is-modal .wallets-transfer-form-account-card__icon .wallets-market-currency-icon{margin-bottom:.4rem}.wallets-transfer-form-account-card--is-modal .wallets-transfer-form-account-card__icon .wallets-market-currency-icon__currency-icon{transform:translate(-0.3rem, 0.7rem)}@media(max-width: 1279px){.wallets-transfer-form-account-card--is-input{flex-direction:column;align-items:flex-start;gap:.4rem}[dir=\\\"ltr\\\"] .wallets-transfer-form-account-card--is-input .wallets-transfer-form-account-card__icon{margin-right:.4rem}[dir=\\\"rtl\\\"] .wallets-transfer-form-account-card--is-input .wallets-transfer-form-account-card__icon{margin-left:.4rem}.wallets-transfer-form-account-card--is-modal{flex-direction:row;align-items:center}[dir=\\\"ltr\\\"] .wallets-transfer-form-account-card--is-modal .wallets-transfer-form-account-card__icon{margin-right:.8rem}[dir=\\\"rtl\\\"] .wallets-transfer-form-account-card--is-modal .wallets-transfer-form-account-card__icon{margin-left:.8rem}}.wallets-transfer-form-account-card__icon-with-badge{display:flex;align-items:end}.wallets-transfer-form-account-card__content{display:flex;flex-direction:column;flex-grow:1;align-items:flex-start}[dir=\\\"ltr\\\"] .wallets-transfer-form-account-card__modal-badge{margin-left:1rem}[dir=\\\"rtl\\\"] .wallets-transfer-form-account-card__modal-badge{margin-right:1rem}.wallets-transfer-form-account-card .wallets-market-currency-icon .wallets-gradient{border-radius:.15rem}.wallets-transfer-form-account-card .wallets-gradient{border-radius:.4rem}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransferFormAccountCard.scss\"],\"names\":[],\"mappings\":\"AAquBA,oCACI,YAAA,CACA,kBAAA,CACA,0BAAA,CACA,WAAA,CAEA,2CACI,wBAAA,CAAA,+CAAA,CACA,kBAAA,CACA,gBAAA,CAIA,oGACI,kBAAA,CADJ,oGACI,iBAAA,CAEA,sHACI,mBAAA,CAEA,qIACI,oCAAA,CAOZ,oGACI,mBAAA,CADJ,oGACI,kBAAA,CAEA,sHACI,mBAAA,CAEA,qIACI,oCAAA,CAjFhB,0BAwFI,8CACI,qBAAA,CACA,sBAAA,CACA,SAAA,CAEA,oGACI,kBAAA,CADJ,oGACI,iBAAA,CAIR,8CACI,kBAAA,CACA,kBAAA,CAEA,oGACI,kBAAA,CADJ,oGACI,iBAAA,CAAA,CAKZ,qDACI,YAAA,CACA,eAAA,CAGJ,6CACI,YAAA,CACA,qBAAA,CACA,WAAA,CACA,sBAAA,CAGJ,6DACI,gBAAA,CADJ,6DACI,iBAAA,CAIA,oFACI,oBAAA,CAIR,sDACI,mBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transfer-form-account-card {\\n    display: flex;\\n    align-items: center;\\n    justify-content: flex-start;\\n    flex-grow: 1;\\n\\n    &--badge {\\n        border: 1px solid var(--status-warning, #ffad3a);\\n        border-radius: 1rem;\\n        margin-top: 0.4rem;\\n    }\\n\\n    &--is-input {\\n        .wallets-transfer-form-account-card__icon {\\n            margin-inline-end: 0.8rem;\\n\\n            .wallets-market-currency-icon {\\n                margin-bottom: 0.4rem;\\n\\n                &__currency-icon {\\n                    transform: translate(-0.3rem, 0.7rem);\\n                }\\n            }\\n        }\\n    }\\n\\n    &--is-modal {\\n        .wallets-transfer-form-account-card__icon {\\n            margin-inline-end: 1.6rem;\\n\\n            .wallets-market-currency-icon {\\n                margin-bottom: 0.4rem;\\n\\n                &__currency-icon {\\n                    transform: translate(-0.3rem, 0.7rem);\\n                }\\n            }\\n        }\\n    }\\n\\n    @include mobile-or-tablet-screen {\\n        &--is-input {\\n            flex-direction: column;\\n            align-items: flex-start;\\n            gap: 0.4rem;\\n\\n            .wallets-transfer-form-account-card__icon {\\n                margin-inline-end: 0.4rem;\\n            }\\n        }\\n\\n        &--is-modal {\\n            flex-direction: row;\\n            align-items: center;\\n\\n            .wallets-transfer-form-account-card__icon {\\n                margin-inline-end: 0.8rem;\\n            }\\n        }\\n    }\\n\\n    &__icon-with-badge {\\n        display: flex;\\n        align-items: end;\\n    }\\n\\n    &__content {\\n        display: flex;\\n        flex-direction: column;\\n        flex-grow: 1;\\n        align-items: flex-start;\\n    }\\n\\n    &__modal-badge {\\n        margin-inline-start: 1rem;\\n    }\\n\\n    .wallets-market-currency-icon {\\n        .wallets-gradient {\\n            border-radius: 0.15rem;\\n        }\\n    }\\n\\n    .wallets-gradient {\\n        border-radius: 0.4rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transfer-form-account-selection{display:flex;width:40rem;flex-direction:column;align-items:flex-start;border-radius:.8rem;background:#fff;background:var(--system-light-8-primary-background, #fff);box-shadow:0rem 3.2rem 6.4rem 0rem rgba(14,14,14,.14);max-height:52.8rem;z-index:10}@media(max-width: 1279px){.wallets-transfer-form-account-selection{position:absolute;top:0;right:0;bottom:0;left:0;width:100%;height:100%;border-radius:0;box-shadow:none}}.wallets-transfer-form-account-selection__loader{margin:4.1rem auto}.wallets-transfer-form-account-selection__accounts{display:flex;flex-direction:column;width:100%;overflow-y:auto}@media(max-width: 1279px){.wallets-transfer-form-account-selection__accounts{padding:0 1.6rem 1.6rem;gap:1.6rem;overflow-y:visible;overflow-y:initial;overscroll-behavior:none}}.wallets-transfer-form-account-selection__accounts-group{display:flex;flex-direction:column;padding:1.6rem .8rem;gap:.8rem}@media(max-width: 1279px){.wallets-transfer-form-account-selection__accounts-group{padding:0;gap:.4rem}}.wallets-transfer-form-account-selection__grouped-accounts{display:flex;flex-direction:column}.wallets-transfer-form-account-selection__account{all:unset;cursor:pointer;border-radius:.4rem;padding:.8rem 1.6rem}@media(max-width: 1279px){.wallets-transfer-form-account-selection__account{padding:.8rem}}.wallets-transfer-form-account-selection__account--selected{background:#d6dadb;background:var(--system-light-5-active-background, #d6dadb)}.wallets-transfer-form-account-selection__account:hover:not(.wallets-transfer-form-account-selection__account--selected){background:#e6e6e6;background:var(--system-light-8-primary-background, #e6e6e6)}[dir=\\\"ltr\\\"] .wallets-transfer-form-account-selection__header{padding-left:2.4rem}[dir=\\\"rtl\\\"] .wallets-transfer-form-account-selection__header{padding-right:2.4rem}.wallets-transfer-form-account-selection__header{display:flex;height:5.6rem;padding:1.6rem;justify-content:space-between;align-items:center;gap:1.6rem;align-self:stretch;border-bottom:2px solid #f2f3f4;border-bottom:2px solid var(--system-light-7-secondary-background, #f2f3f4)}@media(max-width: 1279px){.wallets-transfer-form-account-selection__header{position:sticky;top:-2.4rem;left:0;right:0;border:none;background:#fff;background:var(--system-dark-1-prominent-text, #fff);padding:2.4rem 1.6rem 1.6rem;height:auto;z-index:10}}@media(max-width: 1279px){[dir=\\\"ltr\\\"] .wallets-transfer-form-account-selection__label{padding-left:.8rem}[dir=\\\"rtl\\\"] .wallets-transfer-form-account-selection__label{padding-right:.8rem}}.wallets-transfer-form-account-selection__close-button{all:unset;cursor:pointer;padding:.8rem}@media(max-width: 1279px){[dir=\\\"ltr\\\"] .wallets-transfer-form-account-selection__close-button{padding-right:.8rem}[dir=\\\"rtl\\\"] .wallets-transfer-form-account-selection__close-button{padding-left:.8rem}.wallets-transfer-form-account-selection__close-button{padding:0}}.wallets-transfer-form-account-selection__accounts-group-title{display:flex;padding-left:1.6rem;padding-right:1.6rem}@media(max-width: 1279px){.wallets-transfer-form-account-selection__accounts-group-title{padding-left:.8rem;padding-right:.8rem}}[dir=\\\"ltr\\\"] .wallets-transfer-form-account-selection__title-line{margin-left:1rem}[dir=\\\"rtl\\\"] .wallets-transfer-form-account-selection__title-line{margin-right:1rem}.wallets-transfer-form-account-selection__title-line{flex-grow:1;border-bottom:1px solid #f2f3f4;border-bottom:1px solid var(--general-section-1, #f2f3f4);margin-top:.9rem;margin-bottom:.9rem}.wallets-transfer-form-account-selection__transfer-to-hint{padding:0 .8rem 1.6rem}@media(max-width: 1279px){.wallets-transfer-form-account-selection__transfer-to-hint{padding:0 1.6rem .8rem}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransferFormAccountSelection.scss\"],\"names\":[],\"mappings\":\"AAquBA,yCACI,YAAA,CACA,WAAA,CACA,qBAAA,CACA,sBAAA,CACA,mBAAA,CACA,eAAA,CAAA,yDAAA,CAEA,qDAAA,CACA,kBAAA,CACA,UAAA,CAzDA,0BA+CJ,yCAaQ,iBAAA,CACA,KAAA,CAAA,OAAA,CAAA,QAAA,CAAA,MAAA,CACA,UAAA,CACA,WAAA,CACA,eAAA,CACA,eAAA,CAAA,CAGJ,iDACI,kBAAA,CAGJ,mDACI,YAAA,CACA,qBAAA,CACA,UAAA,CACA,eAAA,CA5EJ,0BAwEA,mDAOQ,uBAAA,CACA,UAAA,CACA,kBAAA,CAAA,kBAAA,CAEA,wBAAA,CAAA,CAIR,yDACI,YAAA,CACA,qBAAA,CACA,oBAAA,CACA,SAAA,CA3FJ,0BAuFA,yDAOQ,SAAA,CACA,SAAA,CAAA,CAIR,2DACI,YAAA,CACA,qBAAA,CAGJ,kDACI,SAAA,CACA,cAAA,CACA,mBAAA,CACA,oBAAA,CA5GJ,0BAwGA,kDAOQ,aAAA,CAAA,CAGJ,4DACI,kBAAA,CAAA,2DAAA,CAGJ,yHACI,kBAAA,CAAA,4DAAA,CAIR,6DAII,mBAKA,CATJ,6DAII,oBAKA,CATJ,iDACI,YAAA,CACA,aAAA,CACA,cAAA,CAEA,6BAAA,CACA,kBAAA,CACA,UAAA,CACA,kBAAA,CACA,+BAAA,CAAA,2EAAA,CApIJ,0BA2HA,iDAYQ,eAAA,CACA,WAAA,CACA,MAAA,CACA,OAAA,CACA,WAAA,CACA,eAAA,CAAA,oDAAA,CACA,4BAAA,CACA,WAAA,CACA,UAAA,CAAA,CA/IR,0BAmJA,4DAEQ,kBAAA,CAFR,4DAEQ,mBAAA,CAAA,CAIR,uDACI,SAAA,CACA,cAAA,CACA,aAAA,CA5JJ,0BAyJA,mEAOQ,mBAAA,CAPR,mEAOQ,kBAAA,CAPR,uDAMQ,SACA,CAAA,CAIR,+DACI,YAAA,CACA,mBAAA,CAAA,oBAAA,CAtKJ,0BAoKA,+DAKQ,kBAAA,CAAA,mBAAA,CAAA,CAIR,iEAII,gBAAA,CAJJ,iEAII,iBAAA,CAJJ,qDACI,WAAA,CACA,+BAAA,CAAA,yDAAA,CACA,gBAAA,CAAA,mBACA,CAGJ,2DACI,sBAAA,CArLJ,0BAoLA,2DAGQ,sBAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transfer-form-account-selection {\\n    display: flex;\\n    width: 40rem;\\n    flex-direction: column;\\n    align-items: flex-start;\\n    border-radius: 0.8rem;\\n    background: var(--system-light-8-primary-background, #fff);\\n    /* Shadows/xxxl */\\n    box-shadow: 0rem 3.2rem 6.4rem 0rem rgba(14, 14, 14, 0.14);\\n    max-height: 52.8rem;\\n    z-index: 10;\\n\\n    @include mobile-or-tablet-screen {\\n        position: absolute;\\n        inset: 0;\\n        width: 100%;\\n        height: 100%;\\n        border-radius: 0;\\n        box-shadow: none;\\n    }\\n\\n    &__loader {\\n        margin: 4.1rem auto;\\n    }\\n\\n    &__accounts {\\n        display: flex;\\n        flex-direction: column;\\n        width: 100%;\\n        overflow-y: auto;\\n\\n        @include mobile-or-tablet-screen {\\n            padding: 0 1.6rem 1.6rem;\\n            gap: 1.6rem;\\n            overflow-y: unset;\\n            //prevent content bouncing on scroll on iPhone devices\\n            overscroll-behavior: none;\\n        }\\n    }\\n\\n    &__accounts-group {\\n        display: flex;\\n        flex-direction: column;\\n        padding: 1.6rem 0.8rem;\\n        gap: 0.8rem;\\n\\n        @include mobile-or-tablet-screen {\\n            padding: 0;\\n            gap: 0.4rem;\\n        }\\n    }\\n\\n    &__grouped-accounts {\\n        display: flex;\\n        flex-direction: column;\\n    }\\n\\n    &__account {\\n        all: unset;\\n        cursor: pointer;\\n        border-radius: 0.4rem;\\n        padding: 0.8rem 1.6rem;\\n\\n        @include mobile-or-tablet-screen {\\n            padding: 0.8rem;\\n        }\\n\\n        &--selected {\\n            background: var(--system-light-5-active-background, #d6dadb);\\n        }\\n\\n        &:hover:not(&--selected) {\\n            background: var(--system-light-8-primary-background, #e6e6e6);\\n        }\\n    }\\n\\n    &__header {\\n        display: flex;\\n        height: 5.6rem;\\n        padding: 1.6rem;\\n        padding-inline-start: 2.4rem;\\n        justify-content: space-between;\\n        align-items: center;\\n        gap: 1.6rem;\\n        align-self: stretch;\\n        border-bottom: 2px solid var(--system-light-7-secondary-background, #f2f3f4);\\n\\n        @include mobile-or-tablet-screen {\\n            position: sticky;\\n            top: -2.4rem;\\n            left: 0;\\n            right: 0;\\n            border: none;\\n            background: var(--system-dark-1-prominent-text, #fff);\\n            padding: 2.4rem 1.6rem 1.6rem;\\n            height: auto;\\n            z-index: 10;\\n        }\\n    }\\n\\n    &__label {\\n        @include mobile-or-tablet-screen {\\n            padding-inline-start: 0.8rem;\\n        }\\n    }\\n\\n    &__close-button {\\n        all: unset;\\n        cursor: pointer;\\n        padding: 0.8rem;\\n\\n        @include mobile-or-tablet-screen {\\n            padding: 0;\\n            padding-inline-end: 0.8rem;\\n        }\\n    }\\n\\n    &__accounts-group-title {\\n        display: flex;\\n        padding-inline: 1.6rem;\\n\\n        @include mobile-or-tablet-screen {\\n            padding-inline: 0.8rem;\\n        }\\n    }\\n\\n    &__title-line {\\n        flex-grow: 1;\\n        border-bottom: 1px solid var(--general-section-1, #f2f3f4);\\n        margin-block: 0.9rem;\\n        margin-inline-start: 1rem;\\n    }\\n\\n    &__transfer-to-hint {\\n        padding: 0 0.8rem 1.6rem;\\n        @include mobile-or-tablet-screen {\\n            padding: 0 1.6rem 0.8rem;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transfer-form-amount-input{display:flex;position:relative}[dir=\\\"ltr\\\"] .wallets-transfer-form-amount-input__max-btn,[dir=\\\"ltr\\\"] .wallets-transfer-form-amount-input__timer{right:.8rem}[dir=\\\"rtl\\\"] .wallets-transfer-form-amount-input__max-btn,[dir=\\\"rtl\\\"] .wallets-transfer-form-amount-input__timer{left:.8rem}.wallets-transfer-form-amount-input__max-btn,.wallets-transfer-form-amount-input__timer{position:absolute;top:0}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransferFormAmountInput.scss\"],\"names\":[],\"mappings\":\"AAquBA,oCACI,YAAA,CACA,iBAAA,CAEA,gHAGI,WACA,CAJJ,gHAGI,UACA,CAJJ,wFAEI,iBAAA,CAEA,KAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transfer-form-amount-input {\\n    display: flex;\\n    position: relative;\\n\\n    &__max-btn,\\n    &__timer {\\n        position: absolute;\\n        inset-inline-end: 0.8rem;\\n        top: 0;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"[dir=\\\"ltr\\\"] .wallets-transfer-form-dropdown{padding-left:.8rem}[dir=\\\"rtl\\\"] .wallets-transfer-form-dropdown{padding-right:.8rem}[dir=\\\"ltr\\\"] .wallets-transfer-form-dropdown{border-left:.1rem solid #d6dadb;border-left:.1rem solid var(--light-5-active-background, #d6dadb)}[dir=\\\"rtl\\\"] .wallets-transfer-form-dropdown{border-right:.1rem solid #d6dadb;border-right:.1rem solid var(--light-5-active-background, #d6dadb)}[dir=\\\"ltr\\\"] .wallets-transfer-form-dropdown{border-left:.1rem solid #d6dadb}[dir=\\\"rtl\\\"] .wallets-transfer-form-dropdown{border-right:.1rem solid #d6dadb}.wallets-transfer-form-dropdown{all:unset;display:flex;align-items:center;cursor:pointer}@media(max-width: 1279px){.wallets-transfer-form-dropdown{flex-direction:column;align-items:initial}}.wallets-transfer-form-dropdown__content{display:flex;flex-direction:column;flex:1;gap:.2rem}@media(max-width: 1279px){.wallets-transfer-form-dropdown__content{gap:.4rem}}.wallets-transfer-form-dropdown__header{display:flex;align-items:center}@media(max-width: 1279px){.wallets-transfer-form-dropdown__header{justify-content:space-between}}@media(max-width: 1279px){.wallets-transfer-form-dropdown__select-account-cta{padding:.5rem 0}}[dir=\\\"ltr\\\"] .wallets-transfer-form-dropdown__icon-dropdown{margin-left:1rem}[dir=\\\"rtl\\\"] .wallets-transfer-form-dropdown__icon-dropdown{margin-right:1rem}@media(max-width: 1279px){[dir=\\\"ltr\\\"] .wallets-transfer-form-dropdown__icon-dropdown{margin-right:0}[dir=\\\"rtl\\\"] .wallets-transfer-form-dropdown__icon-dropdown{margin-left:0}}[dir=\\\"ltr\\\"] .wallets-transfer-form-dropdown__badge{margin-left:1rem}[dir=\\\"rtl\\\"] .wallets-transfer-form-dropdown__badge{margin-right:1rem}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransferFormDropdown.scss\"],\"names\":[],\"mappings\":\"AAquBA,4CAKI,kBACA,CANJ,4CAKI,mBACA,CANJ,4CAMI,+BAAA,CAAA,iEAAA,CANJ,4CAMI,gCAAA,CAAA,kEAAA,CANJ,4CAMI,+BAAA,CANJ,4CAMI,gCAAA,CANJ,gCACI,SAAA,CACA,YAAA,CACA,kBAAA,CACA,cAEA,CArDA,0BA+CJ,gCASQ,qBAAA,CACA,mBAAA,CAAA,CAGJ,yCACI,YAAA,CACA,qBAAA,CACA,MAAA,CACA,SAAA,CAhEJ,0BA4DA,yCAOQ,SAAA,CAAA,CAIR,wCACI,YAAA,CACA,kBAAA,CAzEJ,0BAuEA,wCAKQ,6BAAA,CAAA,CA5ER,0BAgFA,oDAEQ,eAAA,CAAA,CAIR,2DACI,gBAAA,CADJ,2DACI,iBAAA,CAvFJ,0BAsFA,2DAIQ,cAAA,CAJR,2DAIQ,aAAA,CAAA,CAIR,mDACI,gBAAA,CADJ,mDACI,iBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transfer-form-dropdown {\\n    all: unset;\\n    display: flex;\\n    align-items: center;\\n    cursor: pointer;\\n    padding-inline-start: 0.8rem;\\n    border-inline-start: 0.1rem solid var(--light-5-active-background, #d6dadb);\\n\\n    @include mobile-or-tablet-screen {\\n        flex-direction: column;\\n        align-items: unset;\\n    }\\n\\n    &__content {\\n        display: flex;\\n        flex-direction: column;\\n        flex: 1;\\n        gap: 0.2rem;\\n\\n        @include mobile-or-tablet-screen {\\n            gap: 0.4rem;\\n        }\\n    }\\n\\n    &__header {\\n        display: flex;\\n        align-items: center;\\n\\n        @include mobile-or-tablet-screen {\\n            justify-content: space-between;\\n        }\\n    }\\n\\n    &__select-account-cta {\\n        @include mobile-or-tablet-screen {\\n            padding: 0.5rem 0;\\n        }\\n    }\\n\\n    &__icon-dropdown {\\n        margin-inline-start: 1rem;\\n\\n        @include mobile-or-tablet-screen {\\n            margin-inline-end: 0;\\n        }\\n    }\\n\\n    &__badge {\\n        margin-inline-start: 1rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transfer-messages{min-height:2rem;padding-left:.8rem;padding-right:.8rem}@media(max-width: 1279px){.wallets-transfer-messages{padding-left:0;padding-right:0}}.wallets-transfer-messages__link{display:flex;width:-moz-max-content;width:max-content;text-decoration:none;color:inherit}[dir=\\\"ltr\\\"] .wallets-transfer-messages__action-button{margin-left:.8rem}[dir=\\\"rtl\\\"] .wallets-transfer-messages__action-button{margin-right:.8rem}.wallets-transfer-messages__action-button{display:flex;align-items:center;padding-top:.8rem;padding-bottom:.8rem}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransferMessages.scss\"],\"names\":[],\"mappings\":\"AAquBA,2BACI,eAAA,CACA,kBAAA,CAAA,mBAAA,CAjDA,0BA+CJ,2BAKQ,cAAA,CAAA,eAAA,CAAA,CAGJ,iCACI,YAAA,CACA,sBAAA,CAAA,iBAAA,CACA,oBAAA,CACA,aAAA,CAGJ,sDAII,iBAAA,CAJJ,sDAII,kBAAA,CAJJ,0CACI,YAAA,CACA,kBAAA,CACA,iBAAA,CAAA,oBACA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transfer-messages {\\n    min-height: 2rem;\\n    padding-inline: 0.8rem;\\n\\n    @include mobile-or-tablet-screen {\\n        padding-inline: 0;\\n    }\\n\\n    &__link {\\n        display: flex;\\n        width: max-content;\\n        text-decoration: none;\\n        color: inherit;\\n    }\\n\\n    &__action-button {\\n        display: flex;\\n        align-items: center;\\n        padding-block: 0.8rem;\\n        margin-inline-start: 0.8rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-transfer-receipt{display:flex;flex-direction:column;align-items:center;gap:2rem}.wallets-transfer-receipt__cards{display:flex;flex-direction:row;align-items:center;gap:1.6rem}.wallets-transfer-receipt__cards .wallets-card__details{padding:1.6rem;width:20rem}@media(max-width: 1279px){.wallets-transfer-receipt__cards .wallets-card__details{width:16rem;padding:.8rem}}@media(max-width: 600px){.wallets-transfer-receipt__cards{flex-direction:column}}@media(max-width: 600px){.wallets-transfer-receipt__arrow-icon{rotate:90deg}[dir=rtl] .wallets-transfer-receipt__arrow-icon{rotate:-90deg}}.wallets-transfer-receipt__info{display:flex;flex-direction:column;gap:.8rem}.wallets-transfer-receipt__info--with-fee{gap:1.6rem}.wallets-transfer-receipt__amount{display:flex;flex-direction:column;justify-content:center;align-items:center}.wallets-transfer-receipt__amount-conversion{display:inline-flex}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransferReceipt.scss\"],\"names\":[],\"mappings\":\"AAquBA,0BACI,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,QAAA,CAEA,iCACI,YAAA,CACA,kBAAA,CACA,kBAAA,CACA,UAAA,CAEA,wDACI,cAAA,CACA,WAAA,CA7DR,0BA2DI,wDAKQ,WAAA,CACA,aAAA,CAAA,CAnFZ,yBAuEA,iCAiBQ,qBAAA,CAAA,CAxFR,yBA4FA,sCAEQ,YAAA,CA3vBR,gDA8vBY,aAAA,CAAA,CAKZ,gCACI,YAAA,CACA,qBAAA,CACA,SAAA,CAEA,0CACI,UAAA,CAIR,kCACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CAGJ,6CACI,mBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transfer-receipt {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    gap: 2rem;\\n\\n    &__cards {\\n        display: flex;\\n        flex-direction: row;\\n        align-items: center;\\n        gap: 1.6rem;\\n\\n        & .wallets-card__details {\\n            padding: 1.6rem;\\n            width: 20rem;\\n\\n            @include mobile-or-tablet-screen {\\n                width: 16rem;\\n                padding: 0.8rem;\\n            }\\n        }\\n\\n        @include mobile-screen {\\n            flex-direction: column;\\n        }\\n    }\\n\\n    &__arrow-icon {\\n        @include mobile-screen {\\n            rotate: 90deg;\\n\\n            @include rtl {\\n                rotate: -90deg;\\n            }\\n        }\\n    }\\n\\n    &__info {\\n        display: flex;\\n        flex-direction: column;\\n        gap: 0.8rem;\\n\\n        &--with-fee {\\n            gap: 1.6rem;\\n        }\\n    }\\n\\n    &__amount {\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: center;\\n        align-items: center;\\n    }\\n\\n    &__amount-conversion {\\n        display: inline-flex;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"@media(min-width: 1024px){.wallets-transfer-locked{margin-top:3.2rem}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./TransferLocked.scss\"],\"names\":[],\"mappings\":\"AAguBI,0BAKJ,yBAEQ,iBAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-transfer-locked {\\n    @include desktop {\\n        margin-top: 3.2rem; // 48px + 32px = 80px\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-withdrawal-crypto{position:relative;width:100%;display:grid;justify-content:center;grid-gap:2.4rem;gap:2.4rem}@media(min-width: 1280px){.wallets-withdrawal-crypto{grid-template-columns:1fr 58.8rem 1fr}}@media(max-width: 1279px){.wallets-withdrawal-crypto{height:-moz-fit-content;height:fit-content;flex-direction:column;align-items:center;justify-content:center}}.wallets-withdrawal-crypto__placeholder{display:block}@media(max-width: 1279px){.wallets-withdrawal-crypto__placeholder{display:none}}.wallets-withdrawal-crypto__main-content{width:100%;max-width:58.8rem;display:flex;flex-direction:column;align-items:center;gap:2.4rem}@media(max-width: 1279px){.wallets-withdrawal-crypto__main-content{gap:1.6rem}}.wallets-withdrawal-crypto__main-content .wallets-textfield{width:100%;max-width:none}@media(max-width: 1279px){.wallets-withdrawal-crypto__left-content{display:none}}.wallets-withdrawal-crypto__right-content{height:-moz-fit-content;height:fit-content;display:flex;flex:1 1 0;justify-content:flex-end}@media(max-width: 1279px){.wallets-withdrawal-crypto__right-content{width:100%}}[dir=\\\"ltr\\\"] .wallets-withdrawal-crypto__right-content .wallets-transaction-status{margin-right:2.4rem}[dir=\\\"rtl\\\"] .wallets-withdrawal-crypto__right-content .wallets-transaction-status{margin-left:2.4rem}.wallets-withdrawal-crypto__right-content .wallets-transaction-status{margin-top:-2.4rem}@media(max-width: 1279px){[dir=\\\"ltr\\\"] .wallets-withdrawal-crypto__right-content .wallets-transaction-status{margin-right:0}[dir=\\\"rtl\\\"] .wallets-withdrawal-crypto__right-content .wallets-transaction-status{margin-left:0}.wallets-withdrawal-crypto__right-content .wallets-transaction-status{margin-top:0}}.wallets-withdrawal-crypto-address{width:100%;height:-moz-fit-content;height:fit-content}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WithdrawalCrypto.scss\"],\"names\":[],\"mappings\":\"AAquBA,2BACI,iBAAA,CACA,UAAA,CACA,YAAA,CACA,sBAAA,CACA,eAAA,CAAA,UAAA,CA1DA,0BAqDJ,2BAQQ,qCAAA,CAAA,CAvDJ,0BA+CJ,2BAYQ,uBAAA,CAAA,kBAAA,CACA,qBAAA,CACA,kBAAA,CACA,sBAAA,CAAA,CAGJ,wCACI,aAAA,CAlEJ,0BAiEA,wCAIQ,YAAA,CAAA,CAIR,yCACI,UAAA,CACA,iBAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,UAAA,CA/EJ,0BAyEA,yCASQ,UAAA,CAAA,CAGJ,4DACI,UAAA,CACA,cAAA,CAvFR,0BA2FA,yCAEQ,YAAA,CAAA,CAIR,0CACI,uBAAA,CAAA,kBAAA,CACA,YAAA,CACA,UAAA,CACA,wBAAA,CArGJ,0BAiGA,0CAOQ,UAAA,CAAA,CAGJ,kFAEI,mBAAA,CAFJ,kFAEI,kBAAA,CAFJ,sEACI,kBACA,CA7GR,0BA2GI,kFAKQ,cACA,CANR,kFAKQ,aACA,CANR,sEAMQ,YAAA,CAAA,CAMhB,mCACI,UAAA,CACA,uBAAA,CAAA,kBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-withdrawal-crypto {\\n    position: relative;\\n    width: 100%;\\n    display: grid;\\n    justify-content: center;\\n    gap: 2.4rem;\\n\\n    @include desktop-screen {\\n        grid-template-columns: 1fr 58.8rem 1fr;\\n    }\\n\\n    @include mobile-or-tablet-screen {\\n        height: fit-content;\\n        flex-direction: column;\\n        align-items: center;\\n        justify-content: center;\\n    }\\n\\n    &__placeholder {\\n        display: block;\\n\\n        @include mobile-or-tablet-screen {\\n            display: none;\\n        }\\n    }\\n\\n    &__main-content {\\n        width: 100%;\\n        max-width: 58.8rem;\\n        display: flex;\\n        flex-direction: column;\\n        align-items: center;\\n        gap: 2.4rem;\\n\\n        @include mobile-or-tablet-screen {\\n            gap: 1.6rem;\\n        }\\n\\n        & .wallets-textfield {\\n            width: 100%;\\n            max-width: none;\\n        }\\n    }\\n\\n    &__left-content {\\n        @include mobile-or-tablet-screen {\\n            display: none;\\n        }\\n    }\\n\\n    &__right-content {\\n        height: fit-content;\\n        display: flex;\\n        flex: 1 1 0;\\n        justify-content: flex-end;\\n\\n        @include mobile-or-tablet-screen {\\n            width: 100%;\\n        }\\n\\n        .wallets-transaction-status {\\n            margin-top: -2.4rem;\\n            margin-inline-end: 2.4rem;\\n\\n            @include mobile-or-tablet-screen {\\n                margin-inline-end: 0;\\n                margin-top: 0;\\n            }\\n        }\\n    }\\n}\\n\\n.wallets-withdrawal-crypto-address {\\n    width: 100%;\\n    height: fit-content;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-withdrawal-crypto-disclaimer{width:100%}.wallets-withdrawal-crypto-disclaimer__text{font-size:1rem;line-height:1.4rem}@media(max-width: 1279px){.wallets-withdrawal-crypto-disclaimer{max-width:100%}}[dir=\\\"ltr\\\"] .wallets-withdrawal-crypto-disclaimer__items{margin-left:1.4rem}[dir=\\\"rtl\\\"] .wallets-withdrawal-crypto-disclaimer__items{margin-right:1.4rem}.wallets-withdrawal-crypto-disclaimer__items{list-style:disc}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WithdrawalCryptoDisclaimer.scss\"],\"names\":[],\"mappings\":\"AAquBA,sCACI,UAAA,CAEA,4CACI,cAAA,CACA,kBAAA,CApDJ,0BA+CJ,sCASQ,cAAA,CAAA,CAGJ,yDAEI,kBAAA,CAFJ,yDAEI,mBAAA,CAFJ,6CACI,eACA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-withdrawal-crypto-disclaimer {\\n    width: 100%;\\n\\n    &__text {\\n        font-size: 1rem;\\n        line-height: 1.4rem;\\n    }\\n\\n    @include mobile-or-tablet-screen {\\n        max-width: 100%;\\n    }\\n\\n    &__items {\\n        list-style: disc;\\n        margin-inline-start: 1.4rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-withdrawal-crypto-form{width:100%;display:flex;flex-direction:column;align-items:center;gap:2.4rem}.wallets-withdrawal-crypto-form__submit{width:100%;display:flex;justify-content:flex-end}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WithdrawalCryptoForm.scss\"],\"names\":[],\"mappings\":\"AAquBA,gCACI,UAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,UAAA,CAEA,wCACI,UAAA,CACA,YAAA,CACA,wBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-withdrawal-crypto-form {\\n    width: 100%;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    gap: 2.4rem;\\n\\n    &__submit {\\n        width: 100%;\\n        display: flex;\\n        justify-content: flex-end;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-withdrawal-crypto-amount-converter{width:100%;display:flex;justify-content:space-between;gap:2.4rem}@media(max-width: 1279px){.wallets-withdrawal-crypto-amount-converter{flex-direction:column;gap:0}}.wallets-withdrawal-crypto-amount-converter__arrow{margin-top:1.2rem}@media(max-width: 1279px){.wallets-withdrawal-crypto-amount-converter__arrow{height:-moz-fit-content;height:fit-content;margin-top:0;margin-left:auto;margin-right:auto}}.wallets-withdrawal-crypto-amount-converter__arrow>svg{transition:rotate .2s ease}@media(max-width: 1279px){.wallets-withdrawal-crypto-amount-converter__arrow>svg{rotate:90deg;margin-bottom:2.2rem}[dir=rtl] .wallets-withdrawal-crypto-amount-converter__arrow>svg{rotate:-90deg}}.wallets-withdrawal-crypto-amount-converter__arrow--inverted>svg{rotate:180deg}@media(max-width: 1279px){.wallets-withdrawal-crypto-amount-converter__arrow--inverted>svg{rotate:-90deg}[dir=rtl] .wallets-withdrawal-crypto-amount-converter__arrow--inverted>svg{rotate:90deg}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WithdrawalCryptoAmountConverter.scss\"],\"names\":[],\"mappings\":\"AAquBA,4CACI,UAAA,CACA,YAAA,CACA,6BAAA,CACA,UAAA,CAnDA,0BA+CJ,4CAOQ,qBAAA,CACA,KAAA,CAAA,CAGJ,mDACI,iBAAA,CA3DJ,0BA0DA,mDAIQ,uBAAA,CAAA,kBAAA,CACA,YAAA,CACA,gBAAA,CAAA,iBAAA,CAAA,CAGJ,uDACI,0BAAA,CApER,0BAmEI,uDAIQ,YAAA,CACA,oBAAA,CAvvBZ,iEA0vBgB,aAAA,CAAA,CAMR,iEACI,aAAA,CAlFZ,0BAiFQ,iEAIQ,aAAA,CApwBhB,2EAuwBoB,YAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-withdrawal-crypto-amount-converter {\\n    width: 100%;\\n    display: flex;\\n    justify-content: space-between;\\n    gap: 2.4rem;\\n\\n    @include mobile-or-tablet-screen {\\n        flex-direction: column;\\n        gap: 0;\\n    }\\n\\n    &__arrow {\\n        margin-top: 1.2rem;\\n\\n        @include mobile-or-tablet-screen {\\n            height: fit-content;\\n            margin-top: 0;\\n            margin-inline: auto;\\n        }\\n\\n        & > svg {\\n            transition: rotate 0.2s ease;\\n\\n            @include mobile-or-tablet-screen {\\n                rotate: 90deg;\\n                margin-bottom: 2.2rem;\\n\\n                @include rtl {\\n                    rotate: -90deg;\\n                }\\n            }\\n        }\\n\\n        &--inverted {\\n            & > svg {\\n                rotate: 180deg;\\n\\n                @include mobile-or-tablet-screen {\\n                    rotate: -90deg;\\n\\n                    @include rtl {\\n                        rotate: 90deg;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-withdrawal-crypto-percentage__selector{width:100%;display:flex;flex-direction:column;align-items:center;gap:.4rem}.wallets-withdrawal-crypto-percentage__message{width:100%;height:1.8rem;text-align:center}@media(max-width: 1279px){.wallets-withdrawal-crypto-percentage__message{height:1.4rem}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WithdrawalCryptoPercentageSelector.scss\"],\"names\":[],\"mappings\":\"AAsuBI,gDACI,UAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,SAAA,CAGJ,+CACI,UAAA,CACA,aAAA,CACA,iBAAA,CA3DJ,0BAwDA,+CAMQ,aAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-withdrawal-crypto-percentage {\\n    &__selector {\\n        width: 100%;\\n        display: flex;\\n        flex-direction: column;\\n        align-items: center;\\n        gap: 0.4rem;\\n    }\\n\\n    &__message {\\n        width: 100%;\\n        height: 1.8rem;\\n        text-align: center;\\n\\n        @include mobile-or-tablet-screen {\\n            height: 1.4rem;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-crypto-form-checkbox{display:flex;align-self:start;gap:.8rem;align-items:center}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WithdrawalCryptoPriority.scss\"],\"names\":[],\"mappings\":\"AAsuBI,8BACI,YAAA,CACA,gBAAA,CACA,SAAA,CACA,kBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-crypto-form {\\n    &-checkbox {\\n        display: flex;\\n        align-self: start;\\n        gap: 0.8rem;\\n        align-items: center;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-withdrawal-crypto-form__priority-withdrawal-info{background-color:var(--general-section-1);width:100%;display:flex;flex-direction:column;padding:1.6rem 2.4rem;gap:.4rem;border-radius:.8rem}.wallets-withdrawal-crypto-form__priority-withdrawal-info-divider{width:100%;border:1px solid #d6dadb;margin-bottom:.4rem}.wallets-withdrawal-crypto-form__priority-withdrawal-info--flex{display:flex;justify-content:space-between}.wallets-withdrawal-crypto-form-underline{text-decoration:underline}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WithdrawalCryptoPriorityFeeInfo.scss\"],\"names\":[],\"mappings\":\"AAsuBI,0DACI,yCAAA,CACA,UAAA,CACA,YAAA,CACA,qBAAA,CACA,qBAAA,CACA,SAAA,CACA,mBAAA,CAEA,kEACI,UAAA,CACA,wBAAA,CACA,mBAAA,CAGJ,gEACI,YAAA,CACA,6BAAA,CAIR,0CACI,yBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-withdrawal-crypto-form {\\n    &__priority-withdrawal-info {\\n        background-color: var(--general-section-1);\\n        width: 100%;\\n        display: flex;\\n        flex-direction: column;\\n        padding: 1.6rem 2.4rem;\\n        gap: 0.4rem;\\n        border-radius: 0.8rem;\\n\\n        &-divider {\\n            width: 100%;\\n            border: 1px solid #d6dadb;\\n            margin-bottom: 0.4rem;\\n        }\\n\\n        &--flex {\\n            display: flex;\\n            justify-content: space-between;\\n        }\\n    }\\n\\n    &-underline {\\n        text-decoration: underline;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-withdrawal-crypto-receipt{max-width:58.8rem;display:flex;flex-direction:column;align-items:center;gap:2rem}@media(max-width: 1279px){.wallets-withdrawal-crypto-receipt{max-width:100%;gap:1.6rem}}.wallets-withdrawal-crypto-receipt__accounts-info{display:flex;flex-direction:column;align-items:center;gap:.8rem}.wallets-withdrawal-crypto-receipt__accounts-info .wallets-card__details{padding:1.6rem;width:20rem}@media(max-width: 1279px){.wallets-withdrawal-crypto-receipt__accounts-info .wallets-card__details{width:16rem;padding:.8rem}}.wallets-withdrawal-crypto-receipt__withdrawal-info{display:flex;flex-direction:column;gap:.8rem}.wallets-withdrawal-crypto-receipt__amount-received-info{display:flex;flex-direction:column}.wallets-withdrawal-crypto-receipt__actions{display:flex;gap:.8rem}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WithdrawalCryptoReceipt.scss\"],\"names\":[],\"mappings\":\"AAquBA,mCACI,iBAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,QAAA,CApDA,0BA+CJ,mCAQQ,cAAA,CACA,UAAA,CAAA,CAGJ,kDACI,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,SAAA,CAEA,yEACI,cAAA,CACA,WAAA,CAnER,0BAiEI,yEAKQ,WAAA,CACA,aAAA,CAAA,CAKZ,oDACI,YAAA,CACA,qBAAA,CACA,SAAA,CAGJ,yDACI,YAAA,CACA,qBAAA,CAGJ,4CACI,YAAA,CACA,SAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-withdrawal-crypto-receipt {\\n    max-width: 58.8rem;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    gap: 2rem;\\n\\n    @include mobile-or-tablet-screen {\\n        max-width: 100%;\\n        gap: 1.6rem;\\n    }\\n\\n    &__accounts-info {\\n        display: flex;\\n        flex-direction: column;\\n        align-items: center;\\n        gap: 0.8rem;\\n\\n        & .wallets-card__details {\\n            padding: 1.6rem;\\n            width: 20rem;\\n\\n            @include mobile-or-tablet-screen {\\n                width: 16rem;\\n                padding: 0.8rem;\\n            }\\n        }\\n    }\\n\\n    &__withdrawal-info {\\n        display: flex;\\n        flex-direction: column;\\n        gap: 0.8rem;\\n    }\\n\\n    &__amount-received-info {\\n        display: flex;\\n        flex-direction: column;\\n    }\\n\\n    &__actions {\\n        display: flex;\\n        gap: 0.8rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-withdrawal-crypto-destination-address{max-width:123.2rem;display:flex;flex-direction:column;align-items:center;gap:.4rem}[dir=\\\"ltr\\\"] .wallets-withdrawal-crypto-destination-address__content{padding-left:.8rem}[dir=\\\"rtl\\\"] .wallets-withdrawal-crypto-destination-address__content{padding-right:.8rem}.wallets-withdrawal-crypto-destination-address__content{width:100%;display:flex;align-items:center;justify-content:space-between;gap:.8rem;padding-top:.8rem;padding-bottom:.8rem;border-radius:4px;background:#f2f3f4}.wallets-withdrawal-crypto-destination-address__content>span{overflow:hidden;text-overflow:ellipsis}[dir=\\\"ltr\\\"] .wallets-withdrawal-crypto-destination-address__content .wallets-clipboard{padding-right:.8rem}[dir=\\\"rtl\\\"] .wallets-withdrawal-crypto-destination-address__content .wallets-clipboard{padding-left:.8rem}@media(max-width: 1279px){.wallets-withdrawal-crypto-destination-address{max-width:27.2rem}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WithdrawalCryptoDestinationAddress.scss\"],\"names\":[],\"mappings\":\"AAquBA,+CACI,kBAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,SAAA,CAEA,oEAOI,kBAEA,CATJ,oEAOI,mBAEA,CATJ,wDACI,UAAA,CACA,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,SAAA,CACA,iBAAA,CAAA,oBAAA,CAEA,iBAAA,CACA,kBAAA,CAEA,6DACI,eAAA,CACA,sBAAA,CAGJ,uFACI,mBAAA,CADJ,uFACI,kBAAA,CAvER,0BA+CJ,+CA6BQ,iBAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-withdrawal-crypto-destination-address {\\n    max-width: 123.2rem;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    gap: 0.4rem;\\n\\n    &__content {\\n        width: 100%;\\n        display: flex;\\n        align-items: center;\\n        justify-content: space-between;\\n        gap: 0.8rem;\\n        padding-block: 0.8rem;\\n        padding-inline-start: 0.8rem;\\n        border-radius: 4px;\\n        background: #f2f3f4;\\n\\n        & > span {\\n            overflow: hidden;\\n            text-overflow: ellipsis;\\n        }\\n\\n        & .wallets-clipboard {\\n            padding-inline-end: 0.8rem;\\n        }\\n    }\\n\\n    @include mobile-or-tablet-screen {\\n        max-width: 27.2rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-withdrawal-fiat__iframe{width:50%;height:100%;max-width:58.8rem;border:none}@media(max-width: 1279px){.wallets-withdrawal-fiat__iframe{width:100%}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WithdrawalFiat.scss\"],\"names\":[],\"mappings\":\"AAsuBI,iCACI,SAAA,CACA,WAAA,CACA,iBAAA,CACA,WAAA,CApDJ,0BAgDA,iCAOQ,UAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-withdrawal-fiat {\\n    &__iframe {\\n        width: 50%;\\n        height: 100%;\\n        max-width: 58.8rem;\\n        border: none;\\n\\n        @include mobile-or-tablet-screen {\\n            width: 100%;\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"@media(min-width: 1024px){.wallets-withdrawal-locked{margin-top:3.2rem}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WithdrawalLocked.scss\"],\"names\":[],\"mappings\":\"AAguBI,0BAKJ,2BAEQ,iBAAA,CAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-withdrawal-locked {\\n    @include desktop {\\n        margin-top: 3.2rem; // 48px + 32px = 80px\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-withdrawal-verification-request{width:77.2rem;height:-moz-fit-content;height:fit-content;min-height:100%}.wallets-withdrawal-verification-request__description{display:flex;flex-direction:column;gap:2.4rem}.wallets-withdrawal-verification-request__icon{padding:1.3rem}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WithdrawalVerificationRequest.scss\"],\"names\":[],\"mappings\":\"AAquBA,yCACI,aAAA,CACA,uBAAA,CAAA,kBAAA,CACA,eAAA,CAEA,sDACI,YAAA,CACA,qBAAA,CACA,UAAA,CAGJ,+CACI,cAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-withdrawal-verification-request {\\n    width: 77.2rem;\\n    height: fit-content;\\n    min-height: 100%;\\n\\n    &__description {\\n        display: flex;\\n        flex-direction: column;\\n        gap: 2.4rem;\\n    }\\n\\n    &__icon {\\n        padding: 1.3rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-withdrawal-verification-sent__icon{padding:1.3rem}.wallets-withdrawal-verification-sent__resend{padding-top:2.4rem}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WithdrawalVerificationSent.scss\"],\"names\":[],\"mappings\":\"AAsuBI,4CACI,cAAA,CAGJ,8CACI,kBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-withdrawal-verification-sent {\\n    &__icon {\\n        padding: 1.3rem;\\n    }\\n\\n    &__resend {\\n        padding-top: 2.4rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-cashier-modal-route{width:100%;flex:1;flex-direction:column;display:flex;z-index:9}\", \"\",{\"version\":3,\"sources\":[\"webpack://./CashierModalRoute.scss\"],\"names\":[],\"mappings\":\"AAquBA,6BACI,UAAA,CACA,MAAA,CACA,qBAAA,CACA,YAAA,CACA,SAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 48px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 48px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow:\\n    0px 12px 16px -4px rgba(14, 14, 14, 0.08),\\n    0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow:\\n    0px 24px 24px 0px rgba(0, 0, 0, 0.08),\\n    0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-cashier-modal-route {\\n    width: 100%;\\n    flex: 1;\\n    flex-direction: column;\\n    display: flex;\\n    z-index: 9;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./AppCard.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./AppCardBadge.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./FadedAnimatedList.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WalletsPriorityCryptoWithdrawLoader.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./ToggleSwitch.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WalletCurrencyCard.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WalletListCardBadge.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WalletMarketCurrencyIcon.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WalletsErrorScreen.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WalletsPercentageSelector.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WalletCashier.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WalletActionModal.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WalletCashierHeader.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./CashierLocked.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./DepositCrypto.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./DepositCryptoAddress.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./DepositCryptoDisclaimers.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./DepositCryptoTryFiatOnRamp.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./DepositFiat.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./DepositLocked.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./FiatOnRamp.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./FiatOnRampDisclaimer.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./FiatOnRampProviderCard.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransactionStatus.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./CryptoTransaction.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./Transactions.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransactionsCompleted.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransactionsCompletedDemoResetBalance.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransactionsCompletedRow.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransactionsCompletedRowAccountDetails.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransactionsNoDataState.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransactionsPending.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransactionsPendingRow.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransactionsPendingRowField.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransactionsTable.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransferForm.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransferFormAccountCard.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransferFormAccountSelection.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransferFormAmountInput.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransferFormDropdown.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransferMessages.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransferReceipt.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./TransferLocked.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WithdrawalCrypto.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WithdrawalCryptoDisclaimer.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WithdrawalCryptoForm.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WithdrawalCryptoAmountConverter.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WithdrawalCryptoPercentageSelector.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WithdrawalCryptoPriority.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WithdrawalCryptoPriorityFeeInfo.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WithdrawalCryptoReceipt.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WithdrawalCryptoDestinationAddress.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WithdrawalFiat.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WithdrawalLocked.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WithdrawalVerificationRequest.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WithdrawalVerificationSent.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./CashierModalRoute.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};"],"names":["displayMoney","_options$fractional_d","amount","arguments","length","undefined","currency","options","FormatUtils","formatMoney","decimalPlaces","fractional_digits","locale","concat","roundedIconWidth","xs","sm","md","lg","xl","defaultIconWidth","_ref","className","isDemo","_ref$size","size","IconSize","fiatIcons","includes","React","WalletGradientBackground","bodyClassName","type","WalletCurrencyIcon","width","Text","color","weight","Localize","i18n_default_text","MarketTypeIcon","marketType","_ref$platform","platform","product","marketTypeAllkey","MARKET_TYPE","ALL","CFDPlatformIcons","CFD_PLATFORMS","MT5","MT5GoldIcon","MT5MarketIcons","WalletMarketIcon","icon","WalletCurrencyCard","Icons","_objectSpread","AppIcons","PlatformIcons","IconSizes","_ref$className","height","Icon","_ref$amount","_ref$currency","_ref$hasSign","hasSign","currencyConfig","getConfig","useCurrencyConfig","fractionalDigits","displayCode","display_code","sign","Number","value","Math","abs","formattedAmount","dir","getBadgeText","status","localize","TRADING_PLATFORM_STATUS","MAINTENANCE","MT5_ACCOUNT_STATUS","UNDER_MAINTENANCE","UNAVAILABLE","badgeSize","useTranslations","Badge","isBold","leftIcon","LabelPairedCircleExclamationCaptionRegularIcon","fill","padding","rounded","variant","lineHeight","buttonText","_ref$buttonVariant","buttonVariant","message","onClick","title","ActionScreen","actionButtons","Button","borderWidth","textSize","description","CryptoDepositErrorCodes","CryptoWithdrawalErrorCodes","error","data","useActiveWalletAccount","_useTranslations","currentLang","i18nLanguage","getInitialLanguage","useEffect","window","location","reload","defaultContent","content","_defineProperty","CryptoConnectionError","SuspendedCurrency","values","SuspendedDeposit","code","WalletsErrorScreen","refresh","Divider","isFullWidth","actionButtonsOptions","_ref$hideCloseButton","hideCloseButton","isDesktop","useDevice","ModalWrapper","align","map","action","isPrimary","key","text","getStatusName","statusCode","getFormattedConfirmations","confirmations","_confirmations$toStri","toString","currencyDisplayCode","currencyDisplayFraction","transaction","_useModal","useModal","hide","show","formattedTransactionHash","transaction_hash","getTruncatedString","formattedAddressHash","address_hash","formattedConfirmations","status_code","mutate","useCancelCryptoTransaction","cancelTransaction","useCallback","payload","id","onCancelTransactionButtonClick","WalletActionModal","defaultRootId","is_deposit","classNames","toLowerCase","replace","is_valid_to_cancel","LegacyClose1pxIcon","iconSize","WalletMoney","getFormattedDateString","submit_date","dateOptions","day","month","year","unix","transaction_fee","fee","toFixed","components","href","address_url","rel","target","address","transaction_url","hash","transactionType","transactions","wallet","history","useHistory","filteredTransactions","filter","el","is_withdrawal","slice","index","_wallet$currency_conf","_wallet$currency_conf2","CryptoTransaction","currency_config","push","showPending","_useCryptoTransaction","useCryptoTransactions","recentTransactionsError","isTransactionsLoading","isLoading","resetData","subscribe","unsubscribe","_useActiveWalletAccou","activeWalletAccountError","isActiveWalletAccountLoading","refetch","transaction_type","isError","isTransactionStatusSuccessVisible","LegacyWarningIcon","WalletLoader","TransactionStatusError","TransactionStatusSuccess","depositCryptoAddress","mobileAlignment","useIsRtl","QRCode","WalletClipboard","popoverAlignment","textCopy","_data$currency_config","_data$currency_config2","currencyConfigCode","currencyConfigName","name","cryptoCurrencyToNetworkMapper","BTC","ETH","eUSDT","LTC","tUSDT","USDC","UST","_cryptoConfig$minimum","_data$currency_config3","_data$currency_config4","cryptoConfig","useCryptoConfig","formattedMinimumDepositValue","minimum_deposit","minimumDepositDisclaimer","is_tUSDT","InlineMessage","iconPosition","SectionMessage","_getConfig","_useDepositCryptoAddr","useDepositCryptoAddress","activeWallet","depositCryptoError","isTUSDT","isOnrampAvailable","ramp","isServerError","DepositErrorScreen","DepositCryptoInfoNotice","DepositCryptoCurrencyDetails","DepositCryptoAddress","DepositCryptoDisclaimers","DepositCryptoTryFiatOnRamp","TransactionStatus","_useCashierFiatDeposi","useCashierFiatDepositAddress","iframeUrl","isAuthorizing","_useState2","_slicedToArray","useState","isIframeLoading","setIsIframeLoading","depositFiatError","onLoad","src","style","display","cashier","DepositCryptoModule","DepositFiatModule","_provider$service_tok3","handleDisclaimer","_useMutation","useMutation","provider","redirectToBanxa","_provider$service_tok","_provider$service_tok2","banxaUrl","service_token","banxa","url","open","referrer","service","getPaymentIcons","paymentIcons","paymentIcon","fiatOnRampProvider","PaymentMethodApplePayBrandIcon","PaymentMethodMastercardBrandIcon","PaymentMethodVisaBrandIcon","PaymentMethodBanxaBrandIcon","isRtl","disclaimer","setDisclaimer","FiatOnRampDisclaimer","LegacyArrowRight2pxIcon","LegacyArrowLeft2pxIcon","FiatOnRampProviderCard","FiatOnRampModule","_balanceData","_activeWallet$loginid","isResetBalanceLoading","isResetBalanceSuccess","isSuccess","_useAllBalanceSubscri","useAllBalanceSubscription","balanceData","isBalanceLoading","isResetBalanceAvailable","loginid","balance","DerivLightDemoResetBalanceSuccessfulIcon","DerivLightDemoResetBalanceIcon","ResetBalanceModule","ToggleSwitch","forwardRef","ref","onChange","checked","displayName","CashierScrollContext","createContext","getTransactionLabels","all","deposit","reset_balance","transfer","withdrawal","accountType","actionType","displayAccountName","displayActionType","_ref$isInterWallet","isInterWallet","transactionID","WalletMarketCurrencyIcon","as","LandingCompanyDetails","shortcode","MT5MarketTypeDetails","swap_free","zero_spread","financial","landingCompany","malta","svg","virtual","gold","stp","synthetic","PlatformDetails","ctrader","derivez","dxtrade","mt5","standard","getAccountName","_MT5MarketTypeDetails4","_MT5MarketTypeDetails5","_MT5MarketTypeDetails6","accountCategory","displayCurrencyCode","landingCompanyName","mt5MarketType","_MT5MarketTypeDetails","_MT5MarketTypeDetails2","_MT5MarketTypeDetails3","getMT5FinancialTitle","_MT5MarketTypeDetails7","PRODUCT","ZEROSPREAD","_accounts$wallets","_accounts$dtrade","_accounts$dxtrade","_accounts$mt","_accounts$ctrader","accounts","wallets","find","account","dtradeAccount","dtrade","dxtradeAccount","account_id","mt5Account","login","transferAccount","Boolean","_transferAccount$curr","_transferAccount$curr2","_transferAccount$curr3","derivAccountType","landing_company_name","market_type","TransactionsCompletedRowAccountDetails","is_virtual","TransactionsCompletedRowContent","_find","_transaction$from","_transaction$to","displayNonTransferActionType","displayTransferActionType","displayWalletName","shouldShowTraceId","action_type","_transaction$longcode","longcode","transactionId","transaction_id","_wallet$account_type","account_type","_wallet$currency","isVirtual","_FormatUtils$parseCry","parseCryptoLongcode","addressHash","blockchainHash","splitLongcode","descriptions","toLocaleUpperCase","TransactionsCompletedRowTransferAccountDetails","from","to","display_balance_after","_ref2","_transaction$from2","setShouldShowTraceId","debouncedSetShouldShowTraceId","useDebounceCallback","handleRowClick","onKeyDown","DerivLightNoRecentTransactionsIcon","columns","groupBy","rowGroupRender","rowRender","table","useReactTable","getCoreRowModel","getGroupedRowModel","state","grouping","useMemo","getRowModel","rows","rowGroup","original","subRows","row","_useInfiniteTransacti","useInfiniteTransactions","fetchNextPage","isFetching","isTransactionListLoading","setFilter","isWalletLoading","_useAllAccountsList","useAllAccountsList","isAccountsListLoading","setOnCashierScroll","context","useContext","Error","useCashierScroll","fetchMoreOnBottomReached","e","currentTarget","_e$currentTarget","clientHeight","scrollHeight","scrollTop","TransactionsTable","accessorFn","transaction_time","format","accessorKey","header","TransactionsCompletedRow","TransactionsNoDataState","_useTransactions","useTransactions","depositDemoTransactions","isDemoDepositsListLoading","setDepositFilter","_useTransactions2","withdrawalDemoTransactions","isDemoWithdrawalsListLoading","setWithdrawalFilter","resetBalanceTransactions","_toConsumableArray","sort","a","b","_b$transaction_time","_a$transaction_time","hint","valueTextProps","onValueClick","link","Tooltip","hideTooltip","tooltipContent","tooltipPosition","tooltipAlignment","_extends","_activeWallet$currenc","modal","statusDescription","getStatusDescription","onCancelButtonClick","onMobileStatusClick","TransactionsPendingRowField","getFormattedTimeString","_ref$filter","isSubscribed","TransactionsPendingRow","filtersMapper","completed","pending","_location$state","_location$state2","initialShowPending","pathname","initialTransactionType","isPendingActive","setIsPendingActive","_useState4","filterValue","setFilterValue","filterOptionsList","Object","keys","is_crypto","Dropdown","LegacyFilter1pxIcon","label","list","onSelect","TransactionsPending","TransactionsCompletedDemoResetBalance","TransactionsCompleted","TransactionsModule","resetError","isActiveWalletLoading","_useCurrencyConfig","isCurrencyConfigLoading","getPlatformStatus","useTradingPlatformStatus","extendedTransferAccounts","updatedAccounts","_account$account_type","mt5Group","accountName","account_category","displayBalance","mt5_group","isCFDAccount","CTRADER","DXTRADE","platformStatus","tradingAccounts","walletAccounts","modifiedActiveWallet","sortTradingAccounts","sortWalletsAccounts","localeCompare","accountTypeOrder","binary","marketTypeOrder","landingCompanyNameOrderOfMt5Account","bvi","labuan","vanuatu","typeA","typeB","marketTypeA","marketTypeB","landingCompanyTypeA","landingCompanyTypeB","_regeneratorRuntime","t","r","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","apply","_next","_throw","Array","isArray","_arrayWithHoles","_iterableToArrayLimit","_arrayLikeToArray","test","_unsupportedIterableToArray","_nonIterableRest","TransferContext","useTransfer","_data$accounts","transferAccounts","children","_useTransferBetweenAc","useTransferBetweenAccounts","isTransferAccountsLoading","mutateAsync","requestTransferAccounts","_useExtendedTransferA","useExtendedTransferAccountProperties","isModifiedAccountsLoading","isResettingAccounts","setIsResettingAccounts","receipt","setReceipt","sortedAccounts","useSortedTransferAccounts","_useAccountLimits","useAccountLimits","accountLimits","refetchAccountLimits","_useGetExchangeRate","useGetExchangeRate","base_currency","activeWalletExchangeRates","refetchActiveWalletExchangeRates","_useGetExchangeRate2","USDExchangeRates","refetchUSDExchangeRates","refetchExchangeRates","requestTransferBetweenAccounts","fromAccount","fromAmount","toAccount","toAmount","parsedFromAmount","parseFloat","parsedToAmount","account_from","account_to","feeAmount","_fromAccount$currency","_fromAccount$currency2","transfer_between_accounts","fees","resetTransfer","_callee","_context","Provider","hasPlatformStatus","DISABLED_PLATFORM_STATUSES","_ref$countStart","countStart","_ref$intervalMs","intervalMs","onComplete","_useCountdown2","useCountdown","count","_useCountdown2$","resetCountdown","startCountdown","ownKeys","getOwnPropertySymbols","getOwnPropertyDescriptor","getOwnPropertyDescriptors","defineProperties","toPrimitive","String","_toPrimitive","_toPropertyKey","DASH_VALUE","_toAccount$currencyCo","_fromAccount$currency3","_toAccount$currencyCo3","_fromAccount$currency5","_toAccount$currencyCo5","fieldName","_useFormikContext","useFormikContext","setFieldValue","setValues","_useTransfer","refetchExchangeRatesAndLimits","hasFunds","isFromAmountField","isSameCurrency","isAmountInputDisabled","some","isAmountFieldActive","activeAmountFieldName","isTimerVisible","prevTimerVisible","useRef","isMaxBtnVisible","amountValue","toAmountLabel","amountLabel","fractionDigits","amountConverterHandler","rates","fromRate","toRate","_toAccount$currencyCo2","convertedToAmount","convertedFromAmount","current","onBlurHandler","onFocusHandler","trim","onChangeHandler","trimmedValue","decimalPart","split","setTimeout","onTimerCompleteHandler","res","_res$data","_fromAccount$currency4","_toAccount$currencyCo4","newRates","exchange_rates","onMaxBtnClickHandler","walletBalance","preventDefault","_x","WalletTransferAmountInput","disabled","isLastFocusedField","lastFocusedField","maxDigits","onBlur","onFocus","Timer","_account$currencyConf","_account$currency","_ref$type","isInput","isModal","demo_account","WalletListCardBadge","PlatformStatusBadge","TitleLine","accountsList","isFromAccountDropdown","selectedAccount","transferToHint","activeWalletName","fromAccountName","isSingleAccountsGroup","LegacyClose2pxIcon","entries","_ref3","accountsGroupName","groupTitle","isLastAccountsGroup","shouldShowDivider","TransferFormAccountCard","mobileAccountsListRef","fromAccountList","toAccountList","toAccountLoginId","shouldDefaultUSDWallet","shouldSelectDefaultWallet","toDefaultAccount","flatMap","handleSelect","TransferFormAccountSelection","rootRef","LegacyChevronDown2pxIcon","_ref$animateOnMount","animateOnMount","TransitionGroup","child","CSSTransition","appear","timeout","_find$account_type","_limits$daily_transfe","_limits$daily_transfe2","_limits$daily_transfe3","_limits$daily_transfe4","limits","sourceAccount","targetAccount","isTransferBetweenWallets","isDemoTransfer","keyAccountType","acc","platformKey","allowedCount","daily_transfers","allowed","availableCount","available","sourceAccountName","targetAccountName","_limits$daily_cumulat","_limits$daily_cumulat2","_limits$daily_cumulat3","_limits$daily_cumulat4","_activeWalletExchange","_activeWalletExchange2","_activeWalletExchange3","_activeWalletExchange4","_activeWalletExchange5","_activeWalletExchange6","_activeWalletExchange7","_activeWalletExchange8","sourceAmount","allowedSumUSD","daily_cumulative_amount_transfers","availableSumUSD","formattedDemoLimit","USDToSourceRate","USD","sourceCurrencyLimit","sourceCurrencyRemainder","formattedSourceCurrencyLimit","formattedSourceCurrencyRemainder","sourceAccountBalance","verifyPOIAction","buttonLabel","navigateTo","shouldOpenInNewTab","_limits$lifetime_tran","_limits$lifetime_tran2","_activeWalletExchange9","_activeWalletExchange10","_activeWalletExchange11","_activeWalletExchange12","sourceWalletType","targetWalletType","limitsCaseKey","allowedSumActiveWalletCurrency","lifetime_transfers","availableSumActiveWalletCurrency","availableSumConverted","formattedSourceCurrencyLimitInUSD","formattedConvertedSourceCurrencyRemainder","formattedSourceCurrencyRemainderInUSD","_sourceAccount$curren5","minLimit","_sourceAccount$curren","isCtraderTransfer","isMT5Transfer","isDxtradeTransfer","limits_ctrader","min","_sourceAccount$curren2","limits_mt5","_sourceAccount$curren3","limits_dxtrade","_sourceAccount$curren4","formattedMinLimit","fiatAccount","targetAmount","isTransferBetweenCryptoWallets","minimumFeeAmount","pow","minimumFeeText","feePercentage","feeMessageText","currencyType","wallet_currency_type","_fromAccount$account_","_toAccount$account_ty","formData","useWalletAccountsList","poi","usePOI","isServerMaintenance","isAccountUnavailable","hasTradingPlatformStatus","isAccountVerified","is_verified","displayMoney_","memoizedMessages","messageFns","messages","minimumTransferLimitMessageFn","insufficientBalanceMessageFn","countLimitMessageFn","lifetimeAccountLimitsBetweenWalletsMessageFn","cumulativeAccountLimitsMessageFn","transferFeesBetweenWalletsMessageFn","tradingPlatformStatusMessageFn","messageFn","errorMessage","language","useTransferMessages","hasErrorMessage","FadedAnimatedList","idx","WalletAlertMessage","Link","initialValues","onSubmit","Formik","handleSubmit","isTransferBtnDisabled","classnames","TransferFormAmountInput","TransferFormDropdown","TransferMessages","formattedLabel","activeWalletCurrency","appName","_ref$cardSize","cardSize","_ref$device","device","_ref$isDemoWallet","isDemoWallet","walletName","hasShine","theme","AppCardBadge","ReceiptCard","isTradingApp","isWallet","AppCard","WalletCard","feeMessage","Transfer","transferError","TransferErrorScreen","TransferReceipt","TransferForm","TransferProvider","hasAccountsForTransfer","hasTransferAccountsWithFunds","actionButton","locationPathName","getMessage","titleSize","TransferNotAvailable","TransferModule","setResendEmail","InvalidToken","CryptoInvalidAddress","CryptoLimitAgeVerified","SuspendedWithdrawal","WithdrawalCryptoContext","useWithdrawalCryptoContext","verificationCode","_useCryptoConfig","cryptoConfigError","isCryptoConfigLoading","poaStatus","usePOA","poiStatus","_useCryptoWithdrawal","useCryptoWithdrawal","isWithdrawalSuccess","_useCryptoEstimations","useCryptoEstimations","countDownEstimationFee","countDown","cryptoEstimationsFee","cryptoEstimationsFeeUniqueId","cryptoEstimationsError","getCryptoEstimations","isLoadingCryptoEstimationFee","serverTime","setCurrencyCode","unsubscribeCryptoEstimations","setError","isTokenValidationLoading","setIsTokenValidationLoading","_useState6","withdrawalReceipt","setWithdrawalReceipt","_useExchangeRateSubsc","useExchangeRateSubscription","exchangeRates","FRACTIONAL_DIGITS_CRYPTO","FRACTIONAL_DIGITS_FIAT","target_currency","dry_run","verification_code","response","_response$error","crypto","fiat","getConvertedCryptoAmount","fiatInput","getConvertedFiatAmount","cryptoInput","getCurrencyConfig","isClientVerified","requestCryptoWithdrawal","estimatedFeeUniqueId","estimated_fee_unique_id","amountReceived","transactionFee","helperMessageMapper","balanceLessThanMinWithdrawalLimit","decimalPlacesExceeded","limit","fieldRequired","insufficientFunds","invalidInput","withdrawalLimitError","max","validateCryptoAddress","checkIfInvalidInput","splitValues","numberOfDecimalsPoints","integerPart","fractionalPart","isIntegerPartNumberRegex","RegExp","isFractionalPartNumberRegex","fractionalPartPrecisionRegex","exec","validateCryptoInput","remainder","minimumWithdrawal","isInvalidInput","MIN_WITHDRAWAL_AMOUNT","MAX_WITHDRAWAL_AMOUNT","validateFiatInput","_balanceData$balance","_useWithdrawalCryptoC","isCryptoInputActive","setIsCryptoInputActive","errors","onChangeCryptoInput","_activeWallet$currenc2","_accountLimits$remain","convertedValue","minimum_withdrawal","cryptoAmount","fiatAmount","onChangeFiatInput","Field","validate","_activeWallet$currenc3","_accountLimits$remain2","field","WalletTextField","isInvalid","showMessage","fillPercentage","onChangePercentage","balancePercentage","getBlockFillPercentage","blockPercentage","percentage","percentageSelectorOptions","option","WalletsPercentageSelectorBlock","_balanceData2","_activeWallet$loginid2","activeWalletBalance","activeWalletDisplayBalance","isValidInput","WalletsPercentageSelector","round","getPercentageMessage","handleChange","Checkbox","priorityWithdrawal","currency_code","LegacyInfo1pxIcon","WalletsPriorityCryptoWithdrawLoader","WithdrawalCryptoPriorityFeeInfo","isPriorityCryptoWithdrawalEnabled","useGrowthbookIsOn","featureFlag","cryptoAddress","isSubmitting","setFieldTouched","autoComplete","meta","touched","currencyName","event","WithdrawalCryptoPercentageSelector","WithdrawalCryptoAmountConverter","WithdrawalCryptoPriority","onClose","_withdrawalReceipt$am","LegacyArrowDown2pxIcon","WithdrawalCryptoDestinationAddress","WithdrawalCrypto","_getCurrencyConfig","setVerificationCode","onCloseHandler","WithdrawalErrorScreen","WithdrawalCryptoReceipt","WithdrawalCryptoDisclaimer","WithdrawalCryptoForm","WithdrawalCryptoProvider","_useCashierFiatAddres","useCashierFiatAddress","isWithdrawalFiatLoading","sendEmail","DerivLightEmailVerificationIcon","counter","showResend","setShowResend","DerivLightUnreadEmailNotificationIcon","_ref$resendEmail","resendEmail","emailSent","setEmailSent","useSettings","useVerifyEmail","handleSendEmail","email","verify_email","WithdrawalVerificationSent","WithdrawalVerificationRequest","descriptionSize","DerivLightCashierNoBalanceIcon","switchAccount","useAuthorize","queryParams","URLSearchParams","search","loginidQueryParam","get","verificationQueryParam","localVerificationCode","localStorage","getItem","removeItem","URL","searchParams","replaceState","document","WithdrawalNoBalance","WithdrawalCryptoModule","WithdrawalFiatModule","WithdrawalVerificationModule","askAuthenticate","askCurrency","askFinancialRiskApproval","askFixDetails","askSelfExclusionMaxTurnoverSet","askTinInformation","cashierLockedStatus","disabledStatus","documentsExpired","financialAssessmentRequired","isEuRegion","module","noResidence","poaNeedsVerification","poiNeedsVerification","WalletLink","Chat","cashierValidation","useCashierValidation","_useAccountStatus","useAccountStatus","accountStatus","isAccountStatusLoading","_useIsEuRegion","useIsEuRegion","isEuRegionLoading","isCrypto","poa_needs_verification","poi_needs_verification","ask_authenticate","ask_currency","ask_financial_risk_approval","ask_fix_details","ask_self_exclusion_max_turnover_set","ask_tin_information","cashier_locked_status","disabled_status","documents_expired","financial_assessment_required","no_residence","isSystemMaintenance","system_maintenance","isCashierLocked","is_cashier_locked","systemMaintenanceContent","isDepositLocked","isWithdrawalLocked","getSystemMaintenanceContent","is_deposit_locked","is_withdrawal_locked","cashierLockedDescription","getCashierLockedDesc","excludedUntil","financialInformationNotComplete","hasAttemptedPOA","hasAttemptedPOI","isMFAccount","isTNCNeeded","selfExclusion","tradingExperienceNotComplete","unwelcomeStatus","staticUrl","toLocaleDateString","_settings$tnc_status","settings","excluded_until","startsWith","tnc_status","has_attempted_poa","has_attempted_poi","self_exclusion","unwelcome_status","is_financial_information_not_complete","is_trading_experience_not_complete","getDepositLockedDesc","isMFTransferLocked","getWithdrawalLimitReachedDesc","isVerified","noWithdrawalOrTradingStatus","withdrawalLockedStatus","isCryptoProvider","enabled","no_withdrawal_or_trading_status","withdrawal_locked_status","withdrawalLimitReached","getWithdrawalLockedDesc","isDeposit","useRouteMatch","isFiatOnRamp","isResetBalance","isTransfer","isTransactions","isWithdraw","CashierLocked","DepositLocked","WalletDeposit","WalletFiatOnRamp","WalletResetBalance","TransferLocked","WalletTransfer","WalletTransactions","WithdrawalLocked","WalletWithdrawal","_location$state$accou","hideWalletDetails","activeTabRef","useLocation","isFromDTrader","is_from_dtrader","accountsActiveTabIndexRef","accountsActiveTabIndex","tabs","LabelPairedArrowsRotateMdRegularIcon","path","LabelPairedArrowUpArrowDownMdRegularIcon","LabelPairedSquareListMdRegularIcon","LabelPairedPlusMdRegularIcon","LabelPairedMinusMdRegularIcon","scrollIntoView","behavior","block","inline","tab","isActiveTab","onCashierScroll","isContentScrolled","setIsContentScrolled","onContentScroll","WalletCashierHeader","onScroll","WalletCashierContent","WalletCashier","___CSS_LOADER_EXPORT___","api","__esModule","default","exports","locals"],"sourceRoot":""}