{"version":3,"file":"account/js/account.Sections_Assessment_FinancialAssessment_index_ts.aa6fd0bc783e79a11d04.js","mappings":"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","sources":["webpack://@deriv/account/./Configs/financial-details-config.ts","webpack://@deriv/account/./Sections/Assessment/FinancialAssessment/financial-assessment.tsx","webpack://@deriv/account/./Sections/Assessment/FinancialAssessment/index.ts"],"sourcesContent":["import React from 'react';\nimport { GetFinancialAssessment } from '@deriv/api-types';\nimport {\n    generateValidationFunction,\n    getDefaultFields,\n    TSchema,\n    EMPLOYMENT_VALUES,\n    TEmploymentStatus,\n} from '@deriv/shared';\nimport { localize } from '@deriv-com/translations';\n\ntype TFinancialDetailsConfig = {\n    real_account_signup_target: string;\n    financial_assessment: GetFinancialAssessment;\n};\n\nconst financial_details_config: (props: { financial_assessment: GetFinancialAssessment }) => TSchema = ({\n    financial_assessment,\n}) => {\n    return {\n        account_turnover: {\n            supported_in: ['maltainvest'],\n            default_value: financial_assessment?.account_turnover ?? '',\n            rules: [['req', localize('Please select an option')]],\n        },\n        education_level: {\n            supported_in: ['maltainvest'],\n            default_value: financial_assessment?.education_level ?? '',\n            rules: [['req', localize('Please select an option')]],\n        },\n        employment_industry: {\n            default_value: financial_assessment?.employment_industry ?? '',\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Please select an option')]],\n        },\n        estimated_worth: {\n            default_value: financial_assessment?.estimated_worth ?? '',\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Please select an option')]],\n        },\n        income_source: {\n            default_value: financial_assessment?.income_source ?? '',\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Please select an option')]],\n        },\n        net_income: {\n            default_value: financial_assessment?.net_income ?? '',\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Please select an option')]],\n        },\n        occupation: {\n            default_value: financial_assessment?.occupation ?? '',\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Please select an option')]],\n        },\n        source_of_wealth: {\n            default_value: financial_assessment?.source_of_wealth ?? '',\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Please select an option')]],\n        },\n    };\n};\n\nconst financialDetailsConfig = (\n    { real_account_signup_target, financial_assessment }: TFinancialDetailsConfig,\n    FinancialDetails: React.Component\n) => {\n    const config = financial_details_config({ financial_assessment });\n\n    return {\n        header: {\n            active_title: localize('Complete your financial assessment'),\n            title: localize('Financial assessment'),\n        },\n        body: FinancialDetails,\n        form_value: getDefaultFields(real_account_signup_target, config),\n        props: {\n            validate: generateValidationFunction(real_account_signup_target, config),\n        },\n        passthrough: ['residence_list', 'is_fully_authenticated'],\n    };\n};\n\nexport const getAccountTurnoverList = () => [\n    {\n        text: localize('Less than $25,000'),\n        value: 'Less than $25,000',\n    },\n    {\n        text: localize('$25,000 - $50,000'),\n        value: '$25,000 - $50,000',\n    },\n    {\n        text: localize('$50,001 - $100,000'),\n        value: '$50,001 - $100,000',\n    },\n    {\n        text: localize('$100,001 - $500,000'),\n        value: '$100,001 - $500,000',\n    },\n    {\n        text: localize('Over $500,000'),\n        value: 'Over $500,000',\n    },\n];\n\nexport const getEmploymentIndustryList = () => [\n    {\n        text: localize('Construction'),\n        value: 'Construction',\n    },\n    {\n        text: localize('Education'),\n        value: 'Education',\n    },\n    {\n        text: localize('Finance'),\n        value: 'Finance',\n    },\n    {\n        text: localize('Health'),\n        value: 'Health',\n    },\n    {\n        text: localize('Tourism'),\n        value: 'Tourism',\n    },\n    {\n        text: localize('Information & Communications Technology'),\n        value: 'Information & Communications Technology',\n    },\n    {\n        text: localize('Science & Engineering'),\n        value: 'Science & Engineering',\n    },\n    {\n        text: localize('Legal'),\n        value: 'Legal',\n    },\n    {\n        text: localize('Social & Cultural'),\n        value: 'Social & Cultural',\n    },\n    {\n        text: localize('Agriculture'),\n        value: 'Agriculture',\n    },\n    {\n        text: localize('Real Estate'),\n        value: 'Real Estate',\n    },\n    {\n        text: localize('Food Services'),\n        value: 'Food Services',\n    },\n    {\n        text: localize('Manufacturing'),\n        value: 'Manufacturing',\n    },\n    {\n        text: localize('Unemployed'),\n        value: 'Unemployed',\n    },\n];\n\nexport const getOccupationList = () => [\n    {\n        text: localize('Chief Executives, Senior Officials and Legislators'),\n        value: 'Chief Executives, Senior Officials and Legislators',\n    },\n    {\n        text: localize('Managers'),\n        value: 'Managers',\n    },\n    {\n        text: localize('Professionals'),\n        value: 'Professionals',\n    },\n    {\n        text: localize('Clerks'),\n        value: 'Clerks',\n    },\n    {\n        text: localize('Personal Care, Sales and Service Workers'),\n        value: 'Personal Care, Sales and Service Workers',\n    },\n    {\n        text: localize('Agricultural, Forestry and Fishery Workers'),\n        value: 'Agricultural, Forestry and Fishery Workers',\n    },\n    {\n        text: localize('Craft, Metal, Electrical and Electronics Workers'),\n        value: 'Craft, Metal, Electrical and Electronics Workers',\n    },\n    {\n        text: localize('Plant and Machine Operators and Assemblers'),\n        value: 'Plant and Machine Operators and Assemblers',\n    },\n    {\n        text: localize('Cleaners and Helpers'),\n        value: 'Cleaners and Helpers',\n    },\n    {\n        text: localize('Mining, Construction, Manufacturing and Transport Workers'),\n        value: 'Mining, Construction, Manufacturing and Transport Workers',\n    },\n    {\n        text: localize('Armed Forces'),\n        value: 'Armed Forces',\n    },\n    {\n        text: localize('Government Officers'),\n        value: 'Government Officers',\n    },\n    {\n        text: localize('Students'),\n        value: 'Students',\n    },\n    {\n        text: localize('Unemployed'),\n        value: 'Unemployed',\n    },\n];\n\nexport const getSourceOfWealthList = () => [\n    {\n        text: localize('Accumulation of Income/Savings'),\n        value: 'Accumulation of Income/Savings',\n    },\n    {\n        text: localize('Cash Business'),\n        value: 'Cash Business',\n    },\n    {\n        text: localize('Company Ownership'),\n        value: 'Company Ownership',\n    },\n    {\n        text: localize('Divorce Settlement'),\n        value: 'Divorce Settlement',\n    },\n    {\n        text: localize('Inheritance'),\n        value: 'Inheritance',\n    },\n    {\n        text: localize('Investment Income'),\n        value: 'Investment Income',\n    },\n    {\n        text: localize('Sale of Property'),\n        value: 'Sale of Property',\n    },\n];\n\nexport const getEducationLevelList = () => [\n    {\n        text: localize('Primary'),\n        value: 'Primary',\n    },\n    {\n        text: localize('Secondary'),\n        value: 'Secondary',\n    },\n    {\n        text: localize('Tertiary'),\n        value: 'Tertiary',\n    },\n];\n\nexport const getNetIncomeList = () => [...getAccountTurnoverList()];\n\nexport const getEstimatedWorthList = () => [\n    {\n        text: localize('Less than $100,000'),\n        value: 'Less than $100,000',\n    },\n    {\n        text: localize('$100,000 - $250,000'),\n        value: '$100,000 - $250,000',\n    },\n    {\n        text: localize('$250,001 - $500,000'),\n        value: '$250,001 - $500,000',\n    },\n    {\n        text: localize('$500,001 - $1,000,000'),\n        value: '$500,001 - $1,000,000',\n    },\n    {\n        text: localize('Over $1,000,000'),\n        value: 'Over $1,000,000',\n    },\n];\n\nexport const getIncomeSourceList = () => [\n    {\n        text: localize('Salaried Employee'),\n        value: 'Salaried Employee',\n    },\n    {\n        text: localize('Self-Employed'),\n        value: 'Self-Employed',\n    },\n    {\n        text: localize('Investments & Dividends'),\n        value: 'Investments & Dividends',\n    },\n    {\n        text: localize('Pension'),\n        value: 'Pension',\n    },\n    {\n        text: localize('State Benefits'),\n        value: 'State Benefits',\n    },\n    {\n        text: localize('Savings & Inheritance'),\n        value: 'Savings & Inheritance',\n    },\n];\n\nexport const getFormattedOccupationList = (employment_status?: TEmploymentStatus) =>\n    employment_status &&\n    [EMPLOYMENT_VALUES.EMPLOYED, EMPLOYMENT_VALUES.SELF_EMPLOYED].some(status => status === employment_status)\n        ? getOccupationList().filter(item => item.value !== EMPLOYMENT_VALUES.UNEMPLOYED)\n        : getOccupationList();\n\nexport default financialDetailsConfig;\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors\n\nimport React from 'react';\nimport { useHistory, withRouter } from 'react-router';\nimport clsx from 'clsx';\nimport { Formik, FormikHelpers } from 'formik';\n\nimport { GetFinancialAssessment, GetFinancialAssessmentResponse } from '@deriv/api-types';\nimport { Button, Dropdown, FormSubmitErrorMessage, Icon, Loading, Modal, SelectNative, Text } from '@deriv/components';\nimport { useGrowthbookGetFeatureValue } from '@deriv/hooks';\nimport { ACCOUNTS_OS_DFA_URL, getSocketURL, platforms, routes, shouldHideOccupationField, WS } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport type { TCoreStores } from '@deriv/stores/types';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport { LocalStorageUtils, URLUtils, WebSocketUtils } from '@deriv-com/utils';\n\nimport DemoMessage from 'Components/demo-message';\nimport FormBody from 'Components/form-body';\nimport FormBodySection from 'Components/form-body-section';\nimport FormFooter from 'Components/form-footer';\nimport FormSubHeader from 'Components/form-sub-header';\nimport { EmploymentStatusField } from 'Components/forms/form-fields';\nimport IconMessageContent from 'Components/icon-message-content';\nimport LeaveConfirm from 'Components/leave-confirm';\nimport LoadErrorMessage from 'Components/load-error-message';\nimport { getFormattedOccupationList } from 'Configs/financial-details-config';\nimport { TFinancialInformationForm } from 'Types';\n\nimport {\n    getAccountTurnoverList,\n    getBinaryOptionsTradingExperienceList,\n    getBinaryOptionsTradingFrequencyList,\n    getCfdTradingExperienceList,\n    getCfdTradingFrequencyList,\n    getEducationLevelList,\n    getEmploymentIndustryList,\n    getEstimatedWorthList,\n    getForexTradingExperienceList,\n    getForexTradingFrequencyList,\n    getIncomeSourceList,\n    getNetIncomeList,\n    getOtherInstrumentsTradingExperienceList,\n    getOtherInstrumentsTradingFrequencyList,\n    getSourceOfWealthList,\n} from '../../../Constants/financial-information-list';\n\ntype TConfirmationPage = {\n    toggleModal: (prop: boolean) => void;\n    onSubmit: () => void;\n};\n\ntype TConfirmationModal = {\n    is_visible: boolean;\n} & TConfirmationPage;\n\ntype TSubmittedPage = {\n    platform: keyof typeof platforms;\n    routeBackInApp: TCoreStores['common']['routeBackInApp'];\n};\n\nconst ConfirmationContent = ({ className }: { className?: string }) => {\n    return (\n        <Text as='p' size='xs' className={className}>\n            <Localize\n                i18n_default_text='In providing our services to you, we are required to obtain information from you in order to assess whether a given product or service is appropriate for you (that is, whether you possess the experience and knowledge to understand the risks involved).<0/><1/>'\n                components={[<br key={0} />, <br key={1} />]}\n            />\n            <Localize\n                i18n_default_text='On the basis of the information provided in relation to your knowledge and experience, we consider that the investments available via this website are not appropriate for you.<0/><1/>'\n                components={[<br key={0} />, <br key={1} />]}\n            />\n            <Localize i18n_default_text='By clicking Accept below and proceeding with the Account Opening you should note that you may be exposing yourself to risks (which may be significant, including the risk of loss of the entire sum invested) that you may not have the knowledge and experience to properly assess or mitigate.' />\n        </Text>\n    );\n};\n\nconst ConfirmationModal = ({ is_visible, toggleModal, onSubmit }: TConfirmationModal) => {\n    const { localize } = useTranslations();\n    return (\n        <Modal\n            className='financial-assessment-confirmation'\n            is_open={is_visible}\n            small\n            toggleModal={() => toggleModal(false)}\n            title={localize('Appropriateness Test, WARNING:')}\n        >\n            <Modal.Body>\n                <ConfirmationContent />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button large onClick={() => toggleModal(false)} secondary>\n                    <Localize i18n_default_text='Decline' />\n                </Button>\n                <Button\n                    large\n                    onClick={() => {\n                        onSubmit();\n                        toggleModal(false);\n                    }}\n                    primary\n                >\n                    <Localize i18n_default_text='Accept' />\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nconst ConfirmationPage = ({ toggleModal, onSubmit }: TConfirmationPage) => (\n    <div className='account__confirmation-page'>\n        <Text\n            size='xs'\n            weight='bold'\n            styles={{ color: 'var(--brand-red-coral)' }}\n            className='account__confirmation-page-title'\n        >\n            <Localize i18n_default_text='Notice' />\n        </Text>\n        <ConfirmationContent className='account__confirmation-page-content' />\n        <div className='account__confirmation-page-footer'>\n            <Button large onClick={() => toggleModal(false)} secondary>\n                <Localize i18n_default_text='Back' />\n            </Button>\n            <Button\n                large\n                onClick={() => {\n                    onSubmit();\n                    toggleModal(false);\n                }}\n                primary\n            >\n                <Localize i18n_default_text='Accept' />\n            </Button>\n        </div>\n    </div>\n);\n\nconst SubmittedPage = ({ platform, routeBackInApp }: TSubmittedPage) => {\n    const history = useHistory();\n    const { localize } = useTranslations();\n    const onClickButton = () => {\n        if (platforms[platform].is_hard_redirect) {\n            window.location.href = platforms[platform].url;\n        } else {\n            routeBackInApp(history);\n        }\n    };\n\n    const redirectToPOA = () => {\n        history.push(routes.proof_of_address);\n    };\n\n    if (platform && !!platforms[platform])\n        return (\n            <IconMessageContent\n                className='submit-success'\n                message={localize('Financial assessment submitted successfully')}\n                text={platforms[platform].icon_text}\n                icon={<Icon icon='IcSuccess' width={96} height={90} />}\n            >\n                <div className='account-management-flex-wrapper account-management-submit-success'>\n                    <Button type='button' has_effect onClick={onClickButton} primary large>\n                        <Localize\n                            i18n_default_text='Back to {{platform_name}}'\n                            values={{ platform_name: platforms[platform].platform_name }}\n                        />\n                    </Button>\n                </div>\n            </IconMessageContent>\n        );\n\n    return (\n        <IconMessageContent\n            className='submit-success'\n            message={localize('Financial assessment submitted successfully')}\n            text={localize('Let’s continue with providing proofs of address and identity.')}\n            icon={<Icon icon='IcSuccess' width={96} height={90} />}\n        >\n            <div className='account-management-flex-wrapper account-management-submit-success'>\n                <Button type='button' has_effect onClick={() => redirectToPOA()} primary large>\n                    <Localize i18n_default_text='Continue' />\n                </Button>\n            </div>\n        </IconMessageContent>\n    );\n};\n\nconst FinancialAssessment = observer(() => {\n    const { client, common, notifications } = useStore();\n    const {\n        getToken,\n        landing_company_shortcode,\n        is_virtual,\n        is_financial_account,\n        is_trading_experience_incomplete,\n        is_svg,\n        setFinancialAndTradingAssessment,\n        updateAccountStatus,\n        is_authentication_needed,\n        is_financial_information_incomplete,\n        account_settings,\n    } = client;\n    const { isMobile, isTablet, isDesktop } = useDevice();\n    const { is_from_tradershub_os, platform, routeBackInApp } = common;\n    const { refreshNotifications } = notifications;\n    const is_mf = landing_company_shortcode === 'maltainvest';\n    const [shouldRedirectToAccountsOSApp, isRedirectToAccountsOSAppFFLoaded] = useGrowthbookGetFeatureValue({\n        featureFlag: 'redirect_to_fa_in_account_os',\n    });\n\n    const history = useHistory();\n    const { localize } = useTranslations();\n\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [is_confirmation_visible, setIsConfirmationVisible] = React.useState(false);\n    const [has_trading_experience, setHasTradingExperience] = React.useState(false);\n    const [is_form_visible, setIsFormVisible] = React.useState(true);\n    const [api_initial_load_error, setApiInitialLoadError] = React.useState<React.ReactNode>(null);\n    const [is_btn_loading, setIsBtnLoading] = React.useState(false);\n    const [is_submit_success, setIsSubmitSuccess] = React.useState(false);\n    const [initial_form_values, setInitialFormValues] = React.useState<Partial<GetFinancialAssessment>>({});\n    const [financial_information_version, setFinancialInformationVersion] = React.useState('');\n    const [account_status, setAccountStatus] = React.useState([]);\n    const localize_language = LocalStorageUtils.getValue<string>('i18n_language');\n    const url_lang = URLUtils.getQueryParameter('lang');\n    const i18n_language = localize_language || url_lang || 'en';\n\n    const {\n        income_source,\n        employment_status,\n        employment_industry,\n        occupation,\n        source_of_wealth,\n        education_level,\n        net_income,\n        estimated_worth,\n        account_turnover,\n        binary_options_trading_experience,\n        binary_options_trading_frequency,\n        cfd_trading_experience,\n        cfd_trading_frequency,\n        forex_trading_experience,\n        forex_trading_frequency,\n        other_instruments_trading_experience,\n        other_instruments_trading_frequency,\n    } = initial_form_values;\n\n    React.useEffect(() => {\n        if (is_virtual) {\n            setIsLoading(false);\n            history.push(routes.personal_details);\n        } else {\n            WS.authorized.storage.getFinancialAssessment().then(async (data: GetFinancialAssessmentResponse) => {\n                try {\n                    const status = await WS.wait('get_account_status');\n                    setAccountStatus(status?.get_account_status?.status ?? []);\n                    setHasTradingExperience(\n                        (is_financial_account || is_trading_experience_incomplete) && !is_svg && !is_mf\n                    );\n                    if (\n                        data &&\n                        'error' in data &&\n                        typeof data.error === 'object' &&\n                        data.error &&\n                        'message' in data.error &&\n                        typeof data.error.message === 'string'\n                    ) {\n                        setApiInitialLoadError(data.error.message);\n                        return;\n                    }\n                    if (data?.get_financial_assessment) {\n                        setInitialFormValues(data.get_financial_assessment);\n                        setFinancialInformationVersion(data.get_financial_assessment?.financial_information_version);\n                    }\n                    setIsLoading(false);\n                } catch (e) {\n                    // eslint-disable-next-line no-console\n                    console.error(e);\n                }\n            });\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onSubmit = async (\n        values: TFinancialInformationForm,\n        { setSubmitting, setStatus }: FormikHelpers<TFinancialInformationForm>\n    ) => {\n        setStatus({ msg: '' });\n        setIsBtnLoading(true);\n\n        if (shouldHideOccupationField(values?.employment_status || employment_status)) {\n            delete values?.occupation;\n        }\n\n        const form_payload: { financial_information: TFinancialInformationForm } = {\n            financial_information: { ...values },\n        };\n        const data = await setFinancialAndTradingAssessment(form_payload);\n        if (data.error) {\n            setIsBtnLoading(false);\n            if (\n                data &&\n                'error' in data &&\n                typeof data.error === 'object' &&\n                data.error &&\n                'message' in data.error &&\n                typeof data.error.message === 'string'\n            ) {\n                setStatus({ msg: data.error.message });\n            }\n        } else {\n            await updateAccountStatus();\n            WS.authorized.storage.getFinancialAssessment().then((res_data: GetFinancialAssessmentResponse) => {\n                if (res_data?.get_financial_assessment) setInitialFormValues(res_data.get_financial_assessment);\n                setIsSubmitSuccess(true);\n                setIsBtnLoading(false);\n\n                if (isDesktop) {\n                    setTimeout(() => setIsSubmitSuccess(false), 10000);\n                }\n            });\n            setSubmitting(false);\n            refreshNotifications();\n        }\n    };\n\n    const validateFields = (values: Record<string, unknown>) => {\n        setIsSubmitSuccess(false);\n        const errors: Record<string, string> = {};\n        Object.keys(values).forEach(field => {\n            if (!values[field]) {\n                errors[field] = localize('This field is required');\n            }\n        });\n        if (shouldHideOccupationField(values?.employment_status || employment_status)) {\n            delete errors.occupation;\n        }\n        return errors;\n    };\n\n    const showForm = (is_visible: boolean) => {\n        setIsFormVisible(is_visible);\n        setIsConfirmationVisible(false);\n    };\n\n    const toggleConfirmationModal = (value: boolean) => {\n        setIsConfirmationVisible(value);\n        if (isMobile) {\n            setIsFormVisible(!value);\n        }\n    };\n\n    const onClickSubmit = (handleSubmit: () => void) => {\n        const is_confirmation_needed = has_trading_experience && is_trading_experience_incomplete;\n\n        if (is_confirmation_needed) {\n            toggleConfirmationModal(true);\n        } else {\n            handleSubmit();\n        }\n    };\n\n    const getScrollOffset = () => {\n        if (is_mf) {\n            if (isMobile && is_financial_information_incomplete) return '22rem';\n            return is_financial_information_incomplete && !is_submit_success ? '16.5rem' : '16rem';\n        } else if (isMobile) return '22rem';\n        else if (isTablet) return '20rem';\n        return '8rem';\n    };\n\n    if (is_loading || !isRedirectToAccountsOSAppFFLoaded)\n        return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    if (api_initial_load_error) return <LoadErrorMessage error_message={api_initial_load_error} />;\n    if (is_virtual) return <DemoMessage />;\n    if (isMobile && is_authentication_needed && !is_mf && is_submit_success)\n        return <SubmittedPage platform={platform} routeBackInApp={routeBackInApp} />;\n\n    const setInitialFormData = () => {\n        const form_data = {\n            income_source,\n            employment_status,\n            employment_industry,\n            occupation,\n            source_of_wealth,\n            education_level,\n            net_income,\n            estimated_worth,\n            account_turnover,\n            ...(has_trading_experience && {\n                binary_options_trading_experience,\n                binary_options_trading_frequency,\n                cfd_trading_experience,\n                cfd_trading_frequency,\n                forex_trading_experience,\n                forex_trading_frequency,\n                other_instruments_trading_experience,\n                other_instruments_trading_frequency,\n            }),\n        };\n        if (is_mf) {\n            delete form_data.employment_status;\n        }\n        /**\n         * Remove the occupation field if the user is employed and has selected Unemployed or  Self-employed as their employment status\n         */\n        if (shouldHideOccupationField(form_data.employment_status || employment_status)) {\n            delete form_data.occupation;\n        }\n        return form_data;\n    };\n\n    const getFormattedURL = (url_link: string) => {\n        const url = new URL(url_link);\n        const urlParams = new URLSearchParams(location.search);\n        const platform = urlParams.get('platform') ?? (is_from_tradershub_os ? 'tradershub_os' : 'deriv_app');\n\n        const params = {\n            platform,\n            appid: WebSocketUtils.getAppId(),\n            lang: i18n_language,\n            server: getSocketURL(),\n            token: getToken(),\n        };\n\n        Object.entries(params).forEach(([key, value]) => {\n            url.searchParams.append(key, value);\n        });\n\n        return url.toString();\n    };\n\n    if (isRedirectToAccountsOSAppFFLoaded && shouldRedirectToAccountsOSApp) {\n        setTimeout(() => {\n            window.location.replace(getFormattedURL(ACCOUNTS_OS_DFA_URL));\n        }, 0);\n        return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    }\n\n    return (\n        <Formik initialValues={setInitialFormData()} enableReinitialize validate={validateFields} onSubmit={onSubmit}>\n            {({\n                values,\n                errors,\n                status,\n                touched,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                isSubmitting,\n                setFieldTouched,\n                dirty,\n                setFieldValue,\n                isValid,\n            }) => (\n                <React.Fragment>\n                    {isMobile && is_confirmation_visible && (\n                        <ConfirmationPage toggleModal={toggleConfirmationModal} onSubmit={handleSubmit} />\n                    )}\n                    {isDesktop && (\n                        <ConfirmationModal\n                            is_visible={is_confirmation_visible}\n                            toggleModal={toggleConfirmationModal}\n                            onSubmit={handleSubmit}\n                        />\n                    )}\n                    <LeaveConfirm onDirty={isMobile ? showForm : () => undefined} />\n                    {is_form_visible && (\n                        <form className='account-form account-form__financial-assessment' onSubmit={handleSubmit}>\n                            {is_mf && is_financial_information_incomplete && !is_submit_success && (\n                                <div className='financial-banner'>\n                                    <div className='financial-banner__frame'>\n                                        <div className='financial-banner__container'>\n                                            <Icon icon='IcAlertWarning' />\n                                            {isMobile ? (\n                                                <Text size='xxxs' line_height='s'>\n                                                    <Localize i18n_default_text='To enable withdrawals, please complete your financial assessment.' />\n                                                </Text>\n                                            ) : (\n                                                <Text size='xxs' line_height='l'>\n                                                    <Localize i18n_default_text='You can only make deposits at the moment. To enable withdrawals, please complete your financial assessment.' />\n                                                </Text>\n                                            )}\n                                        </div>\n                                    </div>\n                                </div>\n                            )}\n                            <FormBody scroll_offset={getScrollOffset()}>\n                                <FormSubHeader\n                                    title={localize('Financial information')}\n                                    subtitle={`(${localize('All fields are required')})`}\n                                />\n                                <FormBodySection\n                                    side_note={localize('We’re legally obliged to ask for your financial information.')}\n                                >\n                                    <fieldset className='account-form__fieldset'>\n                                        {isDesktop ? (\n                                            <Dropdown\n                                                placeholder={localize('Source of income')}\n                                                is_align_text_left\n                                                name='income_source'\n                                                list={getIncomeSourceList()}\n                                                value={values.income_source}\n                                                onChange={handleChange}\n                                                handleBlur={handleBlur}\n                                                error={touched.income_source && errors.income_source}\n                                            />\n                                        ) : (\n                                            <SelectNative\n                                                placeholder={localize('Please select')}\n                                                name='income_source'\n                                                label={localize('Source of income')}\n                                                list_items={getIncomeSourceList()}\n                                                value={values.income_source}\n                                                error={touched.income_source ? errors.income_source : undefined}\n                                                onChange={e => {\n                                                    setFieldTouched('income_source', true);\n                                                    handleChange(e);\n                                                }}\n                                            />\n                                        )}\n                                    </fieldset>\n                                    {!is_mf && (\n                                        <fieldset className='account-form__fieldset'>\n                                            <EmploymentStatusField is_disabled />\n                                        </fieldset>\n                                    )}\n                                    <fieldset className='account-form__fieldset'>\n                                        {isDesktop ? (\n                                            <Dropdown\n                                                placeholder={localize('Industry of employment')}\n                                                is_align_text_left\n                                                name='employment_industry'\n                                                list={getEmploymentIndustryList()}\n                                                value={values.employment_industry}\n                                                onChange={handleChange}\n                                                handleBlur={handleBlur}\n                                                error={touched.employment_industry && errors.employment_industry}\n                                            />\n                                        ) : (\n                                            <SelectNative\n                                                placeholder={localize('Please select')}\n                                                name='employment_industry'\n                                                label={localize('Industry of employment')}\n                                                list_items={getEmploymentIndustryList()}\n                                                value={values.employment_industry}\n                                                error={\n                                                    touched.employment_industry ? errors.employment_industry : undefined\n                                                }\n                                                onChange={e => {\n                                                    setFieldTouched('employment_industry', true);\n                                                    handleChange(e);\n                                                }}\n                                            />\n                                        )}\n                                    </fieldset>\n                                    {!shouldHideOccupationField(values.employment_status || employment_status) && (\n                                        <fieldset className='account-form__fieldset'>\n                                            {isDesktop ? (\n                                                <Dropdown\n                                                    className='account-form__occupation'\n                                                    placeholder={localize('Occupation')}\n                                                    is_align_text_left\n                                                    name='occupation'\n                                                    list={getFormattedOccupationList(\n                                                        (values.employment_status || employment_status) ?? ''\n                                                    )} // employment_status may come as part of the FA form or Personal details form\n                                                    value={values.occupation}\n                                                    onChange={handleChange}\n                                                    handleBlur={handleBlur}\n                                                    error={touched.occupation && errors.occupation}\n                                                    test_id='occupation'\n                                                />\n                                            ) : (\n                                                <SelectNative\n                                                    placeholder={localize('Please select')}\n                                                    name='occupation'\n                                                    label={localize('Occupation')}\n                                                    list_items={getFormattedOccupationList(\n                                                        (values.employment_status || employment_status) ?? ''\n                                                    )}\n                                                    value={values.occupation}\n                                                    error={touched.occupation ? errors.occupation : undefined}\n                                                    onChange={e => {\n                                                        setFieldTouched('occupation', true);\n                                                        handleChange(e);\n                                                    }}\n                                                    data_testid='occupation'\n                                                />\n                                            )}\n                                        </fieldset>\n                                    )}\n                                    <fieldset className='account-form__fieldset'>\n                                        {isDesktop ? (\n                                            <Dropdown\n                                                placeholder={localize('Source of wealth')}\n                                                is_align_text_left\n                                                name='source_of_wealth'\n                                                list={getSourceOfWealthList()}\n                                                value={values.source_of_wealth}\n                                                onChange={handleChange}\n                                                handleBlur={handleBlur}\n                                                error={touched.source_of_wealth && errors.source_of_wealth}\n                                            />\n                                        ) : (\n                                            <SelectNative\n                                                placeholder={localize('Please select')}\n                                                name='source_of_wealth'\n                                                label={localize('Source of wealth')}\n                                                list_items={getSourceOfWealthList()}\n                                                value={values.source_of_wealth}\n                                                error={touched.source_of_wealth ? errors.source_of_wealth : undefined}\n                                                onChange={e => {\n                                                    setFieldTouched('source_of_wealth', true);\n                                                    handleChange(e);\n                                                }}\n                                            />\n                                        )}\n                                    </fieldset>\n                                    <fieldset className='account-form__fieldset'>\n                                        {isDesktop ? (\n                                            <Dropdown\n                                                placeholder={localize('Level of education')}\n                                                is_align_text_left\n                                                name='education_level'\n                                                list={getEducationLevelList()}\n                                                value={values.education_level}\n                                                onChange={handleChange}\n                                                handleBlur={handleBlur}\n                                                error={touched.education_level && errors.education_level}\n                                            />\n                                        ) : (\n                                            <SelectNative\n                                                placeholder={localize('Please select')}\n                                                name='education_level'\n                                                label={localize('Level of education')}\n                                                list_items={getEducationLevelList()}\n                                                value={values.education_level}\n                                                error={touched.education_level ? errors.education_level : undefined}\n                                                onChange={e => {\n                                                    setFieldTouched('education_level', true);\n                                                    handleChange(e);\n                                                }}\n                                            />\n                                        )}\n                                    </fieldset>\n                                    <fieldset className='account-form__fieldset'>\n                                        {isDesktop ? (\n                                            <Dropdown\n                                                placeholder={localize('Net annual income')}\n                                                is_align_text_left\n                                                name='net_income'\n                                                list={getNetIncomeList()}\n                                                value={values.net_income}\n                                                onChange={handleChange}\n                                                handleBlur={handleBlur}\n                                                error={touched.net_income && errors.net_income}\n                                            />\n                                        ) : (\n                                            <SelectNative\n                                                placeholder={localize('Please select')}\n                                                name='net_income'\n                                                label={localize('Net annual income')}\n                                                list_items={getNetIncomeList()}\n                                                value={values.net_income}\n                                                error={touched.net_income ? errors.net_income : undefined}\n                                                onChange={e => {\n                                                    setFieldTouched('net_income', true);\n                                                    handleChange(e);\n                                                }}\n                                            />\n                                        )}\n                                    </fieldset>\n                                    <fieldset className='account-form__fieldset'>\n                                        {isDesktop ? (\n                                            <Dropdown\n                                                placeholder={localize('Estimated net worth')}\n                                                is_alignment_top\n                                                is_align_text_left\n                                                name='estimated_worth'\n                                                list={getEstimatedWorthList()}\n                                                value={values.estimated_worth}\n                                                onChange={handleChange}\n                                                handleBlur={handleBlur}\n                                                error={touched.estimated_worth && errors.estimated_worth}\n                                            />\n                                        ) : (\n                                            <SelectNative\n                                                placeholder={localize('Please select')}\n                                                name='estimated_worth'\n                                                label={localize('Estimated net worth')}\n                                                list_items={getEstimatedWorthList()}\n                                                value={values.estimated_worth}\n                                                error={touched.estimated_worth ? errors.estimated_worth : undefined}\n                                                onChange={e => {\n                                                    setFieldTouched('estimated_worth', true);\n                                                    handleChange(e);\n                                                }}\n                                            />\n                                        )}\n                                    </fieldset>\n                                    <fieldset className='account-form__fieldset'>\n                                        {isDesktop ? (\n                                            <Dropdown\n                                                placeholder={localize('Anticipated account turnover')}\n                                                is_alignment_top\n                                                is_align_text_left\n                                                name='account_turnover'\n                                                list={getAccountTurnoverList()}\n                                                value={values.account_turnover}\n                                                onChange={handleChange}\n                                                handleBlur={handleBlur}\n                                                error={touched.account_turnover && errors.account_turnover}\n                                            />\n                                        ) : (\n                                            <SelectNative\n                                                placeholder={localize('Please select')}\n                                                name='account_turnover'\n                                                label={localize('Anticipated account turnover')}\n                                                list_items={getAccountTurnoverList()}\n                                                value={values.account_turnover}\n                                                error={touched.account_turnover ? errors.account_turnover : undefined}\n                                                onChange={e => {\n                                                    setFieldTouched('account_turnover', true);\n                                                    handleChange(e);\n                                                }}\n                                            />\n                                        )}\n                                    </fieldset>\n                                    {/* Trading experience fieldset */}\n                                </FormBodySection>\n                                {has_trading_experience && (\n                                    <>\n                                        <FormSubHeader\n                                            title={localize('Trading experience')}\n                                            subtitle={`(${localize('All fields are required')})`}\n                                        />\n                                        <FormBodySection side_note={localize('Tell us about your trading experience.')}>\n                                            <fieldset className='account-form__fieldset'>\n                                                {isDesktop ? (\n                                                    <Dropdown\n                                                        placeholder={localize('Forex trading experience')}\n                                                        is_align_text_left\n                                                        name='forex_trading_experience'\n                                                        list={getForexTradingExperienceList()}\n                                                        value={values.forex_trading_experience}\n                                                        onChange={handleChange}\n                                                        handleBlur={handleBlur}\n                                                        error={\n                                                            touched.forex_trading_experience &&\n                                                            errors.forex_trading_experience\n                                                        }\n                                                    />\n                                                ) : (\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        name='forex_trading_experience'\n                                                        label={localize('Forex trading experience')}\n                                                        list_items={getForexTradingExperienceList()}\n                                                        value={values.forex_trading_experience}\n                                                        error={\n                                                            touched.forex_trading_experience\n                                                                ? errors.forex_trading_experience\n                                                                : undefined\n                                                        }\n                                                        onChange={e => {\n                                                            setFieldTouched('forex_trading_experience', true);\n                                                            handleChange(e);\n                                                        }}\n                                                    />\n                                                )}\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                {isDesktop ? (\n                                                    <Dropdown\n                                                        placeholder={localize('Forex trading frequency')}\n                                                        is_align_text_left\n                                                        name='forex_trading_frequency'\n                                                        list={getForexTradingFrequencyList()}\n                                                        value={values.forex_trading_frequency}\n                                                        onChange={handleChange}\n                                                        handleBlur={handleBlur}\n                                                        error={\n                                                            touched.forex_trading_frequency &&\n                                                            errors.forex_trading_frequency\n                                                        }\n                                                    />\n                                                ) : (\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        name='forex_trading_frequency'\n                                                        label={localize('Forex trading frequency')}\n                                                        list_items={getForexTradingFrequencyList()}\n                                                        value={values.forex_trading_frequency}\n                                                        error={\n                                                            touched.forex_trading_frequency\n                                                                ? errors.forex_trading_frequency\n                                                                : undefined\n                                                        }\n                                                        onChange={e => {\n                                                            setFieldTouched('forex_trading_frequency', true);\n                                                            handleChange(e);\n                                                        }}\n                                                    />\n                                                )}\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                {isDesktop ? (\n                                                    <Dropdown\n                                                        placeholder={localize('Binary options trading experience')}\n                                                        is_align_text_left\n                                                        name='binary_options_trading_experience'\n                                                        list={getBinaryOptionsTradingExperienceList()}\n                                                        value={values.binary_options_trading_experience}\n                                                        onChange={handleChange}\n                                                        handleBlur={handleBlur}\n                                                        error={\n                                                            touched.binary_options_trading_experience &&\n                                                            errors.binary_options_trading_experience\n                                                        }\n                                                    />\n                                                ) : (\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        name='binary_options_trading_experience'\n                                                        label={localize('Binary options trading experience')}\n                                                        list_items={getBinaryOptionsTradingExperienceList()}\n                                                        value={values.binary_options_trading_experience}\n                                                        error={\n                                                            touched.binary_options_trading_experience\n                                                                ? errors.binary_options_trading_experience\n                                                                : undefined\n                                                        }\n                                                        onChange={e => {\n                                                            setFieldTouched('binary_options_trading_experience', true);\n                                                            handleChange(e);\n                                                        }}\n                                                    />\n                                                )}\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                {isDesktop ? (\n                                                    <Dropdown\n                                                        placeholder={localize('Binary options trading frequency')}\n                                                        is_align_text_left\n                                                        name='binary_options_trading_frequency'\n                                                        list={getBinaryOptionsTradingFrequencyList()}\n                                                        value={values.binary_options_trading_frequency}\n                                                        onChange={handleChange}\n                                                        handleBlur={handleBlur}\n                                                        error={\n                                                            touched.binary_options_trading_frequency &&\n                                                            errors.binary_options_trading_frequency\n                                                        }\n                                                    />\n                                                ) : (\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        name='binary_options_trading_frequency'\n                                                        label={localize('Binary options trading frequency')}\n                                                        list_items={getBinaryOptionsTradingFrequencyList()}\n                                                        value={values.binary_options_trading_frequency}\n                                                        error={\n                                                            touched.binary_options_trading_frequency\n                                                                ? errors.binary_options_trading_frequency\n                                                                : undefined\n                                                        }\n                                                        onChange={e => {\n                                                            setFieldTouched('binary_options_trading_frequency', true);\n                                                            handleChange(e);\n                                                        }}\n                                                    />\n                                                )}\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                {isDesktop ? (\n                                                    <Dropdown\n                                                        placeholder={localize('CFD trading experience')}\n                                                        is_align_text_left\n                                                        name='cfd_trading_experience'\n                                                        list={getCfdTradingExperienceList()}\n                                                        value={values.cfd_trading_experience}\n                                                        onChange={handleChange}\n                                                        handleBlur={handleBlur}\n                                                        error={\n                                                            touched.cfd_trading_experience &&\n                                                            errors.cfd_trading_experience\n                                                        }\n                                                    />\n                                                ) : (\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        name='cfd_trading_experience'\n                                                        label={localize('CFD trading experience')}\n                                                        list_items={getCfdTradingExperienceList()}\n                                                        value={values.cfd_trading_experience}\n                                                        error={\n                                                            touched.cfd_trading_experience\n                                                                ? errors.cfd_trading_experience\n                                                                : undefined\n                                                        }\n                                                        onChange={e => {\n                                                            setFieldTouched('cfd_trading_experience', true);\n                                                            handleChange(e);\n                                                        }}\n                                                    />\n                                                )}\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                {isDesktop ? (\n                                                    <Dropdown\n                                                        placeholder={localize('CFD trading frequency')}\n                                                        is_align_text_left\n                                                        name='cfd_trading_frequency'\n                                                        list={getCfdTradingFrequencyList()}\n                                                        value={values.cfd_trading_frequency}\n                                                        onChange={handleChange}\n                                                        handleBlur={handleBlur}\n                                                        error={\n                                                            touched.cfd_trading_frequency &&\n                                                            errors.cfd_trading_frequency\n                                                        }\n                                                    />\n                                                ) : (\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        name='cfd_trading_frequency'\n                                                        label={localize('CFD trading frequency')}\n                                                        list_items={getCfdTradingFrequencyList()}\n                                                        value={values.cfd_trading_frequency}\n                                                        error={\n                                                            touched.cfd_trading_frequency\n                                                                ? errors.cfd_trading_frequency\n                                                                : undefined\n                                                        }\n                                                        onChange={e => {\n                                                            setFieldTouched('cfd_trading_frequency', true);\n                                                            handleChange(e);\n                                                        }}\n                                                    />\n                                                )}\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                {isDesktop ? (\n                                                    <Dropdown\n                                                        placeholder={localize('Other trading instruments experience')}\n                                                        is_align_text_left\n                                                        name='other_instruments_trading_experience'\n                                                        list={getOtherInstrumentsTradingExperienceList()}\n                                                        value={values.other_instruments_trading_experience}\n                                                        onChange={handleChange}\n                                                        handleBlur={handleBlur}\n                                                        error={\n                                                            touched.other_instruments_trading_experience &&\n                                                            errors.other_instruments_trading_experience\n                                                        }\n                                                    />\n                                                ) : (\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        name='other_instruments_trading_experience'\n                                                        label={localize('Other trading instruments experience')}\n                                                        list_items={getOtherInstrumentsTradingExperienceList()}\n                                                        value={values.other_instruments_trading_experience}\n                                                        error={\n                                                            touched.other_instruments_trading_experience\n                                                                ? errors.other_instruments_trading_experience\n                                                                : undefined\n                                                        }\n                                                        onChange={e => {\n                                                            setFieldTouched(\n                                                                'other_instruments_trading_experience',\n                                                                true\n                                                            );\n                                                            handleChange(e);\n                                                        }}\n                                                    />\n                                                )}\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                {isDesktop ? (\n                                                    <Dropdown\n                                                        placeholder={localize('Other trading instruments frequency')}\n                                                        is_alignment_top\n                                                        is_align_text_left\n                                                        name='other_instruments_trading_frequency'\n                                                        list={getOtherInstrumentsTradingFrequencyList()}\n                                                        value={values.other_instruments_trading_frequency}\n                                                        onChange={handleChange}\n                                                        handleBlur={handleBlur}\n                                                        error={\n                                                            touched.other_instruments_trading_frequency &&\n                                                            errors.other_instruments_trading_frequency\n                                                        }\n                                                    />\n                                                ) : (\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        name='other_instruments_trading_frequency'\n                                                        label={localize('Other trading instruments frequency')}\n                                                        list_items={getOtherInstrumentsTradingFrequencyList()}\n                                                        value={values.other_instruments_trading_frequency}\n                                                        error={\n                                                            touched.other_instruments_trading_frequency\n                                                                ? errors.other_instruments_trading_frequency\n                                                                : undefined\n                                                        }\n                                                        onChange={e => {\n                                                            setFieldTouched(\n                                                                'other_instruments_trading_frequency',\n                                                                true\n                                                            );\n                                                            handleChange(e);\n                                                        }}\n                                                    />\n                                                )}\n                                            </fieldset>\n                                        </FormBodySection>\n                                    </>\n                                )}\n                            </FormBody>\n                            <FormFooter>\n                                {status?.msg && <FormSubmitErrorMessage message={status.msg} />}\n                                {isMobile && !is_mf && (\n                                    <Text\n                                        align='center'\n                                        size='xxs'\n                                        className='account-form__footer-all-fields-required'\n                                    >\n                                        <Localize i18n_default_text='All fields are required' />\n                                    </Text>\n                                )}\n                                <Button\n                                    type='button'\n                                    className={clsx('account-form__footer-btn', {\n                                        'dc-btn--green': is_submit_success,\n                                    })}\n                                    onClick={() => onClickSubmit(handleSubmit)}\n                                    is_disabled={isSubmitting || !dirty || is_btn_loading || !isValid}\n                                    has_effect\n                                    is_loading={is_btn_loading}\n                                    is_submit_success={is_submit_success}\n                                    large\n                                    primary\n                                >\n                                    <Localize i18n_default_text='Submit' />\n                                </Button>\n                            </FormFooter>\n                        </form>\n                    )}\n                </React.Fragment>\n            )}\n        </Formik>\n    );\n});\n\nexport default withRouter(FinancialAssessment);\n","import FinancialAssessment from './financial-assessment';\n\nexport default FinancialAssessment;\n"],"names":["getOccupationList","text","localize","value","getFormattedOccupationList","employment_status","EMPLOYMENT_VALUES","EMPLOYED","SELF_EMPLOYED","some","status","filter","item","UNEMPLOYED","ConfirmationContent","className","_jsxs","Text","as","size","children","_jsx","Localize","i18n_default_text","components","ConfirmationModal","is_visible","toggleModal","onSubmit","useTranslations","Modal","is_open","small","title","Body","Footer","Button","large","onClick","secondary","primary","ConfirmationPage","weight","styles","color","SubmittedPage","platform","routeBackInApp","history","useHistory","platforms","IconMessageContent","message","icon_text","icon","Icon","width","height","type","has_effect","onClickButton","is_hard_redirect","window","location","href","url","values","platform_name","push","routes","proof_of_address","FinancialAssessment","observer","client","common","notifications","useStore","getToken","landing_company_shortcode","is_virtual","is_financial_account","is_trading_experience_incomplete","is_svg","setFinancialAndTradingAssessment","updateAccountStatus","is_authentication_needed","is_financial_information_incomplete","account_settings","isMobile","isTablet","isDesktop","useDevice","is_from_tradershub_os","refreshNotifications","is_mf","shouldRedirectToAccountsOSApp","isRedirectToAccountsOSAppFFLoaded","useGrowthbookGetFeatureValue","featureFlag","is_loading","setIsLoading","React","is_confirmation_visible","setIsConfirmationVisible","has_trading_experience","setHasTradingExperience","is_form_visible","setIsFormVisible","api_initial_load_error","setApiInitialLoadError","is_btn_loading","setIsBtnLoading","is_submit_success","setIsSubmitSuccess","initial_form_values","setInitialFormValues","financial_information_version","setFinancialInformationVersion","account_status","setAccountStatus","localize_language","LocalStorageUtils","getValue","url_lang","URLUtils","getQueryParameter","i18n_language","income_source","employment_industry","occupation","source_of_wealth","education_level","net_income","estimated_worth","account_turnover","binary_options_trading_experience","binary_options_trading_frequency","cfd_trading_experience","cfd_trading_frequency","forex_trading_experience","forex_trading_frequency","other_instruments_trading_experience","other_instruments_trading_frequency","personal_details","WS","authorized","storage","getFinancialAssessment","then","async","wait","get_account_status","data","error","get_financial_assessment","e","console","showForm","toggleConfirmationModal","Loading","is_fullscreen","LoadErrorMessage","error_message","DemoMessage","setTimeout","replace","url_link","URL","params","URLSearchParams","search","get","appid","WebSocketUtils","getAppId","lang","server","getSocketURL","token","Object","entries","forEach","key","searchParams","append","toString","getFormattedURL","ACCOUNTS_OS_DFA_URL","Formik","initialValues","setInitialFormData","form_data","shouldHideOccupationField","enableReinitialize","validate","errors","keys","field","setSubmitting","setStatus","msg","form_payload","financial_information","res_data","touched","handleChange","handleBlur","handleSubmit","isSubmitting","setFieldTouched","dirty","setFieldValue","isValid","LeaveConfirm","onDirty","line_height","FormBody","scroll_offset","FormSubHeader","subtitle","FormBodySection","side_note","Dropdown","placeholder","is_align_text_left","name","list","getIncomeSourceList","onChange","SelectNative","label","list_items","undefined","EmploymentStatusField","is_disabled","getEmploymentIndustryList","test_id","data_testid","getSourceOfWealthList","getEducationLevelList","getNetIncomeList","is_alignment_top","getEstimatedWorthList","getAccountTurnoverList","_Fragment","getForexTradingExperienceList","getForexTradingFrequencyList","getBinaryOptionsTradingExperienceList","getBinaryOptionsTradingFrequencyList","getCfdTradingExperienceList","getCfdTradingFrequencyList","getOtherInstrumentsTradingExperienceList","getOtherInstrumentsTradingFrequencyList","FormFooter","FormSubmitErrorMessage","align","clsx","onClickSubmit","withRouter"],"sourceRoot":""}