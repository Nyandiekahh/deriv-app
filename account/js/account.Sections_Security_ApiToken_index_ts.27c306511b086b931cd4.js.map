{"version":3,"file":"account/js/account.Sections_Security_ApiToken_index_ts.27c306511b086b931cd4.js","mappings":"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","sources":["webpack://@deriv/account/./Components/article/article.tsx","webpack://@deriv/account/./Components/article/index.ts","webpack://@deriv/account/./Components/api-token/api-token-article.tsx","webpack://@deriv/account/./Components/api-token/api-token-card.tsx","webpack://@deriv/account/./Components/api-token/api-token-clipboard.tsx","webpack://@deriv/account/./Components/api-token/api-token-context.ts","webpack://@deriv/account/./Components/api-token/api-token-delete-button.tsx","webpack://@deriv/account/./Components/api-token/api-token-table-row-cell.tsx","webpack://@deriv/account/./Components/api-token/api-token-table-row-header.tsx","webpack://@deriv/account/./Components/api-token/api-token-table-row-token-cell.tsx","webpack://@deriv/account/./Components/api-token/api-token-table-row-scopes-cell.tsx","webpack://@deriv/account/./Components/api-token/api-token-table-row.tsx","webpack://@deriv/account/./Components/api-token/api-token-table.tsx","webpack://@deriv/account/./Constants/api-token-card-details.tsx","webpack://@deriv/account/./Components/inline-full-width-note-with-icon/index.ts","webpack://@deriv/account/./Components/inline-full-width-note-with-icon/inline-full-width-note-with-icon.tsx","webpack://@deriv/account/./Sections/Security/ApiToken/index.ts","webpack://@deriv/account/./Sections/Security/ApiToken/api-token.tsx"],"sourcesContent":["import { ReactNode, Fragment } from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { Localize } from '@deriv-com/translations';\nimport './article.scss';\nimport clsx from 'clsx';\n\nexport type TArticle = {\n    title: JSX.Element | string;\n    descriptions: Array<ReactNode>;\n    onClickLearnMore?: () => void;\n    className?: string;\n};\n\nconst Article = ({ title, descriptions, onClickLearnMore, className }: TArticle) => {\n    const has_descriptions: boolean = descriptions?.length > 0;\n    const has_single_description: boolean = descriptions?.length === 1;\n\n    return (\n        <article className={clsx('da-article', className)}>\n            <Text as='h4' color='prominent' line_height='m' size='xs' weight='bold' className='da-article__header'>\n                {title}\n            </Text>\n            {has_descriptions && (\n                <Fragment>\n                    {has_single_description ? (\n                        <Text as='p' size='xxs' line_height='m'>\n                            {descriptions[0]}\n                        </Text>\n                    ) : (\n                        <ul className='da-article__list'>\n                            {descriptions.map((description, idx) => (\n                                <li key={idx}>\n                                    <Text size='xxs' line_height='xs'>\n                                        {description}\n                                    </Text>\n                                </li>\n                            ))}\n                        </ul>\n                    )}\n                </Fragment>\n            )}\n            {onClickLearnMore && (\n                <div className='da-article__learn-more' onClick={onClickLearnMore}>\n                    <Text size='xxs' color='loss-danger' line_height='s'>\n                        <Localize i18n_default_text='Learn more' />\n                    </Text>\n                    <Icon icon='IcChevronRight' className='da-article__learn-more-icon' color='red' />\n                </div>\n            )}\n        </article>\n    );\n};\n\nexport default Article;\n","import AccountArticle from './article';\nimport './article.scss';\n\nexport default AccountArticle;\n","import { Localize } from '@deriv-com/translations';\nimport AccountArticle from '../article';\n\nconst ApiTokenArticle = () => (\n    <AccountArticle\n        title={<Localize i18n_default_text='API token' />}\n        descriptions={[\n            <Localize\n                key={0}\n                i18n_default_text=\"To access your mobile apps and other third-party apps, you'll first need to generate an API token.\"\n            />,\n        ]}\n    />\n);\n\nexport default ApiTokenArticle;\n","import { PropsWithChildren } from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { CompositeCheckbox } from '@deriv/components';\n\ntype TApiTokenCard = {\n    description: JSX.Element;\n    display_name: JSX.Element;\n    name: string;\n};\n\nconst ApiTokenCard = ({ name, display_name, description, children }: PropsWithChildren<TApiTokenCard>) => {\n    return (\n        <Field name={name}>\n            {({ field, form: { setFieldValue } }: FieldProps<boolean>) => (\n                <CompositeCheckbox\n                    {...field}\n                    // Used to set the checkbox value when clicked on the encased region\n                    onChange={() => setFieldValue(name, !field.value)}\n                    className='api-token__checkbox'\n                    label={display_name}\n                    description={description}\n                >\n                    {children}\n                </CompositeCheckbox>\n            )}\n        </Field>\n    );\n};\n\nexport default ApiTokenCard;\n","import { Fragment, useState, useEffect } from 'react';\nimport { useIsMounted } from '@deriv/shared';\nimport { Button, Icon, Modal, Text, Popover, useCopyToClipboard } from '@deriv/components';\nimport { Localize } from '@deriv-com/translations';\nimport { TPopoverAlignment } from '../../Types';\n\ntype TApiTokenClipboard = {\n    scopes?: string[];\n    text_copy?: string;\n    info_message: string | JSX.Element;\n    success_message: string | JSX.Element;\n    popover_alignment?: TPopoverAlignment;\n};\n\ntype TWarningNoteBullet = {\n    message: string | JSX.Element;\n};\n\nconst WarningNoteBullet = ({ message }: TWarningNoteBullet) => (\n    <div className='da-api-token__bullet-wrapper'>\n        <div className='da-api-token__bullet' />\n        <Text as='p' color='prominent ' size='xs' line_height='m'>\n            {message}\n        </Text>\n    </div>\n);\n\nconst WarningDialogMessage = () => (\n    <Fragment>\n        <Text as='p' color='prominent ' size='xs' line_height='m'>\n            <Localize i18n_default_text='Be careful who you share this token with. Anyone with this token can perform the following actions on your account behalf' />\n        </Text>\n        <div className='da-api-token__bullet-container'>\n            <WarningNoteBullet message={<Localize i18n_default_text='Add accounts' />} />\n            <WarningNoteBullet\n                message={<Localize i18n_default_text='Create or delete API tokens for trading and withdrawals' />}\n            />\n            <WarningNoteBullet message={<Localize i18n_default_text='Modify account settings' />} />\n        </div>\n    </Fragment>\n);\n\nconst ApiTokenClipboard = ({\n    scopes,\n    text_copy,\n    info_message,\n    success_message,\n    popover_alignment = 'bottom',\n}: TApiTokenClipboard) => {\n    const [is_copied, copyToClipboard, setIsCopied] = useCopyToClipboard();\n    const [is_modal_open, setIsModalOpen] = useState(false);\n    const [is_popover_open, setIsPopoverOpen] = useState(false);\n    const isMounted = useIsMounted();\n    let timeout_clipboard: NodeJS.Timeout | undefined, timeout_clipboard_2: NodeJS.Timeout | undefined;\n    const has_admin_scope = scopes?.includes('Admin');\n\n    const onMouseEnterHandler = () => {\n        if (!is_copied) setIsPopoverOpen(true);\n    };\n\n    const onMouseLeaveHandler = () => {\n        if (!is_copied) setIsPopoverOpen(false);\n    };\n    /* two timeouts help to prevent popup window blinking.\n    without early hiding the popup we will see shortly the description message like during hovering.\n    this bug appears when popup is handled outside like here\n    */\n    const onClick = () => {\n        setIsModalOpen(false);\n        copyToClipboard(text_copy ?? '');\n        setIsPopoverOpen(true);\n        timeout_clipboard = setTimeout(() => {\n            if (isMounted()) {\n                setIsPopoverOpen(false);\n                setIsCopied(false);\n            }\n        }, 1900);\n        timeout_clipboard_2 = setTimeout(() => {\n            if (isMounted()) {\n                setIsCopied(false);\n            }\n        }, 2050);\n    };\n\n    const onClickHandler = () => {\n        if (has_admin_scope) {\n            setIsModalOpen(true);\n        } else onClick();\n    };\n\n    useEffect(() => {\n        return () => {\n            clearTimeout(timeout_clipboard);\n            clearTimeout(timeout_clipboard_2);\n        };\n    }, [timeout_clipboard, timeout_clipboard_2]);\n\n    return (\n        <Fragment>\n            <Modal is_open={is_modal_open} small>\n                <Modal.Body>\n                    <WarningDialogMessage />\n                </Modal.Body>\n                <Modal.Footer className='da-api-token__modal-footer'>\n                    <Button className='dc-dialog__button' has_effect onClick={onClick} primary large>\n                        <Localize i18n_default_text='OK' />\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n            <Popover\n                alignment={popover_alignment}\n                classNameBubble='dc-clipboard__popover'\n                message={is_copied ? success_message : info_message}\n                is_open={is_popover_open}\n                zIndex='9999'\n            >\n                <Icon\n                    icon={`${is_copied ? 'IcCheckmarkCircle' : 'IcClipboard'}`}\n                    custom_color={`${is_copied ? 'var(--status-success)' : 'var(--text-prominent)'}`}\n                    className='dc-clipboard'\n                    size={14}\n                    data_testid={`${is_copied ? 'dt_token_copied_icon' : 'dt_copy_token_icon'}`}\n                    onClick={onClickHandler}\n                    onMouseEnter={onMouseEnterHandler}\n                    onMouseLeave={onMouseLeaveHandler}\n                />\n            </Popover>\n        </Fragment>\n    );\n};\n\nexport default ApiTokenClipboard;\n","import { createContext } from 'react';\nimport { TApiContext } from '../../Types';\n\nconst ApiTokenContext = createContext<TApiContext>({\n    api_tokens: [],\n    deleteToken: () => Promise.resolve(),\n});\n\nexport default ApiTokenContext;\n","import { useContext, useState, Fragment } from 'react';\nimport { Button, Icon, Modal, Text, Popover } from '@deriv/components';\nimport { useIsMounted } from '@deriv/shared';\nimport { Localize } from '@deriv-com/translations';\nimport ApiTokenContext from './api-token-context';\nimport { TPopoverAlignment, TFormattedToken, TApiContext } from '../../Types';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TApiTokenDeleteButton = {\n    popover_alignment?: TPopoverAlignment;\n    token: TFormattedToken;\n};\n\nconst ApiTokenDeleteButton = ({ token, popover_alignment = 'left' }: TApiTokenDeleteButton) => {\n    const { isDesktop } = useDevice();\n    const { deleteToken } = useContext<TApiContext>(ApiTokenContext);\n    const [is_deleting, setIsDeleting] = useState(false);\n    const [is_loading, setIsLoading] = useState(false);\n    const [is_popover_open, setIsPopoverOpen] = useState(false);\n    const isMounted = useIsMounted();\n\n    const getConfirmationBeforeDelete = () => {\n        if (isDesktop) setIsPopoverOpen(false);\n        setIsDeleting(true);\n    };\n\n    const onMouseEnterHandler = () => {\n        if (!is_deleting && isDesktop) setIsPopoverOpen(true);\n    };\n\n    const onMouseLeaveHandler = () => {\n        if (!is_deleting && isDesktop) setIsPopoverOpen(false);\n    };\n\n    const onCancel = () => setIsDeleting(false);\n\n    const onSubmit = async () => {\n        setIsLoading(true);\n        await deleteToken(token.token ?? '');\n        if (isMounted()) {\n            setIsLoading(false);\n            setIsDeleting(false);\n        }\n    };\n\n    return (\n        <Fragment>\n            <Modal is_open={is_deleting} small>\n                <Modal.Body>\n                    <Text as='h1' color='prominent' weight='bold' className='da-api-token__modal-title'>\n                        <Localize i18n_default_text='Delete token' />\n                    </Text>\n                    <Text as='p' color='prominent ' size='xs' line_height='m'>\n                        <Localize i18n_default_text='Are you sure you want to delete this token?' />\n                    </Text>\n                </Modal.Body>\n                <Modal.Footer className='da-api-token__modal-footer'>\n                    <Button className='dc-dialog__button' has_effect onClick={onCancel} secondary large>\n                        <Localize i18n_default_text='Cancel' />\n                    </Button>\n                    <Button\n                        className='dc-dialog__button'\n                        has_effect\n                        onClick={onSubmit}\n                        primary\n                        large\n                        is_loading={is_loading}\n                    >\n                        <Localize i18n_default_text='Yes, delete' />\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n            <Popover\n                alignment={popover_alignment}\n                classNameBubble='dc-clipboard__popover'\n                message={<Localize i18n_default_text='Delete this token' />}\n                relative_render={false}\n                zIndex='9999'\n                is_open={is_popover_open}\n            >\n                <Icon\n                    icon={'IcDelete'}\n                    custom_color='var(--text-prominent)'\n                    className='dc-clipboard da-api-token__delete-icon'\n                    onClick={getConfirmationBeforeDelete}\n                    size={14}\n                    data_testid='dt_token_delete_icon'\n                    onMouseEnter={onMouseEnterHandler}\n                    onMouseLeave={onMouseLeaveHandler}\n                />\n            </Popover>\n        </Fragment>\n    );\n};\n\nexport default ApiTokenDeleteButton;\n","import { PropsWithChildren } from 'react';\nimport clsx from 'clsx';\nimport { Text } from '@deriv/components';\n\ntype TApiTokenTableRowCell = {\n    className?: string;\n    should_bypass_text: boolean;\n};\n\nconst ApiTokenTableRowCell = ({\n    className,\n    children,\n    should_bypass_text,\n}: PropsWithChildren<Partial<TApiTokenTableRowCell>>) => {\n    if (should_bypass_text) {\n        return <td className={clsx('da-api-token__table-cell', className)}>{children}</td>;\n    }\n\n    return (\n        <td className={clsx('da-api-token__table-cell', className)}>\n            <Text color='prominent ' size='xs' line_height='m'>\n                {children}\n            </Text>\n        </td>\n    );\n};\n\nexport default ApiTokenTableRowCell;\n","import { Text } from '@deriv/components';\n\ntype TApiTokenTableRowHeader = {\n    text: JSX.Element | string;\n};\n\nconst ApiTokenTableRowHeader = ({ text }: TApiTokenTableRowHeader) => (\n    <th className='da-api-token__table-header'>\n        <Text color='prominent ' size='xs' line_height='m' weight='bold'>\n            {text}\n        </Text>\n    </th>\n);\n\nexport default ApiTokenTableRowHeader;\n","import { useState } from 'react';\nimport { Icon, Text, Popover } from '@deriv/components';\nimport { Localize } from '@deriv-com/translations';\nimport ApiTokenClipboard from './api-token-clipboard';\n\ntype TApiTokenTableRowTokenCell = {\n    token?: string;\n    scopes?: string[];\n};\n\nconst HiddenPasswordDots = () => (\n    <div data-testid='dt_hidden_tokens' className='da-api-token__pass-dot-container'>\n        {Array.from(Array(15).keys()).map(element => (\n            <div key={element} className='da-api-token__pass-dot' />\n        ))}\n    </div>\n);\n\nconst ApiTokenTableRowTokenCell = ({ token, scopes }: TApiTokenTableRowTokenCell) => {\n    const [should_show_token, setShouldShowToken] = useState(false);\n\n    const toggleTokenVisibility = () => {\n        setShouldShowToken(prev_value => !prev_value);\n    };\n\n    return (\n        <div className='da-api-token__clipboard-wrapper'>\n            {should_show_token ? (\n                <Text as='p' color='prominent ' size='xs' line_height='m'>\n                    {token}\n                </Text>\n            ) : (\n                <HiddenPasswordDots />\n            )}\n            <ApiTokenClipboard\n                info_message={<Localize i18n_default_text='Copy this token' />}\n                success_message={<Localize i18n_default_text='Token copied!' />}\n                text_copy={token}\n                scopes={scopes}\n            />\n            <Popover\n                alignment='bottom'\n                classNameBubble='dc-clipboard__popover'\n                message={\n                    should_show_token ? (\n                        <Localize i18n_default_text='Hide this token' />\n                    ) : (\n                        <Localize i18n_default_text='Show this token' />\n                    )\n                }\n            >\n                <Icon\n                    icon={should_show_token ? 'IcPasswordEyeVisible' : 'IcPasswordEyeHide'}\n                    className='da-api-token__visibility-icon'\n                    onClick={toggleTokenVisibility}\n                    width={15}\n                    custom_color='var(--text-prominent)'\n                    data_testid='dt_toggle_visibility_icon'\n                />\n            </Popover>\n        </div>\n    );\n};\n\nexport default ApiTokenTableRowTokenCell;\n","import clsx from 'clsx';\n\ntype TApiTokenTableRowScopesCell = {\n    scopes?: string[];\n};\n\nconst ApiTokenTableRowScopesCell = ({ scopes }: TApiTokenTableRowScopesCell) => {\n    return (\n        <div className='da-api-token__table-scopes-cell-block'>\n            {scopes?.map(scope => (\n                <div\n                    key={scope}\n                    className={clsx('da-api-token__table-scope-cell', {\n                        'da-api-token__table-scope-cell-admin': scope.toLowerCase() === 'admin',\n                    })}\n                >\n                    {scope}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default ApiTokenTableRowScopesCell;\n","import ApiTokenDeleteButton from './api-token-delete-button';\nimport ApiTokenTableRowCell from './api-token-table-row-cell';\nimport ApiTokenTableRowScopesCell from './api-token-table-row-scopes-cell';\nimport ApiTokenTableRowTokenCell from './api-token-table-row-token-cell';\nimport { TFormattedToken } from '../../Types';\n\ntype TApiTokenTableRow = {\n    token: TFormattedToken;\n};\n\nconst ApiTokenTableRow = ({ token }: TApiTokenTableRow) => (\n    <tr className='da-api-token__table-cell-row'>\n        <ApiTokenTableRowCell className='da-api-token__table-cell--name'>{token.display_name}</ApiTokenTableRowCell>\n        <ApiTokenTableRowCell should_bypass_text>\n            <ApiTokenTableRowTokenCell token={token.token} scopes={token.formatted_scopes} />\n        </ApiTokenTableRowCell>\n        <ApiTokenTableRowCell should_bypass_text>\n            <ApiTokenTableRowScopesCell scopes={token.formatted_scopes} />\n        </ApiTokenTableRowCell>\n        <ApiTokenTableRowCell>{token.last_used}</ApiTokenTableRowCell>\n        <ApiTokenTableRowCell should_bypass_text>\n            <ApiTokenDeleteButton token={token} />\n        </ApiTokenTableRowCell>\n    </tr>\n);\n\nexport default ApiTokenTableRow;\n","import { useContext, Fragment } from 'react';\nimport { Text } from '@deriv/components';\nimport { formatDate } from '@deriv/shared';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport ApiTokenContext from './api-token-context';\nimport ApiTokenDeleteButton from './api-token-delete-button';\nimport ApiTokenTableRow from './api-token-table-row';\nimport ApiTokenTableRowHeader from './api-token-table-row-header';\nimport ApiTokenTableRowScopesCell from './api-token-table-row-scopes-cell';\nimport ApiTokenTableRowTokenCell from './api-token-table-row-token-cell';\nimport { TApiContext, TToken } from '../../Types';\n\nconst ApiTokenTable = () => {\n    const { api_tokens } = useContext<TApiContext>(ApiTokenContext);\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    const formatTokenScopes = (str: string) => {\n        const replace_filter = str.replace(/[-_]/g, ' ');\n        const sentenced_case = replace_filter[0].toUpperCase() + replace_filter.slice(1).toLowerCase();\n        return sentenced_case;\n    };\n\n    const getTranslatedScopes = (str: string) => {\n        switch (str) {\n            case 'read':\n                return localize('Read');\n            case 'trade':\n                return localize('Trade');\n            case 'payments':\n                return localize('Payments');\n            case 'admin':\n                return localize('Admin');\n            case 'trading_information':\n                return localize('Trading information');\n            default:\n                return formatTokenScopes(str);\n        }\n    };\n\n    const getScopeValue = (token: TToken) => {\n        const titled_scopes = token?.scopes?.map((scope: string) => getTranslatedScopes(scope));\n        const date_format = token?.last_used ? formatDate(token.last_used, 'DD/MM/YYYY') : localize('Never');\n\n        return {\n            display_name: token.display_name,\n            formatted_scopes: titled_scopes ?? [],\n            last_used: date_format,\n            token: token.token,\n        };\n    };\n    if (!isDesktop) {\n        return (\n            <Fragment>\n                {api_tokens?.map((token_data: TToken) => {\n                    const token = getScopeValue(token_data);\n                    return (\n                        <div key={token.token} className='da-api-token__scope'>\n                            <div className='da-api-token__scope-item'>\n                                <div>\n                                    <Text as='h5' size='xxs' color='general' line_height='xs' weight='bold'>\n                                        <Localize i18n_default_text='Name' />\n                                    </Text>\n                                    <Text\n                                        className='da-api-token__scope-item--name'\n                                        as='p'\n                                        size='s'\n                                        color='general'\n                                        line_height='m'\n                                    >\n                                        {token.display_name}\n                                    </Text>\n                                </div>\n                            </div>\n                            <div className='da-api-token__scope-item'>\n                                <div>\n                                    <Text as='h5' size='xxs' color='general' line_height='xs' weight='bold'>\n                                        <Localize i18n_default_text='Token' />\n                                    </Text>\n                                    <ApiTokenTableRowTokenCell token={token.token} scopes={token.formatted_scopes} />\n                                </div>\n                                <div>\n                                    <Text as='h5' size='xxs' color='general' line_height='xs' weight='bold'>\n                                        <Localize i18n_default_text='Last Used' />\n                                    </Text>\n                                    <Text as='p' size='s' color='general' line_height='m'>\n                                        {token.last_used}\n                                    </Text>\n                                </div>\n                            </div>\n                            <div className='da-api-token__scope-item'>\n                                <div>\n                                    <Text as='h5' size='xxs' color='general' line_height='xs' weight='bold'>\n                                        <Localize i18n_default_text='Scopes' />\n                                    </Text>\n                                    <ApiTokenTableRowScopesCell scopes={token.formatted_scopes} />\n                                </div>\n                                <div>\n                                    <ApiTokenDeleteButton token={token} />\n                                </div>\n                            </div>\n                        </div>\n                    );\n                })}\n            </Fragment>\n        );\n    }\n\n    return (\n        <table className='da-api-token__table'>\n            <thead>\n                <tr className='da-api-token__table-header-row'>\n                    <ApiTokenTableRowHeader text={localize('Name')} />\n                    <ApiTokenTableRowHeader text={localize('Token')} />\n                    <ApiTokenTableRowHeader text={localize('Scopes')} />\n                    <ApiTokenTableRowHeader text={localize('Last used')} />\n                    <th />\n                </tr>\n            </thead>\n            <tbody>\n                {api_tokens?.map((api_token: TToken) => (\n                    <ApiTokenTableRow key={api_token?.token} token={getScopeValue(api_token)} />\n                ))}\n            </tbody>\n        </table>\n    );\n};\n\nexport default ApiTokenTable;\n","import { Localize } from '@deriv-com/translations';\n\nexport const API_TOKEN_CARD_DETAILS = [\n    {\n        name: 'read',\n        display_name: <Localize i18n_default_text='Read' />,\n        description: (\n            <Localize i18n_default_text='This scope will allow third-party apps to view your account activity, settings, limits, balance sheets, trade purchase history, and more.' />\n        ),\n    },\n    {\n        name: 'trade',\n        display_name: <Localize i18n_default_text='Trade' />,\n        description: (\n            <Localize i18n_default_text='This scope will allow third-party apps to buy and sell contracts for you, renew your expired purchases, and top up your demo accounts.' />\n        ),\n    },\n    {\n        name: 'payments',\n        display_name: <Localize i18n_default_text='Payments' />,\n        description: (\n            <Localize i18n_default_text='This scope will allow third-party apps to withdraw to payment agents and make inter-account transfers for you.' />\n        ),\n    },\n    {\n        name: 'trading_information',\n        display_name: <Localize i18n_default_text='Trading information' />,\n        description: (\n            <Localize i18n_default_text='This scope will allow third-party apps to view your trading history.' />\n        ),\n    },\n    {\n        name: 'admin',\n        display_name: <Localize i18n_default_text='Admin' />,\n        description: (\n            <Localize i18n_default_text='This scope will allow third-party apps to open accounts for you, manage your settings and token usage, and more. ' />\n        ),\n    },\n];\n\nexport const TOKEN_LIMITS = {\n    MIN: 2,\n    MAX: 32,\n} as const;\n\nexport const TOKEN_NAME_REGEX = /^[A-Za-z0-9\\s_]+$/;\n","import InlineFullWidthNoteWithIcon from './inline-full-width-note-with-icon';\nimport './inline-full-width-note-with-icon.scss';\n\nexport default InlineFullWidthNoteWithIcon;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\n\ntype TInlineFullWidthNoteWithIconExtend = {\n    icon?: string;\n    font_size?: string;\n    icon_size?: number;\n    message: React.ReactNode;\n    title?: React.ReactNode;\n};\n\nconst InlineFullWidthNoteWithIcon = ({\n    icon,\n    message,\n    font_size = 'xxxs',\n    icon_size = 24,\n    title,\n}: TInlineFullWidthNoteWithIconExtend) => {\n    return (\n        <div className='da-inline-full-width-note-with-icon'>\n            {icon && (\n                <div>\n                    <Icon icon={icon} size={icon_size} />\n                </div>\n            )}\n            <Text as='p' size={font_size} line_height='s'>\n                {title && <strong> {title} </strong>}\n                {message}\n            </Text>\n        </div>\n    );\n};\n\nexport default InlineFullWidthNoteWithIcon;\n","import ApiToken from './api-token';\n\nexport default ApiToken;\n","import { useRef, useReducer, useEffect, ChangeEvent } from 'react';\nimport clsx from 'clsx';\nimport { Formik, Form, Field, FormikErrors, FieldProps, FormikHelpers } from 'formik';\nimport { ApiToken as TApitoken, APITokenResponse as TAPITokenResponse } from '@deriv/api-types';\nimport { Timeline, Input, Button, ThemedScrollbars, Loading } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { getPropertyValue, WS } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { TToken } from '../../../Types';\nimport { ApiTokenContext, ApiTokenArticle, ApiTokenCard, ApiTokenTable } from '../../../Components/api-token';\nimport LoadErrorMessage from '../../../Components/load-error-message';\nimport { API_TOKEN_CARD_DETAILS, TOKEN_LIMITS, TOKEN_NAME_REGEX } from '../../../Constants/api-token-card-details';\nimport './api-token.scss';\nimport InlineFullWidthNoteWithIcon from '../../../Components/inline-full-width-note-with-icon';\n\ntype AptTokenState = {\n    api_tokens: NonNullable<TToken[]>;\n    is_loading: boolean;\n    is_success: boolean;\n    error_message: string;\n    show_delete: boolean;\n    is_delete_loading: boolean;\n    is_delete_success: boolean;\n};\n\ntype TApiTokenForm = {\n    token_name: string;\n    read: boolean;\n    trade: boolean;\n    payments: boolean;\n    trading_information: boolean;\n    admin: boolean;\n};\n\nconst ApiToken = observer(() => {\n    const { client } = useStore();\n    const { is_switching } = client;\n    const prev_is_switching = useRef(is_switching);\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    const [state, setState] = useReducer(\n        (prev_state: Partial<AptTokenState>, value: Partial<AptTokenState>) => ({\n            ...prev_state,\n            ...value,\n        }),\n        {\n            api_tokens: [],\n            is_loading: true,\n            is_success: false,\n            error_message: '',\n            show_delete: false,\n            is_delete_loading: false,\n            is_delete_success: false,\n        }\n    );\n\n    const handle_submit_timeout_ref = useRef<NodeJS.Timeout | undefined>();\n    const delete_token_timeout_ref = useRef<NodeJS.Timeout | undefined>();\n\n    useEffect(() => {\n        getApiTokens();\n\n        return () => {\n            clearTimeout(handle_submit_timeout_ref.current);\n            clearTimeout(delete_token_timeout_ref.current);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (prev_is_switching.current !== is_switching) {\n            prev_is_switching.current = is_switching;\n            getApiTokens();\n        }\n    }, [is_switching]);\n\n    const initial_form: TApiTokenForm = {\n        token_name: '',\n        read: false,\n        trade: false,\n        payments: false,\n        trading_information: false,\n        admin: false,\n    };\n\n    const validateFields = (values: TApiTokenForm) => {\n        const errors: FormikErrors<TApiTokenForm> = {};\n        const token_name = values?.token_name?.trim();\n\n        if (!token_name) {\n            errors.token_name = localize('Please enter a token name.');\n        } else if (!TOKEN_NAME_REGEX.test(token_name)) {\n            errors.token_name = localize('Only letters, numbers, and underscores are allowed.');\n        } else if (token_name.length < TOKEN_LIMITS.MIN) {\n            errors.token_name = localize(\n                'Length of token name must be between {{MIN_TOKEN}} and {{MAX_TOKEN}} characters.',\n                {\n                    MIN_TOKEN: TOKEN_LIMITS.MIN,\n                    MAX_TOKEN: TOKEN_LIMITS.MAX,\n                }\n            );\n        } else if (token_name.length > TOKEN_LIMITS.MAX) {\n            errors.token_name = localize('Maximum {{MAX_TOKEN}} characters.', { MAX_TOKEN: TOKEN_LIMITS.MAX });\n        }\n\n        return errors;\n    };\n\n    const selectedTokenScope = (values: TApiTokenForm) =>\n        Object.keys(values).filter(\n            item => item !== 'token_name' && Boolean(values[item as keyof TApiTokenForm])\n        ) as NonNullable<NonNullable<TApitoken['tokens']>[0]['scopes']>;\n\n    const handleSubmit = async (\n        values: TApiTokenForm,\n        { setSubmitting, setFieldError, resetForm }: FormikHelpers<TApiTokenForm>\n    ) => {\n        const token_response = await WS.apiToken({\n            api_token: 1,\n            new_token: values.token_name,\n            new_token_scopes: selectedTokenScope(values),\n        });\n        if (token_response.error) {\n            setFieldError('token_name', token_response.error.message);\n        } else {\n            setState({\n                is_success: true,\n                api_tokens: getPropertyValue(token_response, ['api_token', 'tokens']),\n            });\n            handle_submit_timeout_ref.current = setTimeout(() => {\n                setState({ is_success: false });\n            }, 500);\n        }\n        resetForm();\n        setSubmitting(false);\n    };\n\n    const populateTokenResponse = (response: TAPITokenResponse) => {\n        if (response.error) {\n            setState({\n                is_loading: false,\n                error_message: getPropertyValue(response, ['error', 'message']),\n            });\n        } else {\n            setState({\n                is_loading: false,\n                api_tokens: getPropertyValue(response, ['api_token', 'tokens']),\n            });\n        }\n    };\n\n    const getApiTokens = async () => {\n        setState({ is_loading: true });\n        const token_response = await WS.authorized.apiToken({ api_token: 1 });\n        populateTokenResponse(token_response);\n    };\n\n    const deleteToken = async (token: string) => {\n        setState({ is_delete_loading: true });\n\n        const token_response = await WS.authorized.apiToken({ api_token: 1, delete_token: token });\n\n        populateTokenResponse(token_response);\n\n        setState({ is_delete_loading: false, is_delete_success: true });\n\n        delete_token_timeout_ref.current = setTimeout(() => {\n            setState({ is_delete_success: false });\n        }, 500);\n    };\n\n    const { api_tokens, is_loading, is_success, error_message } = state;\n\n    if (is_loading || is_switching) {\n        return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    }\n\n    if (error_message) {\n        return <LoadErrorMessage error_message={error_message} />;\n    }\n\n    if (typeof api_tokens === 'undefined') {\n        return null;\n    }\n    const context_value = {\n        api_tokens,\n        deleteToken,\n    };\n\n    return (\n        <ApiTokenContext.Provider value={context_value}>\n            <section className='da-api-token'>\n                <div className='da-api-token__wrapper'>\n                    <ThemedScrollbars className='da-api-token__scrollbars' is_bypassed={!isDesktop}>\n                        {!isDesktop && <ApiTokenArticle />}\n                        <Formik initialValues={initial_form} onSubmit={handleSubmit} validate={validateFields}>\n                            {({\n                                values,\n                                errors,\n                                isValid,\n                                dirty,\n                                touched,\n                                handleChange,\n                                handleBlur,\n                                isSubmitting,\n                                setFieldTouched,\n                            }) => (\n                                <Form noValidate>\n                                    <InlineFullWidthNoteWithIcon\n                                        icon='IcAppstoreNewWarning'\n                                        font_size='xs'\n                                        message={\n                                            <Localize\n                                                i18n_default_text='To avoid loss of funds, do not share tokens with <0>unauthorised</0> parties, especially the tokens with any of the following scopes: <0>Payments</0>, <0>Admin</0>, or <0>Trade</0>.'\n                                                components={[<strong key={0} />]}\n                                            />\n                                        }\n                                    />\n                                    <Timeline className='da-api-token__timeline' line_height='xxxl'>\n                                        <Timeline.Item\n                                            item_title={\n                                                <Localize i18n_default_text='Select scopes based on the access you need.' />\n                                            }\n                                        >\n                                            <div className='da-api-token__checkbox-wrapper'>\n                                                {API_TOKEN_CARD_DETAILS.map(card => (\n                                                    <ApiTokenCard\n                                                        key={card.name}\n                                                        name={card.name}\n                                                        display_name={card.display_name}\n                                                        description={card.description}\n                                                    />\n                                                ))}\n                                            </div>\n                                        </Timeline.Item>\n                                        <Timeline.Item\n                                            item_title={\n                                                <Localize i18n_default_text=\"Name your token and click on 'Create' to generate your token.\" />\n                                            }\n                                        >\n                                            <div className='da-api-token__input-group'>\n                                                <Field name='token_name'>\n                                                    {({ field }: FieldProps<string | boolean>) => (\n                                                        <Input\n                                                            {...field}\n                                                            data-lpignore='true'\n                                                            type='text'\n                                                            className='da-api-token__input dc-input__input-group'\n                                                            label={localize('Token name')}\n                                                            value={values.token_name}\n                                                            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                                                setFieldTouched('token_name', true);\n                                                                handleChange(e);\n                                                            }}\n                                                            onBlur={handleBlur}\n                                                            hint={\n                                                                <Localize i18n_default_text='Length of token name must be between 2 and 32 characters.' />\n                                                            }\n                                                            required\n                                                            error={\n                                                                touched.token_name && errors.token_name\n                                                                    ? errors.token_name\n                                                                    : undefined\n                                                            }\n                                                        />\n                                                    )}\n                                                </Field>\n                                                <Button\n                                                    className={clsx('dc-btn__button-group', 'da-api-token__button', {\n                                                        'da-api-token__button--success': is_success,\n                                                    })}\n                                                    type='submit'\n                                                    is_disabled={\n                                                        !dirty ||\n                                                        isSubmitting ||\n                                                        !isValid ||\n                                                        !selectedTokenScope(values).length\n                                                    }\n                                                    has_effect\n                                                    is_loading={isSubmitting}\n                                                    is_submit_success={is_success}\n                                                    primary\n                                                    large\n                                                >\n                                                    <Localize i18n_default_text='Create' />\n                                                </Button>\n                                            </div>\n                                        </Timeline.Item>\n                                        <Timeline.Item\n                                            item_title={\n                                                <Localize i18n_default_text='Copy and paste the token into the app.' />\n                                            }\n                                        >\n                                            <ApiTokenTable />\n                                        </Timeline.Item>\n                                    </Timeline>\n                                </Form>\n                            )}\n                        </Formik>\n                    </ThemedScrollbars>\n                    {isDesktop && <ApiTokenArticle />}\n                </div>\n            </section>\n        </ApiTokenContext.Provider>\n    );\n});\n\nexport default ApiToken;\n"],"names":["Article","title","descriptions","onClickLearnMore","className","has_descriptions","length","has_single_description","_jsxs","clsx","children","_jsx","Text","as","color","line_height","size","weight","Fragment","map","description","idx","onClick","Localize","i18n_default_text","Icon","icon","ApiTokenArticle","AccountArticle","ApiTokenCard","name","display_name","Field","field","form","setFieldValue","CompositeCheckbox","onChange","value","label","WarningNoteBullet","message","WarningDialogMessage","ApiTokenClipboard","scopes","text_copy","info_message","success_message","popover_alignment","is_copied","copyToClipboard","setIsCopied","useCopyToClipboard","is_modal_open","setIsModalOpen","useState","is_popover_open","setIsPopoverOpen","isMounted","useIsMounted","timeout_clipboard","timeout_clipboard_2","has_admin_scope","includes","setTimeout","useEffect","clearTimeout","Modal","is_open","small","Body","Footer","Button","has_effect","primary","large","Popover","alignment","classNameBubble","zIndex","custom_color","data_testid","onClickHandler","onMouseEnter","onMouseEnterHandler","onMouseLeave","onMouseLeaveHandler","createContext","api_tokens","deleteToken","Promise","resolve","ApiTokenDeleteButton","token","isDesktop","useDevice","useContext","ApiTokenContext","is_deleting","setIsDeleting","is_loading","setIsLoading","onCancel","secondary","async","relative_render","getConfirmationBeforeDelete","ApiTokenTableRowCell","should_bypass_text","ApiTokenTableRowHeader","text","HiddenPasswordDots","Array","from","keys","element","ApiTokenTableRowTokenCell","should_show_token","setShouldShowToken","toggleTokenVisibility","prev_value","width","ApiTokenTableRowScopesCell","scope","toLowerCase","ApiTokenTableRow","formatted_scopes","last_used","ApiTokenTable","localize","useTranslations","getScopeValue","titled_scopes","str","replace_filter","replace","toUpperCase","slice","formatTokenScopes","getTranslatedScopes","date_format","formatDate","api_token","token_data","API_TOKEN_CARD_DETAILS","TOKEN_LIMITS","TOKEN_NAME_REGEX","InlineFullWidthNoteWithIcon","font_size","icon_size","observer","client","useStore","is_switching","prev_is_switching","useRef","state","setState","useReducer","prev_state","is_success","error_message","show_delete","is_delete_loading","is_delete_success","handle_submit_timeout_ref","delete_token_timeout_ref","getApiTokens","current","selectedTokenScope","values","Object","filter","item","Boolean","populateTokenResponse","response","error","getPropertyValue","token_response","WS","authorized","apiToken","Loading","is_fullscreen","LoadErrorMessage","context_value","delete_token","Provider","ThemedScrollbars","is_bypassed","Formik","initialValues","token_name","read","trade","payments","trading_information","admin","onSubmit","setSubmitting","setFieldError","resetForm","new_token","new_token_scopes","validate","errors","trim","test","MIN_TOKEN","MAX_TOKEN","isValid","dirty","touched","handleChange","handleBlur","isSubmitting","setFieldTouched","Form","noValidate","components","Timeline","Item","item_title","card","Input","type","e","onBlur","hint","required","undefined","is_disabled","is_submit_success"],"sourceRoot":""}