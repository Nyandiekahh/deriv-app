{"version":3,"file":"account/js/account.Sections_Security_Passkeys_index_ts.dec8d03a0ad4f96514b2.js","mappings":"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","sources":["webpack://@deriv/account/./Sections/Security/Passkeys/passkeys-configs.tsx","webpack://@deriv/account/./Sections/Security/Passkeys/components/passkey-error-modal.tsx","webpack://@deriv/account/./Sections/Security/Passkeys/components/passkey-reminder-modal.tsx","webpack://@deriv/account/./Sections/Security/Passkeys/components/passkey-remove-confirmation-modal.tsx","webpack://@deriv/account/./Sections/Security/Passkeys/components/passkeys-status-layout.tsx","webpack://@deriv/account/./Sections/Security/Passkeys/components/no-passkeys.tsx","webpack://@deriv/account/./Sections/Security/Passkeys/components/passkey-created.tsx","webpack://@deriv/account/./Sections/Security/Passkeys/components/description-container.tsx","webpack://@deriv/account/./Sections/Security/Passkeys/components/tips-block.tsx","webpack://@deriv/account/./Sections/Security/Passkeys/components/passkeys-learn-more.tsx","webpack://@deriv/account/./Sections/Security/Passkeys/components/passkey-card.tsx","webpack://@deriv/account/./Sections/Security/Passkeys/components/passkeys-list.tsx","webpack://@deriv/account/./Sections/Security/Passkeys/components/passkey-rename.tsx","webpack://@deriv/account/./Sections/Security/Passkeys/components/passkey-removed.tsx","webpack://@deriv/account/./Sections/Security/Passkeys/components/passkeys-status-container.tsx","webpack://@deriv/account/./Sections/Security/Passkeys/index.ts","webpack://@deriv/account/./Sections/Security/Passkeys/passkeys.tsx"],"sourcesContent":["import { MutableRefObject } from 'react';\nimport * as Yup from 'yup';\nimport { TSocketError } from '@deriv/api/types';\nimport { getOSNameWithUAParser } from '@deriv/shared';\nimport { localize } from '@deriv-com/translations';\nimport { Analytics, TEvents } from '@deriv-com/analytics';\nimport { TServerError } from '../../../Types';\n\nexport const PASSKEY_STATUS_CODES = {\n    CREATED: 'created',\n    LEARN_MORE: 'learn_more',\n    LIST: '',\n    NO_PASSKEY: 'no_passkey',\n    REMOVED: 'removed',\n    REMOVING: 'removing',\n    RENAMING: 'renaming',\n    VERIFYING: 'verifying',\n} as const;\n\nexport type TPasskeysStatus = typeof PASSKEY_STATUS_CODES[keyof typeof PASSKEY_STATUS_CODES];\n\n// TODO: fix types for TServerError and TSocketError\nexport type TPasskeyError =\n    | TServerError\n    | null\n    | TSocketError<'passkeys_list' | 'passkeys_register' | 'passkeys_register_options'>;\n\nexport const getPasskeyRenameValidationSchema = () =>\n    Yup.object().shape({\n        passkey_name: Yup.string()\n            .required('Only 3-30 characters allowed.')\n            .min(3, localize('Only 3-30 characters allowed.'))\n            .max(30, localize('Only 3-30 characters allowed.'))\n            .matches(/^[A-Za-z0-9][A-Za-z0-9\\s-]*$/, localize('Only letters, numbers, space, and hyphen are allowed.')),\n    });\n\nexport const clearRefTimeOut = (timeout_ref: MutableRefObject<NodeJS.Timeout | null>) => {\n    if (timeout_ref.current) clearTimeout(timeout_ref.current);\n};\n\nexport const isNotExistedPasskey = (error: TServerError) => error?.code === 'UserNotFound';\nexport const isNotSupportedError = (error: TServerError) => error?.name === 'NotSupportedError';\n\n// the errors are connected with terminating the registration process or setting up the unlock method from user side\nexport const excluded_error_names = ['NotAllowedError', 'AbortError', 'NotReadableError', 'UnknownError'];\nexport const excluded_error_codes = ['ERROR_AUTHENTICATOR_PREVIOUSLY_REGISTERED'];\n\nexport const passkeysMenuActionEventTrack = (\n    action: TEvents['ce_passkey_account_settings_form']['action'],\n    additional_data: { error_message?: string; subform_name?: string } = {}\n) => {\n    Analytics.trackEvent('ce_passkey_account_settings_form', {\n        action,\n        form_name: 'ce_passkey_account_settings_form',\n        operating_system: getOSNameWithUAParser(),\n        ...additional_data,\n    });\n};\n","import { Button, Modal, Text } from '@deriv/components';\nimport { Localize } from '@deriv-com/translations';\nimport { isNotSupportedError, TPasskeyError } from '../passkeys-configs';\nimport { TServerError } from '../../../../Types';\n\ntype TPasskeyErrorModal = {\n    error: TPasskeyError;\n    onButtonClick: () => void;\n    is_modal_open: boolean;\n};\n\nconst getErrorModalContent = (error: TPasskeyError) => {\n    const error_message_header = (\n        <Text size='xs' weight='bold'>\n            {isNotSupportedError(error as TServerError) ? (\n                <Localize i18n_default_text='Passkey setup failed' />\n            ) : (\n                <Localize i18n_default_text='Unable to process your request' />\n            )}\n        </Text>\n    );\n\n    const error_message = isNotSupportedError(error as TServerError) ? (\n        <Localize i18n_default_text=\"This device doesn't support passkeys.\" />\n    ) : (\n        <Localize i18n_default_text='We’re experiencing a temporary issue in processing your request. Please try again later.' />\n    );\n\n    return {\n        error_message_header,\n        error_message,\n    };\n};\n\nexport const PasskeyErrorModal = ({ is_modal_open, error, onButtonClick }: TPasskeyErrorModal) => {\n    const error_modal_content = getErrorModalContent(error);\n\n    return (\n        <Modal\n            portalId='modal_root'\n            header={error_modal_content.error_message_header}\n            is_open={is_modal_open}\n            has_close_icon={false}\n            className='passkeys-modal'\n        >\n            <Modal.Body>{error_modal_content.error_message}</Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onButtonClick} large primary>\n                    <Localize i18n_default_text='OK' />\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import { MouseEventHandler } from 'react';\nimport { Button, Modal, Text } from '@deriv/components';\nimport { Localize } from '@deriv-com/translations';\n\ntype TPasskeyReminderModal = {\n    onButtonClick: MouseEventHandler<HTMLButtonElement>;\n    is_modal_open: boolean;\n    toggleModal?: () => void;\n};\n\nconst getReminderModalContent = () => {\n    const reminder_tips = [\n        <Localize i18n_default_text='Enable screen lock on your device.' key='tip_1' />,\n        <Localize i18n_default_text='Enable bluetooth.' key='tip_2' />,\n        <Localize i18n_default_text='Sign in to your Google or iCloud account.' key='tip_3' />,\n    ];\n\n    return (\n        <ul>\n            {reminder_tips.map(tip => (\n                <Text as='li' key={tip.key} size='xxs' line_height='l'>\n                    {tip}\n                </Text>\n            ))}\n        </ul>\n    );\n};\n\nexport const PasskeyReminderModal = ({ is_modal_open, onButtonClick, toggleModal }: TPasskeyReminderModal) => {\n    const header = (\n        <Text size='xs' weight='bold'>\n            <Localize i18n_default_text='Just a reminder' />\n        </Text>\n    );\n\n    return (\n        <Modal\n            portalId='modal_root'\n            header={header}\n            is_open={is_modal_open}\n            toggleModal={toggleModal}\n            className='passkeys-modal'\n        >\n            <Modal.Body>{getReminderModalContent()}</Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onButtonClick} large primary>\n                    <Localize i18n_default_text='Continue' />\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import { MouseEventHandler } from 'react';\nimport { Button, Modal, Text } from '@deriv/components';\nimport { Localize } from '@deriv-com/translations';\n\ntype TPasskeyRemoveConfirmationrModal = {\n    onPrimaryButtonClick: MouseEventHandler<HTMLButtonElement>;\n    onSecondaryButtonClick: MouseEventHandler<HTMLButtonElement>;\n    is_modal_open: boolean;\n    toggleModal?: () => void;\n};\n\nexport const PasskeyRemoveConfirmationModal = ({\n    is_modal_open,\n    onPrimaryButtonClick,\n    onSecondaryButtonClick,\n    toggleModal,\n}: TPasskeyRemoveConfirmationrModal) => {\n    const header = (\n        <Text size='xs' weight='bold'>\n            <Localize i18n_default_text='Remove passkey' />\n        </Text>\n    );\n\n    return (\n        <Modal\n            portalId='modal_root'\n            header={header}\n            is_open={is_modal_open}\n            toggleModal={toggleModal}\n            className='passkeys-modal'\n            has_close_icon={false}\n        >\n            <Modal.Body>\n                <Text size='xxs'>\n                    <Localize i18n_default_text='Are you sure you want to remove this passkey?' />\n                </Text>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onSecondaryButtonClick} large secondary>\n                    <Localize i18n_default_text='Cancel' />\n                </Button>\n                <Button onClick={onPrimaryButtonClick} large primary>\n                    <Localize i18n_default_text='Remove' />\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import React, { Fragment } from 'react';\nimport clsx from 'clsx';\nimport { Button, Text } from '@deriv/components';\nimport { TCurrentManagedPasskey } from '../passkeys';\nimport FormBody from '../../../../Components/form-body';\nimport FormFooter from '../../../../Components/form-footer';\n\nexport type TPasskeysButtonOnClicks = {\n    onPrimaryButtonClick: (passkey_data?: Partial<TCurrentManagedPasskey>) => void;\n    onSecondaryButtonClick?: () => void;\n};\n\ntype TPasskeysStatusLayout = {\n    className?: string;\n    description?: React.ReactNode;\n    icon?: React.ReactElement;\n    primary_button_disabled?: boolean;\n    primary_button_text: React.ReactElement;\n    primary_button_type?: 'button' | 'submit';\n    scroll_offset?: string;\n    secondary_button_text?: React.ReactElement;\n    title?: React.ReactElement;\n} & TPasskeysButtonOnClicks;\n\nexport const PasskeysStatusLayout = ({\n    children,\n    className,\n    description,\n    icon,\n    onPrimaryButtonClick,\n    onSecondaryButtonClick,\n    primary_button_disabled = false,\n    primary_button_text,\n    primary_button_type = 'button',\n    scroll_offset = '22rem',\n    secondary_button_text,\n    title,\n}: React.PropsWithChildren<TPasskeysStatusLayout>) => (\n    <Fragment>\n        <FormBody scroll_offset={scroll_offset} className={clsx('passkeys-status__wrapper', className)}>\n            {icon}\n            {title && (\n                <Text as='div' weight='bold' align='center' className='passkeys-status__title'>\n                    {title}\n                </Text>\n            )}\n            {description && (\n                <Text as='div' size='xs' align='center'>\n                    {description}\n                </Text>\n            )}\n            {children}\n        </FormBody>\n        <FormFooter className='passkeys-status__footer'>\n            {secondary_button_text && (\n                <Button type='button' has_effect secondary onClick={onSecondaryButtonClick} large>\n                    {secondary_button_text}\n                </Button>\n            )}\n            <Button\n                type={primary_button_type}\n                has_effect\n                primary\n                onClick={primary_button_type === 'button' ? () => onPrimaryButtonClick?.() : undefined}\n                is_disabled={primary_button_disabled}\n            >\n                {primary_button_text}\n            </Button>\n        </FormFooter>\n    </Fragment>\n);\n","import { Localize } from '@deriv-com/translations';\nimport { DerivLightIcAddPasskeyIcon } from '@deriv/quill-icons';\nimport { PasskeysStatusLayout, TPasskeysButtonOnClicks } from './passkeys-status-layout';\n\nexport const NoPasskeys = ({ onPrimaryButtonClick, onSecondaryButtonClick }: TPasskeysButtonOnClicks) => (\n    <div className='passkeys'>\n        <PasskeysStatusLayout\n            description={<Localize i18n_default_text='Enhanced security is just a tap away.' />}\n            icon={<DerivLightIcAddPasskeyIcon height='96px' width='96px' />}\n            title={<Localize i18n_default_text='Experience safer logins' />}\n            onPrimaryButtonClick={onPrimaryButtonClick}\n            onSecondaryButtonClick={onSecondaryButtonClick}\n            primary_button_text={<Localize i18n_default_text='Create passkey' />}\n            secondary_button_text={<Localize i18n_default_text='Learn more' />}\n        />\n    </div>\n);\n","import { Localize } from '@deriv-com/translations';\nimport { DerivLightIcSuccessPasskeyIcon } from '@deriv/quill-icons';\nimport { PasskeysStatusLayout, TPasskeysButtonOnClicks } from './passkeys-status-layout';\n\nexport const PasskeyCreated = ({ onPrimaryButtonClick, onSecondaryButtonClick }: TPasskeysButtonOnClicks) => (\n    <div className='passkeys'>\n        <PasskeysStatusLayout\n            description={\n                <Localize\n                    i18n_default_text='Your account is now secured with a passkey.<0/>Manage your passkey through your<0/>Deriv account settings.'\n                    components={[<br key={0} />]}\n                />\n            }\n            icon={<DerivLightIcSuccessPasskeyIcon height='96px' width='96px' />}\n            title={<Localize i18n_default_text='Success!' />}\n            onPrimaryButtonClick={onPrimaryButtonClick}\n            onSecondaryButtonClick={onSecondaryButtonClick}\n            primary_button_text={<Localize i18n_default_text='Continue trading' />}\n            secondary_button_text={<Localize i18n_default_text='Add more passkeys' />}\n        />\n    </div>\n);\n","import { Text } from '@deriv/components';\nimport { Localize } from '@deriv-com/translations';\n\nconst getPasskeysDescriptions = () =>\n    [\n        {\n            id: 1,\n            question: <Localize i18n_default_text='What are passkeys?' />,\n            descriptions: [\n                <Localize i18n_default_text='Secure alternative to passwords.' key='1.1' />,\n                <Localize\n                    i18n_default_text='Unlock your account like your phone - with biometrics, face scan or PIN.'\n                    key='1.2'\n                />,\n            ],\n        },\n        {\n            id: 2,\n            question: <Localize i18n_default_text='Why passkeys?' />,\n            descriptions: [\n                <Localize i18n_default_text='Extra security layer.' key='2.1' />,\n                <Localize i18n_default_text='Shields against unauthorised access and phishing.' key='2.2' />,\n            ],\n        },\n        {\n            id: 3,\n            question: <Localize i18n_default_text='How to create a passkey?' />,\n            descriptions: [\n                <Localize i18n_default_text='Go to ‘Account Settings’ on Deriv.' key='3.1' />,\n                <Localize i18n_default_text='You can create one passkey per device.' key='3.2' />,\n            ],\n        },\n        {\n            id: 4,\n            question: <Localize i18n_default_text='Where are passkeys saved?' />,\n            descriptions: [\n                <Localize i18n_default_text='Android: Google password manager.' key='4.1' />,\n                <Localize i18n_default_text='iOS: iCloud keychain.' key='4.2' />,\n            ],\n        },\n        {\n            id: 5,\n            question: <Localize i18n_default_text='What happens if my Deriv account email is changed?' />,\n            descriptions: [\n                <Localize i18n_default_text='No problem! Your passkey still works.' key='5.1' />,\n                <Localize i18n_default_text='Sign in to Deriv with your existing passkey.' key='5.2' />,\n            ],\n        },\n    ] as const;\n\nexport const DescriptionContainer = () => {\n    const passkeys_descriptions = getPasskeysDescriptions();\n    return (\n        <div className='passkeys-status__description-container'>\n            {passkeys_descriptions.map(({ id, question, descriptions }) => (\n                <div key={`description-card-${id}`} className='passkeys-status__description-card'>\n                    <Text weight='bold' size='xs'>\n                        {question}\n                    </Text>\n                    <Text as='ul' size='xs'>\n                        {descriptions.map(description => (\n                            <li key={`description-${description.key}`}>\n                                <Text size='xs' line_height='l'>\n                                    {description}\n                                </Text>\n                            </li>\n                        ))}\n                    </Text>\n                </div>\n            ))}\n        </div>\n    );\n};\n","import { Icon, Text } from '@deriv/components';\nimport { Localize } from '@deriv-com/translations';\n\nconst getPasskeysTips = () =>\n    [\n        {\n            id: 1,\n            description: <Localize i18n_default_text='Enable screen lock on your device.' />,\n        },\n        {\n            id: 2,\n            description: <Localize i18n_default_text='Sign in to your Google or iCloud account.' />,\n        },\n        {\n            id: 3,\n            description: <Localize i18n_default_text='Enable Bluetooth.' />,\n        },\n    ] as const;\n\nexport const TipsBlock = () => {\n    const tips = getPasskeysTips();\n    return (\n        <div className='passkeys-status__description-tips-wrapper'>\n            <Icon icon='IcBulb' size={24} />\n            <div className='passkeys-status__description-tips-container'>\n                <Text weight='bold' size='xs'>\n                    <Localize i18n_default_text='Tips:' />\n                </Text>\n                <Text size='xxs' line_height='l'>\n                    <Localize i18n_default_text='Before using passkey:' />\n                </Text>\n                <Text as='ul' size='xxs'>\n                    {tips.map(({ id, description }) => (\n                        <li key={`tip-${id}`}>\n                            <Text size='xxs' line_height='l'>\n                                {description}\n                            </Text>\n                        </li>\n                    ))}\n                </Text>\n            </div>\n        </div>\n    );\n};\n","import { Fragment } from 'react';\nimport { Icon } from '@deriv/components';\nimport { Localize } from '@deriv-com/translations';\nimport { DerivLightIcInfoPasskeyIcon } from '@deriv/quill-icons';\nimport { DescriptionContainer } from './description-container';\nimport { PasskeysStatusLayout, TPasskeysButtonOnClicks } from './passkeys-status-layout';\nimport { TipsBlock } from './tips-block';\n\nexport const PasskeysLearnMore = ({ onPrimaryButtonClick, onSecondaryButtonClick }: TPasskeysButtonOnClicks) => (\n    <div className='passkeys'>\n        <Icon\n            data_testid='dt_learn_more_back_button'\n            icon='IcBackButton'\n            onClick={onSecondaryButtonClick}\n            className='passkeys-status__description-back-button'\n        />\n        <PasskeysStatusLayout\n            className='passkeys-status__wrapper--expanded'\n            description={\n                <Fragment>\n                    <DescriptionContainer />\n                    <TipsBlock />\n                </Fragment>\n            }\n            icon={<DerivLightIcInfoPasskeyIcon height='96px' width='96px' className='passkey-status__icon' />}\n            title={<Localize i18n_default_text='Effortless login with passkeys' />}\n            onPrimaryButtonClick={onPrimaryButtonClick}\n            onSecondaryButtonClick={onSecondaryButtonClick}\n            primary_button_text={<Localize i18n_default_text='Create passkey' />}\n        />\n    </div>\n);\n","import { Dropdown, Icon, Text } from '@deriv/components';\nimport { getLongDate } from '@deriv/shared';\nimport { useTranslations, Localize } from '@deriv-com/translations';\nimport { TOnPasskeyMenuClick, TPasskey } from '../passkeys';\nimport { PASSKEY_STATUS_CODES, passkeysMenuActionEventTrack } from '../passkeys-configs';\n\ntype TPasskeyCard = TPasskey & { onPasskeyMenuClick: TOnPasskeyMenuClick };\n\nexport const PasskeyCard = ({ name, last_used, stored_on, id, icon, passkey_id, onPasskeyMenuClick }: TPasskeyCard) => {\n    const { localize } = useTranslations();\n\n    const current_passkey_data = { id, name, passkey_id };\n\n    const handleManagePasskey = (event: { target: { value: string } }) => {\n        if (event.target.value === 'rename') {\n            onPasskeyMenuClick(PASSKEY_STATUS_CODES.RENAMING, current_passkey_data);\n            passkeysMenuActionEventTrack('passkey_rename_started');\n        } else if (event.target.value === 'remove') {\n            onPasskeyMenuClick(PASSKEY_STATUS_CODES.REMOVING, current_passkey_data);\n            passkeysMenuActionEventTrack('passkey_remove_started');\n        }\n    };\n\n    return (\n        <div className='passkeys-card'>\n            <Icon icon='IcPasskey' size={24} />\n            <div className='passkeys-card__passkey-name'>\n                <Text as='p' weight='bold' line_height='l'>\n                    {name}\n                </Text>\n                {stored_on && (\n                    <div>\n                        <Text as='p' size='xs'>\n                            <Localize i18n_default_text='Stored on: ' /> {stored_on}\n                        </Text>\n                    </div>\n                )}\n                <div>\n                    <Text as='p' size='xs'>\n                        <Localize i18n_default_text='Last used: ' />{' '}\n                        {last_used ? getLongDate(last_used) : <Localize i18n_default_text='Never' />}\n                    </Text>\n                </div>\n                {icon && <Icon icon={icon} size={24} className='passkeys-card__passkey-type-icon' />}\n            </div>\n            <Dropdown\n                test_id={`dt_passkey_card_menu_${id}`}\n                is_align_text_left\n                list={[\n                    {\n                        text: localize('Rename'),\n                        value: 'rename',\n                    },\n                    {\n                        text: localize('Remove'),\n                        value: 'remove',\n                    },\n                ]}\n                onChange={handleManagePasskey}\n                suffix_icon='IcMenuDots'\n                suffix_icon_size={24}\n            />\n        </div>\n    );\n};\n","import { Localize } from '@deriv-com/translations';\nimport { TOnPasskeyMenuClick, TPasskey } from '../passkeys';\nimport { PasskeyCard } from './passkey-card';\nimport { PasskeysStatusLayout, TPasskeysButtonOnClicks } from './passkeys-status-layout';\n\ntype TPasskeysList = {\n    passkeys_list: TPasskey[];\n    onPasskeyMenuClick: TOnPasskeyMenuClick;\n} & TPasskeysButtonOnClicks;\n\nexport const PasskeysList = ({\n    passkeys_list,\n    onPrimaryButtonClick,\n    onSecondaryButtonClick,\n    onPasskeyMenuClick,\n}: TPasskeysList) => (\n    <div className='passkeys'>\n        <PasskeysStatusLayout\n            className='passkeys-list__wrapper'\n            onPrimaryButtonClick={onPrimaryButtonClick}\n            onSecondaryButtonClick={onSecondaryButtonClick}\n            primary_button_text={<Localize i18n_default_text='Create passkey' />}\n            scroll_offset='16rem'\n            secondary_button_text={<Localize i18n_default_text='Learn more' />}\n        >\n            {passkeys_list.map(passkey => (\n                <PasskeyCard {...passkey} key={passkey.passkey_id} onPasskeyMenuClick={onPasskeyMenuClick} />\n            ))}\n        </PasskeysStatusLayout>\n    </div>\n);\n","import { Form, Formik } from 'formik';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { DerivLightIcEditPasskeyIcon } from '@deriv/quill-icons';\nimport { FormInputField } from '../../../../Components/forms/form-fields';\nimport { TCurrentManagedPasskey } from '../passkeys';\nimport { getPasskeyRenameValidationSchema } from '../passkeys-configs';\nimport { PasskeysStatusLayout, TPasskeysButtonOnClicks } from './passkeys-status-layout';\n\ntype TPasskeyRename = { current_managed_passkey: TCurrentManagedPasskey } & TPasskeysButtonOnClicks;\n\ntype TInitialValues = { passkey_name: string };\n\nexport const PasskeyRename = ({\n    onPrimaryButtonClick,\n    onSecondaryButtonClick,\n    current_managed_passkey,\n}: TPasskeyRename) => {\n    const { localize } = useTranslations();\n\n    const form_initial_values: TInitialValues = {\n        passkey_name: current_managed_passkey.name,\n    };\n\n    const onSubmitValues = (values: TInitialValues) => {\n        onPrimaryButtonClick({ name: values.passkey_name });\n    };\n\n    return (\n        <Formik\n            initialValues={form_initial_values}\n            onSubmit={onSubmitValues}\n            validationSchema={getPasskeyRenameValidationSchema()}\n            noValidate\n        >\n            {({ dirty, isValid }) => (\n                <div className='passkeys'>\n                    <Form>\n                        <PasskeysStatusLayout\n                            icon={<DerivLightIcEditPasskeyIcon height='96px' width='96px' />}\n                            title={<Localize i18n_default_text='Edit passkey' />}\n                            onPrimaryButtonClick={onPrimaryButtonClick}\n                            onSecondaryButtonClick={onSecondaryButtonClick}\n                            primary_button_text={<Localize i18n_default_text='Save changes' />}\n                            secondary_button_text={<Localize i18n_default_text='Back' />}\n                            primary_button_disabled={!dirty || !isValid}\n                            primary_button_type='submit'\n                        >\n                            <FormInputField label={localize('Passkey name')} name='passkey_name' />\n                        </PasskeysStatusLayout>\n                    </Form>\n                </div>\n            )}\n        </Formik>\n    );\n};\n","import { Localize } from '@deriv-com/translations';\nimport { getOSNameWithUAParser } from '@deriv/shared';\nimport { DerivLightIcSuccessPasskeyIcon } from '@deriv/quill-icons';\nimport { PasskeysStatusLayout, TPasskeysButtonOnClicks } from './passkeys-status-layout';\n\nconst getPasskeysRemovedDescription = (os: ReturnType<typeof getOSNameWithUAParser>) => {\n    if (os === 'iOS' || os === 'Mac OS') {\n        return (\n            <Localize i18n_default_text='Your passkey is successfully removed. To avoid sign-in prompts, also remove the passkey from your iCloud keychain.' />\n        );\n    }\n    return (\n        <Localize i18n_default_text='Your passkey is successfully removed. To avoid sign-in prompts, also remove the passkey from your Google password manager.' />\n    );\n};\n\nexport const PasskeyRemoved = ({ onPrimaryButtonClick }: TPasskeysButtonOnClicks) => (\n    <div className='passkeys'>\n        <PasskeysStatusLayout\n            description={getPasskeysRemovedDescription(getOSNameWithUAParser())}\n            icon={<DerivLightIcSuccessPasskeyIcon height='96px' width='96px' />}\n            title={<Localize i18n_default_text='Passkey successfully removed' />}\n            onPrimaryButtonClick={onPrimaryButtonClick}\n            primary_button_text={<Localize i18n_default_text='Continue' />}\n        />\n    </div>\n);\n","import { observer } from '@deriv/stores';\nimport { NoPasskeys } from './no-passkeys';\nimport { TCurrentManagedPasskey, TOnPasskeyMenuClick, TPasskey } from '../passkeys';\nimport { PasskeyCreated } from './passkey-created';\nimport { PASSKEY_STATUS_CODES, TPasskeysStatus } from '../passkeys-configs';\nimport { PasskeysLearnMore } from './passkeys-learn-more';\nimport { PasskeysList } from './passkeys-list';\nimport { PasskeyRename } from './passkey-rename';\nimport { PasskeyRemoved } from './passkey-removed';\nimport { TPasskeysButtonOnClicks } from './passkeys-status-layout';\n\ntype TPasskeysStatusContainer = {\n    current_managed_passkey: TCurrentManagedPasskey;\n    passkey_status: TPasskeysStatus;\n    passkeys_list: TPasskey[];\n    onPasskeyMenuClick: TOnPasskeyMenuClick;\n} & TPasskeysButtonOnClicks;\n\nexport const PasskeysStatusContainer = observer(\n    ({\n        current_managed_passkey,\n        onPrimaryButtonClick,\n        onSecondaryButtonClick,\n        passkeys_list,\n        passkey_status,\n        onPasskeyMenuClick,\n    }: TPasskeysStatusContainer) => {\n        switch (passkey_status) {\n            case PASSKEY_STATUS_CODES.CREATED:\n                return (\n                    <PasskeyCreated\n                        onPrimaryButtonClick={onPrimaryButtonClick}\n                        onSecondaryButtonClick={onSecondaryButtonClick}\n                    />\n                );\n            case PASSKEY_STATUS_CODES.LEARN_MORE:\n                return (\n                    <PasskeysLearnMore\n                        onPrimaryButtonClick={onPrimaryButtonClick}\n                        onSecondaryButtonClick={onSecondaryButtonClick}\n                    />\n                );\n            case PASSKEY_STATUS_CODES.NO_PASSKEY:\n                return (\n                    <NoPasskeys\n                        onPrimaryButtonClick={onPrimaryButtonClick}\n                        onSecondaryButtonClick={onSecondaryButtonClick}\n                    />\n                );\n            case PASSKEY_STATUS_CODES.RENAMING:\n                return (\n                    <PasskeyRename\n                        current_managed_passkey={current_managed_passkey}\n                        onPrimaryButtonClick={onPrimaryButtonClick}\n                        onSecondaryButtonClick={onSecondaryButtonClick}\n                    />\n                );\n            case PASSKEY_STATUS_CODES.REMOVED:\n                return <PasskeyRemoved onPrimaryButtonClick={onPrimaryButtonClick} />;\n            default:\n                return (\n                    <PasskeysList\n                        onPasskeyMenuClick={onPasskeyMenuClick}\n                        passkeys_list={passkeys_list || []}\n                        onPrimaryButtonClick={onPrimaryButtonClick}\n                        onSecondaryButtonClick={onSecondaryButtonClick}\n                    />\n                );\n        }\n    }\n);\n","import Passkeys from './passkeys';\n\nexport default Passkeys;\n","import { Fragment, useEffect, useRef, useState } from 'react';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { InlineMessage, Loading } from '@deriv/components';\nimport { useGetPasskeysList, useRegisterPasskey, useRemovePasskey, useRenamePasskey } from '@deriv/hooks';\nimport { routes } from '@deriv/shared';\nimport { useDevice } from '@deriv-com/ui';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv-com/translations';\nimport { PasskeyErrorModal } from './components/passkey-error-modal';\nimport { PasskeyReminderModal } from './components/passkey-reminder-modal';\nimport { PasskeyRemoveConfirmationModal } from './components/passkey-remove-confirmation-modal';\nimport { PasskeysStatusContainer } from './components/passkeys-status-container';\nimport {\n    clearRefTimeOut,\n    excluded_error_codes,\n    excluded_error_names,\n    isNotExistedPasskey,\n    PASSKEY_STATUS_CODES,\n    passkeysMenuActionEventTrack,\n    TPasskeysStatus,\n} from './passkeys-configs';\nimport { TServerError } from '../../../Types';\nimport './passkeys.scss';\n\nexport type TPasskey = {\n    id: number;\n    name: string;\n    last_used: number;\n    created_at?: number;\n    stored_on?: string;\n    passkey_id: string;\n    icon?: string;\n};\nexport type TOnPasskeyMenuClick = (\n    passkey_managing_status: TPasskeysStatus,\n    passkey_data: TCurrentManagedPasskey\n) => void;\nexport type TCurrentManagedPasskey = {\n    id: TPasskey['id'];\n    passkey_id: TPasskey['passkey_id'];\n    name: TPasskey['name'];\n};\n\nconst Passkeys = observer(() => {\n    const { client, common, notifications } = useStore();\n    const { isMobile } = useDevice();\n    const { is_passkey_supported, setShouldShowPasskeyNotification, setPasskeysStatusToCookie } = client;\n    const { removeNotificationByKey } = notifications;\n    const is_network_on = common.network_status.class === 'online';\n\n    const error_modal_timeout = useRef<ReturnType<typeof setTimeout> | null>(null);\n    const snackbar_timeout = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n    const history = useHistory();\n\n    const [passkey_status, setPasskeyStatus] = useState<TPasskeysStatus>(PASSKEY_STATUS_CODES.LIST);\n    const [is_reminder_modal_open, setIsReminderModalOpen] = useState(false);\n    const [is_error_modal_open, setIsErrorModalOpen] = useState(false);\n    const [is_snackbar_open, setIsSnackbarOpen] = useState(false);\n    const [current_managed_passkey, setCurrentManagedPasskey] = useState<TCurrentManagedPasskey>({\n        id: 0,\n        passkey_id: '',\n        name: '',\n    });\n\n    const onSuccessPasskeyRegister = () => {\n        setShouldShowPasskeyNotification(false);\n        removeNotificationByKey({ key: 'enable_passkey' });\n        refetchPasskeysList();\n        passkeysMenuActionEventTrack('create_passkey_finished');\n        setPasskeyStatus(PASSKEY_STATUS_CODES.CREATED);\n        setPasskeysStatusToCookie('available');\n    };\n\n    const onSuccessPasskeyRemove = () => {\n        refetchPasskeysList();\n        setPasskeyStatus(PASSKEY_STATUS_CODES.REMOVED);\n        passkeysMenuActionEventTrack('passkey_remove_success');\n    };\n\n    const onSuccessPasskeyRename = () => {\n        refetchPasskeysList();\n        setPasskeyStatus(PASSKEY_STATUS_CODES.LIST);\n        setIsSnackbarOpen(true);\n        passkeysMenuActionEventTrack('passkey_rename_success');\n        clearRefTimeOut(snackbar_timeout);\n        snackbar_timeout.current = setTimeout(() => {\n            setIsSnackbarOpen(false);\n        }, 5000);\n    };\n\n    const { passkeys_list, is_passkeys_list_loading, passkeys_list_error, refetchPasskeysList } = useGetPasskeysList();\n    const { passkey_removing_error, removePasskey } = useRemovePasskey({ onSuccess: onSuccessPasskeyRemove });\n    const { passkey_renaming_error, renamePasskey } = useRenamePasskey({ onSuccess: onSuccessPasskeyRename });\n    const { createPasskey, startPasskeyRegistration, passkey_registration_error } = useRegisterPasskey({\n        onSuccess: onSuccessPasskeyRegister,\n    });\n\n    const should_show_passkeys = is_passkey_supported && isMobile;\n    const error = passkeys_list_error || passkey_registration_error || passkey_renaming_error || passkey_removing_error;\n\n    useEffect(() => {\n        const should_not_render_main_page =\n            is_passkeys_list_loading ||\n            passkey_status === PASSKEY_STATUS_CODES.CREATED ||\n            passkey_status === PASSKEY_STATUS_CODES.REMOVED;\n\n        if (should_not_render_main_page) return;\n\n        if (!passkeys_list?.length) {\n            setPasskeyStatus(PASSKEY_STATUS_CODES.NO_PASSKEY);\n            setPasskeysStatusToCookie('not_available');\n        } else {\n            setPasskeyStatus(PASSKEY_STATUS_CODES.LIST);\n        }\n        return () => clearRefTimeOut(snackbar_timeout);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [is_passkeys_list_loading, passkeys_list?.length]);\n\n    useEffect(() => {\n        if (error) {\n            passkeysMenuActionEventTrack('error', { error_message: (error as TServerError)?.message });\n\n            const should_hide_error =\n                excluded_error_names.some(name => name === (error as TServerError).name) ||\n                excluded_error_codes.some(code => code === (error as TServerError).code);\n\n            if (should_hide_error) return;\n\n            if (passkey_status === PASSKEY_STATUS_CODES.REMOVING) {\n                setPasskeyStatus(passkeys_list?.length ? PASSKEY_STATUS_CODES.LIST : PASSKEY_STATUS_CODES.NO_PASSKEY);\n            }\n\n            is_reminder_modal_open && setIsReminderModalOpen(false);\n            clearRefTimeOut(error_modal_timeout);\n            error_modal_timeout.current = setTimeout(() => setIsErrorModalOpen(true), 500);\n        }\n        return () => clearRefTimeOut(error_modal_timeout);\n    }, [error, is_reminder_modal_open]);\n\n    if (!should_show_passkeys) {\n        return <Redirect to={routes.traders_hub} />;\n    }\n\n    if ((is_passkeys_list_loading && passkey_status === PASSKEY_STATUS_CODES.LIST) || !is_network_on) {\n        return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    }\n\n    const onCloseErrorModal = () => {\n        history.push(routes.traders_hub);\n    };\n\n    const onCloseReminderModal = () => {\n        setIsReminderModalOpen(false);\n    };\n\n    const onContinueReminderModal = () => {\n        createPasskey();\n        if (!error) {\n            passkeysMenuActionEventTrack('create_passkey_reminder_passed');\n        }\n        setIsReminderModalOpen(false);\n    };\n\n    const onPasskeyMenuClick = (passkey_managing_status: TPasskeysStatus, passkey_data: TCurrentManagedPasskey) => {\n        if (passkey_managing_status !== PASSKEY_STATUS_CODES.LIST && is_snackbar_open) {\n            setIsSnackbarOpen(false);\n        }\n        setCurrentManagedPasskey(passkey_data);\n        setPasskeyStatus(passkey_managing_status);\n    };\n\n    const onPrimaryButtonClick = (passkey_data?: Partial<TCurrentManagedPasskey>) => {\n        if (\n            passkey_status === PASSKEY_STATUS_CODES.NO_PASSKEY ||\n            passkey_status === PASSKEY_STATUS_CODES.LIST ||\n            passkey_status === PASSKEY_STATUS_CODES.LEARN_MORE\n        ) {\n            const subform_name = passkey_status === PASSKEY_STATUS_CODES.LEARN_MORE ? 'passkey_info' : 'passkey_main';\n            passkeysMenuActionEventTrack('create_passkey_started', { subform_name });\n            startPasskeyRegistration();\n            setIsReminderModalOpen(true);\n        }\n        if (passkey_status === PASSKEY_STATUS_CODES.CREATED) {\n            passkeysMenuActionEventTrack('create_passkey_continue_trading');\n            history.push(routes.traders_hub);\n        }\n        if (passkey_status === PASSKEY_STATUS_CODES.RENAMING) {\n            renamePasskey(current_managed_passkey.id, passkey_data?.name ?? current_managed_passkey.name);\n        }\n        if (passkey_status === PASSKEY_STATUS_CODES.REMOVED) {\n            setPasskeyStatus(passkeys_list?.length ? PASSKEY_STATUS_CODES.LIST : PASSKEY_STATUS_CODES.NO_PASSKEY);\n        }\n        // next condition is for future additional verification screen\n        // if (passkey_status === PASSKEY_STATUS_CODES.REMOVING) {\n        //     removePasskey(current_managed_passkey?.id);\n        // }\n    };\n\n    const onSecondaryButtonClick = () => {\n        if (passkey_status === PASSKEY_STATUS_CODES.NO_PASSKEY || passkey_status === PASSKEY_STATUS_CODES.LIST) {\n            passkeysMenuActionEventTrack('info_open');\n            setPasskeyStatus(PASSKEY_STATUS_CODES.LEARN_MORE);\n        }\n        if (passkey_status === PASSKEY_STATUS_CODES.LEARN_MORE || passkey_status === PASSKEY_STATUS_CODES.REMOVING) {\n            passkeysMenuActionEventTrack('info_back');\n            setPasskeyStatus(passkeys_list?.length ? PASSKEY_STATUS_CODES.LIST : PASSKEY_STATUS_CODES.NO_PASSKEY);\n        }\n        if (passkey_status === PASSKEY_STATUS_CODES.CREATED) {\n            passkeysMenuActionEventTrack('add_more_passkeys');\n            setPasskeyStatus(PASSKEY_STATUS_CODES.LIST);\n        }\n        if (passkey_status === PASSKEY_STATUS_CODES.RENAMING) {\n            passkeysMenuActionEventTrack('passkey_rename_back');\n            setPasskeyStatus(PASSKEY_STATUS_CODES.LIST);\n        }\n    };\n\n    return (\n        <Fragment>\n            <PasskeysStatusContainer\n                current_managed_passkey={current_managed_passkey}\n                onPasskeyMenuClick={onPasskeyMenuClick}\n                onPrimaryButtonClick={onPrimaryButtonClick}\n                onSecondaryButtonClick={onSecondaryButtonClick}\n                passkey_status={passkey_status}\n                passkeys_list={passkeys_list || []}\n            />\n            {is_snackbar_open && (\n                <div className='passkeys-snackbar__container'>\n                    <InlineMessage\n                        size='sm'\n                        message={<Localize i18n_default_text='Changes saved.' />}\n                        type='information'\n                    />\n                </div>\n            )}\n            <PasskeyReminderModal\n                is_modal_open={is_reminder_modal_open}\n                onButtonClick={onContinueReminderModal}\n                toggleModal={onCloseReminderModal}\n            />\n            <PasskeyErrorModal error={error} is_modal_open={is_error_modal_open} onButtonClick={onCloseErrorModal} />\n            {/* TODO: Remove confirmation modal, when verification page is implemented*/}\n            <PasskeyRemoveConfirmationModal\n                is_modal_open={passkey_status === PASSKEY_STATUS_CODES.REMOVING && !is_error_modal_open}\n                onSecondaryButtonClick={() => {\n                    setPasskeyStatus(\n                        passkeys_list?.length ? PASSKEY_STATUS_CODES.LIST : PASSKEY_STATUS_CODES.NO_PASSKEY\n                    );\n                }}\n                onPrimaryButtonClick={() => {\n                    removePasskey(current_managed_passkey?.id);\n                }}\n            />\n        </Fragment>\n    );\n});\n\nexport default Passkeys;\n"],"names":["PASSKEY_STATUS_CODES","clearRefTimeOut","timeout_ref","current","clearTimeout","isNotSupportedError","error","name","excluded_error_names","excluded_error_codes","passkeysMenuActionEventTrack","action","additional_data","Analytics","trackEvent","form_name","operating_system","getOSNameWithUAParser","PasskeyErrorModal","is_modal_open","onButtonClick","error_modal_content","error_message_header","_jsx","Text","size","weight","children","Localize","i18n_default_text","error_message","getErrorModalContent","_jsxs","Modal","portalId","header","is_open","has_close_icon","className","Body","Footer","Button","onClick","large","primary","getReminderModalContent","reminder_tips","map","tip","as","line_height","key","PasskeyReminderModal","toggleModal","PasskeyRemoveConfirmationModal","onPrimaryButtonClick","onSecondaryButtonClick","secondary","PasskeysStatusLayout","description","icon","primary_button_disabled","primary_button_text","primary_button_type","scroll_offset","secondary_button_text","title","Fragment","FormBody","clsx","align","FormFooter","type","has_effect","undefined","is_disabled","NoPasskeys","DerivLightIcAddPasskeyIcon","height","width","PasskeyCreated","components","DerivLightIcSuccessPasskeyIcon","DescriptionContainer","passkeys_descriptions","id","question","descriptions","TipsBlock","tips","Icon","PasskeysLearnMore","data_testid","DerivLightIcInfoPasskeyIcon","PasskeyCard","last_used","stored_on","passkey_id","onPasskeyMenuClick","localize","useTranslations","current_passkey_data","getLongDate","Dropdown","test_id","is_align_text_left","list","text","value","onChange","event","target","suffix_icon","suffix_icon_size","PasskeysList","passkeys_list","passkey","_createElement","PasskeyRename","current_managed_passkey","form_initial_values","passkey_name","Formik","initialValues","onSubmit","values","validationSchema","Yup","shape","required","min","max","matches","noValidate","dirty","isValid","Form","DerivLightIcEditPasskeyIcon","FormInputField","label","PasskeyRemoved","os","PasskeysStatusContainer","observer","passkey_status","client","common","notifications","useStore","isMobile","useDevice","is_passkey_supported","setShouldShowPasskeyNotification","setPasskeysStatusToCookie","removeNotificationByKey","is_network_on","network_status","class","error_modal_timeout","useRef","snackbar_timeout","history","useHistory","setPasskeyStatus","useState","is_reminder_modal_open","setIsReminderModalOpen","is_error_modal_open","setIsErrorModalOpen","is_snackbar_open","setIsSnackbarOpen","setCurrentManagedPasskey","is_passkeys_list_loading","passkeys_list_error","refetchPasskeysList","useGetPasskeysList","passkey_removing_error","removePasskey","useRemovePasskey","onSuccess","onSuccessPasskeyRemove","passkey_renaming_error","renamePasskey","useRenamePasskey","onSuccessPasskeyRename","setTimeout","createPasskey","startPasskeyRegistration","passkey_registration_error","useRegisterPasskey","onSuccessPasskeyRegister","should_show_passkeys","useEffect","length","message","some","code","Redirect","to","routes","traders_hub","Loading","is_fullscreen","passkey_managing_status","passkey_data","subform_name","push","InlineMessage","onContinueReminderModal","onCloseReminderModal","onCloseErrorModal"],"sourceRoot":""}