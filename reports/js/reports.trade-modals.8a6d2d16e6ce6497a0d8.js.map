{"version":3,"file":"reports/js/reports.trade-modals.8a6d2d16e6ce6497a0d8.js","mappings":"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","sources":["webpack://@deriv/reports/./src/Components/Elements/Modals/MarketUnavailableModal/market-unavailable.tsx","webpack://@deriv/reports/./src/Components/Elements/Modals/MarketUnavailableModal/index.ts","webpack://@deriv/reports/./src/Components/Elements/Modals/ServicesErrorModal/constants.ts","webpack://@deriv/reports/./src/Components/Elements/Modals/ServicesErrorModal/authorization-required-modal.tsx","webpack://@deriv/reports/../api/src/hooks/useRemoteConfig.ts","webpack://@deriv/reports/../hooks/src/useIsHubRedirectionEnabled.ts","webpack://@deriv/reports/./src/Components/Elements/Modals/ServicesErrorModal/insufficient-balance-modal.tsx","webpack://@deriv/reports/./src/Components/Elements/Modals/ServicesErrorModal/company-wide-limit-exceeded-modal.tsx","webpack://@deriv/reports/./src/Components/Elements/Modals/ServicesErrorModal/account-verification-required-modal.tsx","webpack://@deriv/reports/./src/Components/Elements/Modals/ServicesErrorModal/services-error-modal.tsx","webpack://@deriv/reports/./src/Components/Elements/Modals/ServicesErrorModal/index.ts","webpack://@deriv/reports/./src/Components/Elements/Modals/AccountVerificationPendingModal/account-verification-pending-modal.tsx","webpack://@deriv/reports/./src/Components/Elements/Modals/AccountVerificationPendingModal/index.ts","webpack://@deriv/reports/./src/Components/Modals/trade-modals.tsx","webpack://@deriv/reports/./src/Components/Modals/index.ts"],"sourcesContent":["import React from 'react';\nimport { Dialog } from '@deriv/components';\nimport { getPlatformSettings } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TMarketUnavailableModalProps = {\n    is_loading?: boolean;\n    onCancel: () => void;\n    onConfirm: () => void;\n};\n\nconst MarketUnavailableModal = observer(({ is_loading, onCancel, onConfirm }: TMarketUnavailableModalProps) => {\n    const { ui } = useStore();\n    const { disableApp, enableApp, has_only_forward_starting_contracts: is_visible } = ui;\n\n    return (\n        <Dialog\n            className='market-unavailable-modal'\n            title={<Localize i18n_default_text='We’re working on it' />}\n            confirm_button_text={localize('Stay on {{platform_name_trader}}', {\n                platform_name_trader: getPlatformSettings('trader').name,\n            })}\n            cancel_button_text={localize('Go to {{platform_name_smarttrader}}', {\n                platform_name_smarttrader: getPlatformSettings('smarttrader').name,\n            })}\n            onConfirm={onConfirm}\n            onCancel={onCancel}\n            is_mobile_full_width={false}\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading}\n        >\n            <Localize\n                i18n_default_text='This market is not yet available on {{platform_name_trader}}, but it is on {{platform_name_smarttrader}}.'\n                values={{\n                    platform_name_trader: getPlatformSettings('trader').name,\n                    platform_name_smarttrader: getPlatformSettings('smarttrader').name,\n                }}\n            />\n        </Dialog>\n    );\n});\n\nexport default MarketUnavailableModal;\n","import MarketUnavailableModal from './market-unavailable';\n\nexport default MarketUnavailableModal;\n","import { localize } from '@deriv/translations';\n\nexport const getTitle = (type?: string) => {\n    switch (type) {\n        case 'buy':\n            return localize('Purchase Error');\n        case 'cancel':\n            return localize('Deal Cancellation Error');\n        case 'contract_update':\n            return localize('Contract Update Error');\n        case 'sell':\n            return localize('Sell Error');\n        default:\n            return 'Error';\n    }\n};\n","import React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { getLanguage, localize } from '@deriv/translations';\nimport { redirectToLogin, redirectToSignUp } from '@deriv/shared';\n\ntype TAuthorizationRequiredModal = {\n    is_visible: boolean;\n    toggleModal: () => void;\n    is_appstore?: boolean;\n    is_logged_in: boolean;\n};\n\nconst AuthorizationRequiredModal = ({\n    is_visible,\n    toggleModal,\n    is_appstore,\n    is_logged_in,\n}: TAuthorizationRequiredModal) => (\n    <Modal\n        id='dt_authorization_required_modal'\n        is_open={is_visible}\n        small\n        toggleModal={toggleModal}\n        title={localize('Start trading with us')}\n    >\n        <Modal.Body>{localize('Log in or create a free account to place a trade.')}</Modal.Body>\n        <Modal.Footer>\n            <Button\n                has_effect\n                text={localize('Log in')}\n                onClick={() => redirectToLogin(is_logged_in, getLanguage())}\n                secondary\n            />\n            <Button\n                has_effect\n                text={localize('Create free account')}\n                onClick={() => redirectToSignUp({ is_appstore })}\n                primary\n            />\n        </Modal.Footer>\n    </Modal>\n);\n\nexport default AuthorizationRequiredModal;\n","import { useEffect, useRef, useState } from 'react';\n\nimport { ObjectUtils } from '@deriv-com/utils';\n\nimport initData from '../remote_config.json';\n\nconst remoteConfigQuery = async function () {\n    const REMOTE_CONFIG_URL =\n        process.env.NODE_ENV === 'production'\n            ? 'https://app-config-prod.firebaseio.com/remote_config/deriv-app.json'\n            : 'https://app-config-staging.firebaseio.com/remote_config/deriv-app.json';\n    const response = await fetch(REMOTE_CONFIG_URL);\n    if (!response.ok) {\n        throw new Error('Remote Config Server is out of reach!');\n    }\n    return response.json();\n};\n\nfunction useRemoteConfig(enabled = false) {\n    const [data, setData] = useState(initData);\n    const isMounted = useRef(false);\n\n    useEffect(() => {\n        isMounted.current = true;\n\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n\n    useEffect(() => {\n        if (enabled) {\n            remoteConfigQuery()\n                .then(async res => {\n                    const resHash = await ObjectUtils.hashObject(res);\n                    const dataHash = await ObjectUtils.hashObject(data);\n                    if (resHash !== dataHash && isMounted.current) {\n                        setData(res);\n                    }\n                })\n                .catch(error => {\n                    // eslint-disable-next-line no-console\n                    console.log('Remote Config error: ', error);\n                });\n        }\n    }, [enabled, data]);\n\n    return { data };\n}\n\nexport default useRemoteConfig;\n","import Cookies from 'js-cookie';\n\nimport { useRemoteConfig } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nconst useIsHubRedirectionEnabled = () => {\n    const { data } = useRemoteConfig(true);\n    const hub_enabled_country_list = (data?.hub_enabled_country_list as string[]) ?? [];\n    const { client } = useStore();\n    const { account_settings, clients_country } = client;\n\n    const cookieCountry = JSON.parse(Cookies.get('client_information') || '{}')?.residence;\n    const userCountry = cookieCountry || account_settings?.country_code;\n\n    const isHubRedirectionEnabled =\n        Array.isArray(hub_enabled_country_list) && userCountry && hub_enabled_country_list.includes(userCountry);\n\n    const isChangingToHubAppId =\n        Array.isArray(hub_enabled_country_list) &&\n        clients_country &&\n        hub_enabled_country_list.includes(clients_country);\n\n    return {\n        isHubRedirectionEnabled,\n        isChangingToHubAppId,\n        isHubRedirectionLoaded: !!hub_enabled_country_list.length,\n    };\n};\n\nexport default useIsHubRedirectionEnabled;\n","import React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { Button, Modal } from '@deriv/components';\nimport { getDomainUrl, routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\nimport { useIsHubRedirectionEnabled } from '@deriv/hooks';\n\ntype TInsufficientBalanceModal = RouteComponentProps & {\n    is_virtual?: boolean;\n    is_visible: boolean;\n    message: string;\n    toggleModal: () => void;\n};\n\nconst InsufficientBalanceModal = observer(\n    ({ history, is_virtual, is_visible, message, toggleModal }: TInsufficientBalanceModal) => {\n        const {\n            ui: { is_mobile },\n            client,\n        } = useStore();\n        const { isHubRedirectionEnabled } = useIsHubRedirectionEnabled();\n        const { has_wallet } = client;\n        return (\n            <Modal\n                id='dt_insufficient_balance_modal'\n                is_open={is_visible}\n                small\n                is_vertical_centered={is_mobile}\n                toggleModal={toggleModal}\n                title={localize('Insufficient balance')}\n            >\n                <Modal.Body>{message}</Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        has_effect\n                        text={is_virtual ? localize('OK') : localize('Deposit now')}\n                        onClick={() => {\n                            if (!is_virtual) {\n                                if (has_wallet && isHubRedirectionEnabled) {\n                                    const PRODUCTION_REDIRECT_URL = `https://hub.${getDomainUrl()}/tradershub`;\n                                    const STAGING_REDIRECT_URL = `https://staging-hub.${getDomainUrl()}/tradershub`;\n                                    const redirectUrl =\n                                        process.env.NODE_ENV === 'production'\n                                            ? PRODUCTION_REDIRECT_URL\n                                            : STAGING_REDIRECT_URL;\n\n                                    const url_query_string = window.location.search;\n                                    const url_params = new URLSearchParams(url_query_string);\n                                    const account_currency =\n                                        window.sessionStorage.getItem('account') || url_params.get('account');\n\n                                    window.location.href = `${redirectUrl}/redirect?action=redirect_to&redirect_to=wallet${account_currency ? `&account=${account_currency}` : ''}`;\n                                } else {\n                                    history?.push?.(has_wallet ? routes.wallets_deposit : routes.cashier_deposit);\n                                }\n                            } else {\n                                toggleModal();\n                            }\n                        }}\n                        primary\n                    />\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n);\n\nexport default withRouter(InsufficientBalanceModal);\n","import React from 'react';\nimport { Button, Modal, StaticUrl } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize, Localize } from '@deriv/translations';\n\ntype TCompanyWideLimitExceededModal = {\n    is_visible: boolean;\n    onConfirm: () => void;\n};\n\nconst CompanyWideLimitExceededModal = observer(({ is_visible, onConfirm }: TCompanyWideLimitExceededModal) => {\n    const {\n        ui: { is_mobile },\n    } = useStore();\n    return (\n        <Modal\n            is_open={is_visible}\n            small\n            is_vertical_centered={is_mobile}\n            toggleModal={onConfirm}\n            title={localize('Purchase Error')}\n        >\n            <Modal.Body>\n                <Localize\n                    i18n_default_text='No further trading is allowed on this contract type for the current trading session. For more info, refer to our <0>terms and conditions</0>.'\n                    components={[<StaticUrl key={0} className='link' href='tnc/trading-terms.pdf' is_document />]}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button has_effect text={localize('OK')} onClick={onConfirm} primary />\n            </Modal.Footer>\n        </Modal>\n    );\n});\n\nexport default CompanyWideLimitExceededModal;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Modal } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize, Localize } from '@deriv/translations';\n\ntype TAccountVerificationRequiredModalProps = {\n    is_visible: boolean;\n    onConfirm: () => void;\n};\n\nconst AccountVerificationRequiredModal = observer(\n    ({ is_visible, onConfirm }: TAccountVerificationRequiredModalProps) => {\n        const history = useHistory();\n        const {\n            ui: { is_mobile },\n        } = useStore();\n        return (\n            <Modal\n                is_open={is_visible}\n                is_vertical_centered={is_mobile}\n                className='account-verification-required-modal'\n                toggleModal={onConfirm}\n                title={localize('Account verification required')}\n                width='440px'\n                height={is_mobile ? 'auto' : '220px'}\n            >\n                <Modal.Body className='account-verification-required-modal-text'>\n                    <Localize i18n_default_text='Please submit your proof of identity and proof of address to verify your account and continue trading.' />\n                </Modal.Body>\n\n                <div className='account-verification-required-modal-button'>\n                    <Modal.Footer>\n                        <Button\n                            has_effect\n                            text={localize('Submit Proof')}\n                            onClick={() => history.push(routes.proof_of_identity)}\n                            primary\n                        />\n                    </Modal.Footer>\n                </div>\n            </Modal>\n        );\n    }\n);\n\nexport default AccountVerificationRequiredModal;\n","import React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { getTitle } from './constants';\nimport AuthorizationRequiredModal from './authorization-required-modal';\nimport InsufficientBalanceModal from './insufficient-balance-modal';\nimport CompanyWideLimitExceededModal from './company-wide-limit-exceeded-modal';\nimport AccountVerificationRequiredModal from './account-verification-required-modal';\n\ntype TServicesError = {\n    code?: string;\n    message?: string;\n    type?: string;\n};\n\ntype TPropServicesErrorModel = {\n    is_virtual?: boolean;\n    is_visible: boolean;\n    is_logged_in: boolean;\n    onConfirm: () => void;\n    services_error: TServicesError;\n};\n\nconst ServicesErrorModal = ({\n    is_virtual,\n    is_visible,\n    is_logged_in,\n    onConfirm,\n    services_error,\n}: TPropServicesErrorModel) => {\n    const { code, message, type } = services_error;\n\n    if (!code || !message) return <React.Fragment />;\n    switch (code) {\n        case 'AuthorizationRequired':\n            return (\n                <AuthorizationRequiredModal\n                    is_logged_in={is_logged_in}\n                    is_visible={is_visible}\n                    toggleModal={onConfirm}\n                />\n            );\n        case 'InsufficientBalance':\n            return (\n                <InsufficientBalanceModal\n                    is_virtual={is_virtual}\n                    is_visible={is_visible}\n                    message={message}\n                    toggleModal={onConfirm}\n                />\n            );\n        case 'CompanyWideLimitExceeded':\n            return <CompanyWideLimitExceededModal is_visible={is_visible} onConfirm={onConfirm} />;\n        case 'PleaseAuthenticate':\n            return <AccountVerificationRequiredModal is_visible={is_visible} onConfirm={onConfirm} />;\n        default:\n            return (\n                <Modal is_open={is_visible} small title={getTitle(type)} toggleModal={onConfirm}>\n                    <Modal.Body>{message}</Modal.Body>\n                    <Modal.Footer>\n                        <Button has_effect text={localize('OK')} onClick={onConfirm} primary />\n                    </Modal.Footer>\n                </Modal>\n            );\n    }\n};\n\nexport default ServicesErrorModal;\n","import ServicesErrorModal from './services-error-modal';\n\nexport default ServicesErrorModal;\n","import React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\n\ntype TAccountVerificationPendingModalProps = {\n    is_visible: boolean;\n    onConfirm: () => void;\n};\n\nconst AccountVerificationPendingModal = ({ is_visible, onConfirm }: TAccountVerificationPendingModalProps) => (\n    <Modal\n        small\n        is_open={is_visible}\n        title={<Localize i18n_default_text='Pending verification' />}\n        toggleModal={onConfirm}\n        className='account-verification-pending-modal'\n    >\n        <Modal.Body>\n            <Localize i18n_default_text='You cannot trade as your documents are still under review. We will notify you by email once your verification is approved.' />\n        </Modal.Body>\n        <Modal.Footer>\n            <Button has_effect onClick={onConfirm} primary large>\n                <Localize i18n_default_text='OK' />\n            </Button>\n        </Modal.Footer>\n    </Modal>\n);\n\nexport default AccountVerificationPendingModal;\n","import AccountVerificationPendingModal from './account-verification-pending-modal';\n\nexport default AccountVerificationPendingModal;\n","import React from 'react';\nimport { getUrlSmartTrader } from '@deriv/shared';\nimport MarketUnavailableModal from '../Elements/Modals/MarketUnavailableModal';\nimport ServicesErrorModal from '../Elements/Modals/ServicesErrorModal';\nimport AccountVerificationPendingModal from '../Elements/Modals/AccountVerificationPendingModal';\nimport { observer, useStore } from '@deriv/stores';\n\nconst TradeModals = observer(() => {\n    const { ui, client, common } = useStore();\n    const { is_virtual, is_logged_in } = client;\n\n    const { services_error } = common;\n    const {\n        is_mf_verification_pending_modal_visible,\n        is_services_error_visible,\n        setHasOnlyForwardingContracts,\n        setIsMFVericationPendingModal,\n        toggleServicesErrorModal,\n    } = ui;\n    const resetToPreviousMarket = () => {\n        setHasOnlyForwardingContracts(false);\n    };\n\n    const marketUnavailableOnConfirm = () => {\n        resetToPreviousMarket();\n    };\n\n    const marketUnavailableOnCancel = () => {\n        window.open(getUrlSmartTrader());\n        resetToPreviousMarket();\n    };\n\n    const servicesErrorModalOnConfirm = () => {\n        toggleServicesErrorModal(false);\n    };\n\n    return (\n        <React.Fragment>\n            <MarketUnavailableModal onConfirm={marketUnavailableOnConfirm} onCancel={marketUnavailableOnCancel} />\n\n            <ServicesErrorModal\n                onConfirm={servicesErrorModalOnConfirm}\n                services_error={services_error}\n                is_visible={is_services_error_visible}\n                is_virtual={is_virtual}\n                is_logged_in={is_logged_in}\n            />\n\n            <AccountVerificationPendingModal\n                is_visible={is_mf_verification_pending_modal_visible}\n                onConfirm={() => setIsMFVericationPendingModal(false)}\n            />\n        </React.Fragment>\n    );\n});\n\nexport default TradeModals;\n","import TradeModals from './trade-modals';\n\nexport default TradeModals;\n"],"names":["observer","_ref","is_loading","onCancel","onConfirm","ui","useStore","disableApp","enableApp","is_visible","has_only_forward_starting_contracts","React","Dialog","className","title","Localize","i18n_default_text","confirm_button_text","localize","platform_name_trader","getPlatformSettings","name","cancel_button_text","platform_name_smarttrader","is_mobile_full_width","values","getTitle","type","toggleModal","is_appstore","is_logged_in","Modal","id","is_open","small","Body","Footer","Button","has_effect","text","onClick","redirectToLogin","getLanguage","secondary","redirectToSignUp","primary","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","remoteConfigQuery","_callee","response","_context","fetch","ok","json","enabled","undefined","_useState2","_slicedToArray","useState","initData","data","setData","isMounted","useRef","useEffect","current","_ref2","_callee2","res","resHash","dataHash","_context2","ObjectUtils","hashObject","_x","error","console","log","_JSON$parse","useRemoteConfig","hub_enabled_country_list","client","account_settings","clients_country","userCountry","JSON","parse","Cookies","residence","country_code","isHubRedirectionEnabled","Array","isArray","includes","isChangingToHubAppId","isHubRedirectionLoaded","InsufficientBalanceModal","history","is_virtual","message","_useStore","is_mobile","useIsHubRedirectionEnabled","has_wallet","is_vertical_centered","PRODUCTION_REDIRECT_URL","concat","getDomainUrl","redirectUrl","url_query_string","window","location","search","url_params","URLSearchParams","account_currency","sessionStorage","getItem","get","href","_history$push","routes","wallets_deposit","cashier_deposit","withRouter","components","StaticUrl","key","is_document","useHistory","width","height","proof_of_identity","services_error","code","AuthorizationRequiredModal","CompanyWideLimitExceededModal","AccountVerificationRequiredModal","large","common","is_mf_verification_pending_modal_visible","is_services_error_visible","setHasOnlyForwardingContracts","setIsMFVericationPendingModal","toggleServicesErrorModal","resetToPreviousMarket","MarketUnavailableModal","open","getUrlSmartTrader","ServicesErrorModal","AccountVerificationPendingModal"],"sourceRoot":""}