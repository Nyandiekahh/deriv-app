{"version":3,"file":"js/core.chunk.trading-assessment-existing-user-modal.78973846415b1162ad96.js","mappings":"mIASA,MAsCA,EAtC+BA,EAC3BC,uBACAC,0BACAC,iCAAgC,MAEhC,MAAOC,EAAuBC,GAAyBC,EAAAA,SAAyB,KAC1E,OAAEC,EAAM,aAAEC,IAAiBC,EAAAA,EAAAA,oBAC3BC,EAAkBA,CAACC,EAAsBC,EAA+B,YAAa,IAAAC,EACvF,IAAKF,EAAc,OACnB,MAAMG,EAAKC,SAASC,cAAc,UAAUL,OACtCM,EAAkC,QAApBJ,EAAGC,aAAE,EAAFA,EAAII,qBAAa,IAAAL,EAAAA,EAAIC,EACE,mBAAnCG,aAAc,EAAdA,EAAgBE,kBACvBF,SAAAA,EAAgBE,eAAe,CAAEC,SAAU,SAAUR,WAExC,WAAbE,aAAE,EAAFA,EAAIO,QAAkBP,SAAAA,EAAIQ,QAAO,EAqBzC,OAlBAhB,EAAAA,WAAgB,KACZ,MAAMiB,EAAS,IAAIR,SAASS,iBAAiB,kBAC7CnB,EAAsBkB,EAAOE,KAAIC,GAASA,EAAMC,OAAM,GACvD,CAACxB,IACJG,EAAAA,WAAgB,KACZ,MAAMsB,EACFxB,EAAsByB,MAAKC,GAAcC,OAAOC,UAAUC,eAAeC,KAAK3B,EAAQuB,MAAgB,GAEtG7B,SAAAA,EAAsBkC,SAASP,GAC/BlB,EAAgBkB,EAA0B,SACnC1B,SAAAA,EAAyBiC,SAASP,GACzClB,EAAgBkB,EAA0B,OAE1ClB,EAAgBkB,EACpB,GAED,CAACpB,IAEG,IAAI,C,0EClCf,MCPA,EDO2B4B,EAAGC,OAAMC,UAASC,YAAY,OAAQC,YAEzDC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,CACpCN,IACGO,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACC,EAAAA,KAAI,CAACR,KAAMA,EAAMS,KAAM,QAGhCL,EAAAA,EAAAA,MAACM,EAAAA,KAAI,CAACC,GAAG,IAAIF,KAAMP,EAAWU,YAAY,IAAGN,SAAA,CACxCH,IAASC,EAAAA,EAAAA,MAAA,UAAAE,SAAA,CAAQ,IAAEH,EAAM,OACzBF,O,wrCEcjB,MA0FA,EA1FkCY,EAC9BC,iBACAC,YACAC,WACAC,SACAC,gBACAC,2BAEAlD,EAAAA,WAAgB,KACZmD,GAAwB,GACzB,CAACH,IAEJ,MAAM,UAAEI,IAAcC,EAAAA,EAAAA,MAChB,SAAEC,IAAaC,EAAAA,EAAAA,mBAEfJ,EAAyBA,KACvBH,GACAE,EACIM,QACIR,EAAOS,gBACHT,EAAOU,eACPV,EAAOW,0CACPX,EAAOY,yCAGvB,EAGJ,OACItB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wCAAuCC,SACjDS,EAAU3B,KAAI0C,IACXvB,EAAAA,EAAAA,KAACwB,EAAAA,MAAK,CAACzC,KAAMwC,EAASE,aAAa1B,SAC9BA,EAAG2B,QAAOC,WACP,MAAMC,EACwB,4CAA1BL,EAASE,eACTF,aAAQ,EAARA,EAAUM,cAAcC,QCrEZ,GDuEhB,OACI9B,EAAAA,EAAAA,KAACtC,EAAAA,SAAc,CAAAqC,SACVe,GACGd,EAAAA,EAAAA,KAAC+B,EAAAA,SAAQC,EAAAA,EAAA,GACDN,GAAK,IACTO,kBAAkBC,EAAAA,EAAAA,GAAK,CACnB,2BAA4BN,IAEhCO,oBAAkB,EAClBpD,KAAMwC,aAAQ,EAARA,EAAUE,aAChBW,YAAab,aAAQ,EAARA,EAAUM,cACvBQ,KAAMd,aAAQ,EAARA,EAAUe,eAChB7B,SAAU8B,GACN9B,EACI8B,EACAhB,EAASE,aACTd,GAGR6B,MAAO9B,EAAOa,EAASE,cACvBgB,SAAUlC,EAAehB,SAASgC,EAASE,cAC3CiB,MAAOf,EAAKgB,SAAWhB,EAAKe,UAGhC7C,EAAAA,EAAAA,MAACnC,EAAAA,SAAc,CAAAqC,SAAA,EACXC,EAAAA,EAAAA,KAACG,EAAAA,KAAI,CAACC,GAAG,KAAKwC,MAAM,YAAYC,OAAO,OAAO3C,KAAK,KAAIH,SAClDwB,aAAQ,EAARA,EAAUM,iBAEf7B,EAAAA,EAAAA,KAAC8C,EAAAA,aAAYd,EAAAA,EAAA,GACLN,GAAK,IACTU,YAAapB,EAAS,iBACtB+B,MAAO/B,EAAS,iBAChBjC,KAAMwC,aAAQ,EAARA,EAAUE,aAChBuB,WAAYzB,aAAQ,EAARA,EAAUe,eACtB7B,SAAU8B,IACN9B,EAAS8B,EAAGhB,EAASE,aAAcd,EAAc,EAErD6B,MAAO9B,EAAOa,EAASE,cACvBwB,sBAAoB,EACpBR,SAAUlC,EAAehB,SAASgC,EAASE,cAC3CiB,MAAOf,EAAKgB,SAAWhB,EAAKe,aAI3B,GAlDYnB,EAASE,iBAuDpD,EE1Dd,EA/CqCyB,EACjC3C,iBACA4C,OACAd,OACA5B,WACAC,SACAe,eACAb,2BAEAlD,EAAAA,WAAgB,KACZkD,IAAuBF,EAAOe,GAAc,GAC7C,CAACA,EAAcb,EAAsBF,KAGpCb,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wCAAuCC,SAAA,EAClDC,EAAAA,EAAAA,KAACG,EAAAA,KAAI,CAACC,GAAG,KAAKwC,MAAM,YAAYC,OAAO,OAAO3C,KAAK,KAAIH,SAClDoD,KAELnD,EAAAA,EAAAA,KAACwB,EAAAA,MAAK,CAACzC,KAAM0C,EAAa1B,SACrBA,KACGC,EAAAA,EAAAA,KAACoD,EAAAA,WAAU,CACPtD,UAAU,qDACVf,KAAM0C,EACN4B,mBAAiB,EACjBC,UAAQ,EACRC,SAAU7C,EAAOe,GACjB+B,SAAUjB,IACN9B,EAAS8B,GACT3B,GAAqB,EAAK,EAC5Bb,SAEDsC,EAAKxD,KAAI4E,IACNzD,EAAAA,EAAAA,KAACoD,EAAAA,WAAWM,KAAI,CACZ5D,UAAU,2DAEViD,MAAOU,aAAM,EAANA,EAAQN,KACfX,MAAOiB,aAAM,EAANA,EAAQjB,MACfC,SAAUlC,EAAehB,SAASkC,IAH7BgC,EAAOjB,iB,4/BCjB5C,MA6RA,GA7R8BmB,EAAAA,EAAAA,WAC1B,EACIC,aACArD,iBACAsD,aACAC,iBACAC,WACAC,WACAC,SACAC,sBACAC,qBACAC,yBACAC,oBAC8B,IAAAC,EAC9B,MAAM,YAAEC,IAAgBC,EAAAA,EAAAA,MAClB,SAAExD,IAAaC,EAAAA,EAAAA,oBACf,WAAEwD,GAAeF,EACjBG,GAAuBC,EAAAA,EAAAA,KACvBC,EAAeC,SAAuD,QAA/CP,EAACQ,aAAaC,QAAQ,iCAAyB,IAAAT,EAAAA,EAAI,MACzEU,EAAmBC,IAAsBC,EAAAA,EAAAA,WAAS,IAClDC,EAA0BC,IAA6BF,EAAAA,EAAAA,UAAS,CACnEG,uBAAwB,EACxBC,iBAAkBZ,EAAqBE,MAEpCW,EAAWC,IAAeN,EAAAA,EAAAA,UAAQlD,EAAA,GAA8B6B,IACjE4B,EAAsBf,EAAqB5C,OAAS,EACpD4D,GAAiCtB,GACmB,IAApDe,EAAyBE,wBAK/BM,EAAAA,EAAAA,YAAU,KACNP,GAA0BQ,GACtB5D,EAAAA,EAAA,GACO4D,GAAS,IACZP,uBAAwBT,GAAgB,EACxCU,iBAAkBV,EACZF,EAAqBE,GACrBF,EAAqBkB,EAAUP,4BAGxCjB,GACDD,EAAmBS,GAEvBY,EAAY3B,EAAW,GACxB,KAEH8B,EAAAA,EAAAA,YAAU,KACFzB,GAAqB2B,GAAiB,GAC3C,CAAC3B,IAEJ,MAAM2B,EAAkBA,KACpB,GAAiC,OAA7BN,EAAUO,eAEV/B,EAASwB,GAAW,OACjB,CACmBJ,EAAyBE,uBAAyB,EAEpDX,EAAqB5C,QACrCsD,GAA0BW,IACtB,MAAMC,EAA4BD,EAAoBV,uBAAyB,EAM/E,OALAP,aAAamB,QAAQ,yBAA0BC,OAAOF,IAEjD5B,GACDD,EAAmB6B,GAEhB,CACHX,uBAAwBW,EACxBV,iBAAkBZ,EAAqBsB,GAC1C,GAGb,GAsBEG,EAAuBA,CACzB5D,EACAd,EACA2E,KAEyB,mBAAd7D,EAAE8D,SAAwB9D,EAAE8D,UACvCD,EAAW3E,EAAcc,EAAE+D,OAAO9D,OAClCgD,GAAYe,GAASvE,EAAAA,EAAA,GAAUuE,GAAS,IAAE,CAAC9E,GAAec,EAAE+D,OAAO9D,SAAS,EAiEhF,OACI3C,EAAAA,EAAAA,MAAA,OAAKC,WAAWoC,EAAAA,EAAAA,GAAK,qBAAsB0B,GAAY7D,SAAA,CAClD0E,GACGzE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iCAAgCC,UAC3CC,EAAAA,EAAAA,KAACR,EAAAA,EAAkB,CACfC,KAAK,iBACLC,QAASsB,EACL,yGAEJpB,MAAOoB,EAAS,gCAIxBhB,EAAAA,EAAAA,KAACG,EAAAA,KAAI,CAACC,GAAG,IAAIwC,MAAM,YAAY1C,KAAK,MAAMJ,UAAU,gCAA+BC,UAC/EC,EAAAA,EAAAA,KAACwG,EAAAA,SAAQ,CAACC,kBAAkB,sKAGpCzG,EAAAA,EAAAA,KAAC0G,EAAAA,OAAM,CAACC,cAAa3E,EAAA,GAAO6B,GAAc+C,SA9D1BlG,IACpB,MAAMmG,IAAgB/C,aAAc,EAAdA,MAAsB,GAAK,EACjDG,SAAAA,EAAS4C,EAAcnG,GAEvB,MAAM/C,EAA+C,CAAC,EAWtD,GATK+C,EAAOoF,gBAAwE,mBAAtDX,EAAyBG,iBAAiBwB,UACpEnJ,EAAOmI,eAAiB,SAGvBpF,EAAOqG,sBAC8C,yBAAtD5B,EAAyBG,iBAAiBwB,UAE1CnJ,EAAOoJ,qBAAuB,SAEwB,uBAAtD5B,EAAyBG,iBAAiBwB,QAAkC,CACC,CACzE,iBACA,gBACA,2CACA,2CAE+BE,SAAQtF,IAClChB,EAAOgB,KACR/D,EAAO+D,GAASV,EAAS,2BAC7B,GAER,CACA,GAA0D,sBAAtDmE,EAAyBG,iBAAiBwB,QAAiC,CACC,CACxE,yBACA,0BACA,uCACA,2BAE8BE,SAAQtF,IACjChB,EAAOgB,IAAUyD,EAAyBG,iBAAiB7D,eAAiBC,IAC7E/D,EAAO+D,GAAS,QACpB,GAER,CAEA,OAAO/D,CAAM,EAoB2DoG,SA5ElDkD,CACtBvG,GACEwG,iBALyBC,MAOvBnC,IAPuBmC,EAQGzG,EAP9BvB,OAAOuB,OAAOyG,GAASC,OAAM3D,GAAUvC,QAAQuC,MAONmB,IAAiBa,EAClD1B,EAASrD,IAETwG,EAAW,CAAC,GACZrB,KAER,EAiEoG9F,SAC3FA,EAAGpC,SAAQgD,gBAAeD,SAAQ2G,YAAW1E,cAC1C,MAAM,cAAEd,EAAa,aAAEJ,EAAY,eAAEa,EAAc,UAAEgF,GACjDnC,EAAyBG,iBACvBiC,EAAoBD,aAAS,EAATA,EAAWE,MACjCjG,GAAYA,EAASM,cAAcC,OF7NvB,KE+NV2F,EAAsBtI,OAAOuI,KAAKhH,GAAQ8G,MAC5C9F,KAAW/D,EAAO+D,MAAsBiB,EAAQjB,KAGpD,OACI7B,EAAAA,EAAAA,MAAC8H,EAAAA,SAAQ,CAAA5H,SAAA,EACLF,EAAAA,EAAAA,MAACM,EAAAA,KAAI,CAAC0C,OAAO,OAAO3C,KAAK,KAAKJ,UAAU,uCAAsCC,SAAA,EAC1EC,EAAAA,EAAAA,KAACwG,EAAAA,SAAQ,CACLC,kBAAkB,wCAClB/F,OAAQ,CACJkH,QAASzC,EAAyBE,uBAAyB,EAC3DwC,MAAOpC,EAAsB,MAGrCzF,EAAAA,EAAAA,KAACG,EAAAA,KAAI,CAACyC,MAAM,cAAc1C,KAAK,MAAKH,SAC/B0H,IAAuBzH,EAAAA,EAAAA,KAACwG,EAAAA,SAAQ,CAACC,kBAAmB,6BAG7DzG,EAAAA,EAAAA,KAAA,WAASF,UAAW,2BAA2BC,UAC3CF,EAAAA,EAAAA,MAACiI,EAAAA,KAAI,CAACC,YAAU,EAACjI,UAAU,mCAAkCC,SAAA,EACzDC,EAAAA,EAAAA,KAAC5C,EAAAA,EAAsB,CAACG,8BAA+ByH,KACvDhF,EAAAA,EAAAA,KAAA,OACIF,WAAWoC,EAAAA,EAAAA,GAAK,mCAAoC,CAChD,eAAgBqF,IACjBxH,SAEFuH,SAAAA,EAAWxF,QACR9B,EAAAA,EAAAA,KAACM,EAAyB,CACtBE,UAAW8G,EACX7G,SAAU0F,EACVzF,OAAQA,EACRC,cAAeA,EACfC,qBAAsBqE,EACtB1E,eAAgBA,QAAAA,EAAkB,MAGtCP,EAAAA,EAAAA,KAACkD,EAA4B,CACzBC,KAAMtB,EACNQ,KAAMC,QAAAA,EAAkB,GACxB7B,SAAU8B,IACN4D,EACI5D,EACAd,EACAd,EACH,EAELD,OAAQA,EACRe,aAAcA,EACdb,qBAAsBqE,EACtB1E,eAAgBA,QAAAA,EAAkB,QAI9CP,EAAAA,EAAAA,KAACgI,EAAAA,MAAMC,OAAM,CACTC,eAAa,EACbC,YAAa9D,EACbvE,UAAU,oCAAmCC,UAE7CF,EAAAA,EAAAA,MAACuI,EAAAA,OAAOC,MAAK,CAACvI,UAAU,gCAA+BC,SAAA,CAClD2F,IACG1F,EAAAA,EAAAA,KAACoI,EAAAA,OAAM,CACHE,YAAU,EACVC,QAASA,KACLlB,EAAU,CAAC,GAjLrClC,EAAyBE,uBAAyB,GACnD,EACjBD,GAA0BW,IACtB,MAAMyC,EAA4BzC,EAAoBV,uBAAyB,EAK/E,OAJAP,aAAamB,QAAQ,yBAA0BC,OAAOsC,IACjDpE,GACDD,EAAmBqE,GAEhB,CACHnD,uBAAwBmD,EACxBlD,iBAAkBZ,EAAqB8D,GAC1C,IAGLxE,EAASuB,EAoKwD,EAEzBpC,KAAMnC,EAAS,YACfvC,KAAK,SACLgK,WAAS,EACTC,OAAK,EACL5I,UAAU,wCAGlBE,EAAAA,EAAAA,KAACoI,EAAAA,OAAM,CACHE,YAAU,EACVnF,KAAMnC,EAAS,QACf0H,OAAK,EACLC,SAAO,EACP7I,UAAU,qCACVf,KAAK,qBAMlB,MAIrB,G,mDCtTX,MAAM4F,EAAgCA,IAAM,CAC/C,CACI9C,eAAeb,EAAAA,EAAAA,UAAS,0EACxB8F,QAAS,iBACTxE,eAAgB,CACZ,CAAEa,MAAMnC,EAAAA,EAAAA,UAAS,OAAQwB,MAAO,OAChC,CAAEW,MAAMnC,EAAAA,EAAAA,UAAS,MAAOwB,MAAO,OAEnCf,aAAc,iBACdmH,WAAY,SAEhB,CACI/G,eAAeb,EAAAA,EAAAA,UAAS,gEACxB8F,QAAS,uBACTrF,aAAc,uBACda,eAAgB,CACZ,CACIa,MAAMnC,EAAAA,EAAAA,UACF,gHAEJwB,MAAO,kFAEX,CACIW,MAAMnC,EAAAA,EAAAA,UACF,4FAEJwB,MAAO,+DAEX,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,4EACfwB,MAAO,yDAEX,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,+DACfwB,MAAO,6BAEX,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,yDACfwB,MAAO,yBAGfoG,WAAY,SAEhB,CACI9B,QAAS,qBACTQ,UAAW,CACP,CACIzF,eAAeb,EAAAA,EAAAA,UAAS,mDACxB4H,WAAY,WACZnH,aAAc,iBACda,eAAgB,CACZ,CACIa,MAAMnC,EAAAA,EAAAA,UAAS,iBACfwB,MAAO,iBAEX,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,oBACfwB,MAAO,oBAEX,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,eACfwB,MAAO,eAEX,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,gBACfwB,MAAO,kBAInB,CACIX,eAAeb,EAAAA,EAAAA,UAAS,8DACxB4H,WAAY,WACZnH,aAAc,gBACda,eAAgB,CACZ,CACIa,MAAMnC,EAAAA,EAAAA,UAAS,QACfwB,MAAO,yCAEX,CACIW,KAAM,QACNX,MAAO,4CAEX,CACIW,KAAM,SACNX,MAAO,6CAEX,CACIW,KAAM,UACNX,MAAO,8CAEX,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,cACfwB,MAAO,mDAInB,CACIX,eAAeb,EAAAA,EAAAA,UAAS,sEACxB4H,WAAY,WACZnH,aAAc,2CACda,eAAgB,CACZ,CACIa,MAAMnC,EAAAA,EAAAA,UAAS,iBACfwB,MAAO,iBAEX,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,oBACfwB,MAAO,oBAEX,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,eACfwB,MAAO,eAEX,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,gBACfwB,MAAO,kBAInB,CACIX,eAAeb,EAAAA,EAAAA,UACX,mGAEJS,aAAc,0CACdmH,WAAY,WACZtG,eAAgB,CACZ,CACIa,MAAMnC,EAAAA,EAAAA,UAAS,QACfwB,MAAO,yCAEX,CACIW,KAAM,QACNX,MAAO,4CAEX,CACIW,KAAM,SACNX,MAAO,6CAEX,CACIW,KAAM,UACNX,MAAO,8CAEX,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,cACfwB,MAAO,qDAM3B,CACIX,eAAeb,EAAAA,EAAAA,UAAS,oDACxB8F,QAAS,oBACTrF,aAAc,yBACdmH,WAAY,QACZtG,eAAgB,CACZ,CACIa,MAAMnC,EAAAA,EAAAA,UAAS,gDACfwB,MAAO,yDAEX,CACIW,MAAMnC,EAAAA,EAAAA,UACF,6GAEJwB,MAAO,sCAEX,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,2EACfwB,MAAO,oCAEX,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,wDACfwB,MAAO,kCAInB,CACIX,eAAeb,EAAAA,EAAAA,UAAS,yCACxB8F,QAAS,oBACTrF,aAAc,0BACdmH,WAAY,QACZtG,eAAgB,CACZ,CACIa,MAAMnC,EAAAA,EAAAA,UAAS,oCACfwB,MAAO,4CAEX,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,uDACfwB,MAAO,uDAEX,CAAEW,MAAMnC,EAAAA,EAAAA,UAAS,gCAAiCwB,MAAO,gCACzD,CACIW,MAAMnC,EAAAA,EAAAA,UACF,uHAEJwB,MAAO,kFAInB,CACIX,eAAeb,EAAAA,EAAAA,UACX,6HAEJ8F,QAAS,oBACTrF,aAAc,uCACdmH,WAAY,QACZtG,eAAgB,CACZ,CACIa,MAAMnC,EAAAA,EAAAA,UAAS,+DACfwB,MAAO,4DAEX,CACIW,MAAMnC,EAAAA,EAAAA,UACF,4IAEJwB,MAAO,4FAEX,CACIW,MAAMnC,EAAAA,EAAAA,UACF,8IAEJwB,MAAO,8FAEX,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,2CACfwB,MAAO,6CAInB,CACIX,eAAeb,EAAAA,EAAAA,UAAS,mDACxB8F,QAAS,oBACTrF,aAAc,0BACdmH,WAAY,QACZtG,eAAgB,CACZ,CACIa,MAAMnC,EAAAA,EAAAA,UAAS,uCACfwB,MAAO,uCAEX,CAAEW,MAAMnC,EAAAA,EAAAA,UAAS,6BAA8BwB,MAAO,6BACtD,CACIW,MAAMnC,EAAAA,EAAAA,UAAS,oCACfwB,MAAO,oCAEX,CAAEW,MAAMnC,EAAAA,EAAAA,UAAS,qBAAsBwB,MAAO,uB,wnCCzO1D,MAAMqG,EAAsB,CACxBC,aAAc,CAAC,gBA0EnB,EA1BgCC,EAExBC,6BACAC,uBACAC,mBACA/E,sBAEJgF,KAEA,MAAMC,EAtDqCH,KAAiD,IAAAI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAC5F,MAAO,CACHhE,eAAc9D,EAAAA,EAAA,GACP6G,GAAmB,IACtBkB,cAAmD,QAAtCV,EAAEJ,aAAoB,EAApBA,EAAsBnD,sBAAc,IAAAuD,EAAAA,EAAI,KAE3DtC,qBAAoB/E,EAAAA,EAAA,GACb6G,GAAmB,IACtBkB,cAAyD,QAA5CT,EAAEL,aAAoB,EAApBA,EAAsBlC,4BAAoB,IAAAuC,EAAAA,EAAI,KAEjEnI,eAAca,EAAAA,EAAA,GACP6G,GAAmB,IACtBkB,cAAmD,QAAtCR,EAAEN,aAAoB,EAApBA,EAAsB9H,sBAAc,IAAAoI,EAAAA,EAAI,KAE3DnI,cAAaY,EAAAA,EAAA,GACN6G,GAAmB,IACtBkB,cAAkD,QAArCP,EAAEP,aAAoB,EAApBA,EAAsB7H,qBAAa,IAAAoI,EAAAA,EAAI,KAE1DnI,yCAAwCW,EAAAA,EAAA,GACjC6G,GAAmB,IACtBkB,cAA6E,QAAhEN,EAAER,aAAoB,EAApBA,EAAsB5H,gDAAwC,IAAAoI,EAAAA,EAAI,KAErFnI,wCAAuCU,EAAAA,EAAA,GAChC6G,GAAmB,IACtBkB,cAA4E,QAA/DL,EAAET,aAAoB,EAApBA,EAAsB3H,+CAAuC,IAAAoI,EAAAA,EAAI,KAEpFM,uBAAsBhI,EAAAA,EAAA,GACf6G,GAAmB,IACtBkB,cAA2D,QAA9CJ,EAAEV,aAAoB,EAApBA,EAAsBe,8BAAsB,IAAAL,EAAAA,EAAI,KAEnEM,wBAAuBjI,EAAAA,EAAA,GAChB6G,GAAmB,IACtBkB,cAA4D,QAA/CH,EAAEX,aAAoB,EAApBA,EAAsBgB,+BAAuB,IAAAL,EAAAA,EAAI,KAEpEM,qCAAoClI,EAAAA,EAAA,GAC7B6G,GAAmB,IACtBkB,cAAyE,QAA5DF,EAAEZ,aAAoB,EAApBA,EAAsBiB,4CAAoC,IAAAL,EAAAA,EAAI,KAEjFM,wBAAuBnI,EAAAA,EAAA,GAChB6G,GAAmB,IACtBkB,cAA4D,QAA/CD,EAAEb,aAAoB,EAApBA,EAAsBkB,+BAAuB,IAAAL,EAAAA,EAAI,KAEvE,EAYsCM,CAA+BnB,GACtE,MAAO,CACHoB,OAAQ,CACJC,cAActJ,EAAAA,EAAAA,UAAS,oCACvBpB,OAAOoB,EAAAA,EAAAA,UAAS,uBAEpBuJ,KAAMpB,EACNtF,YAAY2G,EAAAA,EAAAA,kBAAiBxB,EAA4BI,GACzDqB,MAAO,CACH7D,UAAU8D,EAAAA,EAAAA,4BAA2B1B,EAA4BI,GACjE7I,eAAgB2I,aAAgB,EAAhBA,EAAkByB,iBAClCxG,sBAEJyG,gBAAgBjG,EAAAA,EAAAA,KAAgC7C,OACnD,E,wCCvEL,MAiFA,EAjFkC+I,EAC9BC,kBACAC,mBACAnL,QACAoL,cACAC,eACAC,kBAAiB,MAEjB,MAAM,UAAEpK,IAAcC,EAAAA,EAAAA,MAChB,SAAEC,IAAaC,EAAAA,EAAAA,mBAErB,OACIjB,EAAAA,EAAAA,KAACtC,EAAAA,SAAc,CAAAqC,SACVe,GACGjB,EAAAA,EAAAA,MAACmI,EAAAA,MAAK,CACFmD,MAAM,QACNvL,MAAOA,EACPwL,OAAO,QACPC,QAASP,EACThL,UAAU,oBACVwL,YAAaP,EACbQ,gBAAgB,EAAMxL,SAAA,EAEtBF,EAAAA,EAAAA,MAACmI,EAAAA,MAAMwD,KAAI,CAAAzL,SAAA,EACPC,EAAAA,EAAAA,KAACC,EAAAA,KAAI,CAACR,KAAK,eAAeS,KAAK,QAC/BF,EAAAA,EAAAA,KAACG,EAAAA,KAAI,CAACC,GAAG,IAAIF,KAAK,KAAKuL,MAAM,SAASpL,YAAY,IAAIP,UAAU,wBAAuBC,SAClFkL,QAGTjL,EAAAA,EAAAA,KAACgI,EAAAA,MAAMC,OAAM,CAAAlI,UACTC,EAAAA,EAAAA,KAACoI,EAAAA,OAAM,CACH3J,KAAK,SACLiK,OAAK,EACLvF,KAAM6H,QAAAA,EAAehK,EAAS,MAC9B2H,SAAO,EACPJ,QAASwC,UAKrBlL,EAAAA,EAAAA,MAAC6L,EAAAA,aAAY,CACTC,QAASb,EACTlL,MAAOsL,EAAiBlK,EAAS,iCAAmCpB,EACpEgM,kBAAkB,aAClBL,gBAAgB,EAAMxL,SAAA,EAEtBF,EAAAA,EAAAA,MAACmI,EAAAA,MAAMwD,KAAI,CAAC1L,UAAU,uBAAsBC,SAAA,CACvCmL,GACGrL,EAAAA,EAAAA,MAACM,EAAAA,KAAI,CACDD,KAAK,KACLG,YAAY,IACZwC,OAAO,OACPzC,GAAG,IACHN,UAAU,8BAA6BC,SAAA,CAEtCH,GACDI,EAAAA,EAAAA,KAAA,OAAKF,UAAU,8CAEnB,MACJD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gCAA+BC,SAAA,EAC1CC,EAAAA,EAAAA,KAACC,EAAAA,KAAI,CAACR,KAAK,eAAeS,KAAK,QAC/BF,EAAAA,EAAAA,KAACG,EAAAA,KAAI,CAACC,GAAG,IAAIF,KAAK,KAAKuL,MAAM,SAASpL,YAAY,IAAIP,UAAU,wBAAuBC,SAClFkL,WAIbjL,EAAAA,EAAAA,KAACgI,EAAAA,MAAMC,OAAM,CAACnI,UAAU,+BAA8BC,UAClDC,EAAAA,EAAAA,KAACoI,EAAAA,OAAM,CACH3J,KAAK,SACLiK,OAAK,EACLvF,KAAM6H,QAAAA,EAAehK,EAAS,MAC9B2H,SAAO,EACPJ,QAASwC,UAKZ,E,4BCtFzB,MA0CA,GA1C+BpH,EAAAA,EAAAA,WAAS,KACpC,MAAM,OAAEkI,EAAM,GAAEC,IAAOtH,EAAAA,EAAAA,MACjB,iCAAEuH,EAAgC,UAAEC,GAAcH,GAClD,oCACFI,EAAmC,qCACnCC,EAAoC,iCACpCC,GACAL,EACJpO,EAAAA,WAAgB,KACZuO,EAAkD,IAAdD,EAAgB,GACrD,IAOH,OACInM,EAAAA,EAAAA,MAACmI,EAAAA,MAAK,CACFmD,MAAM,QACNrL,UAAU,oBACVuL,QAASU,GAAoCG,EAAqCnM,SAAA,EAElFF,EAAAA,EAAAA,MAACmI,EAAAA,MAAMwD,KAAI,CAAAzL,SAAA,EACPC,EAAAA,EAAAA,KAACC,EAAAA,KAAI,CAACR,KAAK,qBAAqBS,KAAM,MACtCF,EAAAA,EAAAA,KAACG,EAAAA,KAAI,CAACC,GAAG,IAAIqL,MAAM,SAAS5I,OAAO,OAAO/C,UAAU,yBAAwBC,UACxEC,EAAAA,EAAAA,KAACwG,EAAAA,SAAQ,CAACC,kBAAkB,oCAAoC2F,WAAY,EAACpM,EAAAA,EAAAA,KAAA,QAAS,SAE1FA,EAAAA,EAAAA,KAACG,EAAAA,KAAI,CAACC,GAAG,IAAIF,KAAK,KAAKuL,MAAM,SAAQ1L,UACjCC,EAAAA,EAAAA,KAACwG,EAAAA,SAAQ,CACLC,kBAAkB,2IAClB2F,WAAY,EAACpM,EAAAA,EAAAA,KAAA,QAAS,YAIlCA,EAAAA,EAAAA,KAACgI,EAAAA,MAAMC,OAAM,CAAAlI,UACTC,EAAAA,EAAAA,KAACoI,EAAAA,OAAM,CAAC3J,KAAK,SAASiK,OAAK,EAACvF,MAAMnC,EAAAA,EAAAA,UAAS,MAAO2H,SAAO,EAACJ,QAxB/C8D,KACnBJ,GAAoC,GACpCE,GAAiC,EAAK,QAwB9B,I,4/BChChB,MCTA,GDSsCxI,EAAAA,EAAAA,WAAS,KAE3C,MAAM,OAAEkI,EAAM,GAAEC,IAAOtH,EAAAA,EAAAA,MACjB,UAAE1D,IAAcC,EAAAA,EAAAA,MAChB,iCACFuL,EAAgC,oBAChCC,EACAC,0BAA2BC,GAC3BZ,GACE,+BACFa,EAA8B,8BAC9BC,EAA6B,0BAC7BC,EAAyB,kCACzBC,EAAiC,iCACjCV,EAAgC,qCAChCW,EAAoC,6CACpCC,EAA4C,wCAC5CC,EAAuC,oCACvCf,EAAmC,mBACnC9H,GACA2H,GACGmB,EAAaC,GAAgBxP,EAAAA,SAAe,CAAC,IAC7CgH,EAAsByI,GAA0BzP,EAAAA,SAAe,CAAC,IAChEwG,EAAqBkJ,GAAuB1P,EAAAA,UAAe,GAElEA,EAAAA,WAAgB,KAAM,IAAA2P,EAClBvI,aAAawI,WAAW,0BACxBP,GAA6C,GAC7C,MAAM,WAAElJ,EAAU,MAAE4G,GAAU1B,EAC1B,CAAEC,2BAA4ByD,GAC9B,MAIJ,OAFAS,EAAarJ,GACbsJ,EAAiD,QAA3BE,EAAC5C,EAAM/F,4BAAoB,IAAA2I,EAAAA,EAAI,IAC9C,IAAMN,GAA6C,EAAM,GACjE,IAEH,MAAMQ,EAAeC,UACjB,GAA8B,OAA1B9M,EAAOoF,eACPqG,GAAiC,GACjCQ,GAA8B,OAC3B,KAAAc,EACH,MAAMC,EAAe,CACjBC,6BAA4B3L,EAAA,GAAOtB,IAEjCkN,QAAiBtB,EAAiCoB,IAClD,cAAEG,GAAmD,QAApCJ,EAAGG,EAASE,gCAAwB,IAAAL,EAAAA,EAAI,CAAC,QAC1DlB,IACNJ,GAAiC,GACX,IAAlB0B,EACAjB,GAA0B,GAE1BE,GAAqC,GAEzCE,GAAwC,EAC5C,GAGEjC,EAAmBA,KACrBmC,GAAaa,GAAU/L,EAAAA,EAAA,GAAU+L,GAAU,IAAEjI,eAAgB,UAC7DsH,GAAoB,GACpBT,GAA8B,GAC9BR,GAAiC,EAAK,EAGpC6B,EAAeA,KACjB/B,GAAoC,GACpCE,GAAiC,EAAM,EAG3C,OAAIO,GAEI1M,EAAAA,EAAAA,KAAC6K,EAAyB,CACtBC,gBAAiB4B,EACjB9M,OAAOoB,EAAAA,EAAAA,UAAS,0BAChBgK,aAAahK,EAAAA,EAAAA,UAAS,+BACtB+J,iBAAkBA,EAClBE,cACIjL,EAAAA,EAAAA,KAACwG,EAAAA,SAAQ,CACLC,kBAAkB,0VAClB2F,WAAY,EAACpM,EAAAA,EAAAA,KAAA,QAAS,MAG9BiO,UAAQ,EACR/C,gBAAc,IAGf2B,GAEH7M,EAAAA,EAAAA,KAACtC,EAAAA,SAAc,CAAAqC,SACVe,GACGd,EAAAA,EAAAA,KAACgI,EAAAA,MAAK,CACFqD,QAASwB,EACTjN,OAAOoB,EAAAA,EAAAA,UAAS,iCAChBmK,MAAM,QACNI,gBAAgB,EAChBH,OAAO,QACPtL,UAAU,4BAA2BC,UAErCC,EAAAA,EAAAA,KAACkO,EAAAA,EAAqB,CAClBxJ,qBAAsBA,EACtBb,WAAYoJ,EACZlJ,SAAUwJ,EACVvJ,SAAUgK,EACV7J,mBAAoBA,EACpBP,WAAW,oCACXM,oBAAqBA,OAI7BlE,EAAAA,EAAAA,KAAC0L,EAAAA,aAAY,CACTC,QAASkB,EACTjN,OAAOoB,EAAAA,EAAAA,UAAS,iCAChB4K,kBAAkB,aAClBL,gBAAgB,EAAMxL,UAEtBC,EAAAA,EAAAA,KAACkO,EAAAA,EAAqB,CAClBxJ,qBAAsBA,EACtBb,WAAYoJ,EACZlJ,SAAUwJ,EACVvJ,SAAUgK,EACV7J,mBAAoBA,EACpBP,WAAW,oCACXM,oBAAqBA,EACrBG,eAAgBvD,SAOjCd,EAAAA,EAAAA,KAACmO,EAAsB,GAAG,G","sources":["webpack:///../../account/src/Components/forms/scroll-to-field-with-error.tsx","webpack:///../../account/src/Components/inline-note-with-icon/inline-note-with-icon.tsx","webpack:///../../account/src/Components/inline-note-with-icon/index.ts","webpack:///../../account/src/Components/trading-assessment/trading-assessment-dropdown.tsx","webpack:///../../account/src/Constants/trading-assessment.ts","webpack:///../../account/src/Components/trading-assessment/trading-assessment-radio-buttons.tsx","webpack:///../../account/src/Components/trading-assessment/trading-assessment-form.tsx","webpack:///../../account/src/Constants/trading-assessment-questions.tsx","webpack:///../../account/src/Configs/trading-assessment-config.tsx","webpack:///../../account/src/Components/trading-assessment/risk-tolerance-warning-modal.tsx","webpack:///./App/Containers/Modals/trading-experience-modal.jsx","webpack:///./App/Containers/Modals/trading-assessment-existing-user/trading-assessment-existing-user.jsx","webpack:///./App/Containers/Modals/trading-assessment-existing-user/index.js"],"sourcesContent":["import React from 'react';\nimport { useFormikContext } from 'formik';\n\ntype TScrollToFieldWithError = {\n    fields_to_scroll_top?: string[];\n    fields_to_scroll_bottom?: string[];\n    should_recollect_inputs_names?: boolean;\n};\n\nconst ScrollToFieldWithError = ({\n    fields_to_scroll_top,\n    fields_to_scroll_bottom,\n    should_recollect_inputs_names = false,\n}: TScrollToFieldWithError) => {\n    const [all_page_inputs_names, setAllPageInputsNames] = React.useState<string[]>([]);\n    const { errors, isSubmitting } = useFormikContext();\n    const scrollToElement = (element_name: string, block: ScrollLogicalPosition = 'center') => {\n        if (!element_name) return;\n        const el = document.querySelector(`[name=\"${element_name}\"]`) as HTMLInputElement;\n        const target_element = el?.parentElement ?? el;\n        if (typeof target_element?.scrollIntoView === 'function') {\n            target_element?.scrollIntoView({ behavior: 'smooth', block });\n        }\n        if (el?.type !== 'radio') el?.focus();\n    };\n\n    React.useEffect(() => {\n        const inputs = [...document.querySelectorAll('input, select')] as HTMLInputElement[];\n        setAllPageInputsNames(inputs.map(input => input.name));\n    }, [should_recollect_inputs_names]);\n    React.useEffect(() => {\n        const current_error_field_name =\n            all_page_inputs_names.find(input_name => Object.prototype.hasOwnProperty.call(errors, input_name)) || '';\n\n        if (fields_to_scroll_top?.includes(current_error_field_name)) {\n            scrollToElement(current_error_field_name, 'start');\n        } else if (fields_to_scroll_bottom?.includes(current_error_field_name)) {\n            scrollToElement(current_error_field_name, 'end');\n        } else {\n            scrollToElement(current_error_field_name);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isSubmitting]);\n\n    return null;\n};\n\nexport default ScrollToFieldWithError;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\n\ntype TInlineNoteWithIconExtend = {\n    icon?: string;\n    font_size?: string;\n    message: React.ReactNode;\n    title: React.ReactNode;\n};\n\nconst InlineNoteWithIcon = ({ icon, message, font_size = 'xxxs', title }: TInlineNoteWithIconExtend) => {\n    return (\n        <div className='da-inline-note-with-icon'>\n            {icon && (\n                <div>\n                    <Icon icon={icon} size={16} />\n                </div>\n            )}\n            <Text as='p' size={font_size} line_height='s'>\n                {title && <strong> {title} </strong>}\n                {message}\n            </Text>\n        </div>\n    );\n};\n\nexport default InlineNoteWithIcon;\n","import InlineNoteWithIcon from './inline-note-with-icon';\nimport './inline-note-with-icon.scss';\n\nexport default InlineNoteWithIcon;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Field } from 'formik';\nimport { Dropdown, Text, SelectNative } from '@deriv/components';\nimport { useTranslations } from '@deriv-com/translations';\nimport { TTradingAssessmentForm, TQuestion } from 'Types';\nimport { MAX_QUESTION_TEXT_LENGTH } from '../../Constants/trading-assessment';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TradingAssessmentDropdownProps = {\n    disabled_items: string[];\n    item_list: TQuestion[];\n    onChange: (\n        e: React.ChangeEvent<HTMLSelectElement>,\n        form_control: keyof TTradingAssessmentForm,\n        setFieldValue: (field: string, value: string, shouldValidate?: boolean) => void\n    ) => void;\n    values: TTradingAssessmentForm;\n    setFieldValue: (field: string, value: string, shouldValidate?: boolean) => void;\n    setEnableNextSection: (enable: boolean) => void;\n};\n\ntype TField = {\n    field: {\n        name: string;\n        value: string;\n        onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n    };\n    meta: {\n        error: string;\n        touched: string;\n    };\n};\n\nconst TradingAssessmentDropdown = ({\n    disabled_items,\n    item_list,\n    onChange,\n    values,\n    setFieldValue,\n    setEnableNextSection,\n}: TradingAssessmentDropdownProps) => {\n    React.useEffect(() => {\n        checkIfAllFieldsFilled();\n    }, [values]);\n\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    const checkIfAllFieldsFilled = () => {\n        if (values) {\n            setEnableNextSection(\n                Boolean(\n                    values.cfd_experience &&\n                        values.cfd_frequency &&\n                        values.trading_experience_financial_instruments &&\n                        values.trading_frequency_financial_instruments\n                )\n            );\n        }\n    };\n\n    return (\n        <div className='trading-assessment__wrapper__dropdown'>\n            {item_list.map(question => (\n                <Field name={question.form_control} key={question.form_control}>\n                    {({ field, meta }: TField) => {\n                        const should_extend_trading_frequency_field =\n                            question.form_control === 'trading_frequency_financial_instruments' &&\n                            question?.question_text.length > MAX_QUESTION_TEXT_LENGTH;\n\n                        return (\n                            <React.Fragment>\n                                {isDesktop ? (\n                                    <Dropdown\n                                        {...field}\n                                        classNameDisplay={clsx({\n                                            'trading-frequency--field': should_extend_trading_frequency_field,\n                                        })}\n                                        is_align_text_left\n                                        name={question?.form_control}\n                                        placeholder={question?.question_text}\n                                        list={question?.answer_options}\n                                        onChange={e =>\n                                            onChange(\n                                                e as React.ChangeEvent<HTMLSelectElement>,\n                                                question.form_control,\n                                                setFieldValue\n                                            )\n                                        }\n                                        value={values[question.form_control]}\n                                        disabled={disabled_items.includes(question.form_control)}\n                                        error={meta.touched && meta.error}\n                                    />\n                                ) : (\n                                    <React.Fragment>\n                                        <Text as='h1' color='prominent' weight='bold' size='xs'>\n                                            {question?.question_text}\n                                        </Text>\n                                        <SelectNative\n                                            {...field}\n                                            placeholder={localize('Please select')}\n                                            label={localize('Please select')}\n                                            name={question?.form_control}\n                                            list_items={question?.answer_options}\n                                            onChange={e => {\n                                                onChange(e, question.form_control, setFieldValue);\n                                            }}\n                                            value={values[question.form_control]}\n                                            hide_top_placeholder\n                                            disabled={disabled_items.includes(question.form_control)}\n                                            error={meta.touched && meta.error}\n                                        />\n                                    </React.Fragment>\n                                )}\n                            </React.Fragment>\n                        );\n                    }}\n                </Field>\n            ))}\n        </div>\n    );\n};\n\nexport default TradingAssessmentDropdown;\n","export const MAX_QUESTION_TEXT_LENGTH = 90;\n","import React from 'react';\nimport { Field } from 'formik';\nimport { Text, RadioGroup } from '@deriv/components';\nimport { TTradingAssessmentForm } from 'Types';\n\ntype TradingAssessmentRadioButtonProps = {\n    disabled_items: string[];\n    text?: string;\n    list: { text: string; value: string }[];\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    values: TTradingAssessmentForm;\n    form_control: keyof TTradingAssessmentForm;\n    setEnableNextSection: (enable: boolean) => void;\n};\n\nconst TradingAssessmentRadioButton = ({\n    disabled_items,\n    text,\n    list,\n    onChange,\n    values,\n    form_control,\n    setEnableNextSection,\n}: TradingAssessmentRadioButtonProps) => {\n    React.useEffect(() => {\n        setEnableNextSection(!!values[form_control]);\n    }, [form_control, setEnableNextSection, values]);\n\n    return (\n        <div className='trading-assessment__wrapper__question'>\n            <Text as='h1' color='prominent' weight='bold' size='xs'>\n                {text}\n            </Text>\n            <Field name={form_control}>\n                {() => (\n                    <RadioGroup\n                        className='trading-assessment__wrapper__question--radio-group'\n                        name={form_control}\n                        should_wrap_items\n                        required\n                        selected={values[form_control]}\n                        onToggle={e => {\n                            onChange(e);\n                            setEnableNextSection(true);\n                        }}\n                    >\n                        {list.map(answer => (\n                            <RadioGroup.Item\n                                className='trading-assessment__wrapper__question--radio-group--item'\n                                key={answer.value}\n                                label={answer?.text}\n                                value={answer?.value}\n                                disabled={disabled_items.includes(form_control)}\n                            />\n                        ))}\n                    </RadioGroup>\n                )}\n            </Field>\n        </div>\n    );\n};\n\nexport default TradingAssessmentRadioButton;\n","import { ChangeEvent, Fragment, useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { Form, Formik, FormikErrors, FormikHelpers } from 'formik';\n\nimport { Button, Modal, Text } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, useTranslations } from '@deriv-com/translations';\n\nimport { TQuestion, TTradingAssessmentForm } from 'Types';\n\nimport { MAX_QUESTION_TEXT_LENGTH } from '../../Constants/trading-assessment';\nimport { getTradingAssessmentQuestions } from '../../Constants/trading-assessment-questions';\nimport ScrollToFieldWithError from '../forms/scroll-to-field-with-error';\nimport InlineNoteWithIcon from '../inline-note-with-icon';\n\nimport TradingAssessmentDropdown from './trading-assessment-dropdown';\nimport TradingAssessmentRadioButton from './trading-assessment-radio-buttons';\n\ntype TradingAssessmentFormProps = {\n    class_name?: string;\n    disabled_items: string[];\n    form_value: TTradingAssessmentForm;\n    getCurrentStep?: () => number;\n    onSubmit: (values?: TTradingAssessmentForm, should_override?: boolean) => void;\n    onCancel: (form_data: TTradingAssessmentForm) => void;\n    onSave?: (current_step: number, values: TTradingAssessmentForm) => void;\n    should_move_to_next: boolean;\n    setSubSectionIndex: (index: number) => void;\n    is_independent_section: boolean;\n    is_responsive?: boolean;\n};\n\nconst TradingAssessmentForm = observer(\n    ({\n        class_name,\n        disabled_items,\n        form_value,\n        getCurrentStep,\n        onSubmit,\n        onCancel,\n        onSave,\n        should_move_to_next,\n        setSubSectionIndex,\n        is_independent_section,\n        is_responsive,\n    }: TradingAssessmentFormProps) => {\n        const { traders_hub } = useStore();\n        const { localize } = useTranslations();\n        const { is_eu_user } = traders_hub;\n        const assessment_questions = getTradingAssessmentQuestions();\n        const stored_items = parseInt(localStorage.getItem('current_question_index') ?? '0');\n        const [is_section_filled, setIsSectionFilled] = useState(false);\n        const [current_question_details, setCurrentQuestionDetails] = useState({\n            current_question_index: 0,\n            current_question: assessment_questions[stored_items],\n        });\n        const [form_data, setFormData] = useState<TTradingAssessmentForm>({ ...form_value });\n        const last_question_index = assessment_questions.length - 1;\n        const should_display_previous_button = is_independent_section\n            ? current_question_details.current_question_index !== 0\n            : true;\n\n        type TField = keyof typeof form_value;\n\n        useEffect(() => {\n            setCurrentQuestionDetails(prevState => {\n                return {\n                    ...prevState,\n                    current_question_index: stored_items || 0,\n                    current_question: stored_items\n                        ? assessment_questions[stored_items]\n                        : assessment_questions[prevState.current_question_index],\n                };\n            });\n            if (!is_independent_section) {\n                setSubSectionIndex(stored_items);\n            }\n            setFormData(form_value);\n        }, []);\n\n        useEffect(() => {\n            if (should_move_to_next) displayNextPage();\n        }, [should_move_to_next]);\n\n        const displayNextPage = () => {\n            if (form_data.risk_tolerance === 'No') {\n                // onSubmit hold reference to a function that takes 2 params - values, should_override\n                onSubmit(form_data, true);\n            } else {\n                const next_question = current_question_details.current_question_index + 1;\n\n                if (next_question < assessment_questions.length) {\n                    setCurrentQuestionDetails(prev_state_question => {\n                        const next_state_question_index = prev_state_question.current_question_index + 1;\n                        localStorage.setItem('current_question_index', String(next_state_question_index));\n                        // Sub section form progress is not required when the section is independent\n                        if (!is_independent_section) {\n                            setSubSectionIndex(next_state_question_index);\n                        }\n                        return {\n                            current_question_index: next_state_question_index,\n                            current_question: assessment_questions[next_state_question_index],\n                        };\n                    });\n                }\n            }\n        };\n\n        const displayPreviousPage = () => {\n            const prev_question = current_question_details.current_question_index - 1;\n            if (prev_question >= 0) {\n                setCurrentQuestionDetails(prev_state_question => {\n                    const prev_state_question_index = prev_state_question.current_question_index - 1;\n                    localStorage.setItem('current_question_index', String(prev_state_question_index));\n                    if (!is_independent_section) {\n                        setSubSectionIndex(prev_state_question_index);\n                    }\n                    return {\n                        current_question_index: prev_state_question_index,\n                        current_question: assessment_questions[prev_state_question_index],\n                    };\n                });\n            } else {\n                onCancel(form_data);\n            }\n        };\n\n        const handleValueSelection = (\n            e: ChangeEvent<HTMLSelectElement> | ChangeEvent<HTMLInputElement>,\n            form_control: keyof TTradingAssessmentForm,\n            callBackFn: (form_control: keyof TTradingAssessmentForm, value: string) => void\n        ) => {\n            if (typeof e.persist === 'function') e.persist();\n            callBackFn(form_control, e.target.value);\n            setFormData(prev_form => ({ ...prev_form, [form_control]: e.target.value }));\n        };\n\n        const isAssessmentCompleted = (answers: TTradingAssessmentForm) =>\n            Object.values(answers).every(answer => Boolean(answer));\n\n        const nextButtonHandler = (\n            values: TTradingAssessmentForm,\n            { setTouched }: FormikHelpers<TTradingAssessmentForm>\n        ) => {\n            if (is_section_filled) {\n                if (isAssessmentCompleted(values) && stored_items === last_question_index) {\n                    onSubmit(values);\n                } else {\n                    setTouched({});\n                    displayNextPage();\n                }\n            }\n        };\n\n        const handleValidate = (values: TTradingAssessmentForm) => {\n            const current_step = (getCurrentStep?.() || 1) - 1;\n            onSave?.(current_step, values);\n\n            const errors: FormikErrors<TTradingAssessmentForm> = {};\n\n            if (!values.risk_tolerance && current_question_details.current_question.section === 'risk_tolerance') {\n                errors.risk_tolerance = 'error';\n            }\n            if (\n                !values.source_of_experience &&\n                current_question_details.current_question.section === 'source_of_experience'\n            ) {\n                errors.source_of_experience = 'error';\n            }\n            if (current_question_details.current_question.section === 'trading_experience') {\n                const trading_experience_required_fields: (keyof TTradingAssessmentForm)[] = [\n                    'cfd_experience',\n                    'cfd_frequency',\n                    'trading_experience_financial_instruments',\n                    'trading_frequency_financial_instruments',\n                ];\n                trading_experience_required_fields.forEach(field => {\n                    if (!values[field]) {\n                        errors[field] = localize('Please select an option');\n                    }\n                });\n            }\n            if (current_question_details.current_question.section === 'trading_knowledge') {\n                const trading_knowledge_required_fields: (keyof TTradingAssessmentForm)[] = [\n                    'cfd_trading_definition',\n                    'leverage_impact_trading',\n                    'leverage_trading_high_risk_stop_loss',\n                    'required_initial_margin',\n                ];\n                trading_knowledge_required_fields.forEach(field => {\n                    if (!values[field] && current_question_details.current_question.form_control === field) {\n                        errors[field] = 'error';\n                    }\n                });\n            }\n\n            return errors;\n        };\n\n        return (\n            <div className={clsx('trading-assessment', class_name)}>\n                {is_eu_user ? (\n                    <div className='details-form__banner-container'>\n                        <InlineNoteWithIcon\n                            icon='IcAlertWarning'\n                            message={localize(\n                                \"We collect this to ensure you’re aware of trading risks and assess our products' suitability for you.\"\n                            )}\n                            title={localize('Why do we collect this?')}\n                        />\n                    </div>\n                ) : (\n                    <Text as='p' color='prominent' size='xxs' className='trading-assessment__side-note'>\n                        <Localize i18n_default_text='In providing our services to you, we are required to obtain information from you in order to assess whether a given product or service is appropriate for you.' />\n                    </Text>\n                )}\n                <Formik initialValues={{ ...form_value }} validate={handleValidate} onSubmit={nextButtonHandler}>\n                    {({ errors, setFieldValue, values, setErrors, touched }) => {\n                        const { question_text, form_control, answer_options, questions } =\n                            current_question_details.current_question;\n                        const has_long_question = questions?.some(\n                            question => question.question_text.length > MAX_QUESTION_TEXT_LENGTH\n                        );\n                        const is_section_required = Object.keys(values).some(\n                            field => !!errors[field as TField] && !!touched[field as TField]\n                        );\n\n                        return (\n                            <Fragment>\n                                <Text weight='bold' size='xs' className='trading-assessment__question-counter'>\n                                    <Localize\n                                        i18n_default_text='Question {{ current }} of {{ total }}'\n                                        values={{\n                                            current: current_question_details.current_question_index + 1,\n                                            total: last_question_index + 1,\n                                        }}\n                                    />\n                                    <Text color='loss-danger' size='xxs'>\n                                        {is_section_required && <Localize i18n_default_text={'* This is required'} />}\n                                    </Text>\n                                </Text>\n                                <section className={'trading-assessment__form'}>\n                                    <Form noValidate className='trading-assessment__form--layout'>\n                                        <ScrollToFieldWithError should_recollect_inputs_names={is_section_filled} />\n                                        <div\n                                            className={clsx('trading-assessment__form--fields', {\n                                                'field-layout': has_long_question,\n                                            })}\n                                        >\n                                            {questions?.length ? (\n                                                <TradingAssessmentDropdown\n                                                    item_list={questions as TQuestion[]}\n                                                    onChange={handleValueSelection}\n                                                    values={values}\n                                                    setFieldValue={setFieldValue}\n                                                    setEnableNextSection={setIsSectionFilled}\n                                                    disabled_items={disabled_items ?? []}\n                                                />\n                                            ) : (\n                                                <TradingAssessmentRadioButton\n                                                    text={question_text}\n                                                    list={answer_options ?? []}\n                                                    onChange={e => {\n                                                        handleValueSelection(\n                                                            e,\n                                                            form_control as keyof TTradingAssessmentForm,\n                                                            setFieldValue\n                                                        );\n                                                    }}\n                                                    values={values}\n                                                    form_control={form_control as keyof TTradingAssessmentForm}\n                                                    setEnableNextSection={setIsSectionFilled}\n                                                    disabled_items={disabled_items ?? []}\n                                                />\n                                            )}\n                                        </div>\n                                        <Modal.Footer\n                                            has_separator\n                                            is_bypassed={is_responsive}\n                                            className='trading-assessment__existing_btn '\n                                        >\n                                            <Button.Group className='trading-assessment__btn-group'>\n                                                {should_display_previous_button && (\n                                                    <Button\n                                                        has_effect\n                                                        onClick={() => {\n                                                            setErrors({});\n                                                            displayPreviousPage();\n                                                        }}\n                                                        text={localize('Previous')}\n                                                        type='button'\n                                                        secondary\n                                                        large\n                                                        className='trading-assessment__btn-group--btn'\n                                                    />\n                                                )}\n                                                <Button\n                                                    has_effect\n                                                    text={localize('Next')}\n                                                    large\n                                                    primary\n                                                    className='trading-assessment__btn-group--btn'\n                                                    name='Next'\n                                                />\n                                            </Button.Group>\n                                        </Modal.Footer>\n                                    </Form>\n                                </section>\n                            </Fragment>\n                        );\n                    }}\n                </Formik>\n            </div>\n        );\n    }\n);\n\nexport default TradingAssessmentForm;\n","import { localize } from '@deriv/translations';\n\nexport const getTradingAssessmentQuestions = () => [\n    {\n        question_text: localize('Do you understand that you can lose all the money you use for trading?'),\n        section: 'risk_tolerance',\n        answer_options: [\n            { text: localize('Yes'), value: 'Yes' },\n            { text: localize('No'), value: 'No' },\n        ],\n        form_control: 'risk_tolerance',\n        field_type: 'radio',\n    },\n    {\n        question_text: localize('What expertise and experience do you have in online trading?'),\n        section: 'source_of_experience',\n        form_control: 'source_of_experience',\n        answer_options: [\n            {\n                text: localize(\n                    'I have an academic degree, professional certification, and/or work experience related to financial services.'\n                ),\n                value: 'I have an academic degree, professional certification, and/or work experience.',\n            },\n            {\n                text: localize(\n                    'I trade forex CFDs and other complex financial instruments regularly on other platforms.'\n                ),\n                value: 'I trade forex CFDs and other complex financial instruments.',\n            },\n            {\n                text: localize('I have attended seminars, training, and/or workshops related to trading.'),\n                value: 'I have attended seminars, training, and/or workshops.',\n            },\n            {\n                text: localize('I am interested in trading but have very little experience.'),\n                value: 'I have little experience.',\n            },\n            {\n                text: localize('I have no knowledge and experience in trading at all.'),\n                value: 'I have no knowledge.',\n            },\n        ],\n        field_type: 'radio',\n    },\n    {\n        section: 'trading_experience',\n        questions: [\n            {\n                question_text: localize('How much experience do you have in CFD trading?'),\n                field_type: 'dropdown',\n                form_control: 'cfd_experience',\n                answer_options: [\n                    {\n                        text: localize('No experience'),\n                        value: 'No experience',\n                    },\n                    {\n                        text: localize('Less than a year'),\n                        value: 'Less than a year',\n                    },\n                    {\n                        text: localize('1 - 2 years'),\n                        value: '1 - 2 years',\n                    },\n                    {\n                        text: localize('Over 3 years'),\n                        value: 'Over 3 years',\n                    },\n                ],\n            },\n            {\n                question_text: localize('How many CFD trades have you placed in the past 12 months?'),\n                field_type: 'dropdown',\n                form_control: 'cfd_frequency',\n                answer_options: [\n                    {\n                        text: localize('None'),\n                        value: 'No transactions in the past 12 months',\n                    },\n                    {\n                        text: '1 - 5',\n                        value: '1 - 5 transactions in the past 12 months',\n                    },\n                    {\n                        text: '6 - 10',\n                        value: '6 - 10 transactions in the past 12 months',\n                    },\n                    {\n                        text: '11 - 39',\n                        value: '11 - 39 transactions in the past 12 months',\n                    },\n                    {\n                        text: localize('40 or more'),\n                        value: '40 transactions or more in the past 12 months',\n                    },\n                ],\n            },\n            {\n                question_text: localize('How long have you been trading financial products other than CFDs?'),\n                field_type: 'dropdown',\n                form_control: 'trading_experience_financial_instruments',\n                answer_options: [\n                    {\n                        text: localize('No experience'),\n                        value: 'No experience',\n                    },\n                    {\n                        text: localize('Less than a year'),\n                        value: 'Less than a year',\n                    },\n                    {\n                        text: localize('1 - 2 years'),\n                        value: '1 - 2 years',\n                    },\n                    {\n                        text: localize('Over 3 years'),\n                        value: 'Over 3 years',\n                    },\n                ],\n            },\n            {\n                question_text: localize(\n                    'In the past 12 months, how many trades have you placed with financial products other than CFDs?'\n                ),\n                form_control: 'trading_frequency_financial_instruments',\n                field_type: 'dropdown',\n                answer_options: [\n                    {\n                        text: localize('None'),\n                        value: 'No transactions in the past 12 months',\n                    },\n                    {\n                        text: '1 - 5',\n                        value: '1 - 5 transactions in the past 12 months',\n                    },\n                    {\n                        text: '6 - 10',\n                        value: '6 - 10 transactions in the past 12 months',\n                    },\n                    {\n                        text: '11 - 39',\n                        value: '11 - 39 transactions in the past 12 months',\n                    },\n                    {\n                        text: localize('40 or more'),\n                        value: '40 transactions or more in the past 12 months',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        question_text: localize('In your understanding, CFD trading allows you to'),\n        section: 'trading_knowledge',\n        form_control: 'cfd_trading_definition',\n        field_type: 'radio',\n        answer_options: [\n            {\n                text: localize('Purchase commodities or shares of a company.'),\n                value: 'Purchase shares of a company or physical commodities.',\n            },\n            {\n                text: localize(\n                    'Place a position on the price movement of an asset where the outcome is a fixed return or nothing at all.'\n                ),\n                value: 'Place a bet on the price movement.',\n            },\n            {\n                text: localize('Speculate on the price movement of an asset without actually owning it.'),\n                value: 'Speculate on the price movement.',\n            },\n            {\n                text: localize('Make a long-term investment for a guaranteed profit.'),\n                value: 'Make a long-term investment.',\n            },\n        ],\n    },\n    {\n        question_text: localize('How does leverage affect CFD trading?'),\n        section: 'trading_knowledge',\n        form_control: 'leverage_impact_trading',\n        field_type: 'radio',\n        answer_options: [\n            {\n                text: localize('Leverage helps to mitigate risk.'),\n                value: 'Leverage is a risk mitigation technique.',\n            },\n            {\n                text: localize('Leverage prevents you from opening large positions.'),\n                value: 'Leverage prevents you from opening large positions.',\n            },\n            { text: localize('Leverage guarantees profits.'), value: 'Leverage guarantees profits.' },\n            {\n                text: localize(\n                    'Leverage lets you open large positions for a fraction of trade value, which may result in increased profit or loss.'\n                ),\n                value: \"Leverage lets you open larger positions for a fraction of the trade's value.\",\n            },\n        ],\n    },\n    {\n        question_text: localize(\n            'Leverage trading carries significant risks, making risk management tools like stop loss essential. What can stop loss do?'\n        ),\n        section: 'trading_knowledge',\n        form_control: 'leverage_trading_high_risk_stop_loss',\n        field_type: 'radio',\n        answer_options: [\n            {\n                text: localize('Cancel your trade at any time within a specified timeframe.'),\n                value: 'Cancel your trade at any time within a chosen timeframe.',\n            },\n            {\n                text: localize(\n                    'Close your trade automatically when the loss is equal to or more than a specified amount, as long as there is adequate market liquidity.'\n                ),\n                value: 'Close your trade automatically when the loss is more than or equal to a specific amount.',\n            },\n            {\n                text: localize(\n                    'Close your trade automatically when the profit is equal to or more than a specified amount, as long as there is adequate market liquidity.'\n                ),\n                value: 'Close your trade automatically when the profit is more than or equal to a specific amount.',\n            },\n            {\n                text: localize('Make a guaranteed profit on your trade.'),\n                value: 'Make a guaranteed profit on your trade.',\n            },\n        ],\n    },\n    {\n        question_text: localize('When are you required to pay an initial margin?'),\n        section: 'trading_knowledge',\n        form_control: 'required_initial_margin',\n        field_type: 'radio',\n        answer_options: [\n            {\n                text: localize('When opening a leveraged CFD trade.'),\n                value: 'When opening a Leveraged CFD trade.',\n            },\n            { text: localize('When trading multipliers.'), value: 'When trading Multipliers.' },\n            {\n                text: localize('When buying shares of a company.'),\n                value: 'When buying shares of a company.',\n            },\n            { text: localize('All of the above.'), value: 'All of the above.' },\n        ],\n    },\n];\n","import React from 'react';\nimport { GetFinancialAssessment, GetSettings } from '@deriv/api-types';\nimport { generateValidationFunction, getDefaultFields } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { getTradingAssessmentQuestions } from '../Constants/trading-assessment-questions';\n\ntype TTradingAssessmentConfig = {\n    account_settings: GetSettings;\n    financial_assessment: GetFinancialAssessment;\n    real_account_signup_target: string;\n    setSubSectionIndex: number;\n};\n\nconst default_form_config = {\n    supported_in: ['maltainvest'],\n};\n\nexport const getTradingAssessmentFormConfig = (financial_assessment: GetFinancialAssessment) => {\n    return {\n        risk_tolerance: {\n            ...default_form_config,\n            default_value: financial_assessment?.risk_tolerance ?? '',\n        },\n        source_of_experience: {\n            ...default_form_config,\n            default_value: financial_assessment?.source_of_experience ?? '',\n        },\n        cfd_experience: {\n            ...default_form_config,\n            default_value: financial_assessment?.cfd_experience ?? '',\n        },\n        cfd_frequency: {\n            ...default_form_config,\n            default_value: financial_assessment?.cfd_frequency ?? '',\n        },\n        trading_experience_financial_instruments: {\n            ...default_form_config,\n            default_value: financial_assessment?.trading_experience_financial_instruments ?? '',\n        },\n        trading_frequency_financial_instruments: {\n            ...default_form_config,\n            default_value: financial_assessment?.trading_frequency_financial_instruments ?? '',\n        },\n        cfd_trading_definition: {\n            ...default_form_config,\n            default_value: financial_assessment?.cfd_trading_definition ?? '',\n        },\n        leverage_impact_trading: {\n            ...default_form_config,\n            default_value: financial_assessment?.leverage_impact_trading ?? '',\n        },\n        leverage_trading_high_risk_stop_loss: {\n            ...default_form_config,\n            default_value: financial_assessment?.leverage_trading_high_risk_stop_loss ?? '',\n        },\n        required_initial_margin: {\n            ...default_form_config,\n            default_value: financial_assessment?.required_initial_margin ?? '',\n        },\n    };\n};\n\nconst tradingAssessmentConfig = (\n    {\n        real_account_signup_target,\n        financial_assessment,\n        account_settings,\n        setSubSectionIndex,\n    }: TTradingAssessmentConfig,\n    TradingAssessmentNewUser: React.Component\n) => {\n    const trading_assessment_form_config = getTradingAssessmentFormConfig(financial_assessment);\n    return {\n        header: {\n            active_title: localize('Complete your trading assessment'),\n            title: localize('Trading assessment'),\n        },\n        body: TradingAssessmentNewUser,\n        form_value: getDefaultFields(real_account_signup_target, trading_assessment_form_config),\n        props: {\n            validate: generateValidationFunction(real_account_signup_target, trading_assessment_form_config),\n            disabled_items: account_settings?.immutable_fields,\n            setSubSectionIndex,\n        },\n        sub_step_count: getTradingAssessmentQuestions().length,\n    };\n};\n\nexport default tradingAssessmentConfig;\n","import React from 'react';\nimport { Button, Icon, Modal, Text, MobileDialog } from '@deriv/components';\nimport { useTranslations } from '@deriv-com/translations';\nimport { useDevice } from '@deriv-com/ui';\n\ntype RiskToleranceWarningModalProps = {\n    show_risk_modal: boolean;\n    handleAcceptRisk: () => void;\n    title: string;\n    button_text?: string;\n    body_content: JSX.Element;\n    has_sub_header?: boolean;\n};\n\nconst RiskToleranceWarningModal = ({\n    show_risk_modal,\n    handleAcceptRisk,\n    title,\n    button_text,\n    body_content,\n    has_sub_header = false,\n}: RiskToleranceWarningModalProps) => {\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    return (\n        <React.Fragment>\n            {isDesktop ? (\n                <Modal\n                    width='44rem'\n                    title={title}\n                    height='41rem'\n                    is_open={show_risk_modal}\n                    className='center-risk-modal'\n                    toggleModal={handleAcceptRisk}\n                    has_close_icon={false}\n                >\n                    <Modal.Body>\n                        <Icon icon='IcRedWarning' size='63' />\n                        <Text as='p' size='xs' align='center' line_height='s' className='risk-acceptance__text'>\n                            {body_content}\n                        </Text>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            type='button'\n                            large\n                            text={button_text ?? localize('OK')}\n                            primary\n                            onClick={handleAcceptRisk}\n                        />\n                    </Modal.Footer>\n                </Modal>\n            ) : (\n                <MobileDialog\n                    visible={show_risk_modal}\n                    title={has_sub_header ? localize('Trading Experience Assessment') : title}\n                    portal_element_id='modal_root'\n                    has_close_icon={false}\n                >\n                    <Modal.Body className='risk-tolerance-modal'>\n                        {has_sub_header ? (\n                            <Text\n                                size='xs'\n                                line_height='s'\n                                weight='bold'\n                                as='p'\n                                className='risk-tolerance-modal__title'\n                            >\n                                {title}\n                                <div className='risk-tolerance-modal__title--separator' />\n                            </Text>\n                        ) : null}\n                        <div className='risk-tolerance-modal__wrapper'>\n                            <Icon icon='IcRedWarning' size='65' />\n                            <Text as='p' size='xs' align='center' line_height='l' className='risk-acceptance__text'>\n                                {body_content}\n                            </Text>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer className='risk-tolerance-modal__footer'>\n                        <Button\n                            type='button'\n                            large\n                            text={button_text ?? localize('OK')}\n                            primary\n                            onClick={handleAcceptRisk}\n                        />\n                    </Modal.Footer>\n                </MobileDialog>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default RiskToleranceWarningModal;\n","import React from 'react';\nimport { Button, Icon, Modal, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\n\nconst TradingExperienceModal = observer(() => {\n    const { client, ui } = useStore();\n    const { is_trading_experience_incomplete, cfd_score } = client;\n    const {\n        setShouldShowTradingAssessmentModal,\n        should_show_trading_assessment_modal,\n        setShouldShowTradeAssessmentForm,\n    } = ui;\n    React.useEffect(() => {\n        setShouldShowTradingAssessmentModal(cfd_score === 0);\n    }, []);\n\n    const handleOnSubmit = () => {\n        setShouldShowTradingAssessmentModal(false);\n        setShouldShowTradeAssessmentForm(true);\n    };\n\n    return (\n        <Modal\n            width='44rem'\n            className='center-risk-modal'\n            is_open={is_trading_experience_incomplete && should_show_trading_assessment_modal}\n        >\n            <Modal.Body>\n                <Icon icon='IcCurrencyEurCheck' size={95} />\n                <Text as='p' align='center' weight='bold' className='verified-account__text'>\n                    <Localize i18n_default_text='Trading Experience Assessment<0/>' components={[<br key={0} />]} />\n                </Text>\n                <Text as='p' size='xs' align='center'>\n                    <Localize\n                        i18n_default_text='As per our regulatory obligations, we are required to assess your trading knowledge and experience.<0/><0/>Please click ‘OK’ to continue'\n                        components={[<br key={0} />]}\n                    />\n                </Text>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button type='button' large text={localize('OK')} primary onClick={handleOnSubmit} />\n            </Modal.Footer>\n        </Modal>\n    );\n});\n\nexport default TradingExperienceModal;\n","import React from 'react';\nimport { Modal, MobileDialog } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport TradingAssessmentForm from '@deriv/account/src/Components/trading-assessment/trading-assessment-form';\nimport tradingAssessmentConfig from '@deriv/account/src/Configs/trading-assessment-config';\nimport RiskToleranceWarningModal from '@deriv/account/src/Components/trading-assessment/risk-tolerance-warning-modal';\nimport TradingExperienceModal from '../trading-experience-modal';\nimport './trading-assessment-existing-user.scss';\nimport { observer, useStore } from '@deriv/stores';\nimport { useDevice } from '@deriv-com/ui';\n\nconst TradingAssessmentExistingUser = observer(() => {\n    // Get the Trading assessment questions and initial_value\n    const { client, ui } = useStore();\n    const { isDesktop } = useDevice();\n    const {\n        setFinancialAndTradingAssessment,\n        updateAccountStatus,\n        landing_company_shortcode: active_account_landing_company,\n    } = client;\n    const {\n        should_show_risk_warning_modal,\n        setShouldShowRiskWarningModal,\n        setShouldShowWarningModal,\n        should_show_trade_assessment_form,\n        setShouldShowTradeAssessmentForm,\n        setShouldShowAssessmentCompleteModal,\n        setIsTradingAssessmentForExistingUserEnabled,\n        setIsTradingAssessmentForNewUserEnabled,\n        setShouldShowTradingAssessmentModal,\n        setSubSectionIndex,\n    } = ui;\n    const [form_values, setFormValue] = React.useState({});\n    const [assessment_questions, setAssessmentQuestions] = React.useState({});\n    const [should_move_to_next, setShouldMoveToNext] = React.useState(false);\n\n    React.useEffect(() => {\n        localStorage.removeItem('current_question_index');\n        setIsTradingAssessmentForExistingUserEnabled(true);\n        const { form_value, props } = tradingAssessmentConfig(\n            { real_account_signup_target: active_account_landing_company },\n            null\n        );\n        setFormValue(form_value);\n        setAssessmentQuestions(props.assessment_questions ?? []);\n        return () => setIsTradingAssessmentForExistingUserEnabled(false);\n    }, []);\n\n    const handleSubmit = async values => {\n        if (values.risk_tolerance === 'No') {\n            setShouldShowTradeAssessmentForm(false);\n            setShouldShowRiskWarningModal(true);\n        } else {\n            const form_payload = {\n                trading_experience_regulated: { ...values },\n            };\n            const response = await setFinancialAndTradingAssessment(form_payload);\n            const { trading_score } = response.set_financial_assessment ?? {};\n            await updateAccountStatus();\n            setShouldShowTradeAssessmentForm(false);\n            if (trading_score === 0) {\n                setShouldShowWarningModal(true);\n            } else {\n                setShouldShowAssessmentCompleteModal(true);\n            }\n            setIsTradingAssessmentForNewUserEnabled(true);\n        }\n    };\n\n    const handleAcceptRisk = () => {\n        setFormValue(prev_state => ({ ...prev_state, risk_tolerance: 'Yes' }));\n        setShouldMoveToNext(true);\n        setShouldShowRiskWarningModal(false);\n        setShouldShowTradeAssessmentForm(true);\n    };\n\n    const handleCancel = () => {\n        setShouldShowTradingAssessmentModal(true);\n        setShouldShowTradeAssessmentForm(false);\n    };\n\n    if (should_show_risk_warning_modal) {\n        return (\n            <RiskToleranceWarningModal\n                show_risk_modal={should_show_risk_warning_modal}\n                title={localize('Risk Tolerance Warning')}\n                button_text={localize('Yes, I understand the risk.')}\n                handleAcceptRisk={handleAcceptRisk}\n                body_content={\n                    <Localize\n                        i18n_default_text='CFDs and other financial instruments come with a high risk of losing money rapidly due to leverage. You should consider whether you understand how CFDs and other financial instruments work and whether you can afford to take the high risk of losing your money. <0/><0/> To continue, you must confirm that you understand your capital is at risk.'\n                        components={[<br key={0} />]}\n                    />\n                }\n                has_icon\n                has_sub_header\n            />\n        );\n    } else if (should_show_trade_assessment_form) {\n        return (\n            <React.Fragment>\n                {isDesktop ? (\n                    <Modal\n                        is_open={should_show_trade_assessment_form}\n                        title={localize('Trading Experience Assessment')}\n                        width='904px'\n                        has_close_icon={false}\n                        height='688px'\n                        className='real-account-signup-modal'\n                    >\n                        <TradingAssessmentForm\n                            assessment_questions={assessment_questions}\n                            form_value={form_values}\n                            onSubmit={handleSubmit}\n                            onCancel={handleCancel}\n                            setSubSectionIndex={setSubSectionIndex}\n                            class_name='trading-assessment--existing-user'\n                            should_move_to_next={should_move_to_next}\n                        />\n                    </Modal>\n                ) : (\n                    <MobileDialog\n                        visible={should_show_trade_assessment_form}\n                        title={localize('Trading Experience Assessment')}\n                        portal_element_id='modal_root'\n                        has_close_icon={false}\n                    >\n                        <TradingAssessmentForm\n                            assessment_questions={assessment_questions}\n                            form_value={form_values}\n                            onSubmit={handleSubmit}\n                            onCancel={handleCancel}\n                            setSubSectionIndex={setSubSectionIndex}\n                            class_name='trading-assessment--existing-user'\n                            should_move_to_next={should_move_to_next}\n                            is_responsive={!isDesktop}\n                        />\n                    </MobileDialog>\n                )}\n            </React.Fragment>\n        );\n    }\n    return <TradingExperienceModal />;\n});\n\nexport default TradingAssessmentExistingUser;\n","import TradingAssessmentExistingUser from './trading-assessment-existing-user';\n\nexport default TradingAssessmentExistingUser;\n"],"names":["ScrollToFieldWithError","fields_to_scroll_top","fields_to_scroll_bottom","should_recollect_inputs_names","all_page_inputs_names","setAllPageInputsNames","React","errors","isSubmitting","useFormikContext","scrollToElement","element_name","block","_el$parentElement","el","document","querySelector","target_element","parentElement","scrollIntoView","behavior","type","focus","inputs","querySelectorAll","map","input","name","current_error_field_name","find","input_name","Object","prototype","hasOwnProperty","call","includes","InlineNoteWithIcon","icon","message","font_size","title","_jsxs","className","children","_jsx","Icon","size","Text","as","line_height","TradingAssessmentDropdown","disabled_items","item_list","onChange","values","setFieldValue","setEnableNextSection","checkIfAllFieldsFilled","isDesktop","useDevice","localize","useTranslations","Boolean","cfd_experience","cfd_frequency","trading_experience_financial_instruments","trading_frequency_financial_instruments","question","Field","form_control","field","meta","should_extend_trading_frequency_field","question_text","length","Dropdown","_objectSpread","classNameDisplay","clsx","is_align_text_left","placeholder","list","answer_options","e","value","disabled","error","touched","color","weight","SelectNative","label","list_items","hide_top_placeholder","TradingAssessmentRadioButton","text","RadioGroup","should_wrap_items","required","selected","onToggle","answer","Item","observer","class_name","form_value","getCurrentStep","onSubmit","onCancel","onSave","should_move_to_next","setSubSectionIndex","is_independent_section","is_responsive","_localStorage$getItem","traders_hub","useStore","is_eu_user","assessment_questions","getTradingAssessmentQuestions","stored_items","parseInt","localStorage","getItem","is_section_filled","setIsSectionFilled","useState","current_question_details","setCurrentQuestionDetails","current_question_index","current_question","form_data","setFormData","last_question_index","should_display_previous_button","useEffect","prevState","displayNextPage","risk_tolerance","prev_state_question","next_state_question_index","setItem","String","handleValueSelection","callBackFn","persist","target","prev_form","Localize","i18n_default_text","Formik","initialValues","validate","current_step","section","source_of_experience","forEach","nextButtonHandler","setTouched","answers","every","setErrors","questions","has_long_question","some","is_section_required","keys","Fragment","current","total","Form","noValidate","Modal","Footer","has_separator","is_bypassed","Button","Group","has_effect","onClick","prev_state_question_index","secondary","large","primary","field_type","default_form_config","supported_in","tradingAssessmentConfig","real_account_signup_target","financial_assessment","account_settings","TradingAssessmentNewUser","trading_assessment_form_config","_financial_assessment","_financial_assessment2","_financial_assessment3","_financial_assessment4","_financial_assessment5","_financial_assessment6","_financial_assessment7","_financial_assessment8","_financial_assessment9","_financial_assessment10","default_value","cfd_trading_definition","leverage_impact_trading","leverage_trading_high_risk_stop_loss","required_initial_margin","getTradingAssessmentFormConfig","header","active_title","body","getDefaultFields","props","generateValidationFunction","immutable_fields","sub_step_count","RiskToleranceWarningModal","show_risk_modal","handleAcceptRisk","button_text","body_content","has_sub_header","width","height","is_open","toggleModal","has_close_icon","Body","align","MobileDialog","visible","portal_element_id","client","ui","is_trading_experience_incomplete","cfd_score","setShouldShowTradingAssessmentModal","should_show_trading_assessment_modal","setShouldShowTradeAssessmentForm","components","handleOnSubmit","setFinancialAndTradingAssessment","updateAccountStatus","landing_company_shortcode","active_account_landing_company","should_show_risk_warning_modal","setShouldShowRiskWarningModal","setShouldShowWarningModal","should_show_trade_assessment_form","setShouldShowAssessmentCompleteModal","setIsTradingAssessmentForExistingUserEnabled","setIsTradingAssessmentForNewUserEnabled","form_values","setFormValue","setAssessmentQuestions","setShouldMoveToNext","_props$assessment_que","removeItem","handleSubmit","async","_response$set_financi","form_payload","trading_experience_regulated","response","trading_score","set_financial_assessment","prev_state","handleCancel","has_icon","TradingAssessmentForm","TradingExperienceModal"],"sourceRoot":""}