{"version":3,"file":"js/core.chunk.account-signup-modal.78973846415b1162ad96.js","mappings":"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","sources":["webpack:///./App/Containers/CitizenshipModal/set-citizenship-form.jsx","webpack:///./App/Containers/AccountSignupModal/signup-separator-container.jsx","webpack:///./App/Containers/PasswordSelectionModal/password-selection-modal.jsx","webpack:///./App/Containers/QuestionnaireModal/index.ts","webpack:///./App/Containers/QuestionnaireModal/questionnaire-modal.tsx","webpack:///./App/Containers/AccountSignupModal/validate-signup-fields.jsx","webpack:///./App/Containers/AccountSignupModal/account-signup-modal.jsx","webpack:///./App/Containers/AccountSignupModal/index.js","webpack:///./App/Containers/SetResidenceModal/set-residence-form.jsx"],"sourcesContent":["import React from 'react';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { Autocomplete, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\n\nconst SetCitizenshipForm = ({ class_prefix, errors, touched, setFieldValue, citizenship_list }) => (\n    <div className={`${class_prefix}__residence-selection`}>\n        <Field name='citizenship'>\n            {({ field }) => (\n                <React.Fragment>\n                    <Autocomplete\n                        {...field}\n                        autoComplete='off'\n                        input_id='dt_core_set-citizenship-form_signup-citizenship-select'\n                        type='text'\n                        label={localize('Citizenship')}\n                        error={touched.citizenship && errors.citizenship}\n                        required\n                        list_items={citizenship_list}\n                        onItemSelection={({ value, text }) => setFieldValue('citizenship', value ? text : '', true)}\n                    />\n                </React.Fragment>\n            )}\n        </Field>\n        <Text as='p' size='xxs' className='account-signup__subtext' color='less-prominent'>\n            <Localize i18n_default_text='Select your citizenship/nationality as it appears on your passport or other government-issued ID.' />\n        </Text>\n    </div>\n);\n\nSetCitizenshipForm.propTypes = {\n    class_prefix: PropTypes.string,\n    citizenship_list: PropTypes.arrayOf(PropTypes.object),\n    errors: PropTypes.object,\n    setFieldTouched: PropTypes.func,\n    setFieldValue: PropTypes.func,\n    touched: PropTypes.object,\n};\n\nexport default SetCitizenshipForm;\n","import classNames from 'classnames';\nimport * as React from 'react';\n\nconst SignupSeparatorContainer = ({ children }) => <div className='signup-separator-container'>{children}</div>;\n\nconst SignupSeparatorContainerLine = ({ is_invisible }) => (\n    <div\n        className={classNames('signup-separator-container__line', {\n            'signup-separator-container__line--invisible': is_invisible,\n        })}\n    />\n);\n\nSignupSeparatorContainer.Line = SignupSeparatorContainerLine;\n\nexport default SignupSeparatorContainer;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Field } from 'formik';\nimport { Button, PasswordInput, PasswordMeter, Text } from '@deriv/components';\nimport { cacheTrackEvents, getErrorMessages, redirectToSignUp } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport SignupSeparatorContainer from '../AccountSignupModal/signup-separator-container.jsx';\nimport 'Sass/app/modules/account-signup.scss';\n\nconst PasswordSelectionModal = observer(\n    ({\n        api_error,\n        errors,\n        handleBlur,\n        handleChange,\n        isModalVisible,\n        isSubmitting,\n        touched,\n        pw_input,\n        setFieldTouched,\n        updatePassword,\n        values,\n    }) => {\n        const { ui } = useStore();\n        const { is_mobile } = ui;\n\n        React.useEffect(() => {\n            cacheTrackEvents.loadEvent([\n                {\n                    event: {\n                        name: 'ce_virtual_signup_form',\n                        properties: {\n                            action: 'password_screen_opened',\n                            form_name: is_mobile\n                                ? 'virtual_signup_web_mobile_default'\n                                : 'virtual_signup_web_desktop_default',\n                        },\n                    },\n                },\n            ]);\n        }, [is_mobile]);\n\n        return (\n            <div className='account-signup__password-selection'>\n                <Text\n                    as='p'\n                    size={is_mobile ? 'xs' : 's'}\n                    weight='bold'\n                    className='account-signup__heading'\n                    align='center'\n                >\n                    <Localize i18n_default_text='Keep your account secure with a password' />\n                </Text>\n                <Field name='password'>\n                    {({ field }) => (\n                        <PasswordMeter\n                            input={pw_input}\n                            has_error={!!(touched.password && errors.password)}\n                            custom_feedback_messages={getErrorMessages().password_warnings}\n                        >\n                            <PasswordInput\n                                {...field}\n                                autoComplete='new-password'\n                                className='account-signup__password-field'\n                                label={localize('Create a password')}\n                                error={touched.password && errors.password}\n                                required\n                                value={values.password}\n                                onBlur={handleBlur}\n                                onChange={e => {\n                                    const input = e.target;\n                                    setFieldTouched('password', true);\n                                    if (input) updatePassword(input.value);\n                                    handleChange(e);\n                                }}\n                                input_id='dt_core_account-signup-modal_account-signup-password-field'\n                            />\n                        </PasswordMeter>\n                    )}\n                </Field>\n\n                <Text as='p' size='xxs' className='account-signup__subtext' align='center'>\n                    <Localize i18n_default_text='Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.' />\n                </Text>\n                <SignupSeparatorContainer />\n                {api_error ? (\n                    <React.Fragment>\n                        <Text\n                            as='p'\n                            size='xxs'\n                            color='loss-danger'\n                            className='account-signup__subtext account-signup__subtext--error'\n                            align='center'\n                        >\n                            {api_error}\n                        </Text>\n                        <div className='account-signup__error-wrapper'>\n                            <Button\n                                large\n                                secondary\n                                text={localize('Cancel')}\n                                type='button'\n                                onClick={() => isModalVisible(false)}\n                            />\n                            <Button\n                                large\n                                primary\n                                text={localize('Create new account')}\n                                type='button'\n                                onClick={() => redirectToSignUp()}\n                            />\n                        </div>\n                    </React.Fragment>\n                ) : (\n                    <div className='account-signup__footer'>\n                        <Button\n                            className={classNames('account-signup__btn', {\n                                'account-signup__btn--disabled': !values.password || errors.password || isSubmitting,\n                            })}\n                            id='dt_core_account-signup-modal_submit-btn'\n                            type='submit'\n                            is_disabled={!values.password || !!errors.password || isSubmitting}\n                            text={localize('Start trading')}\n                            large\n                            primary\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n);\n\nexport default PasswordSelectionModal;\n","import QuestionnaireModal from './questionnaire-modal';\n\nexport default QuestionnaireModal;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Analytics } from '@deriv-com/analytics';\nimport { Button, Text } from '@deriv/components';\nimport './questionnaire-modal.scss';\n\ntype TAnswers = {\n    code: string;\n    text: string;\n    header?: string;\n};\ntype TABQuestionnaire = {\n    id: string;\n    question: string;\n    show_answers_in_random_order: boolean;\n    answers: TAnswers[];\n};\nexport type TQuestionnaireModal = {\n    ab_questionnaire: TABQuestionnaire[];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    handleSignup: (...args: any) => void;\n};\n\nconst QuestionnaireModal = ({ ab_questionnaire, handleSignup }: TQuestionnaireModal) => {\n    const a_variant = !!ab_questionnaire[1].answers?.[0]?.header;\n    React.useEffect(() => {\n        Analytics.trackEvent('ce_questionnaire_form', {\n            action: 'open',\n        });\n    }, [ab_questionnaire]);\n\n    const onClickAnswer = (answer_code: string, answer_index: number) => {\n        window.dataLayer = [\n            ...window.dataLayer,\n            {\n                event: 'ce_questionnaire_form',\n                analyticsData: {\n                    action: 'choose_answer',\n                    question: ab_questionnaire[0].question,\n                    answer_content: ab_questionnaire[0].answers.filter(({ code }) => code === answer_code)[0].text,\n                    answer_code,\n                    answer_index,\n                },\n            },\n        ];\n        handleSignup();\n    };\n\n    return (\n        <div className='questionnaire-modal'>\n            <Text as='h2' size='xs' weight='bold' align='center'>\n                {ab_questionnaire[1].question}\n            </Text>\n            <ul\n                className={classNames({\n                    'questionnaire-modal__answers': a_variant,\n                    'questionnaire-modal__options': !a_variant,\n                })}\n            >\n                {ab_questionnaire[1]?.answers?.map(({ code, text, header }, index) => {\n                    return (\n                        <li\n                            key={`${code}_questionnaire`}\n                            className={classNames({\n                                'questionnaire-modal__answers_content': a_variant,\n                                'questionnaire-modal__options_card': !a_variant,\n                            })}\n                        >\n                            <Button\n                                data-testid={`dt_questionnaire_${code}`}\n                                onClick={() => onClickAnswer(code, index + 1)}\n                                transparent\n                            >\n                                {header && (\n                                    <Text as='p' size='xs' weight='bold'>\n                                        {header}\n                                    </Text>\n                                )}\n                                <Text as='p' size='xs'>\n                                    {text}\n                                </Text>\n                            </Button>\n                        </li>\n                    );\n                })}\n            </ul>\n        </div>\n    );\n};\n\nexport default QuestionnaireModal;\n","import { validPassword, validLength, website_name, getErrorMessages } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nconst validateSignupFields = (values, residence_list) => {\n    const errors = {};\n\n    if (\n        !validLength(values.password, {\n            min: 8,\n            max: 25,\n        })\n    ) {\n        errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n            min_number: 8,\n            max_number: 25,\n        });\n    } else if (!validPassword(values.password)) {\n        errors.password = getErrorMessages().password();\n    }\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(\n            item => item.text.toLowerCase() === values.residence.toLowerCase()\n        );\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', {\n                website_name,\n            });\n        }\n    }\n\n    if (!values.citizenship) {\n        errors.citizenship = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(\n            item => item.text.toLowerCase() === values.citizenship.toLowerCase()\n        );\n\n        if (index_of_selection === -1) {\n            errors.citizenship = true;\n        }\n    }\n\n    return errors;\n};\n\nexport default validateSignupFields;\n","import React from 'react';\nimport { Form, Formik } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { Button, Checkbox, Dialog, Loading, Text } from '@deriv/components';\nimport { useGrowthbookGetFeatureValue } from '@deriv/hooks';\nimport { cacheTrackEvents, getLocation, SessionStore, setPerformanceValue, shuffleArray } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { getLanguage, localize } from '@deriv/translations';\nimport { Analytics } from '@deriv-com/analytics';\n\nimport { WS } from 'Services';\n\nimport CitizenshipForm from '../CitizenshipModal/set-citizenship-form.jsx';\nimport PasswordSelectionModal from '../PasswordSelectionModal/password-selection-modal.jsx';\nimport QuestionnaireModal from '../QuestionnaireModal';\nimport ResidenceForm from '../SetResidenceModal/set-residence-form.jsx';\n\nimport validateSignupFields from './validate-signup-fields.jsx';\n\nimport 'Sass/app/modules/account-signup.scss';\n\nconst AccountSignup = ({\n    enableApp,\n    is_mobile,\n    isModalVisible,\n    clients_country,\n    onSignup,\n    residence_list,\n    setIsFromSignupAccount,\n}) => {\n    const signupInitialValues = { citizenship: '', password: '', residence: '' };\n    const [api_error, setApiError] = React.useState(false);\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [country, setCountry] = React.useState('');\n    const history_value = React.useRef();\n    const [pw_input, setPWInput] = React.useState('');\n    const [is_password_modal, setIsPasswordModal] = React.useState(false);\n    const isPasswordModalRef = React.useRef(false);\n    const isCountryScreenLoggedOnceRef = React.useRef(false);\n    const [is_disclaimer_accepted, setIsDisclaimerAccepted] = React.useState(false);\n    const [is_questionnaire, setIsQuestionnaire] = React.useState(false);\n    const [ab_questionnaire, setABQuestionnaire] = React.useState();\n    const [modded_state, setModdedState] = React.useState({});\n    const language = getLanguage();\n\n    const [is_tracking_signup_errors] = useGrowthbookGetFeatureValue({\n        featureFlag: 'signup_flow_error',\n        defaultValue: true,\n    });\n\n    const checkResidenceIsBrazil = selected_country =>\n        selected_country && residence_list[indexOfSelection(selected_country)]?.value?.toLowerCase() === 'br';\n\n    const disableButton = (values, errors) =>\n        !(checkResidenceIsBrazil(values.residence) ? is_disclaimer_accepted : true) ||\n        !values.residence ||\n        !!errors.residence ||\n        !values.citizenship ||\n        !!errors.citizenship;\n\n    const updatePassword = new_password => {\n        setPWInput(new_password);\n    };\n\n    // didMount lifecycle hook\n    React.useEffect(() => {\n        // eslint-disable-next-line no-console\n\n        cacheTrackEvents.loadEvent([\n            {\n                event: {\n                    name: 'ce_virtual_signup_form',\n                    properties: {\n                        action: 'country_selection_screen_opened',\n                        form_name: is_mobile\n                            ? 'virtual_signup_web_mobile_default'\n                            : 'virtual_signup_web_desktop_default',\n                    },\n                },\n                cache: true,\n            },\n        ]);\n\n        cacheTrackEvents.loadEvent([\n            {\n                event: {\n                    name: 'ce_virtual_signup_form',\n                    properties: {\n                        action: 'signup_confirmed',\n                        form_name: is_mobile\n                            ? 'virtual_signup_web_mobile_default'\n                            : 'virtual_signup_web_desktop_default',\n                    },\n                },\n                cache: true,\n            },\n        ]);\n\n        WS.wait('website_status', 'residence_list').then(() => {\n            if (clients_country && residence_list) {\n                setCountry(getLocation(residence_list, clients_country, 'text'));\n            }\n            setIsLoading(false);\n        });\n        // need to modify data from ab testing platform to reach translation and tracking needs\n        const fetchQuestionnarieData = () => {\n            let ab_value = Analytics.getFeatureValue('questionnaire-config', 'inactive') || 'inactive';\n            const default_ab_value = ab_value;\n            ab_value = ab_value?.[language] ?? ab_value?.EN ?? ab_value;\n            if (ab_value?.show_answers_in_random_order) {\n                ab_value = [\n                    { ...default_ab_value?.default },\n                    {\n                        ...ab_value,\n                        answers: shuffleArray(ab_value?.answers),\n                    },\n                ];\n            } else if (ab_value !== 'inactive') ab_value = [{ ...default_ab_value?.default }, { ...ab_value }];\n            return ab_value;\n        };\n        setABQuestionnaire(fetchQuestionnarieData());\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const trackSignupErrorEvent = (action, errorMessage, screen_name) => {\n        const form_name = is_mobile ? 'virtual_signup_web_mobile_default' : 'virtual_signup_web_desktop_default';\n        cacheTrackEvents.loadEvent([\n            {\n                event: {\n                    name: 'ce_virtual_signup_form',\n                    properties: {\n                        action,\n                        form_name,\n                        error_message: errorMessage,\n                        screen_name,\n                    },\n                },\n            },\n        ]);\n    };\n\n    React.useEffect(() => {\n        isPasswordModalRef.current = is_password_modal; // Sync ref with state\n    }, [is_password_modal]);\n\n    React.useEffect(() => {\n        cacheTrackEvents.trackConsoleErrors(errorMessage => {\n            if (is_tracking_signup_errors) {\n                if (errorMessage) {\n                    const screen_name = !isPasswordModalRef.current\n                        ? 'country_selection_screen'\n                        : 'password_screen_opened';\n\n                    if (screen_name === 'country_selection_screen') {\n                        if (\n                            !isCountryScreenLoggedOnceRef.current ||\n                            isCountryScreenLoggedOnceRef.current !== errorMessage\n                        ) {\n                            trackSignupErrorEvent('signup_flow_error', errorMessage, screen_name);\n                            isCountryScreenLoggedOnceRef.current = errorMessage;\n                        }\n                    } else if (screen_name === 'password_screen_opened') {\n                        trackSignupErrorEvent('signup_flow_error', errorMessage, screen_name);\n                    }\n                }\n            }\n        });\n    }, [is_tracking_signup_errors]);\n\n    const validateSignupPassthrough = values => validateSignupFields(values, residence_list);\n\n    const indexOfSelection = selected_country =>\n        residence_list.findIndex(item => item.text.toLowerCase() === selected_country?.toLowerCase());\n\n    const handleSignup = () => onSignup(modded_state, onSignupComplete);\n\n    const onSignupPassthrough = values => {\n        const index_of_selected_residence = indexOfSelection(values.residence);\n        const index_of_selected_citizenship = indexOfSelection(values.citizenship);\n\n        const modded_values = {\n            ...values,\n            residence: residence_list[index_of_selected_residence].value,\n            citizenship: residence_list[index_of_selected_citizenship].value,\n        };\n        setModdedState(modded_values);\n\n        // a/b test\n        ab_questionnaire === 'inactive'\n            ? onSignup(modded_values, onSignupComplete)\n            : setIsQuestionnaire(!!ab_questionnaire);\n    };\n\n    const onSignupComplete = error => {\n        if (error) {\n            setApiError(error);\n\n            Analytics.trackEvent('ce_virtual_signup_form', {\n                action: 'signup_flow_error',\n                form_name: is_mobile ? 'virtual_signup_web_mobile_default' : 'virtual_signup_web_desktop_default',\n                error_message: error,\n                screen_name: 'password_screen_opened',\n            });\n        } else {\n            setIsFromSignupAccount(true);\n            isModalVisible(false);\n            SessionStore.remove('signup_query_param');\n            enableApp();\n\n            Analytics.trackEvent('ce_virtual_signup_form', {\n                action: 'signup_done',\n                form_name: is_mobile ? 'virtual_signup_web_mobile_default' : 'virtual_signup_web_desktop_default',\n            });\n        }\n    };\n\n    if (!is_loading) setPerformanceValue('signup_time');\n\n    return (\n        <div className='account-signup'>\n            {is_loading ? (\n                <Loading is_fullscreen={false} />\n            ) : (\n                <Formik\n                    initialValues={signupInitialValues}\n                    validate={validateSignupPassthrough}\n                    onSubmit={onSignupPassthrough}\n                    residence_list={residence_list}\n                >\n                    {({\n                        isSubmitting,\n                        handleBlur,\n                        errors,\n                        handleChange,\n                        values,\n                        setFieldValue,\n                        setFieldTouched,\n                        touched,\n                    }) => (\n                        <Form>\n                            {!is_password_modal ? (\n                                <div className='account-signup__location-selection'>\n                                    <Text\n                                        as='h1'\n                                        size={is_mobile ? 'xs' : 's'}\n                                        weight='bold'\n                                        className='account-signup__heading'\n                                    >\n                                        {localize('Select your country and citizenship:')}\n                                    </Text>\n                                    <ResidenceForm\n                                        class_prefix='account-signup'\n                                        errors={errors}\n                                        touched={touched}\n                                        onResidenceSelectionChanged={() => setIsDisclaimerAccepted(false)}\n                                        setFieldTouched={setFieldTouched}\n                                        setFieldValue={setFieldValue}\n                                        residence_list={residence_list}\n                                        default_value={country}\n                                        history_value={history_value.current}\n                                    />\n                                    <CitizenshipForm\n                                        class_prefix='account-signup'\n                                        errors={errors}\n                                        touched={touched}\n                                        setFieldTouched={setFieldTouched}\n                                        setFieldValue={setFieldValue}\n                                        citizenship_list={residence_list}\n                                    />\n                                    {checkResidenceIsBrazil(values.residence) && (\n                                        <Checkbox\n                                            checked={is_disclaimer_accepted}\n                                            onChange={() => setIsDisclaimerAccepted(!is_disclaimer_accepted)}\n                                            className='account-signup__checkbox'\n                                            classNameLabel='account-signup__label'\n                                            label={localize(\n                                                'I hereby confirm that my request for opening an account with Deriv to trade OTC products issued and offered exclusively outside Brazil was initiated by me. I fully understand that Deriv is not regulated by CVM and by approaching Deriv I intend to set up a relation with a foreign company.'\n                                            )}\n                                        />\n                                    )}\n                                    <div className='account-signup__footer'>\n                                        <Button\n                                            className='account-signup__btn'\n                                            is_disabled={disableButton(values, errors)}\n                                            type='button'\n                                            onClick={() => {\n                                                history_value.current = values;\n                                                setIsPasswordModal(true);\n                                            }}\n                                            primary\n                                            large\n                                            text={localize('Next')}\n                                        />\n                                    </div>\n                                </div>\n                            ) : (\n                                <React.Fragment>\n                                    {is_questionnaire ? (\n                                        <QuestionnaireModal\n                                            ab_questionnaire={ab_questionnaire}\n                                            handleSignup={handleSignup}\n                                        />\n                                    ) : (\n                                        <PasswordSelectionModal\n                                            api_error={api_error}\n                                            errors={errors}\n                                            handleBlur={handleBlur}\n                                            handleChange={handleChange}\n                                            isModalVisible={isModalVisible}\n                                            isSubmitting={isSubmitting}\n                                            touched={touched}\n                                            pw_input={pw_input}\n                                            setFieldTouched={setFieldTouched}\n                                            updatePassword={updatePassword}\n                                            values={values}\n                                        />\n                                    )}\n                                </React.Fragment>\n                            )}\n                        </Form>\n                    )}\n                </Formik>\n            )}\n        </div>\n    );\n};\n\nAccountSignup.propTypes = {\n    clients_country: PropTypes.string,\n    enableApp: PropTypes.func,\n    onSignup: PropTypes.func,\n    residence_list: PropTypes.array,\n    is_mobile: PropTypes.bool,\n    isModalVisible: PropTypes.func,\n    setIsFromSignupAccount: PropTypes.func,\n};\n\nconst AccountSignupModal = observer(() => {\n    const { ui, client } = useStore();\n    const { onSignup, is_logged_in, residence_list, clients_country, logout } = client;\n    const {\n        is_account_signup_modal_visible: is_visible,\n        toggleAccountSignupModal,\n        enableApp,\n        disableApp,\n        is_loading,\n        is_mobile,\n        setIsFromSignupAccount,\n    } = ui;\n\n    React.useEffect(() => {\n        // a logged in user should not be able to create a new account\n        if (is_visible && is_logged_in) {\n            logout();\n        }\n    }, [is_visible, is_logged_in, logout]);\n\n    return (\n        <Dialog\n            className='account-signup__dialog'\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_mobile_full_width={false}\n        >\n            <AccountSignup\n                clients_country={clients_country}\n                onSignup={onSignup}\n                residence_list={residence_list}\n                is_mobile={is_mobile}\n                isModalVisible={toggleAccountSignupModal}\n                enableApp={enableApp}\n                setIsFromSignupAccount={setIsFromSignupAccount}\n            />\n        </Dialog>\n    );\n});\n\nexport default AccountSignupModal;\n","import AccountSignupModal from './account-signup-modal.jsx';\n\nexport default AccountSignupModal;\n","import React from 'react';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { Autocomplete, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\n\nconst SetResidenceForm = ({\n    children,\n    class_prefix = 'set-residence',\n    default_value,\n    history_value,\n    errors,\n    onResidenceSelectionChanged,\n    touched,\n    setFieldTouched,\n    setFieldValue,\n    residence_list,\n}) => {\n    React.useEffect(() => {\n        if (default_value) {\n            setFieldTouched('residence', true);\n            setFieldValue('residence', default_value, true);\n        }\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <div className={`${class_prefix}__residence-selection`}>\n            <Field name='residence'>\n                {({ field }) => (\n                    <React.Fragment>\n                        <Autocomplete\n                            {...field}\n                            autoComplete='off'\n                            input_id='dt_core_set-residence-form_signup-residence-select'\n                            type='text'\n                            label={localize('Country of residence')}\n                            historyValue={history_value}\n                            error={touched.residence && errors.residence}\n                            required\n                            list_items={residence_list}\n                            onItemSelection={({ value, text }) => {\n                                setFieldValue('residence', value ? text : '', true);\n                                onResidenceSelectionChanged?.();\n                            }}\n                        />\n                    </React.Fragment>\n                )}\n            </Field>\n            {!errors?.residence?.length && (\n                <Text as='p' size='xxs' className='account-signup__subtext' color='less-prominent'>\n                    <Localize i18n_default_text='Select the country where you currently live.' />\n                </Text>\n            )}\n            <div className={`${class_prefix}__button_wrapper`}>{children}</div>\n        </div>\n    );\n};\n\nSetResidenceForm.propTypes = {\n    children: PropTypes.object,\n    class_prefix: PropTypes.string,\n    default_value: PropTypes.string,\n    history_value: PropTypes.string,\n    errors: PropTypes.object,\n    onResidenceSelectionChanged: PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n    setFieldTouched: PropTypes.func,\n    setFieldValue: PropTypes.func,\n    touched: PropTypes.object,\n};\n\nexport default SetResidenceForm;\n"],"names":["SetCitizenshipForm","class_prefix","errors","touched","setFieldValue","citizenship_list","_jsxs","className","children","_jsx","Field","name","field","React","Autocomplete","_objectSpread","autoComplete","input_id","type","label","localize","error","citizenship","required","list_items","onItemSelection","value","text","Text","as","size","color","Localize","i18n_default_text","propTypes","PropTypes","setFieldTouched","SignupSeparatorContainer","Line","SignupSeparatorContainerLine","is_invisible","classNames","observer","api_error","handleBlur","handleChange","isModalVisible","isSubmitting","pw_input","updatePassword","values","ui","useStore","is_mobile","cacheTrackEvents","loadEvent","event","properties","action","form_name","weight","align","PasswordMeter","input","has_error","password","custom_feedback_messages","getErrorMessages","password_warnings","PasswordInput","onBlur","onChange","e","target","Button","large","secondary","onClick","primary","redirectToSignUp","id","is_disabled","QuestionnaireModal","ab_questionnaire","handleSignup","_ab_questionnaire$1$a","_ab_questionnaire$","a_variant","answers","header","Analytics","trackEvent","question","map","code","index","onClickAnswer","answer_code","answer_index","window","dataLayer","analyticsData","answer_content","filter","transparent","validateSignupFields","residence_list","validLength","min","max","validPassword","min_number","max_number","residence","index_of_selection","findIndex","item","toLowerCase","disabled","website_name","AccountSignup","enableApp","clients_country","onSignup","setIsFromSignupAccount","setApiError","is_loading","setIsLoading","country","setCountry","history_value","setPWInput","is_password_modal","setIsPasswordModal","isPasswordModalRef","isCountryScreenLoggedOnceRef","is_disclaimer_accepted","setIsDisclaimerAccepted","is_questionnaire","setIsQuestionnaire","setABQuestionnaire","modded_state","setModdedState","language","getLanguage","is_tracking_signup_errors","useGrowthbookGetFeatureValue","featureFlag","defaultValue","checkResidenceIsBrazil","selected_country","_residence_list$index","indexOfSelection","disableButton","new_password","cache","WS","wait","then","getLocation","fetchQuestionnarieData","_ref","_ab_value$language","_ab_value","_ab_value2","_ab_value3","ab_value","getFeatureValue","default_ab_value","_ab_value4","EN","show_answers_in_random_order","default","shuffleArray","trackSignupErrorEvent","errorMessage","screen_name","error_message","current","trackConsoleErrors","onSignupComplete","SessionStore","remove","setPerformanceValue","Loading","is_fullscreen","Formik","initialValues","validate","onSubmit","index_of_selected_residence","index_of_selected_citizenship","modded_values","Form","PasswordSelectionModal","ResidenceForm","onResidenceSelectionChanged","default_value","CitizenshipForm","Checkbox","checked","classNameLabel","client","is_logged_in","logout","is_account_signup_modal_visible","is_visible","toggleAccountSignupModal","disableApp","Dialog","length","is_mobile_full_width","SetResidenceForm","_errors$residence","historyValue"],"sourceRoot":""}