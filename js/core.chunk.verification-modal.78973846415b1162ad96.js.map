{"version":3,"file":"js/core.chunk.verification-modal.78973846415b1162ad96.js","mappings":"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","sources":["webpack:///../../account/src/Components/icon-message-content/icon-message-content.tsx","webpack:///../../account/src/Components/icon-message-content/index.ts","webpack:///../../api/src/hooks/useAuthorize.ts","webpack:///../../api/src/hooks/useResidenceList.ts","webpack:///../../api/src/hooks/useSettings.ts","webpack:///../../api/src/useInvalidateQuery.ts","webpack:///../../account/src/Components/poa/status/expired/expired.tsx","webpack:///../../account/src/Components/poa/status/expired/index.ts","webpack:///../../account/src/Components/poa/status/not-required/index.ts","webpack:///../../account/src/Components/poa/status/not-required/not-required.tsx","webpack:///../../account/src/Components/load-error-message/load-error-message.tsx","webpack:///../../account/src/Components/load-error-message/index.ts","webpack:///../../account/src/Components/leave-confirm/leave-confirm.tsx","webpack:///../../account/src/Components/leave-confirm/index.ts","webpack:///../../account/src/Constants/api-error-codes.ts","webpack:///../../account/src/Components/file-uploader-container/file-uploader.tsx","webpack:///../../account/src/hooks/useKycAuthStatus.ts","webpack:///../../account/src/Constants/file-uploader.tsx","webpack:///../../account/src/Components/file-uploader-container/file-uploader-container.tsx","webpack:///../../account/src/Components/file-uploader-container/index.ts","webpack:///../../account/src/Components/file-uploader-container/files-descriptions.tsx","webpack:///../../account/src/Components/scrollbars-container/scrollbars-container.tsx","webpack:///../../account/src/Components/form-body/index.ts","webpack:///../../account/src/Components/form-body/form-body.tsx","webpack:///../../account/src/Components/form-footer/form-footer.tsx","webpack:///../../account/src/Components/form-footer/index.ts","webpack:///../../account/src/Components/poa/common-mistakes/common-mistake-examples.tsx","webpack:///../../account/src/Configs/poa-common-mistake-examples-config.tsx","webpack:///../../account/src/Sections/Verification/ProofOfAddress/poa-desktop-layout.tsx","webpack:///../../account/src/Sections/Verification/ProofOfAddress/poa-mobile-layout.tsx","webpack:///../../account/src/Sections/Verification/ProofOfAddress/proof-of-address-form.tsx","webpack:///../../account/src/Components/route-button/index.ts","webpack:///../../account/src/Components/route-button/route-button.tsx","webpack:///../../account/src/Components/poa/status/submitted/index.ts","webpack:///../../account/src/Components/poa/status/submitted/submitted.tsx","webpack:///../../account/src/Components/poa/status/unverified/index.ts","webpack:///../../account/src/Components/poa/status/unverified/unverified.tsx","webpack:///../../account/src/Components/poa/continue-trading-button/continue-trading-button.tsx","webpack:///../../account/src/Components/poi/poi-button/poi-button.tsx","webpack:///../../account/src/Components/poa/status/verified/verified.tsx","webpack:///../../account/src/Components/poa/status/verified/index.ts","webpack:///../../account/src/Sections/Verification/Helpers/verification.js","webpack:///../../account/src/Sections/Verification/ProofOfAddress/proof-of-address-container.tsx","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/proof-of-identity-utils.ts","webpack:///../../account/src/Components/icon-with-message/index.ts","webpack:///../../account/src/Components/icon-with-message/icon-with-message.tsx","webpack:///../../account/src/Components/demo-message/index.ts","webpack:///../../account/src/Components/demo-message/demo-message.tsx","webpack:///../../account/src/Components/error-component/error-component.tsx","webpack:///../../account/src/Components/error-component/index.ts","webpack:///../../account/src/Components/poi/status/expired/index.js","webpack:///../../account/src/Components/poi/status/expired/expired.tsx","webpack:///../../account/src/Components/poi/idv-status/idv-limited/idv-limited.tsx","webpack:///../../account/src/Components/poi/idv-status/idv-limited/index.ts","webpack:///../../account/src/Components/poa/poa-button/poa-button.tsx","webpack:///../../account/src/Components/poa/poa-button/index.ts","webpack:///../../account/src/Components/poi/idv-status/idv-submit-complete/idv-submit-complete.tsx","webpack:///../../account/src/Components/poi/idv-status/idv-submit-complete/index.js","webpack:///../../account/src/Components/poi/idv-status/idv-verified/idv-verified.tsx","webpack:///../../account/src/Components/poi/idv-status/idv-verified/index.js","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/idv.jsx","webpack:///../../account/src/Components/poi/status/limited/limited.tsx","webpack:///../../account/src/Components/poi/status/limited/index.js","webpack:///../../account/src/Components/poi/status/not-required/index.ts","webpack:///../../account/src/Components/poi/status/not-required/not-required.tsx","webpack:///../../account/src/Components/poi/status/upload-complete/upload-complete.tsx","webpack:///../../account/src/Components/poi/status/upload-complete/index.ts","webpack:///../../account/src/Components/poa/continue-trading-button/index.ts","webpack:///../../account/src/Components/poi/status/verified/verified.tsx","webpack:///../../account/src/Components/poi/status/verified/index.ts","webpack:///../../account/src/Components/icon-message-list/list-item.tsx","webpack:///../../account/src/Components/icon-message-list/index.ts","webpack:///../../account/src/Components/icon-message-list/icon-message-list.tsx","webpack:///../../account/src/Components/poi/status/rejected-reasons/index.ts","webpack:///../../account/src/Components/poi/status/rejected-reasons/rejected-reasons.tsx","webpack:///../../account/src/Components/poi-manual-upload-failed/index.ts","webpack:///../../account/src/Components/poi-manual-upload-failed/poi-manual-upload-failed.tsx","webpack:///../../account/src/Components/file-uploader-container/upload-file.ts","webpack:///../../account/src/Components/poi/missing-personal-details/missing-personal-details.tsx","webpack:///../../account/src/Components/poi/missing-personal-details/index.js","webpack:///../../account/src/Configs/poi-error-config.tsx","webpack:///../../account/src/Components/poi/poi-confirm-with-example-form-container/poi-confirm-with-example-form-container.tsx","webpack:///../../account/src/Components/poi/poi-confirm-with-example-form-container/index.ts","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/onfido-sdk-view.tsx","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/onfido-sdk-view-container.tsx","webpack:///../../account/src/Components/poi/status/unsupported/constants.ts","webpack:///../../account/src/Components/poi/status/unsupported/card-details/input-field.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-details/uploader.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-details/utils.ts","webpack:///../../account/src/Components/poi/status/unsupported/card-details/documents-upload.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-details/selfie-upload.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-details/card-details.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-details/index.ts","webpack:///../../account/src/Components/poi/status/unsupported/detail-component.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-with-arrow.tsx","webpack:///../../account/src/Components/poi/status/unsupported/documents.tsx","webpack:///../../account/src/Components/poi/status/unsupported/unsupported.tsx","webpack:///../../account/src/Components/poi/status/unsupported/index.js","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/onfido.jsx","webpack:///../../account/src/Components/poi/poi-country-selector/poi-country-selector.tsx","webpack:///../../account/src/Components/poi/poi-country-selector/index.ts","webpack:///../../account/src/Components/poi/idv-document-submit/idv-document-submit.tsx","webpack:///../../account/src/Components/poi/idv-document-submit/index.js","webpack:///../../account/src/Components/poi/idv-status/idv-failed/idv-failed.tsx","webpack:///../../account/src/Components/poi/idv-status/idv-failed/index.ts","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/proof-of-identity-submission.jsx","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/proof-of-identity-container.jsx","webpack:///./App/Containers/VerificationModal/verification-modal-content.tsx","webpack:///./App/Containers/VerificationModal/index.ts","webpack:///./App/Containers/VerificationModal/verification-modal.tsx","webpack:///../../hooks/src/useFileUploader.ts","webpack:///../../hooks/src/useNotificationEvent.ts","webpack:///../../hooks/src/useServiceToken.ts"],"sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { Div100vhContainer, Text } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TIconMessageContent = {\n    className?: string;\n    full_width?: boolean;\n    icon: React.ReactElement;\n    is_disabled_for_mobile?: boolean;\n    message: React.ReactNode;\n    text?: React.ReactNode;\n};\n\nconst IconMessageContent = ({\n    children,\n    className,\n    full_width,\n    icon,\n    is_disabled_for_mobile = false,\n    message,\n    text,\n}: React.PropsWithChildren<TIconMessageContent>) => {\n    const { isDesktop } = useDevice();\n\n    return (\n        <Div100vhContainer\n            className={clsx('account-management__message-wrapper', {\n                'account-management__message-wrapper-full-width': full_width,\n            })}\n            is_disabled={isDesktop || is_disabled_for_mobile}\n            height_offset='110px'\n        >\n            <div\n                className={clsx('account-management__message-content', {\n                    [`${className}__message-content`]: className,\n                })}\n            >\n                {icon && (\n                    <div\n                        className={clsx('account-management__message-icon', {\n                            [`${className}__message-icon`]: className,\n                        })}\n                    >\n                        {icon}\n                    </div>\n                )}\n                <Text\n                    as='div'\n                    color='general'\n                    weight='bold'\n                    align='center'\n                    className={clsx('account-management__message', {\n                        [`${className}__message`]: className,\n                    })}\n                >\n                    {message}\n                </Text>\n                {text && (\n                    <div className='account-management__text-container'>\n                        <Text\n                            className={clsx({\n                                [`${className}__text`]: className,\n                            })}\n                            as='p'\n                            size='xs'\n                            align='center'\n                        >\n                            {text}\n                        </Text>\n                    </div>\n                )}\n                {children}\n            </div>\n        </Div100vhContainer>\n    );\n};\n\nexport default IconMessageContent;\n","import IconMessageContent from './icon-message-content';\n\nexport default IconMessageContent;\n","import { useCallback, useMemo, useState } from 'react';\nimport { getActiveAuthTokenIDFromLocalStorage, getActiveLoginIDFromLocalStorage } from '@deriv/utils';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useQuery from '../useQuery';\nimport { useAPIContext } from '../APIProvider';\n\n/** A custom hook that authorize the user with the given token. If no token is given,\n * it will use the current token from localStorage.\n */\nconst useAuthorize = () => {\n    const current_token = getActiveAuthTokenIDFromLocalStorage();\n    const invalidate = useInvalidateQuery();\n    const { switchEnvironment, queryClient } = useAPIContext();\n\n    const [currentLoginID, setCurrentLoginID] = useState(getActiveLoginIDFromLocalStorage());\n\n    const { data, ...rest } = useQuery('authorize', {\n        payload: { authorize: current_token || '' },\n        options: {\n            enabled: Boolean(current_token),\n            // for authorise request - we cannot affort any race hazards due to it being randomly triggered\n            // e.g. during the process of swithcing account or smth\n            refetchOnWindowFocus: false,\n            refetchOnReconnect: false,\n        },\n    });\n\n    // Add additional information to the authorize response.\n    const modified_authorize = useMemo(() => ({ ...data?.authorize }), [data?.authorize]);\n\n    const switchAccount = useCallback(\n        (loginid: string) => {\n            const active_loginid = getActiveLoginIDFromLocalStorage();\n            if (active_loginid !== loginid) {\n                sessionStorage.setItem('active_loginid', loginid);\n                localStorage.setItem('active_loginid', loginid);\n                switchEnvironment(active_loginid);\n                // whenever we change the loginid, we need to invalidate all queries\n                // as there might be ongoing queries against previous loginid\n                // and we really do not want data from previous loginid, to be mixed with current loginid\n                queryClient.cancelQueries();\n                setCurrentLoginID(loginid);\n            }\n        },\n        [invalidate, switchEnvironment, currentLoginID]\n    );\n\n    return {\n        /** The authorize response. */\n        data: modified_authorize,\n        /** Function to switch to another account */\n        switchAccount,\n        currentLoginID,\n        ...rest,\n    };\n};\n\nexport default useAuthorize;\n","import { useMemo } from 'react';\n\nimport useQuery from '../useQuery';\n\n/** A custom hook that gets the residence list. */\nconst useResidenceList = () => {\n    const { data, ...residence_list_rest } = useQuery('residence_list');\n\n    /** Modify the residence list data. */\n    const modified_residence_list = useMemo(() => {\n        if (!data || !data.residence_list) return [];\n\n        return data.residence_list.map(residence => ({\n            ...residence,\n        }));\n    }, [data]);\n\n    return {\n        /** The residence list */\n        data: modified_residence_list,\n        ...residence_list_rest,\n    };\n};\n\nexport default useResidenceList;\n","import { useCallback, useMemo } from 'react';\nimport useAuthorize from './useAuthorize';\nimport useQuery from '../useQuery';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useMutation from '../useMutation';\n\ntype TSetSettingsPayload = NonNullable<\n    NonNullable<NonNullable<Parameters<ReturnType<typeof useMutation<'set_settings'>>['mutate']>>[0]>['payload']\n>;\n\n/** A custom hook to get and update the user settings. */\nconst useSettings = () => {\n    const { isSuccess } = useAuthorize();\n    const { data, ...rest } = useQuery('get_settings', { options: { enabled: isSuccess } });\n    const { mutate, ...mutate_rest } = useMutation('set_settings', { onSuccess: () => invalidate('get_settings') });\n    const invalidate = useInvalidateQuery();\n\n    const update = useCallback((payload: TSetSettingsPayload) => mutate({ payload }), [mutate]);\n\n    // Add additional information to the settings response.\n    const modified_settings = useMemo(() => {\n        const citizenship = data?.get_settings?.citizen ?? '';\n        const account = data?.get_settings?.account_opening_reason ?? '';\n        const placeofbirth = data?.get_settings?.place_of_birth ?? '';\n        const taxResidence = data?.get_settings?.tax_residence ?? '';\n        const taxIdentificationnumber = data?.get_settings?.tax_identification_number ?? '';\n\n        return {\n            ...data?.get_settings,\n            has_submitted_personal_details: Boolean(\n                citizenship && account && placeofbirth && taxResidence && taxIdentificationnumber\n            ),\n        };\n    }, [data?.get_settings]);\n\n    return {\n        /** The settings response. */\n        data: modified_settings,\n        /** Function to update user settings */\n        update,\n        /** The mutation related information */\n        mutation: mutate_rest,\n        ...rest,\n    };\n};\n\nexport default useSettings;\n","import { useCallback } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { TSocketEndpointNames } from '../types';\n\ntype TOptions = Parameters<ReturnType<typeof useQueryClient>['invalidateQueries']>[1];\n\nconst useInvalidateQuery = () => {\n    const queryClient = useQueryClient();\n\n    const invalidate = useCallback(\n        <T extends TSocketEndpointNames>(name: T | T[], options?: TOptions) => {\n            return queryClient.invalidateQueries(Array.isArray(name) ? name : [name], options);\n        },\n        [queryClient]\n    );\n\n    return invalidate;\n};\n\nexport default useInvalidateQuery;\n","import { Button, Icon, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport React from 'react';\nimport IconMessageContent from '../../../icon-message-content';\n\ntype TExpired = {\n    onClick: () => void;\n};\n\nexport const Expired = ({ onClick }: TExpired) => (\n    <div className='account-management__container'>\n        <IconMessageContent\n            message={<Localize i18n_default_text='New proof of address is needed' />}\n            text={\n                <Localize\n                    i18n_default_text='Your document for proof of address is expired. <0/>Please submit again.'\n                    components={[<br key={0} />]}\n                />\n            }\n            icon={<Icon icon='IcPoaUpload' size={128} />}\n        >\n            <Button onClick={onClick} has_effect primary>\n                <Text className='dc-btn__text' size='xs' weight='bold' as='p'>\n                    <Localize i18n_default_text='Resubmit' />\n                </Text>\n            </Button>\n        </IconMessageContent>\n    </div>\n);\n","import { Expired as PoaExpired } from './expired';\n\nexport default PoaExpired;\n","import { NotRequired as PoaNotRequired } from './not-required';\n\nexport default PoaNotRequired;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\nexport const NotRequired = () => (\n    <IconMessageContent\n        message={localize('Proof of address verification not required')}\n        text={localize(\n            'Your account does not need address verification at this time. We will inform you if address verification is required in the future.'\n        )}\n        icon={<Icon icon='IcPoaVerified' size={128} />}\n    />\n);\n","import { ReactNode } from 'react';\nimport { Icon } from '@deriv/components';\nimport IconMessageContent from '../icon-message-content';\n\ntype TLoadErrorMessage = {\n    error_message: ReactNode;\n};\n\nconst LoadErrorMessage = ({ error_message }: TLoadErrorMessage) => (\n    <IconMessageContent message={error_message} icon={<Icon icon='IcPoaLock' size={128} />} />\n);\n\nexport default LoadErrorMessage;\n","import LoadErrorMessage from './load-error-message';\n\nexport default LoadErrorMessage;\n","import React from 'react';\nimport { useHistory, useLocation, RouteComponentProps, withRouter } from 'react-router-dom';\nimport { FormikConsumer } from 'formik';\nimport { Button, Icon, Modal } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../icon-message-content';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TLeaveConfirmMessage = {\n    back: () => void;\n    leave: () => void;\n};\ntype TTransitionBlocker = RouteComponentProps & {\n    dirty: boolean;\n    onDirty?: (prop: boolean) => void;\n};\n\nconst LeaveConfirmMessage = ({ back, leave }: TLeaveConfirmMessage) => {\n    const { isMobile } = useDevice();\n\n    return (\n        <IconMessageContent\n            className='leave-confirm'\n            message={localize('Unsaved changes')}\n            text={localize('You have unsaved changes. Are you sure you want to discard changes and leave this page?')}\n            icon={<Icon icon='IcUnsavedChanges' size={isMobile ? 93 : 128} data_testid='dt_unsaved_changes_icon' />}\n            is_disabled_for_mobile={true}\n        >\n            <div className='account-management-flex-wrapper account-management-leave-confirm'>\n                <Button type='button' has_effect onClick={back} text={localize('Cancel')} secondary large={isMobile} />\n                <Button\n                    type='button'\n                    has_effect\n                    onClick={leave}\n                    text={localize('Leave Settings')}\n                    primary\n                    large={isMobile}\n                />\n            </div>\n        </IconMessageContent>\n    );\n};\n/**\n *\\ Blocks routing if Formik form is dirty\n * Has to be a child of <Formik> for FormikConsumer to work\n */\nexport const TransitionBlocker = ({ dirty, onDirty }: TTransitionBlocker) => {\n    const history = useHistory();\n    const location = useLocation();\n    const { isMobile } = useDevice();\n    const [showModal, setShowModal] = React.useState(false);\n    const [nextLocation, setNextLocation] = React.useState(location.pathname);\n    React.useEffect(() => {\n        const unblock = history.block((location: Location) => {\n            if (dirty && !showModal) {\n                if (onDirty) onDirty(false);\n                setNextLocation(location.pathname);\n                setShowModal(true);\n                return false;\n            }\n            return true;\n        });\n        return () => unblock();\n    }, [dirty, showModal, history, onDirty]);\n    const leave = React.useCallback(() => {\n        if (nextLocation) {\n            setShowModal(false);\n            history.push(nextLocation);\n            if (onDirty) {\n                onDirty(false);\n            }\n        }\n    }, [nextLocation, history, onDirty]);\n    const back = () => {\n        setShowModal(false);\n        setNextLocation(location.pathname);\n        if (onDirty) {\n            onDirty(true);\n        }\n    };\n    return (\n        <>\n            {showModal && isMobile ? (\n                <LeaveConfirmMessage back={back} leave={leave} />\n            ) : (\n                <Modal is_open={showModal} small toggleModal={back}>\n                    <Modal.Body>\n                        <LeaveConfirmMessage back={back} leave={leave} />\n                    </Modal.Body>\n                </Modal>\n            )}\n        </>\n    );\n};\n\nexport const TransitionBlockerWithRouter = withRouter(TransitionBlocker);\nconst LeaveConfirm = ({ onDirty }: { onDirty?: (prop: boolean) => void }) => {\n    return (\n        <FormikConsumer>\n            {formik => (\n                <TransitionBlockerWithRouter onDirty={onDirty} dirty={formik.dirty && formik.submitCount === 0} />\n            )}\n        </FormikConsumer>\n    );\n};\nexport default LeaveConfirm;\n","import LeaveConfirm from './leave-confirm';\n\nexport default LeaveConfirm;\n","/**\n * Object containing error code strings returned by the API.\n */\nexport const API_ERROR_CODES = Object.freeze({\n    DUPLICATE_ACCOUNT: 'DuplicateAccount',\n    CLAIMED_DOCUMENT: 'ClaimedDocument',\n    DUPLICATE_DOCUMENT: 'DuplicateUpload',\n});\n","import React from 'react';\nimport clsx from 'clsx';\nimport { FileDropzone, Icon, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport { getSupportedFiles, max_document_size, supported_filetypes } from '@deriv/shared';\nimport { DropzoneOptions } from 'react-dropzone';\nimport { useDevice } from '@deriv-com/ui';\nimport { TFile } from '../../Types';\n\ntype THandleRejectedFiles = DropzoneOptions['onDropRejected'];\n\ntype TFileUploaderProps = {\n    onFileDrop: (files: File[]) => void;\n    onError?: (error_message: string) => void;\n};\n\nconst UploadMessage = () => {\n    const { isDesktop, isMobile } = useDevice();\n\n    return (\n        <React.Fragment>\n            <Icon icon='IcUpload' className='dc-file-dropzone__message-icon' size={30} />\n            <div className='dc-file-dropzone__message-subtitle'>\n                <Text size='xxs' align='center' weight='bold' color='less-prominent'>\n                    {isDesktop ? (\n                        <Localize i18n_default_text='Drag and drop a file or click to browse your files.' />\n                    ) : (\n                        <Localize i18n_default_text='Click here to browse your files.' />\n                    )}\n                </Text>\n                <Text size={isMobile ? 'xxxxs' : 'xxxs'} align='center' color='less-prominent'>\n                    <Localize i18n_default_text='Remember, selfies, pictures of houses, or non-related images will be rejected.' />\n                </Text>\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst FileUploader = ({ onFileDrop, onError }: TFileUploaderProps) => {\n    const [document_files, setDocumentFiles] = React.useState<File[]>([]);\n    const [file_error, setFileError] = React.useState<string | null>(null);\n\n    React.useEffect(() => {\n        if (document_files) {\n            onFileDrop(document_files);\n            onError?.('');\n        }\n    }, [document_files, onFileDrop, onError]);\n\n    const handleAcceptedFiles = (files: File[]) => {\n        if (files.length > 0) {\n            setDocumentFiles(files);\n            setFileError(null);\n            onError?.('');\n        }\n    };\n\n    const handleRejectedFiles: THandleRejectedFiles = files => {\n        const is_file_too_large = files.length > 0 && files[0].file.size > max_document_size;\n        const supported_files = files.filter(each_file => getSupportedFiles(each_file.file.name));\n        const error_message =\n            is_file_too_large && supported_files.length > 0\n                ? localize('File size should be 8MB or less')\n                : localize('File uploaded is not supported');\n\n        setDocumentFiles([]);\n        onError?.(error_message);\n        setFileError(error_message);\n    };\n\n    const removeFile = () => {\n        setDocumentFiles([]);\n        setFileError(null);\n        onError?.('');\n    };\n\n    return (\n        <React.Fragment>\n            <FileDropzone\n                accept={supported_filetypes}\n                error_message={localize('Please upload supported file type.')}\n                filename_limit={26}\n                hover_message={localize('Drop files here..')}\n                max_size={max_document_size}\n                message={<UploadMessage />}\n                multiple={false}\n                onDropAccepted={handleAcceptedFiles}\n                onDropRejected={handleRejectedFiles}\n                validation_error_message={file_error}\n                value={document_files as TFile[]}\n            />\n            {((document_files && document_files?.length > 0) || file_error) && (\n                <div className='file-uploader__remove-btn-container'>\n                    <Icon\n                        icon='IcCloseCircle'\n                        className={clsx('file-uploader__remove-btn', {\n                            'file-uploader__remove-btn--error': file_error,\n                        })}\n                        onClick={removeFile}\n                        color='secondary'\n                        data_testid='dt_remove_file_icon'\n                    />\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default FileUploader;\n","import { useQuery } from '@deriv/api';\nimport { TSocketRequestPayload } from '@deriv/api/types';\nimport { useStore } from '@deriv/stores';\n\ntype TKycAuthStatusPayload = TSocketRequestPayload<'kyc_auth_status'>['payload'];\n\n/** Custom hook that returns Proof of Identity (POI) and Proof of Address (POA) authentication status details. */\nexport const useKycAuthStatus = (payload?: TKycAuthStatusPayload) => {\n    const { client } = useStore();\n\n    const { is_authorize } = client;\n    const { data, ...kyc_auth_status_rest } = useQuery('kyc_auth_status', {\n        payload,\n        options: { enabled: is_authorize },\n    });\n    return {\n        /** The KYC auth status */\n        kyc_auth_status: data?.kyc_auth_status,\n        ...kyc_auth_status_rest,\n    };\n};\n","import React from 'react';\nimport { TFilesDescription, TListItem } from '../Types';\nimport { localize, Localize } from '@deriv-com/translations';\n\nexport const getFileUploaderDescriptions = (page: string, is_eu?: boolean): TFilesDescription => {\n    const proof_of_income_descriptions = {\n        title: <Localize i18n_default_text='The document must be recent and include your name and address:' />,\n        descriptions: [\n            {\n                id: 'signed_document',\n                value: (\n                    <Localize i18n_default_text='The document must be up-to-date and signed by the issuance authority.' />\n                ),\n            },\n            {\n                id: 'contains_letterhead',\n                value: <Localize i18n_default_text='The document must contain a letterhead.' />,\n            },\n            {\n                id: 'invalid_rejected',\n                value: <Localize i18n_default_text='Invalid or incomplete documents shall be rejected.' />,\n            },\n        ],\n    };\n    const proof_of_address_descriptions = {\n        title: (\n            <Localize\n                i18n_default_text='Upload an original (unaltered) document that clearly shows your name and address, issued within the past {{expiry_in_months}} months. We accept:'\n                values={{ expiry_in_months: is_eu ? 6 : 12 }}\n            />\n        ),\n        descriptions: [\n            {\n                id: 'utility_bill',\n                value: (\n                    <Localize\n                        i18n_default_text='<0>Utility bill:</0> Electricity, water, gas, or landline phone bill.'\n                        components={[<strong key={0} />]}\n                    />\n                ),\n            },\n            {\n                id: 'financial_legal_government_document',\n                value: (\n                    <Localize\n                        i18n_default_text='<0>Financial, legal, or government document:</0> Recent bank statement, affidavit, or government-issued letter.'\n                        components={[<strong key={0} />]}\n                    />\n                ),\n            },\n            {\n                id: 'tenancy_agreement',\n                value: (\n                    <Localize\n                        i18n_default_text='<0>Tenancy agreement:</0> Valid and current agreement.'\n                        components={[<strong key={0} />]}\n                    />\n                ),\n            },\n        ],\n    };\n\n    if (page === 'poinc') return proof_of_income_descriptions;\n    if (page === 'poa') return proof_of_address_descriptions;\n    return { title: '', descriptions: [] };\n};\n\nexport const getSupportedProofOfAddressDocuments = (): Required<TListItem>[] => {\n    return [\n        {\n            value: 'utility_bill',\n            text: localize('Utility bill (electricity, water, gas)'),\n        },\n        {\n            value: 'phone_bill',\n            text: localize('Landline phone bill'),\n        },\n        {\n            value: 'bank_statement',\n            text: localize('Bank statement'),\n        },\n        {\n            value: 'affidavit',\n            text: localize('Official residence declaration or affidavit'),\n        },\n        {\n            value: 'official_letter',\n            text: localize('Official letter issued by the government or solicitor'),\n        },\n        {\n            value: 'rental_agreement',\n            text: localize('Rental/tenancy agreement'),\n        },\n        {\n            text: localize('Others'),\n            value: 'poa_others',\n        },\n    ];\n};\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors in this file\nimport React from 'react';\nimport { Autocomplete, Loading, Text } from '@deriv/components';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport FileUploader from './file-uploader';\nimport { useDevice } from '@deriv-com/ui';\nimport { useKycAuthStatus } from '../../hooks';\nimport { getSupportedProofOfAddressDocuments } from '../../Constants/file-uploader';\nimport { TListItem } from 'Types';\nimport { Field, FieldProps } from 'formik';\n\ntype TFileUploaderContainer = {\n    onFileDrop: (files: File[]) => void;\n    country_of_residence?: string;\n    files_description?: React.ReactNode;\n    examples?: React.ReactNode;\n    onError?: (error_message: string) => void;\n    placeholder?: string;\n};\n\nconst FileUploaderContainer = ({\n    examples,\n    files_description,\n    country_of_residence,\n    onFileDrop,\n    onError,\n    placeholder,\n}: TFileUploaderContainer) => {\n    const { isMobile } = useDevice();\n    const { localize } = useTranslations();\n    const { kyc_auth_status, isLoading } = useKycAuthStatus({ country: country_of_residence });\n    const [document_list, setDocumentList] = React.useState<Required<TListItem>[]>([]);\n\n    React.useEffect(() => {\n        if (kyc_auth_status) {\n            const { address } = kyc_auth_status;\n            const { supported_documents } = address;\n            const doc_list = getSupportedProofOfAddressDocuments().filter(doc =>\n                supported_documents?.includes(doc.value)\n            );\n            setDocumentList(doc_list);\n        }\n    }, [kyc_auth_status]);\n\n    if (isLoading) {\n        return <Loading is_fullscreen={false} />;\n    }\n\n    return (\n        <div className='file-uploader__container' data-testid='dt_file_uploader_container'>\n            {files_description}\n            {examples}\n            {country_of_residence && (\n                <React.Fragment>\n                    <Text size={isMobile ? 'xxs' : 'xs'} as='div' className='file-uploader__file-title' weight='bold'>\n                        <Localize i18n_default_text='Select the type of document:' />\n                    </Text>\n                    <Field name='document_type'>\n                        {({ field, form: { setFieldValue } }: FieldProps<string>) => (\n                            <Autocomplete\n                                {...field}\n                                data-lpignore='true'\n                                autoComplete='off'\n                                list_items={document_list}\n                                type='text'\n                                value={field.value}\n                                label={placeholder}\n                                placeholder={placeholder ?? localize('Select a document')}\n                                onItemSelection={(item: TListItem) => {\n                                    setFieldValue('document_type', item.text, true);\n                                }}\n                                required\n                            />\n                        )}\n                    </Field>\n                </React.Fragment>\n            )}\n            <Text size={isMobile ? 'xxs' : 'xs'} as='div' className='file-uploader__file-title' weight='bold'>\n                <Localize i18n_default_text='Upload file' />\n            </Text>\n            <div className='file-uploader__file-dropzone-wrapper'>\n                <FileUploader onError={onError} onFileDrop={onFileDrop} />\n            </div>\n            <div className='file-uploader__file-supported-formats'>\n                <Text size={isMobile ? 'xxxs' : 'xxs'}>\n                    <Localize i18n_default_text='Supported formats: JPEG, JPG, PNG, PDF, and GIF only' />\n                </Text>\n                <Text size={isMobile ? 'xxxs' : 'xxs'}>\n                    <Localize i18n_default_text='Maximum size: 8MB' />\n                </Text>\n            </div>\n        </div>\n    );\n};\n\nexport default FileUploaderContainer;\n","import FileUploaderContainer from './file-uploader-container';\n\nexport default FileUploaderContainer;\n","import { Text } from '@deriv/components';\nimport React from 'react';\nimport { TFilesDescription } from '../../Types';\nimport { useDevice } from '@deriv-com/ui';\n\nconst FilesDescription = ({ descriptions, title }: TFilesDescription) => {\n    const { isMobile } = useDevice();\n\n    return (\n        <div className='files-description'>\n            <Text size={isMobile ? 'xxs' : 'xs'} as='div' className='files-description__title' weight='bold'>\n                {title}\n            </Text>\n            <ul>\n                {descriptions.map(item => (\n                    <li key={item.id}>\n                        <Text size={isMobile ? 'xxs' : 'xs'} line_height={isMobile ? 'l' : 'xl'}>\n                            {item.value}\n                        </Text>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default FilesDescription;\n","import clsx from 'clsx';\nimport React from 'react';\nimport { ThemedScrollbars } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TScrollbarsContainer = {\n    className?: string;\n    scroll_offset?: string;\n    isFullHeight?: boolean;\n};\n\nexport const ScrollbarsContainer = ({\n    children,\n    className,\n    scroll_offset,\n    isFullHeight = false,\n}: React.PropsWithChildren<TScrollbarsContainer>) => {\n    const { isDesktop } = useDevice();\n    const height_unit = isFullHeight ? '100vh' : '100%';\n    return (\n        <ThemedScrollbars\n            is_bypassed={!isDesktop}\n            height={scroll_offset ? `calc(${height_unit} - ${scroll_offset})` : '100%'}\n        >\n            <div className={clsx('account__scrollbars_container', className)} data-testid='dt_scrollbar_container_div'>\n                {children}\n            </div>\n        </ThemedScrollbars>\n    );\n};\n","import { FormBody } from './form-body';\n\nexport default FormBody;\n","// [TODO] - To be removed once CFD is configured to use the new form-body component\nimport React, { PropsWithChildren, Fragment } from 'react';\nimport { ScrollbarsContainer } from '../scrollbars-container/scrollbars-container';\nimport { Div100vhContainer } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport clsx from 'clsx';\n\ntype TFormBody = {\n    scroll_offset?: string;\n    className?: string;\n    isFullHeight?: boolean;\n};\n\nexport const FormBody = ({ children, scroll_offset, className, isFullHeight }: PropsWithChildren<TFormBody>) => {\n    const { isDesktop } = useDevice();\n    return (\n        <Fragment>\n            {isDesktop ? (\n                <ScrollbarsContainer\n                    className={clsx('account__scrollbars_container--grid-layout', className)}\n                    scroll_offset={scroll_offset}\n                    isFullHeight={isFullHeight}\n                >\n                    {children}\n                </ScrollbarsContainer>\n            ) : (\n                <Div100vhContainer\n                    className={clsx('account__scrollbars_container--grid-layout', className)}\n                    height_offset={scroll_offset || '100%'}\n                >\n                    {children}\n                </Div100vhContainer>\n            )}\n        </Fragment>\n    );\n};\n","import React from 'react';\nimport clsx from 'clsx';\n\nexport type TFormFooter = {\n    className?: string;\n};\n\nconst FormFooter = ({ children, className }: React.PropsWithChildren<TFormFooter>) => (\n    <div className={clsx('account-form__footer', className)} data-testid='form-footer-container'>\n        {children}\n    </div>\n);\n\nexport default FormFooter;\n","import FormFooter from './form-footer';\n\nexport default FormFooter;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { Localize } from '@deriv/translations';\nimport { useStore } from '@deriv/stores';\nimport { getExampleImagesConfig } from '../../../Configs/poa-common-mistake-examples-config';\nimport { LegacyLossIcon } from '@deriv/quill-icons';\nimport './common-mistake-examples.scss';\n\ntype TCommonMistakeExamplePartialsProps = {\n    description: JSX.Element;\n    image: React.ReactElement;\n};\n\n/**\n * Wrapper for displaying the image and description of the mistake\n * @name CommonMistakeExamplePartials\n * @param description - description of the mistake\n * @param image - Sample image\n * @returns  React.ReactElement\n */\nconst CommonMistakeExamplePartials = ({ description, image }: TCommonMistakeExamplePartialsProps) => (\n    <div className='common-mistake-examples__content-layout'>\n        {image}\n        <div className='common-mistake-examples__content-description'>\n            <LegacyLossIcon iconSize='xs' />\n            <Text size='xxxs' line_height='s' role='document'>\n                {description}\n            </Text>\n        </div>\n    </div>\n);\n\n/**\n * Displays the image and description of the mistake\n * @returns React.ReactElement\n */\nconst CommonMistakeExamples = () => {\n    const { isDesktop } = useDevice();\n    const { client } = useStore();\n    const { is_eu } = client;\n    const example_images = getExampleImagesConfig(is_eu);\n    return (\n        <React.Fragment>\n            <Text as='div' weight='bold' size={isDesktop ? 'xs' : 'xxs'} className='common-mistake-examples__title'>\n                <Localize i18n_default_text='Common mistakes' />\n            </Text>\n            <div className='common-mistake-examples__content'>\n                {example_images.map(config => (\n                    <CommonMistakeExamplePartials\n                        key={config.ref}\n                        description={config.description}\n                        image={<config.image />}\n                    />\n                ))}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default CommonMistakeExamples;\n","import React from 'react';\nimport { Localize } from '@deriv/translations';\nimport {\n    DerivLightIcBlurryDocumentIcon,\n    DerivLightIcCroppedDocumentIcon,\n    DerivLightIcDocumentAddressMismatchIcon,\n    DerivLightIcDocumentNameMismatchIcon,\n    DerivLightIcEnvelopeIcon,\n    DerivLightIcOldIssuedDocumentMoreThan12Icon,\n    DerivLightIcOldIssuedDocumentMoreThan6Icon,\n} from '@deriv/quill-icons';\n\ntype TExampleImageConfig = {\n    image: React.ComponentType<React.SVGAttributes<SVGElement>>;\n    description: JSX.Element;\n    ref: string;\n};\n/**\n * Returns a configuration containing images and descriptions for common POA document upload mistakes\n * @returns Array of objects containing image and description\n */\nexport const getExampleImagesConfig = (is_eu: boolean): Array<TExampleImageConfig> => [\n    {\n        image: DerivLightIcDocumentNameMismatchIcon,\n        description: <Localize i18n_default_text='Name in document doesn’t match your Deriv profile.' />,\n        ref: 'name_mismatch',\n    },\n    {\n        image: DerivLightIcDocumentAddressMismatchIcon,\n        description: <Localize i18n_default_text='Address in document doesn’t match address you entered above.' />,\n        ref: 'address_mismatch',\n    },\n    {\n        ...(is_eu\n            ? {\n                  image: DerivLightIcOldIssuedDocumentMoreThan6Icon,\n                  description: <Localize i18n_default_text='Document issued more than 6-months ago.' />,\n                  ref: 'old_6_month_issued_document',\n              }\n            : {\n                  image: DerivLightIcOldIssuedDocumentMoreThan12Icon,\n                  description: <Localize i18n_default_text='Document issued more than 12-months ago.' />,\n                  ref: 'old_12_month_issued_document',\n              }),\n    },\n    {\n        image: DerivLightIcBlurryDocumentIcon,\n        description: <Localize i18n_default_text='Blurry document. All information must be clear and visible.' />,\n        ref: 'blurry_document',\n    },\n    {\n        image: DerivLightIcCroppedDocumentIcon,\n        description: <Localize i18n_default_text='Cropped document. All information must be clear and visible.' />,\n        ref: 'cropped_document',\n    },\n    {\n        image: DerivLightIcEnvelopeIcon,\n        description: <Localize i18n_default_text='An envelope with your name and address.' />,\n        ref: 'envelope',\n    },\n];\n","// Need to import React since it is used in CFD\nimport React from 'react';\nimport { useDevice } from '@deriv-com/ui';\nimport { ThemedScrollbars, FormSubmitButton, Button, InlineMessage, Modal, Text } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport FileUploaderContainer from '../../../Components/file-uploader-container';\nimport FilesDescription from '../../../Components/file-uploader-container/files-descriptions';\nimport FormBody from '../../../Components/form-body';\nimport FormBodySection from '../../../Components/form-body-section';\nimport FormFooter from '../../../Components/form-footer';\nimport FormSubHeader from '../../../Components/form-sub-header';\nimport CommonMistakeExamples from '../../../Components/poa/common-mistakes/common-mistake-examples';\nimport { Form, useFormikContext } from 'formik';\nimport PersonalDetailsForm from '../../../Components/forms/personal-details-form.jsx';\nimport { getFileUploaderDescriptions } from '../../../Constants/file-uploader';\nimport { TPOAFormState } from '../../../Types';\nimport { useTranslations, Localize } from '@deriv-com/translations';\n\ntype TPOADesktopLayout = {\n    className?: string;\n    setOffset: (status: { msg: string }) => string;\n    is_for_cfd_modal?: boolean;\n    is_resubmit?: boolean;\n    setDocumentFiles: (files: File[]) => void;\n    document_files: File[];\n    form_state: TPOAFormState;\n};\n\nconst POADesktopLayout = observer(\n    ({\n        className,\n        setOffset,\n        is_for_cfd_modal,\n        is_resubmit,\n        setDocumentFiles,\n        document_files,\n        form_state,\n    }: TPOADesktopLayout) => {\n        const { status, handleSubmit, isSubmitting, isValid } = useFormikContext();\n        const { isDesktop } = useDevice();\n        const { client } = useStore();\n        const [file_selection_error, setFileSelectionError] = React.useState<string | null>(null);\n        const { localize } = useTranslations();\n        const { states_list, account_settings, is_eu, getChangeableFields } = client;\n        const changeable_fields = getChangeableFields();\n        const poa_uploader_files_descriptions = React.useMemo(() => getFileUploaderDescriptions('poa', is_eu), []);\n\n        return (\n            <Form noValidate className='account-form account-form_poa' onSubmit={handleSubmit}>\n                <ThemedScrollbars height='572px' is_bypassed={!is_for_cfd_modal || !isDesktop} className={className}>\n                    <FormBody scroll_offset={setOffset(status)} isFullHeight={!isDesktop}>\n                        {(status?.msg || is_resubmit) && (\n                            <InlineMessage\n                                type='error'\n                                message={\n                                    <Text as='p' size='xs'>\n                                        {!status?.msg && is_resubmit && (\n                                            <Localize i18n_default_text='We were unable to verify your address with the details you provided. Please check and resubmit or choose a different document type.' />\n                                        )}\n                                        {status?.msg}\n                                    </Text>\n                                }\n                                id='dt_poa_submit-error'\n                            />\n                        )}\n                        <FormSubHeader title={localize('Enter your address')} title_text_size='s' />\n                        <PersonalDetailsForm\n                            /* eslint-disable @typescript-eslint/ban-ts-comment */\n                            // @ts-nocheck This needs to fixed in PersonalDetailsForm\n                            is_qualified_for_poa\n                            editable_fields={changeable_fields}\n                            states_list={states_list}\n                        />\n                        <FormSubHeader title={localize('Submit your document')} title_text_size='s' />\n                        <FormBodySection>\n                            <FileUploaderContainer\n                                onFileDrop={files => {\n                                    setDocumentFiles(files);\n                                }}\n                                onError={setFileSelectionError}\n                                files_description={\n                                    <FilesDescription\n                                        title={poa_uploader_files_descriptions.title}\n                                        descriptions={poa_uploader_files_descriptions.descriptions}\n                                    />\n                                }\n                                examples={<CommonMistakeExamples />}\n                                country_of_residence={account_settings?.country_code as string}\n                                placeholder={localize('Type of document')}\n                            />\n                        </FormBodySection>\n                    </FormBody>\n                </ThemedScrollbars>\n                {is_for_cfd_modal ? (\n                    <Modal.Footer has_separator>\n                        <FormSubmitButton\n                            is_disabled={\n                                isSubmitting ||\n                                !isValid ||\n                                (document_files && document_files.length < 1) ||\n                                !!file_selection_error\n                            }\n                            label={localize('Continue')}\n                            is_loading={isSubmitting}\n                        />\n                    </Modal.Footer>\n                ) : (\n                    <FormFooter className='account-form__footer-poa'>\n                        <Button\n                            className='account-form__footer-btn'\n                            type='submit'\n                            is_disabled={\n                                isSubmitting ||\n                                !isValid ||\n                                (document_files && document_files.length < 1) ||\n                                !!file_selection_error\n                            }\n                            has_effect\n                            is_loading={form_state.is_btn_loading}\n                            is_submit_success={form_state.is_submit_success}\n                            text={localize('Save and submit')}\n                            primary\n                        />\n                    </FormFooter>\n                )}\n            </Form>\n        );\n    }\n);\n\nexport default POADesktopLayout;\n","import React from 'react';\nimport { observer, useStore } from '@deriv/stores';\nimport { Text, InlineMessage, Button } from '@deriv/components';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport clsx from 'clsx';\nimport { useFormikContext, Form } from 'formik';\nimport FormBody from '../../../Components/form-body';\nimport PersonalDetailsForm from '../../../Components/forms/personal-details-form.jsx';\nimport { TPOAFormState } from '../../../Types';\nimport FormFooter from '../../../Components/form-footer';\nimport FileUploaderContainer from '../../../Components/file-uploader-container';\nimport FilesDescription from '../../../Components/file-uploader-container/files-descriptions';\nimport CommonMistakeExamples from '../../../Components/poa/common-mistakes/common-mistake-examples';\nimport { getFileUploaderDescriptions } from '../../../Constants/file-uploader';\nimport { LabelPairedArrowLeftMdBoldIcon } from '@deriv/quill-icons';\nimport './poa-mobile-layout.scss';\n\ntype TPOAMobileLayout = {\n    className?: string;\n    setOffset: (status: { msg: string }) => string;\n    is_for_cfd_modal?: boolean;\n    is_resubmit?: boolean;\n    setDocumentFiles: (files: File[]) => void;\n    document_files: File[];\n    form_state: TPOAFormState;\n};\n\ntype TFormInitialValues = Record<\n    'address_line_1' | 'address_line_2' | 'address_city' | 'address_state' | 'address_postcode',\n    string\n> & {\n    document_type?: Record<'text' | 'value', string>;\n};\n\nconst ProgressBar = ({ is_active }: { is_active: boolean }) => (\n    <div className='progress-container'>\n        <div className={clsx('progress-bar', { 'progress-bar--animate': is_active })} />\n    </div>\n);\n\nconst POAMobileLayout = observer(\n    ({ setOffset, is_resubmit, form_state, document_files, setDocumentFiles, is_for_cfd_modal }: TPOAMobileLayout) => {\n        const { localize } = useTranslations();\n        const { status, handleSubmit, isSubmitting, isValid, values, errors } = useFormikContext<TFormInitialValues>();\n        const { client } = useStore();\n        const [file_selection_error, setFileSelectionError] = React.useState<string | null>(null);\n        const [step, setStep] = React.useState({ id: 1, text: localize('Enter your address') });\n\n        const { states_list, account_settings, is_eu, getChangeableFields } = client;\n\n        const changeable_fields = getChangeableFields();\n        const poa_uploader_files_descriptions = React.useMemo(() => getFileUploaderDescriptions('poa', is_eu), [is_eu]);\n\n        const isNextBtnDisabled = React.useMemo(() => {\n            if (step.id === 2) {\n                return false;\n            }\n            return (\n                !values.address_line_1 ||\n                !!errors.address_line_1 ||\n                !!errors.address_line_2 ||\n                !values.address_city ||\n                !!errors.address_city ||\n                !!errors.address_state ||\n                !!errors.address_postcode\n            );\n        }, [values, errors, step.id]);\n\n        return (\n            <div className='poa-mobile-layout'>\n                <div className={clsx('poa-header', { 'poa-header--non-modal': !is_for_cfd_modal })}>\n                    <div className='timeline'>\n                        {step.id === 2 && (\n                            <LabelPairedArrowLeftMdBoldIcon\n                                onClick={() => setStep({ id: 1, text: localize('Enter your address') })}\n                            />\n                        )}\n                        <Text as='p' size='xxs'>\n                            <Localize\n                                i18n_default_text='<0>Step {{step}}/2:&nbsp;</0> {{title}}'\n                                values={{ step: step.id, title: step.text }}\n                                components={[<strong key={0} />]}\n                            />\n                        </Text>\n                    </div>\n                    <div className='timeline-item'>\n                        <ProgressBar is_active={step.id <= 2} />\n                        <ProgressBar is_active={step.id === 2} />\n                    </div>\n                </div>\n                <Form noValidate className='account-form account-form_poa' onSubmit={handleSubmit}>\n                    <FormBody scroll_offset={setOffset(status)}>\n                        {(status?.msg || is_resubmit) && (\n                            <InlineMessage\n                                type='error'\n                                message={\n                                    <Text as='p' size='xxxs'>\n                                        {!status?.msg && is_resubmit && (\n                                            <Localize i18n_default_text='We were unable to verify your address with the details you provided. Please check and resubmit or choose a different document type.' />\n                                        )}\n                                        {status?.msg}\n                                    </Text>\n                                }\n                                className='poa-error-banner'\n                                id='dt_poa_submit-error'\n                            />\n                        )}\n                        {step.id === 1 && (\n                            <React.Fragment>\n                                <PersonalDetailsForm\n                                    /* eslint-disable @typescript-eslint/ban-ts-comment */\n                                    // @ts-nocheck This needs to fixed in PersonalDetailsForm\n                                    is_qualified_for_poa\n                                    editable_fields={changeable_fields}\n                                    states_list={states_list}\n                                />\n                                <FormFooter className='account-form__footer-poa'>\n                                    <Button\n                                        className='account-form__footer-btn'\n                                        type='button'\n                                        has_effect\n                                        text={localize('Next')}\n                                        primary\n                                        is_disabled={isNextBtnDisabled}\n                                        onClick={() =>\n                                            setStep(prev_step => ({\n                                                ...prev_step,\n                                                id: 2,\n                                                text: localize(' Document submission'),\n                                            }))\n                                        }\n                                    />\n                                </FormFooter>\n                            </React.Fragment>\n                        )}\n                        {step.id === 2 && (\n                            <React.Fragment>\n                                <FileUploaderContainer\n                                    onFileDrop={files => {\n                                        setDocumentFiles(files);\n                                    }}\n                                    onError={setFileSelectionError}\n                                    files_description={\n                                        <FilesDescription\n                                            title={poa_uploader_files_descriptions.title}\n                                            descriptions={poa_uploader_files_descriptions.descriptions}\n                                        />\n                                    }\n                                    examples={<CommonMistakeExamples />}\n                                    country_of_residence={account_settings?.country_code as string}\n                                    placeholder={localize('Type of document')}\n                                />\n                                <FormFooter className='account-form__footer-poa'>\n                                    <Button\n                                        className='account-form__footer-btn'\n                                        type='submit'\n                                        has_effect\n                                        text={localize('Submit')}\n                                        primary\n                                        is_disabled={\n                                            isSubmitting ||\n                                            !isValid ||\n                                            (document_files && document_files.length < 1) ||\n                                            !!file_selection_error\n                                        }\n                                        is_loading={form_state.is_btn_loading}\n                                        is_submit_success={form_state.is_submit_success}\n                                    />\n                                </FormFooter>\n                            </React.Fragment>\n                        )}\n                    </FormBody>\n                </Form>\n            </div>\n        );\n    }\n);\n\nexport default POAMobileLayout;\n","import React from 'react';\nimport { Formik, FormikErrors, FormikHelpers, FormikValues } from 'formik';\nimport { useDevice } from '@deriv-com/ui';\nimport { Loading } from '@deriv/components';\nimport { useFileUploader } from '@deriv/hooks';\nimport {\n    validAddress,\n    validPostCode,\n    validLetterSymbol,\n    validAddressState,\n    validLength,\n    getLocation,\n    WS,\n} from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport LoadErrorMessage from '../../../Components/load-error-message';\nimport LeaveConfirm from '../../../Components/leave-confirm';\nimport { isServerError, validate } from '../../../Helpers/utils';\nimport { API_ERROR_CODES } from '../../../Constants/api-error-codes';\nimport { DocumentUploadRequest } from '@deriv/api-types';\nimport POADesktopLayout from './poa-desktop-layout';\nimport { TPOAFormState } from '../../../Types';\nimport { useTranslations } from '@deriv-com/translations';\nimport POAMobileLayout from './poa-mobile-layout';\nimport { getSupportedProofOfAddressDocuments } from '../../../Constants/file-uploader';\n\ntype TProofOfAddressForm = {\n    className: string;\n    is_resubmit: boolean;\n    is_for_cfd_modal: boolean;\n    onCancel: () => void;\n    onSubmit: (needs_poi: boolean, has_submitted_duplicate_poa?: boolean) => void;\n    onSubmitForCFDModal: (values: FormikValues, has_submitted_duplicate_poa?: boolean) => void;\n};\n\ntype TFormInitialValues = Record<\n    'address_line_1' | 'address_line_2' | 'address_city' | 'address_state' | 'address_postcode',\n    string\n> & {\n    document_type?: string;\n};\n\nconst ProofOfAddressForm = observer(\n    ({ is_resubmit, is_for_cfd_modal, onSubmit, onSubmitForCFDModal, className }: Partial<TProofOfAddressForm>) => {\n        const { isMobile, isDesktop } = useDevice();\n        const { client, notifications } = useStore();\n        const { account_settings, fetchResidenceList, fetchStatesList, states_list } = client;\n        const {\n            addNotificationMessageByKey: addNotificationByKey,\n            removeNotificationMessage,\n            removeNotificationByKey,\n        } = notifications;\n        const [document_files, setDocumentFiles] = React.useState<File[]>([]);\n        const [is_loading, setIsLoading] = React.useState(true);\n        const [form_values, setFormValues] = React.useState<TFormInitialValues>({\n            address_line_1: '',\n            address_line_2: '',\n            address_city: '',\n            address_state: '',\n            address_postcode: '',\n        });\n        const [api_initial_load_error, setAPIInitialLoadError] = React.useState(null);\n        const [form_state, setFormState] = React.useState<TPOAFormState>({\n            is_btn_loading: false,\n            is_submit_success: false,\n            should_allow_submit: true,\n            should_show_form: true,\n        });\n\n        const [should_scroll_to_top, setShouldScrollToTop] = React.useState(false);\n\n        const { upload } = useFileUploader();\n        const { localize } = useTranslations();\n\n        React.useEffect(() => {\n            fetchResidenceList?.().then(async () => {\n                Promise.all([fetchStatesList(), WS.wait('get_settings')]).then(() => {\n                    setFormValues({\n                        address_line_1: account_settings.address_line_1 ?? '',\n                        address_line_2: account_settings.address_line_2 ?? '',\n                        address_city: account_settings.address_city ?? '',\n                        address_state: account_settings.address_state ?? '',\n                        address_postcode: account_settings.address_postcode ?? '',\n                    });\n                    setIsLoading(false);\n                });\n            });\n        }, [account_settings, fetchResidenceList, fetchStatesList]);\n\n        React.useEffect(() => {\n            if (should_scroll_to_top) {\n                // Scroll to the top of the page\n                const el = document.querySelector('#dt_poa_submit-error') as HTMLInputElement;\n                const target_element = el?.parentElement ?? el;\n                if (typeof target_element?.scrollIntoView === 'function') {\n                    target_element?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n                }\n\n                // Reset the condition\n                setShouldScrollToTop(false);\n            }\n        }, [should_scroll_to_top]);\n\n        const validateFields = (values: TFormInitialValues) => {\n            setFormState({ ...form_state, ...{ should_allow_submit: false } });\n            const errors: FormikErrors<TFormInitialValues> = {};\n            const validateValues = validate(errors, values);\n\n            const required_fields = ['address_line_1', 'address_city'];\n            validateValues(val => val, required_fields, localize('This field is required'));\n\n            const address_line_1_validation_result = validAddress(values.address_line_1, { is_required: true });\n            if (!address_line_1_validation_result.is_ok) {\n                errors.address_line_1 = address_line_1_validation_result.message;\n            }\n            const address_line_2_validation_result = validAddress(values.address_line_2);\n            if (!address_line_2_validation_result.is_ok) {\n                errors.address_line_2 = address_line_2_validation_result.message;\n            }\n\n            const validation_letter_symbol_message = localize(\n                'Only letters, space, hyphen, period, and apostrophe are allowed.'\n            );\n\n            if (values.address_city && !validLetterSymbol(values.address_city)) {\n                errors.address_city = validation_letter_symbol_message;\n            }\n\n            if (values.address_state && !validAddressState(values.address_state) && states_list?.length < 1) {\n                errors.address_state = validation_letter_symbol_message;\n            }\n\n            if (values.address_postcode) {\n                if (!validLength(values.address_postcode, { min: 0, max: 20 })) {\n                    errors.address_postcode = localize(\n                        'Please enter a {{field_name}} under {{max_number}} characters.',\n                        {\n                            field_name: localize('Postal/ZIP code'),\n                            max_number: 20,\n                            interpolation: { escapeValue: false },\n                        }\n                    );\n                } else if (!validPostCode(values.address_postcode)) {\n                    errors.address_postcode = localize('Only letters, numbers, space, and hyphen are allowed.');\n                }\n            }\n\n            if (!values.document_type) {\n                errors.document_type = localize('Document type is required.');\n            }\n\n            return errors;\n        };\n\n        const showForm = (should_show_form: boolean) => {\n            setFormState({ ...form_state, ...{ should_show_form } });\n        };\n\n        const onSubmitValues = async (\n            values: TFormInitialValues,\n            { setStatus, setSubmitting }: FormikHelpers<TFormInitialValues>\n        ) => {\n            setStatus({ msg: '' });\n            setFormState({ ...form_state, ...{ is_btn_loading: true } });\n            const settings_values = { ...values };\n            if (values.address_state && states_list.length) {\n                settings_values.address_state = getLocation(states_list, values.address_state, 'value') || '';\n            }\n            delete settings_values?.document_type;\n\n            const data = await WS.setSettings(settings_values);\n\n            if (data.error) {\n                setStatus({ msg: data.error.message });\n                setFormState({ ...form_state, ...{ is_btn_loading: false } });\n                setSubmitting(false);\n                setShouldScrollToTop(true);\n                return;\n            }\n\n            const get_settings_response = await WS.authorized.storage.getSettings();\n\n            if (get_settings_response.error) {\n                setAPIInitialLoadError(get_settings_response.error.message);\n                setSubmitting(false);\n                return;\n            }\n            const get_settings = get_settings_response.get_settings;\n            const { address_line_1, address_line_2, address_city, address_state, address_postcode } = get_settings;\n\n            setFormValues({\n                address_line_1,\n                address_line_2,\n                address_city,\n                address_state,\n                address_postcode,\n            });\n\n            // upload files\n            try {\n                // This is required as AutoComplate displays only the selected value\n                const selected_doc_type = getSupportedProofOfAddressDocuments().find(\n                    doc => doc.text === values.document_type\n                );\n                const api_response = await upload(document_files, {\n                    document_type: selected_doc_type?.value as DocumentUploadRequest['document_type'],\n                });\n\n                if (api_response?.warning) {\n                    setFormState({ ...form_state, ...{ is_btn_loading: false } });\n\n                    if (api_response.warning === API_ERROR_CODES.DUPLICATE_DOCUMENT) {\n                        if (is_for_cfd_modal) {\n                            onSubmitForCFDModal?.(values, true);\n                        } else {\n                            onSubmit?.(false, true);\n                        }\n                    } else {\n                        setStatus({ msg: api_response?.message });\n                        setShouldScrollToTop(true);\n                    }\n                    return;\n                }\n\n                const get_account_status_response = await WS.authorized.getAccountStatus();\n\n                if (!get_account_status_response || get_account_status_response.error) {\n                    setAPIInitialLoadError(get_account_status_response.error.message);\n                    setSubmitting(false);\n                    return;\n                }\n                const get_account_status = get_account_status_response.get_account_status;\n\n                setFormState({\n                    ...form_state,\n                    ...{ is_submit_success: true, is_btn_loading: false },\n                });\n\n                const { needs_verification } = get_account_status.authentication;\n                const needs_poi = Boolean(needs_verification.length) && needs_verification.includes('identity');\n                onSubmit?.(needs_poi);\n\n                ['authenticate', 'needs_poa', 'poa_expired'].forEach(key => {\n                    removeNotificationMessage({ key });\n                    removeNotificationByKey({ key });\n                });\n\n                if (needs_poi) {\n                    addNotificationByKey('needs_poi');\n                }\n            } catch (error) {\n                if (isServerError(error)) {\n                    setStatus({ msg: error.message });\n                    setSubmitting(false);\n                    setFormState({ ...form_state, ...{ is_btn_loading: false } });\n                    setShouldScrollToTop(true);\n                }\n            }\n            if (is_for_cfd_modal) {\n                onSubmitForCFDModal?.(values);\n            }\n        };\n\n        const { address_line_1, address_line_2, address_city, address_state, address_postcode } = form_values;\n\n        const form_initial_values = {\n            address_line_1,\n            address_line_2,\n            address_city,\n            address_state,\n            address_postcode,\n            document_type: '',\n        };\n\n        if (api_initial_load_error) return <LoadErrorMessage error_message={api_initial_load_error} />;\n        if (is_loading) return <Loading is_fullscreen={false} className='account__initial-loader' />;\n\n        if (form_initial_values.address_state) {\n            const current_value = getLocation(states_list, form_initial_values.address_state, 'text');\n            form_initial_values.address_state =\n                states_list.length && current_value ? current_value : form_initial_values.address_state;\n        } else {\n            form_initial_values.address_state = '';\n        }\n        const setOffset = (status: { msg: string }) => {\n            const mobile_scroll_offset = status?.msg ? '200px' : '166px';\n            return !isDesktop && !is_for_cfd_modal ? mobile_scroll_offset : '94px';\n        };\n\n        return (\n            <Formik\n                initialValues={form_initial_values}\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                onSubmit={onSubmitValues}\n                validate={validateFields}\n                enableReinitialize\n                validateOnMount\n            >\n                {() => (\n                    <React.Fragment>\n                        <LeaveConfirm onDirty={!isDesktop ? showForm : undefined} />\n                        {form_state.should_show_form &&\n                            (isMobile ? (\n                                <POAMobileLayout\n                                    setOffset={setOffset}\n                                    is_for_cfd_modal={is_for_cfd_modal}\n                                    is_resubmit={is_resubmit}\n                                    setDocumentFiles={setDocumentFiles}\n                                    document_files={document_files}\n                                    form_state={form_state}\n                                />\n                            ) : (\n                                <POADesktopLayout\n                                    className={className}\n                                    setOffset={setOffset}\n                                    is_for_cfd_modal={is_for_cfd_modal}\n                                    is_resubmit={is_resubmit}\n                                    setDocumentFiles={setDocumentFiles}\n                                    document_files={document_files}\n                                    form_state={form_state}\n                                />\n                            ))}\n                    </React.Fragment>\n                )}\n            </Formik>\n        );\n    }\n);\n\nexport default ProofOfAddressForm;\n","import { RouteButton } from './route-button';\n\nexport default RouteButton;\n","import clsx from 'clsx';\nimport { ButtonLink, Text } from '@deriv/components';\n\ntype TRouteButtonProps = { route: string; button_label: string; className?: string };\n\n/**\n * Renders a button that redirects to the trading platform\n * @name RouteButton\n * @param route - Route to redirect to\n * @param button_label - Text to be displayed on the button\n * @param className - Styles to be applied to the button\n * @returns React Element\n */\nexport const RouteButton = ({ button_label, className, route }: TRouteButtonProps) => (\n    <ButtonLink className={clsx('account-management__button', className)} to={route}>\n        <Text className='dc-btn__text' as='p' weight='bold' data-testid='route_btn_text'>\n            {button_label}\n        </Text>\n    </ButtonLink>\n);\n","import { Submitted as PoaSubmitted } from './submitted';\n\nexport default PoaSubmitted;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isNavigationFromP2P, isNavigationFromDerivGO, routes } from '@deriv/shared';\nimport IconMessageContent from '../../../icon-message-content';\nimport RouteButton from '../../../route-button';\nimport { TPoaStatusProps } from '../../../../Types';\n\nexport const Submitted = ({ needs_poi, redirect_button }: TPoaStatusProps) => {\n    const message = localize('Review in progress');\n    const is_redirected_from_platform = isNavigationFromP2P() || isNavigationFromDerivGO();\n    if (needs_poi) {\n        return (\n            <div className='account-management__container'>\n                <IconMessageContent message={message} icon={<Icon icon='IcPoaVerified' size={128} />}>\n                    <div className='account-management__text-container'>\n                        <Text align='center' size='xs' as='p'>\n                            {localize(\n                                'Your proof of address is under review. We’ll get back to you in 1–3 working days.'\n                            )}\n                        </Text>\n                        <Text align='center' size='xs' as='p'>\n                            {localize('To start trading, you also need to verify your identity.')}\n                        </Text>\n                    </div>\n                    <RouteButton button_label={localize('Next')} route={routes.proof_of_identity} />\n                </IconMessageContent>\n            </div>\n        );\n    }\n    return (\n        <div className='account-management__container'>\n            <IconMessageContent\n                message={message}\n                text={localize('Your proof of address is under review. We’ll get back to you in 1–3 working days.')}\n                icon={<Icon icon='IcPoaVerified' size={128} />}\n            >\n                {redirect_button ||\n                    (!is_redirected_from_platform && (\n                        <RouteButton button_label={localize(\"Return to Trader's Hub\")} route={routes.traders_hub} />\n                    ))}\n            </IconMessageContent>\n        </div>\n    );\n};\n","import { Unverified as PoaUnverified } from './unverified';\n\nexport default PoaUnverified;\n","import React, { ReactNode } from 'react';\nimport { Button, Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\ntype TUnverified = {\n    title?: ReactNode;\n    description?: ReactNode;\n    onClick: () => void;\n    button_text?: ReactNode;\n};\n\nexport const Unverified = ({ title, description, button_text, onClick }: TUnverified) => {\n    return (\n        <IconMessageContent\n            message={title ?? localize('We could not verify your proof of address')}\n            text={description ?? localize('Please check your email for details.')}\n            icon={<Icon icon='IcPoaError' size={128} />}\n        >\n            <Button onClick={onClick} has_effect primary>\n                <Text className='dc-btn__text' size='xs' weight='bold' as='p'>\n                    {button_text ?? localize('Resubmit')}\n                </Text>\n            </Button>\n        </IconMessageContent>\n    );\n};\n","import React from 'react';\nimport clsx from 'clsx';\nimport { ButtonLink, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { routes } from '@deriv/shared/src/utils/routes/routes';\n\ntype TContinueTradingButtonProps = { className?: string };\n\n/**\n * Renders a button that redirects to the trading platform\n * @name ContinueTradingButton\n * @param className - Styles to be applied to the button\n * @returns React Element\n */\nexport const ContinueTradingButton = ({ className }: TContinueTradingButtonProps) => (\n    <ButtonLink className={clsx('account-management__button', className)} to={routes.trade}>\n        <Text className='dc-btn__text' as='p' weight='bold' data-testid='continue_btn_text'>\n            <Localize i18n_default_text='Continue trading' />\n        </Text>\n    </ButtonLink>\n);\n","import { ButtonLink, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport React from 'react';\n\nexport const PoiButton = () => (\n    <ButtonLink className='account-management__button' to='/account/proof-of-identity'>\n        <Text className='dc-btn__text' weight='bold' as='p'>\n            {localize('Proof of identity')}\n        </Text>\n    </ButtonLink>\n);\n","import { Icon } from '@deriv/components';\nimport { isNavigationFromP2P, isNavigationFromDerivGO } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { ContinueTradingButton } from '../../continue-trading-button/continue-trading-button';\nimport IconMessageContent from '../../../icon-message-content';\nimport { PoiButton } from '../../../poi/poi-button/poi-button';\nimport { TPoaStatusProps } from '../../../../Types';\n\nexport const Verified = ({ needs_poi, redirect_button }: TPoaStatusProps) => {\n    const message = localize('Your proof of address is verified');\n    const is_redirected_from_platform = isNavigationFromP2P() || isNavigationFromDerivGO();\n    if (needs_poi) {\n        return (\n            <div className='account-management__container'>\n                <IconMessageContent\n                    message={message}\n                    text={localize('To continue trading, you must also submit a proof of identity.')}\n                    icon={<Icon icon='IcPoaVerified' size={128} />}\n                >\n                    <PoiButton />\n                </IconMessageContent>\n            </div>\n        );\n    }\n    return (\n        <div className='account-management__container'>\n            <IconMessageContent message={message} icon={<Icon icon='IcPoaVerified' size={128} />}>\n                {redirect_button || (!is_redirected_from_platform && <ContinueTradingButton />)}\n            </IconMessageContent>\n        </div>\n    );\n};\n\nexport default Verified;\n","import { Verified as PoaVerified } from './verified';\n\nexport default PoaVerified;\n","export const populateVerificationStatus = account_status => {\n    if (!account_status || !account_status.authentication) return {};\n\n    const { attempts, document, identity, income, needs_verification } = account_status.authentication;\n\n    const identity_status = identity.status;\n    const document_status = document.status;\n    const income_status = income.status;\n\n    const allow_document_upload = account_status.status.some(status => status === 'allow_document_upload');\n    const allow_poi_resubmission = account_status.status.some(status => status === 'allow_poi_resubmission');\n    const allow_poa_resubmission = account_status.status.some(status => status === 'allow_poa_resubmission');\n    const allow_poinc_resubmission = account_status.status.some(status => status === 'allow_poinc_resubmission');\n    const is_age_verified = account_status.status.some(status => status === 'age_verification');\n    const is_fully_authenticated = account_status.status.some(status => status === 'authenticated');\n    const is_idv_disallowed = account_status.status.some(status => status === 'idv_disallowed');\n    const poa_address_mismatch = account_status.status.some(status => status === 'poa_address_mismatch');\n    const poi_expiring_soon = account_status.status.some(status => status === 'poi_expiring_soon');\n    const poa_authenticated_with_idv = account_status.status.some(status => status === 'poa_authenticated_with_idv');\n    const poa_authenticated_with_idv_photo = account_status.status.some(\n        status => status === 'poa_authenticated_with_idv_photo'\n    );\n    const poa_expiring_soon = account_status.status.some(status => status === 'poa_expiring_soon');\n    const poi_acknowledged = ['pending', 'verified'].includes(identity_status);\n    const has_poa = !(document && document.status === 'none');\n    const has_poi = !(identity && identity.status === 'none');\n    const has_poinc = !(income && income.status === 'none');\n    const has_submitted_poa = document_status === 'pending' && !allow_poa_resubmission;\n    const needs_poa =\n        !(has_submitted_poa || document_status === 'verified') ||\n        (needs_verification.length && needs_verification.includes('document'));\n    const needs_poi =\n        !poi_acknowledged || (Boolean(needs_verification.length) && needs_verification.includes('identity'));\n    const needs_poinc = needs_verification.length && needs_verification.includes('income');\n\n    const { idv, onfido, manual } = identity.services;\n    const identity_last_attempt = attempts.latest;\n    const has_attempted_idv = Boolean(attempts.history.length && attempts.history.find(h => h.service === 'idv'));\n\n    return {\n        allow_document_upload,\n        allow_poa_resubmission,\n        allow_poi_resubmission,\n        allow_poinc_resubmission,\n        has_attempted_idv,\n        has_poa,\n        has_poi,\n        has_poinc,\n        has_submitted_poa,\n        identity_last_attempt,\n        identity_status,\n        document_status,\n        income_status,\n        idv,\n        is_age_verified,\n        is_fully_authenticated,\n        is_idv_disallowed,\n        manual,\n        needs_poa,\n        needs_poi,\n        needs_poinc,\n        needs_verification,\n        onfido,\n        poa_address_mismatch,\n        poa_authenticated_with_idv,\n        poa_authenticated_with_idv_photo,\n        poi_expiring_soon,\n        poa_expiring_soon,\n    };\n};\n","import React from 'react';\nimport { AccountStatusResponse, GetAccountStatus } from '@deriv/api-types';\nimport { Button, Loading } from '@deriv/components';\nimport { WS, getPlatformRedirect, platforms, routes, AUTH_STATUS_CODES } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport Expired from '../../../Components/poa/status/expired';\nimport NotRequired from '../../../Components/poa/status/not-required';\nimport ProofOfAddressForm from './proof-of-address-form';\nimport Submitted from '../../../Components/poa/status/submitted';\nimport Unverified from '../../../Components/poa/status/unverified';\nimport Verified from '../../../Components/poa/status/verified';\nimport { populateVerificationStatus } from '../Helpers/verification.js';\n\ntype TProofOfAddressContainer = {\n    onSubmit?: () => void;\n};\n\ntype TAuthenticationStatus = Record<\n    | 'allow_document_upload'\n    | 'allow_poi_resubmission'\n    | 'allow_poa_resubmission'\n    | 'is_age_verified'\n    | 'has_poi'\n    | 'has_submitted_poa'\n    | 'needs_poa'\n    | 'needs_poi'\n    | 'poa_address_mismatch'\n    | 'resubmit_poa'\n    | 'poa_expiring_soon'\n    | 'poa_authenticated_with_idv'\n    | 'poa_authenticated_with_idv_photo'\n    | 'has_submitted_duplicate_poa',\n    boolean\n> & { document_status?: DeepRequired<GetAccountStatus>['authentication']['document']['status'] };\n\nconst ProofOfAddressContainer = observer(({ onSubmit }: TProofOfAddressContainer) => {\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [authentication_status, setAuthenticationStatus] = React.useState<TAuthenticationStatus>({\n        allow_document_upload: false,\n        allow_poi_resubmission: false,\n        allow_poa_resubmission: false,\n        needs_poi: false,\n        needs_poa: false,\n        has_poi: false,\n        resubmit_poa: false,\n        has_submitted_poa: false,\n        document_status: undefined,\n        is_age_verified: false,\n        poa_address_mismatch: false,\n        poa_expiring_soon: false,\n        poa_authenticated_with_idv: false,\n        poa_authenticated_with_idv_photo: false,\n        has_submitted_duplicate_poa: false,\n    });\n\n    const { client, notifications, common, ui } = useStore();\n    const { app_routing_history } = common;\n    const { has_restricted_mt5_account, is_switching } = client;\n    const { is_verification_modal_visible } = ui;\n    const { refreshNotifications } = notifications;\n    const mt5_poa_status = localStorage.getItem('mt5_poa_status');\n\n    React.useEffect(() => {\n        if (!is_switching) {\n            WS.authorized.getAccountStatus().then((response: AccountStatusResponse) => {\n                const { get_account_status } = response;\n                if (get_account_status) {\n                    const {\n                        allow_document_upload,\n                        allow_poa_resubmission,\n                        document_status,\n                        has_submitted_poa,\n                        is_age_verified,\n                        needs_poa,\n                        needs_poi,\n                        poa_address_mismatch,\n                        poa_authenticated_with_idv,\n                        poa_authenticated_with_idv_photo,\n                        poa_expiring_soon,\n                    } = populateVerificationStatus(get_account_status);\n\n                    setAuthenticationStatus(authentication_status => ({\n                        ...authentication_status,\n                        allow_document_upload,\n                        allow_poa_resubmission,\n                        document_status,\n                        has_submitted_poa: has_submitted_poa as boolean,\n                        is_age_verified,\n                        needs_poa,\n                        needs_poi,\n                        poa_address_mismatch,\n                        poa_authenticated_with_idv,\n                        poa_authenticated_with_idv_photo,\n                        poa_expiring_soon,\n                    }));\n                    setIsLoading(false);\n                    refreshNotifications();\n                }\n            });\n        }\n    }, [is_switching, refreshNotifications]);\n    React.useEffect(() => {\n        return () => {\n            localStorage.removeItem('mt5_poa_status');\n        };\n    }, []);\n\n    const handleResubmit = () => {\n        setAuthenticationStatus(authentication_status => ({\n            ...authentication_status,\n            ...{ resubmit_poa: true },\n        }));\n    };\n\n    const handleDuplicatePOASubmission = () => {\n        setAuthenticationStatus(authentication_status => ({\n            ...authentication_status,\n            ...{ resubmit_poa: true, has_submitted_duplicate_poa: false, has_submitted_poa: false },\n        }));\n    };\n\n    const onSubmitDocument = (needs_poi: boolean, has_submitted_duplicate_poa?: boolean) => {\n        setAuthenticationStatus(authentication_status => ({\n            ...authentication_status,\n            ...{\n                has_submitted_poa: true,\n                needs_poi,\n                poa_expiring_soon: false,\n                has_submitted_duplicate_poa: has_submitted_duplicate_poa ?? false,\n            },\n        }));\n        if (is_verification_modal_visible) {\n            onSubmit?.();\n        }\n    };\n\n    const {\n        allow_document_upload,\n        allow_poa_resubmission,\n        document_status,\n        needs_poi,\n        resubmit_poa,\n        has_submitted_poa,\n        poa_address_mismatch,\n        poa_expiring_soon,\n        poa_authenticated_with_idv,\n        poa_authenticated_with_idv_photo,\n        has_submitted_duplicate_poa,\n    } = authentication_status;\n\n    const from_platform = getPlatformRedirect(app_routing_history);\n\n    const should_show_redirect_btn = Object.keys(platforms).includes(from_platform?.ref ?? '');\n\n    const should_allow_resubmit =\n        resubmit_poa ||\n        allow_poa_resubmission ||\n        (has_restricted_mt5_account &&\n            document_status &&\n            ['expired', 'rejected', 'suspected'].includes(document_status)) ||\n        poa_address_mismatch ||\n        poa_expiring_soon ||\n        ((poa_authenticated_with_idv || poa_authenticated_with_idv_photo) &&\n            from_platform?.route === routes.cashier_p2p);\n\n    const redirect_button = should_show_redirect_btn && (\n        <Button\n            primary\n            className='proof-of-identity__redirect'\n            onClick={() => {\n                const url = platforms[from_platform.ref as keyof typeof platforms]?.url;\n                if (url) {\n                    window.location.href = url;\n                    window.sessionStorage.removeItem('config.platform');\n                }\n            }}\n        >\n            <Localize i18n_default_text='Back to {{platform_name}}' values={{ platform_name: from_platform.name }} />\n        </Button>\n    );\n\n    if (is_loading) return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    if (!allow_document_upload) return <NotRequired />;\n    if (has_submitted_duplicate_poa)\n        return (\n            <Unverified\n                title={<Localize i18n_default_text='Proof of address documents upload failed' />}\n                description={\n                    <Localize i18n_default_text='It seems you’ve submitted this document before. Upload a new document.' />\n                }\n                button_text={<Localize i18n_default_text='Try again' />}\n                onClick={handleDuplicatePOASubmission}\n            />\n        );\n    if (has_submitted_poa && !poa_address_mismatch)\n        return <Submitted needs_poi={needs_poi} redirect_button={redirect_button} />;\n    if (should_allow_resubmit) {\n        return <ProofOfAddressForm is_resubmit={!poa_expiring_soon} onSubmit={onSubmitDocument} />;\n    }\n    const getDocumentStatus = (\n        document_status: DeepRequired<GetAccountStatus>['authentication']['document']['status'] | string\n    ) => {\n        switch (document_status) {\n            case AUTH_STATUS_CODES.NONE:\n                return <ProofOfAddressForm onSubmit={onSubmitDocument} />;\n            case AUTH_STATUS_CODES.PENDING:\n                return <Submitted needs_poi={needs_poi} redirect_button={redirect_button} />;\n            case AUTH_STATUS_CODES.VERIFIED:\n                return <Verified needs_poi={needs_poi} redirect_button={redirect_button} />;\n            case AUTH_STATUS_CODES.EXPIRED:\n                return <Expired onClick={handleResubmit} />;\n            case AUTH_STATUS_CODES.REJECTED:\n            case AUTH_STATUS_CODES.SUSPECTED:\n                return <Unverified onClick={handleResubmit} />;\n            default:\n                return null;\n        }\n    };\n    if (mt5_poa_status) return getDocumentStatus(mt5_poa_status);\n    else if (document_status) return getDocumentStatus(document_status);\n    return null;\n});\n\nexport default ProofOfAddressContainer;\n","export const identity_status_codes = {\n    none: 'none',\n    pending: 'pending',\n    rejected: 'rejected',\n    verified: 'verified',\n    expired: 'expired',\n    suspected: 'suspected',\n} as const;\n\nexport const submission_status_code = {\n    selecting: 'selecting',\n    submitting: 'submitting',\n    complete: 'complete',\n} as const;\n\nexport const service_code = {\n    idv: 'idv',\n    onfido: 'onfido',\n    manual: 'manual',\n} as const;\n","import IconWithMessage from './icon-with-message';\nimport './icon-with-message.scss';\n\nexport default IconWithMessage;\n","import React from 'react';\nimport { Icon, Text, Button } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\n\ntype TIconWithMessage = {\n    icon: string;\n    has_button?: boolean;\n    message: string;\n};\n\nconst IconWithMessage = observer(({ has_button, icon, message }: TIconWithMessage) => {\n    const { client, ui } = useStore();\n    const { isDesktop } = useDevice();\n    const { has_any_real_account: has_real_account } = client;\n    const { toggleAccountsDialog, toggleShouldShowRealAccountsList } = ui;\n\n    return (\n        <div className='da-icon-with-message'>\n            <Icon icon={icon} size={128} />\n            <Text\n                className='da-icon-with-message__text'\n                as='p'\n                color='general'\n                size={isDesktop ? 's' : 'xs'}\n                line_height='m'\n                weight='bold'\n            >\n                {message}\n            </Text>\n            {has_button && (\n                <Button\n                    primary\n                    onClick={() => {\n                        toggleShouldShowRealAccountsList(true);\n                        toggleAccountsDialog();\n                    }}\n                    className='account__demo-message-button'\n                    data-testid='icon-with-message-button'\n                >\n                    {has_real_account ? localize('Switch to real account') : localize('Add a real account')}\n                </Button>\n            )}\n        </div>\n    );\n});\n\nexport default IconWithMessage;\n","import DemoMessage from './demo-message';\n\nexport default DemoMessage;\n","import { useTranslations } from '@deriv-com/translations';\nimport IconWithMessage from '../icon-with-message';\n\ntype TDemoMessage = {\n    has_button?: boolean;\n};\n\nconst DemoMessage = ({ has_button }: TDemoMessage) => {\n    const { localize } = useTranslations();\n    return (\n        <IconWithMessage\n            icon='IcPoaLock'\n            message={localize('This feature is not available for demo accounts.')}\n            has_button={has_button}\n        />\n    );\n};\n\nexport default DemoMessage;\n","import { PageError } from '@deriv/components';\nimport { Localize } from '@deriv-com/translations';\nimport { routes } from '@deriv/shared';\nimport { requestOidcAuthentication } from '@deriv-com/auth-client';\nimport Cookies from 'js-cookie';\nimport { useTMB } from '@deriv/hooks';\nimport { useEffect, useState } from 'react';\n\ntype TErrorComponent = {\n    header: JSX.Element | string;\n    message: JSX.Element | string;\n    code: string;\n    redirect_label: string;\n    redirectOnClick: (() => void) | null;\n    should_show_refresh: boolean;\n};\n\nconst is_deriv_com = /deriv\\.(com)/.test(window.location.hostname) || /localhost:8443/.test(window.location.host);\n\nconst ErrorComponent = ({\n    header,\n    message,\n    code,\n    redirect_label,\n    redirectOnClick,\n    should_show_refresh = true,\n}: Partial<TErrorComponent>) => {\n    const { isTmbEnabled } = useTMB();\n    const [isTmbEnabledValue, setIsTmbEnabledValue] = useState(false);\n\n    useEffect(() => {\n        const checkTmbStatus = async () => {\n            const tmbStatus = await isTmbEnabled();\n            setIsTmbEnabledValue(tmbStatus);\n        };\n\n        checkTmbStatus();\n    }, [isTmbEnabled]);\n\n    const refresh_message: JSX.Element | string = should_show_refresh ? (\n        <Localize i18n_default_text='Please refresh this page to continue.' />\n    ) : (\n        ''\n    );\n\n    if (code === 'InvalidToken' && Cookies.get('logged_state') === 'true' && is_deriv_com && !isTmbEnabledValue) {\n        try {\n            requestOidcAuthentication({\n                redirectCallbackUri: `${window.location.origin}/callback`,\n            }).catch((err: string) => {\n                // eslint-disable-next-line no-console\n                console.error(err);\n            });\n        } catch (err) {\n            // eslint-disable-next-line no-console\n            console.error(err);\n        }\n\n        return null;\n    }\n\n    return (\n        <PageError\n            header={header || <Localize i18n_default_text='Oops, something went wrong.' />}\n            messages={\n                message\n                    ? [message, refresh_message]\n                    : [\n                          <Localize\n                              i18n_default_text='Sorry, an error occurred while processing your request.'\n                              key={0}\n                          />,\n                          refresh_message,\n                      ]\n            }\n            redirect_urls={[routes.trade]}\n            redirect_labels={[redirect_label ?? <Localize i18n_default_text='Refresh' />]}\n            buttonOnClick={redirectOnClick ?? (() => location.reload())}\n        />\n    );\n};\n\nexport default ErrorComponent;\n","import ErrorComponent from './error-component';\n\nexport default ErrorComponent;\n","import Expired from './expired';\n\nexport default Expired;\n","import React from 'react';\nimport { Button, Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\ntype TExpired = {\n    handleRequireSubmission: () => void;\n    is_from_external?: boolean;\n    redirect_button?: React.ReactElement;\n};\n\nconst Expired = ({ handleRequireSubmission, is_from_external, redirect_button }: TExpired) => {\n    return (\n        <IconMessageContent\n            message={localize('New proof of identity document needed')}\n            icon={<Icon icon='IcPoiUpload' size={128} />}\n        >\n            <Button\n                type='button'\n                className='account-management__continue'\n                onClick={handleRequireSubmission}\n                large\n                text={localize('Upload Document')}\n                primary\n            />\n            {!is_from_external && redirect_button}\n        </IconMessageContent>\n    );\n};\n\nexport default Expired;\n","import React from 'react';\nimport { Button, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { DerivLightExclamationPoiIcon } from '@deriv/quill-icons';\nimport { POIContext } from '@deriv/shared';\nimport { submission_status_code } from '../../../../Sections/Verification/ProofOfIdentity/proof-of-identity-utils';\n\ntype TIdvLimited = {\n    handleRequireSubmission: () => void;\n};\n\nconst IdvLimited = ({ handleRequireSubmission }: TIdvLimited) => {\n    const { setSubmissionStatus } = React.useContext(POIContext);\n\n    return (\n        <div className='proof-of-identity__container'>\n            <DerivLightExclamationPoiIcon className='icon' />\n            <Text className='proof-of-identity__text btm-spacer' align='center' weight='bold'>\n                {localize('ID verification failed')}\n            </Text>\n            <Text className='proof-of-identity__text btm-spacer' align='center' size='xs'>\n                {localize('We were unable to verify your ID with the details you provided. ')}\n                {localize('Please upload your identity document.')}\n            </Text>\n            <Button\n                type='button'\n                className='account-management__continue'\n                onClick={() => {\n                    handleRequireSubmission();\n                    setSubmissionStatus(submission_status_code.selecting);\n                }}\n                large\n                text={localize('Upload identity document')}\n                primary\n            />\n        </div>\n    );\n};\n\nexport default IdvLimited;\n","import IdvLimited from './idv-limited';\n\nexport default IdvLimited;\n","import React from 'react';\nimport { ButtonLink, Text } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport clsx from 'clsx';\n\ntype TPoaButton = {\n    custom_text?: React.ReactNode;\n    class_name?: string;\n};\n\nconst DEFAULT_BTN_TEXT = <Localize i18n_default_text='Submit proof of address' />;\n\nconst PoaButton = ({ custom_text = DEFAULT_BTN_TEXT, class_name }: TPoaButton) => (\n    <ButtonLink className={clsx('account-management__button', class_name)} to={routes.proof_of_address}>\n        <Text className='dc-btn__text' as='p' weight='bold' data-testid='poa_button_text'>\n            {custom_text}\n        </Text>\n    </ButtonLink>\n);\n\nexport default PoaButton;\n","import PoaButton from './poa-button';\n\nexport default PoaButton;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Text } from '@deriv/components';\nimport { TIDVErrorStatus, IDV_ERROR_STATUS } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { DerivLightWaitingPoiIcon } from '@deriv/quill-icons';\nimport PoaButton from '../../../poa/poa-button';\n\ntype TIdvSubmitComplete = {\n    is_from_external: boolean;\n    mismatch_status: TIDVErrorStatus;\n    needs_poa: boolean;\n    redirect_button: React.ReactNode;\n};\n\nconst IdvSubmitComplete = observer(\n    ({ is_from_external, mismatch_status, needs_poa, redirect_button }: Partial<TIdvSubmitComplete>) => {\n        const { client } = useStore();\n        const { is_already_attempted } = client;\n\n        const is_mismatch_error =\n            mismatch_status === IDV_ERROR_STATUS.NameDobMismatch.code ||\n            mismatch_status === IDV_ERROR_STATUS.DobMismatch.code ||\n            mismatch_status === IDV_ERROR_STATUS.NameMismatch.code;\n\n        const is_expired_or_failed_error =\n            mismatch_status === IDV_ERROR_STATUS.Expired.code || mismatch_status === IDV_ERROR_STATUS.Failed.code;\n\n        const getHeaderText = () => {\n            if (is_already_attempted) {\n                if (is_mismatch_error) return <Localize i18n_default_text='Your profile is updated' />;\n                if (is_expired_or_failed_error)\n                    return <Localize i18n_default_text='Your document has been submitted' />;\n            }\n            return <Localize i18n_default_text='Review in progress' />;\n        };\n\n        const getDescriptionText = () => {\n            if (is_already_attempted && (is_mismatch_error || is_expired_or_failed_error))\n                return (\n                    <Localize i18n_default_text=\"We'll review your proof of identity again and will give you an update as soon as possible.\" />\n                );\n            return (\n                <Localize i18n_default_text='Your proof of identity is under review. We’ll get back to you within 5 minutes.' />\n            );\n        };\n\n        const poa_button = !is_from_external && <PoaButton custom_text={<Localize i18n_default_text='Next' />} />;\n\n        return (\n            <div className={clsx('proof-of-identity__container', 'proof-of-identity__container--status')}>\n                <DerivLightWaitingPoiIcon className='icon' />\n                <Text className='proof-of-identity__text btm-spacer' align='center' weight='bold'>\n                    {getHeaderText()}\n                </Text>\n                <Text className='proof-of-identity__text text' size='xs' align='center'>\n                    {getDescriptionText()}\n                </Text>\n                {needs_poa ? (\n                    <React.Fragment>\n                        <Text className='text' size='xs' align='center'>\n                            <Localize i18n_default_text='To start trading, you also need to verify your address.' />\n                        </Text>\n                        {poa_button}\n                    </React.Fragment>\n                ) : (\n                    <div className='proof-of-identity__redirection'>{redirect_button}</div>\n                )}\n            </div>\n        );\n    }\n);\n\nexport default React.memo(IdvSubmitComplete);\n","import IdvSubmitComplete from './idv-submit-complete';\n\nexport default IdvSubmitComplete;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Text } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { Localize } from '@deriv/translations';\nimport { ContinueTradingButton } from '../../../poa/continue-trading-button/continue-trading-button';\nimport { DerivLightApprovedPoiIcon } from '@deriv/quill-icons';\nimport PoaButton from '../../../poa/poa-button/poa-button';\n\ntype TIdvVerified = {\n    needs_poa: boolean;\n    is_from_external: boolean;\n    redirect_button: React.ReactNode;\n};\n\nconst IdvVerified = ({ needs_poa, is_from_external, redirect_button }: Partial<TIdvVerified>) => {\n    const header_Text = needs_poa ? (\n        <Localize i18n_default_text='Your ID is verified. You will also need to submit proof of your address.' />\n    ) : (\n        <Localize i18n_default_text='ID verification passed' />\n    );\n    const { isDesktop } = useDevice();\n    return (\n        <div\n            className={clsx('proof-of-identity__container', 'proof-of-identity__container--status')}\n            data-testid='poi_idv_verified_container'\n        >\n            <DerivLightApprovedPoiIcon className='icon' />\n            <Text className='proof-of-identity__text btm-spacer' align='center' weight='bold'>\n                {header_Text}\n            </Text>\n            {needs_poa ? (\n                <React.Fragment>\n                    {isDesktop && (\n                        <Text className='text' size='xs' align='center'>\n                            <Localize i18n_default_text=\"Next, we'll need your proof of address.\" />\n                        </Text>\n                    )}\n                    {!is_from_external && (\n                        <PoaButton custom_text={<Localize i18n_default_text='Submit proof of address' />} />\n                    )}\n                </React.Fragment>\n            ) : (\n                redirect_button || <ContinueTradingButton className='continue-trade' />\n            )}\n        </div>\n    );\n};\n\nexport default IdvVerified;\n","import IdvVerified from './idv-verified';\n\nexport default IdvVerified;\n","import React from 'react';\nimport { formatIDVError } from '@deriv/shared';\nimport IdvLimited from '../../../Components/poi/idv-status/idv-limited';\nimport IdvSubmitComplete from '../../../Components/poi/idv-status/idv-submit-complete';\nimport IdvVerified from '../../../Components/poi/idv-status/idv-verified';\nimport { identity_status_codes } from './proof-of-identity-utils';\n\nconst Idv = ({ handleRequireSubmission, idv, is_from_external, needs_poa, redirect_button }) => {\n    const { status, submissions_left, last_rejected } = idv;\n    switch (status) {\n        case identity_status_codes.pending:\n            return (\n                <IdvSubmitComplete\n                    is_from_external={is_from_external}\n                    mismatch_status={formatIDVError(last_rejected, status)}\n                    needs_poa={needs_poa}\n                    redirect_button={redirect_button}\n                />\n            );\n        case identity_status_codes.rejected:\n        case identity_status_codes.suspected:\n        case identity_status_codes.expired:\n            if (Number(submissions_left) < 1) return <IdvLimited handleRequireSubmission={handleRequireSubmission} />;\n            return null;\n        case identity_status_codes.verified:\n            return (\n                <IdvVerified\n                    is_from_external={is_from_external}\n                    needs_poa={needs_poa}\n                    redirect_button={redirect_button}\n                />\n            );\n        default:\n            return null;\n    }\n};\n\nexport default Idv;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\nimport { Chat } from '@deriv/utils';\n\nexport const POILimited = () => (\n    <IconMessageContent\n        message={localize(\"You've reached the limit for uploading your documents.\")}\n        text={\n            <Localize\n                i18n_default_text='Please contact us via <0>live chat</0>.'\n                components={[<span key={0} className='link link--orange' onClick={Chat.open} />]}\n            />\n        }\n        icon={<Icon icon='IcPoiFailed' size={128} />}\n    />\n);\n","import { POILimited } from './limited';\n\nexport default POILimited;\n","import { OnfidoNotRequired } from './not-required';\n\nexport default OnfidoNotRequired;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\nexport const OnfidoNotRequired = () => (\n    <IconMessageContent\n        message={localize('Proof of identity verification not required')}\n        text={localize(\n            'Your account does not need identity verification at this time. We will inform you if identity verification is required in the future.'\n        )}\n        icon={<Icon icon='IcPoiVerified' size={128} />}\n    />\n);\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { useTranslations } from '@deriv-com/translations';\nimport RouteButton from '../../../route-button';\nimport PoaButton from '../../../poa/poa-button';\nimport IconMessageContent from '../../../icon-message-content/icon-message-content';\nimport { TPOIStatus } from 'Types';\n\nexport const UploadComplete = ({\n    needs_poa,\n    redirect_button,\n    is_from_external,\n    is_manual_upload = false,\n}: TPOIStatus) => {\n    const { localize } = useTranslations();\n    const message = localize('Review in progress');\n    const description = is_manual_upload\n        ? localize('Your proof of identity is under review. We’ll get back to you within 1–3 working days.')\n        : localize('Your proof of identity is under review. We’ll get back to you within 5 minutes.');\n\n    if (!needs_poa) {\n        return (\n            <IconMessageContent message={message} text={description} icon={<Icon icon='IcPoiVerified' size={128} />}>\n                {!is_from_external && (\n                    <RouteButton button_label={localize(\"Return to Trader's Hub\")} route={routes.traders_hub} />\n                )}\n            </IconMessageContent>\n        );\n    }\n    return (\n        <IconMessageContent message={message} icon={<Icon icon='IcPoiVerified' size={128} />}>\n            <React.Fragment>\n                <div className='account-management__text-container'>\n                    <Text align='center' size='xs' as='p'>\n                        {description}\n                    </Text>\n                    <Text align='center' size='xs' as='p'>\n                        {localize('To start trading, you also need to verify your address.')}\n                    </Text>\n                </div>\n                <PoaButton custom_text={localize('Next')} />\n            </React.Fragment>\n            {!is_from_external && redirect_button}\n        </IconMessageContent>\n    );\n};\n\nexport default UploadComplete;\n","import { UploadComplete } from './upload-complete';\n\nexport default UploadComplete;\n","import { ContinueTradingButton } from './continue-trading-button';\n\nexport default ContinueTradingButton;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { TPOIStatus } from 'Types';\nimport IconMessageContent from '../../../icon-message-content';\nimport PoaButton from '../../../poa/poa-button';\nimport { service_code } from '../../../../Sections/Verification/ProofOfIdentity/proof-of-identity-utils';\nimport ContinueTradingButton from '../../../poa/continue-trading-button';\n\nexport const Verified = ({ needs_poa, redirect_button, is_from_external, service }: TPOIStatus) => {\n    const message =\n        service === service_code.idv\n            ? localize('ID verification passed')\n            : localize('Your proof of identity is verified');\n\n    if (!needs_poa) {\n        return (\n            <IconMessageContent\n                message={message}\n                icon={<Icon icon='IcPoaVerified' size={128} data_testid='dt_IcPoaVerified' />}\n                className='account-management-dashboard'\n            >\n                {!is_from_external && (redirect_button || <ContinueTradingButton />)}\n            </IconMessageContent>\n        );\n    }\n    return (\n        <IconMessageContent\n            message={message}\n            icon={<Icon icon='IcPoaVerified' size={128} />}\n            className='account-management-dashboard'\n            text={localize('To continue trading, you must also submit a proof of address.')}\n        >\n            {!is_from_external && (\n                <React.Fragment>\n                    <PoaButton />\n                </React.Fragment>\n            )}\n        </IconMessageContent>\n    );\n};\n\nexport default Verified;\n","import { Verified } from './verified';\n\nexport default Verified;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TListItem = {\n    text: React.ReactNode;\n    index?: number;\n};\n\nconst ListItem = ({ text, index }: TListItem) => {\n    const { isDesktop } = useDevice();\n\n    const text_size = isDesktop ? 'xs' : 'xxs';\n    return (\n        <div className='account-management__list-text-container'>\n            {index && (\n                <Text size={text_size} className='account-management__list-text'>\n                    <Localize i18n_default_text='{{index}}.' values={{ index }} />{' '}\n                </Text>\n            )}\n            <Text size={text_size} className='account-management__list-text'>\n                {text}\n            </Text>\n        </div>\n    );\n};\n\nexport default ListItem;\n","import IconMessageList from './icon-message-list';\n\nexport default IconMessageList;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Div100vhContainer, Text, Button, ThemedScrollbars, Icon } from '@deriv/components';\nimport { getOnfidoError } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport ListItem from './list-item';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TIconMessageList = {\n    className?: string;\n    icon: React.ReactElement;\n    message: string;\n    message_list: Array<string>;\n    onContinue: () => void;\n};\n\nconst IconMessageList = ({ className, icon, message, message_list = [], onContinue }: TIconMessageList) => {\n    const { isDesktop, isMobile } = useDevice();\n\n    return (\n        <ThemedScrollbars is_bypassed={isMobile}>\n            <Div100vhContainer\n                className='account-management__message-wrapper'\n                is_disabled={isDesktop}\n                height_offset='110px'\n            >\n                <div\n                    className={clsx('account-management__message-content', {\n                        [`${className}__message-content`]: className,\n                    })}\n                    data-testid='dt_icon_message_list'\n                >\n                    {icon && (\n                        <div\n                            className={clsx('account-management__message-icon', {\n                                [`${className}__message-icon`]: className,\n                            })}\n                        >\n                            {icon}\n                        </div>\n                    )}\n                    <Text\n                        as='div'\n                        weight='bold'\n                        className={clsx('account-management__message', {\n                            [`${className}__message`]: className,\n                        })}\n                        size={isDesktop ? 's' : 'xs'}\n                    >\n                        {message}\n                    </Text>\n\n                    {message_list && (\n                        <div className='account-management__list-container'>\n                            <div className='account-management__list-message'>\n                                <div className='account-management__list-icon'>\n                                    <Icon icon='IcAlertDanger' color='red' />\n                                </div>\n                                <section>\n                                    {message_list.length < 2 ? (\n                                        <ListItem text={getOnfidoError(message_list[0])} />\n                                    ) : (\n                                        message_list.map((text, idx) => (\n                                            <ListItem\n                                                key={text}\n                                                text={getOnfidoError(message_list[idx])}\n                                                index={idx + 1}\n                                            />\n                                        ))\n                                    )}\n                                </section>\n                            </div>\n                        </div>\n                    )}\n                    {onContinue && (\n                        <Button\n                            type='button'\n                            className='account-management__continue'\n                            onClick={onContinue}\n                            large\n                            primary\n                        >\n                            <Localize i18n_default_text='Verify again' />\n                        </Button>\n                    )}\n                </div>\n            </Div100vhContainer>\n        </ThemedScrollbars>\n    );\n};\n\nexport default IconMessageList;\n","import { RejectedReasons } from './rejected-reasons';\n\nexport default RejectedReasons;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageList from '../../../icon-message-list';\n\ntype TIconMessageList = {\n    handleRequireSubmission: () => void;\n    rejected_reasons: string[];\n};\n\nexport const RejectedReasons = ({ handleRequireSubmission, rejected_reasons }: TIconMessageList) => (\n    <IconMessageList\n        message={localize('Your proof of identity submission failed because:')}\n        icon={<Icon icon='IcPoiFailed' size={128} />}\n        message_list={rejected_reasons}\n        onContinue={handleRequireSubmission}\n    />\n);\n","import POIManualUploadFailed from './poi-manual-upload-failed';\n\nexport default POIManualUploadFailed;\n","import React, { ReactNode } from 'react';\nimport { Icon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport IconMessageContent from '../icon-message-content';\n\ntype TPOIManualUploadFailed = {\n    error: string;\n    message?: ReactNode;\n};\nconst POIManualUploadFailed = ({ children, message, error }: React.PropsWithChildren<TPOIManualUploadFailed>) => (\n    <IconMessageContent\n        message={message ?? <Localize i18n_default_text={'Proof of identity documents upload failed'} />}\n        text={error}\n        icon={<Icon icon='IcPoiFailed' size={128} />}\n        className='account-management-dashboard'\n    >\n        {children}\n    </IconMessageContent>\n);\n\nexport default POIManualUploadFailed;\n","import DocumentUploader from '@binary-com/binary-document-uploader';\nimport { localize } from '@deriv/translations';\nimport { compressImageFiles, readFiles, TSettings } from '@deriv/shared';\nimport { TFile } from 'Types';\n\ntype TProcessedFile = TFile & TSettings & { message: string };\n\nconst fileReadErrorMessage = (filename: string) => {\n    return localize('Unable to read file {{name}}', { name: filename });\n};\n\nconst uploadFile = (file: File, getSocket: () => WebSocket, settings: TSettings) => {\n    return new Promise((resolve, reject) => {\n        if (!file) {\n            reject();\n        }\n\n        // File uploader instance connected to binary_socket\n        const uploader = new DocumentUploader({ connection: getSocket() });\n\n        let is_file_error = false;\n\n        compressImageFiles([file])\n            .then((files_to_process: Blob[]) => {\n                readFiles(files_to_process, fileReadErrorMessage, settings)\n                    .then(processed_files => {\n                        processed_files.forEach(item => {\n                            if (item.message) {\n                                is_file_error = true;\n                                reject(item);\n                            }\n                        });\n                        const total_to_upload = processed_files.length;\n                        if (is_file_error || !total_to_upload) {\n                            return; // don't start submitting files until all front-end validation checks pass\n                        }\n\n                        // send files\n                        uploader.upload(processed_files[0]).then(resolve).catch(reject);\n                    })\n                    /* eslint-disable no-console */\n                    .catch(error => console.error('error: ', error));\n            })\n            /* eslint-disable no-console */\n            .catch(error => console.error('error: ', error));\n    });\n};\n\nexport default uploadFile;\n","import React from 'react';\nimport { ButtonLink, Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../icon-message-content';\n\ntype TGoToPersonalDetailsButton = {\n    has_invalid_postal_code?: boolean;\n    anchor?: string;\n    from?: string;\n    text?: string;\n};\n\nconst GoToPersonalDetailsButton = ({ anchor, from, text }: TGoToPersonalDetailsButton) => {\n    const from_string = from ? `?from=${from}` : '';\n    const anchor_string = anchor ? `#${anchor}` : '';\n    return (\n        <ButtonLink to={`/account/personal-details${from_string}${anchor_string}`}>\n            <Text className='dc-btn__text' weight='bold' as='p'>\n                {text ?? localize('Go to personal details')}\n            </Text>\n        </ButtonLink>\n    );\n};\n\nexport const MissingPersonalDetails = ({ has_invalid_postal_code, from }: TGoToPersonalDetailsButton) => {\n    if (has_invalid_postal_code)\n        return (\n            <IconMessageContent\n                message={localize('Your postal code is invalid')}\n                text={localize('Please check and update your postal code before submitting proof of identity.')}\n                icon={<Icon icon='IcAccountMissingDetails' size={128} />}\n            >\n                <GoToPersonalDetailsButton\n                    anchor='address_postcode'\n                    from={from}\n                    text={localize('Update postal code')}\n                />\n            </IconMessageContent>\n        );\n    return (\n        <IconMessageContent\n            message={localize('Your personal details are missing')}\n            text={localize('Please complete your personal details before you verify your identity.')}\n            icon={<Icon icon='IcAccountMissingDetails' size={128} />}\n        >\n            <GoToPersonalDetailsButton from={from} />\n        </IconMessageContent>\n    );\n};\n","import { MissingPersonalDetails } from './missing-personal-details';\n\nexport default MissingPersonalDetails;\n","import React from 'react';\nimport { GetAccountStatus, ResidenceList } from '@deriv/api-types';\nimport { IDV_ERROR_STATUS, getIDVError } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { DerivLightNameDobPoiIcon, DerivLightDobPoiIcon, DerivLightNamePoiIcon } from '@deriv/quill-icons';\nimport { getIDVDocumentType } from '../Helpers/utils';\nimport { Chat } from '@deriv/utils';\n\nconst handleOnClick = () => Chat.open();\n\nexport const GENERIC_ERROR_MESSAGE = (\n    <Localize i18n_default_text='Sorry, an internal error occurred. Hit the above checkbox to try again.' />\n);\n\nexport const DUPLICATE_ACCOUNT_ERROR_MESSAGE = (\n    <Localize\n        i18n_default_text='An account with these details already exists. Please make sure the details you entered are correct as only one real account is allowed per client. If this is a mistake, contact us via <0>live chat</0>.'\n        components={[<span key={0} className='link link--orange' onClick={handleOnClick} onKeyDown={handleOnClick} />]}\n    />\n);\n\nexport const CLAIMED_DOCUMENT_ERROR_MESSAGE = (\n    <Localize\n        i18n_default_text=\"This document number was already submitted for a different account. It seems you have an account with us that doesn't need further verification. Please contact us via <0>live chat</0> if you need help.\"\n        components={[<span key={0} className='link link--orange' onClick={handleOnClick} onKeyDown={handleOnClick} />]}\n    />\n);\n\nexport const generateIDVError = (\n    is_document_upload_required: boolean,\n    latest_status: DeepRequired<GetAccountStatus>['authentication']['attempts']['latest'],\n    chosen_country: ResidenceList[0],\n    mismatch_status: keyof typeof IDV_ERROR_STATUS\n) => {\n    const document_name = is_document_upload_required\n        ? 'identity document'\n        : getIDVDocumentType(latest_status, chosen_country);\n\n    switch (mismatch_status) {\n        case IDV_ERROR_STATUS.NameMismatch.code:\n            return {\n                required_fields: ['first_name', 'last_name'],\n                side_note_image: <DerivLightNamePoiIcon height='195px' width='285px' />,\n                inline_note_text: (\n                    <Localize\n                        i18n_default_text='To avoid delays, enter your <0>name</0> exactly as it appears on your {{document_name}}.'\n                        components={[<strong key={0} />]}\n                        values={{ document_name }}\n                    />\n                ),\n                failure_message: IDV_ERROR_STATUS.NameMismatch.message,\n            };\n        case IDV_ERROR_STATUS.DobMismatch.code:\n            return {\n                required_fields: ['date_of_birth'],\n                side_note_image: <DerivLightDobPoiIcon height='195px' width='285px' />,\n                inline_note_text: (\n                    <Localize\n                        i18n_default_text='To avoid delays, enter your <0>date of birth</0> exactly as it appears on your {{document_name}}.'\n                        components={[<strong key={0} />]}\n                        values={{ document_name }}\n                    />\n                ),\n                failure_message: IDV_ERROR_STATUS.DobMismatch.message,\n            };\n        default:\n            return {\n                required_fields: ['first_name', 'last_name', 'date_of_birth'],\n                side_note_image: <DerivLightNameDobPoiIcon height='195px' width='285px' />,\n                inline_note_text: (\n                    <Localize\n                        i18n_default_text='To avoid delays, enter your <0>name</0> and <0>date of birth</0> exactly as they appear on your {{document_name}}.'\n                        components={[<strong key={0} />]}\n                        values={{ document_name }}\n                    />\n                ),\n                failure_message: getIDVError(mismatch_status),\n            };\n    }\n};\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Form, Formik, FormikHelpers } from 'formik';\nimport { GetSettings } from '@deriv/api-types';\nimport { Checkbox, HintBox, Loading, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport {\n    filterObjProperties,\n    isEmptyObject,\n    isMobile,\n    removeEmptyPropertiesFromObject,\n    toMoment,\n    WS,\n} from '@deriv/shared';\nimport { DerivLightNameDobPoiIcon } from '@deriv/quill-icons';\nimport FormBody from '../../form-body';\nimport LoadErrorMessage from '../../load-error-message';\nimport PersonalDetailsForm from '../../forms/personal-details-form.jsx';\nimport { GENERIC_ERROR_MESSAGE, DUPLICATE_ACCOUNT_ERROR_MESSAGE } from '../../../Configs/poi-error-config';\nimport { API_ERROR_CODES } from '../../../Constants/api-error-codes';\nimport { makeSettingsRequest, validate, validateName } from '../../../Helpers/utils';\nimport { TInputFieldValues } from '../../../Types';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TRestState = {\n    api_error: string;\n    show_form: boolean;\n    errors?: boolean;\n    form_initial_values: TInputFieldValues;\n    changeable_fields: string[];\n};\n\ntype TPoiConfirmWithExampleFormContainer = {\n    account_settings: GetSettings;\n    getChangeableFields: () => string[];\n    onFormConfirm?: () => void;\n};\n\nconst PoiConfirmWithExampleFormContainer = ({\n    account_settings,\n    getChangeableFields,\n    onFormConfirm,\n}: TPoiConfirmWithExampleFormContainer) => {\n    const { isDesktop } = useDevice();\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [checked, setChecked] = React.useState(false);\n    const [rest_state, setRestState] = React.useState<TRestState>({\n        show_form: true,\n        form_initial_values: { first_name: '', last_name: '', date_of_birth: '' },\n        changeable_fields: [],\n        api_error: '',\n    });\n\n    const side_note_image = <DerivLightNameDobPoiIcon height='195px' width='285px' />;\n\n    React.useEffect(() => {\n        const initializeFormValues = async () => {\n            try {\n                await WS?.wait('get_settings');\n                const visible_settings = ['first_name', 'last_name', 'date_of_birth'];\n                const form_initial_values = filterObjProperties(account_settings, visible_settings);\n                if (form_initial_values.date_of_birth) {\n                    form_initial_values.date_of_birth = toMoment(form_initial_values.date_of_birth).format(\n                        'YYYY-MM-DD'\n                    );\n                }\n                setRestState({\n                    ...rest_state,\n                    changeable_fields: getChangeableFields(),\n                    form_initial_values,\n                });\n                setIsLoading(false);\n            } catch (e) {\n                // eslint-disable-next-line no-console\n                console.error(e);\n            }\n        };\n\n        initializeFormValues();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [account_settings]);\n\n    const onSubmit = async (\n        values: TInputFieldValues,\n        { setStatus, setSubmitting }: FormikHelpers<TInputFieldValues>\n    ) => {\n        if (checked) return;\n        setStatus({ error_msg: '' });\n        const request = makeSettingsRequest(\n            values,\n            rest_state?.changeable_fields ? [...rest_state.changeable_fields] : []\n        );\n        const data = await WS.setSettings(request);\n\n        if (data?.error) {\n            const response_error =\n                data.error?.code === API_ERROR_CODES.DUPLICATE_ACCOUNT\n                    ? DUPLICATE_ACCOUNT_ERROR_MESSAGE\n                    : GENERIC_ERROR_MESSAGE;\n            setStatus({ error_msg: response_error });\n            setSubmitting(false);\n        } else {\n            const response = await WS.authorized.storage.getSettings();\n            if (response?.error) {\n                setRestState({ ...rest_state, api_error: response.error.message });\n                return;\n            }\n            const { first_name, last_name, date_of_birth } = response?.get_settings ?? {\n                ...rest_state.form_initial_values,\n            };\n            setRestState({ ...rest_state, form_initial_values: { first_name, last_name, date_of_birth } });\n            setChecked(true);\n            setIsLoading(false);\n\n            if (onFormConfirm) {\n                setTimeout(() => {\n                    onFormConfirm();\n                }, 500);\n            }\n        }\n    };\n\n    const validateFields = (values: TInputFieldValues) => {\n        const errors: TInputFieldValues = {};\n        const validateValues = validate(errors, values);\n\n        const required_fields = ['first_name', 'last_name', 'date_of_birth'];\n\n        validateValues(val => val, required_fields, localize('This field is required'));\n\n        if (values.first_name) {\n            errors.first_name = validateName(values.first_name);\n        }\n        if (values.last_name) {\n            errors.last_name = validateName(values.last_name);\n        }\n\n        setRestState({ ...rest_state, errors: !isEmptyObject(removeEmptyPropertiesFromObject(errors)) });\n        return removeEmptyPropertiesFromObject(errors);\n    };\n\n    const {\n        form_initial_values: { ...form_initial_values },\n        api_error,\n    } = rest_state;\n\n    if (api_error) return <LoadErrorMessage error_message={api_error} />;\n\n    if (is_loading) {\n        return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    }\n\n    return (\n        <Formik initialValues={form_initial_values} enableReinitialize onSubmit={onSubmit} validate={validateFields}>\n            {({ errors, handleSubmit, isSubmitting, status }) => (\n                <Form className='account-form__poi-confirm-example' onSubmit={handleSubmit}>\n                    <FormBody>\n                        <PersonalDetailsForm\n                            editable_fields={rest_state.changeable_fields}\n                            is_rendered_for_onfido\n                            side_note={side_note_image}\n                            inline_note_text={\n                                <Localize\n                                    i18n_default_text='To avoid delays, enter your <0>name</0> and <0>date of birth</0> exactly as they appear on your identity document.'\n                                    components={[<strong key={0} />]}\n                                />\n                            }\n                        />\n                        <button\n                            type='submit'\n                            className={clsx('account-form__poi-confirm-example--button', {\n                                'account-form__poi-confirm-example--button__disabled':\n                                    checked || !isEmptyObject(errors),\n                            })}\n                        >\n                            <Checkbox\n                                value={checked}\n                                label={\n                                    <Text size={isDesktop ? 'xs' : 'xxs'}>\n                                        {localize(\n                                            'I confirm that the name and date of birth above match my chosen identity document (see below)'\n                                        )}\n                                    </Text>\n                                }\n                                disabled={isSubmitting}\n                            />\n                        </button>\n                        {status?.error_msg && (\n                            <div className='account-form__poi-confirm-example--status-message'>\n                                <HintBox\n                                    icon='IcAlertDanger'\n                                    message={\n                                        <Text as='p' size='xxxs'>\n                                            {status?.error_msg}\n                                        </Text>\n                                    }\n                                    is_danger\n                                    className='hint-box-layout'\n                                />\n                            </div>\n                        )}\n                    </FormBody>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default PoiConfirmWithExampleFormContainer;\n","import PoiConfirmWithExampleFormContainer from './poi-confirm-with-example-form-container';\n\nexport default PoiConfirmWithExampleFormContainer;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { CSSTransition } from 'react-transition-group';\nimport { HintBox, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\n\ntype TOnfidoSdkView = {\n    is_onfido_disabled: boolean;\n    is_onfido_container_hidden?: boolean;\n    onfido_element_id?: string;\n    is_confirmed: boolean;\n    data_testid?: string;\n    is_onfido_initialized?: boolean;\n};\n\nconst OnfidoSdkView = ({\n    is_onfido_disabled,\n    is_onfido_container_hidden,\n    onfido_element_id = 'onfido',\n    is_confirmed,\n    data_testid,\n    is_onfido_initialized,\n}: TOnfidoSdkView) => {\n    const [is_status_message_visible, setIsStatusMessageVisible] = React.useState(false);\n    const transition_in_timeout_ref = React.useRef<ReturnType<typeof setTimeout>>();\n    const transition_out_timeout_ref = React.useRef<ReturnType<typeof setTimeout>>();\n\n    React.useEffect(() => {\n        const onConfirm = () => {\n            transition_in_timeout_ref.current = setTimeout(() => {\n                setIsStatusMessageVisible(true);\n            }, 800);\n            transition_out_timeout_ref.current = setTimeout(() => {\n                setIsStatusMessageVisible(false);\n                // the requirement is to hide the message after 5 sec, 4650 here + 350 in CSSTransition to make it smoother\n            }, 4650);\n        };\n\n        if (is_confirmed) {\n            onConfirm();\n        }\n    }, [is_confirmed]);\n\n    React.useEffect(() => {\n        return () => {\n            clearTimeout(transition_in_timeout_ref.current);\n            clearTimeout(transition_out_timeout_ref.current);\n        };\n    }, []);\n\n    return (\n        <div className='onfido-container-view_wrapper'>\n            <div className={clsx({ 'onfido-container__status-message_container': !is_onfido_disabled })}>\n                <CSSTransition\n                    appear={is_status_message_visible}\n                    in={is_status_message_visible}\n                    timeout={{\n                        exit: 350,\n                    }}\n                    classNames={{\n                        exit: 'onfido-container__status-message--exit',\n                    }}\n                    unmountOnExit\n                >\n                    <HintBox\n                        className='onfido-container__status-message'\n                        icon='IcAlertAnnounce'\n                        message={\n                            <Text as='p' size='xxxs'>\n                                <Localize i18n_default_text='Your personal details have been saved successfully.' />\n                            </Text>\n                        }\n                        is_info\n                    />\n                </CSSTransition>\n            </div>\n            <section>\n                {is_onfido_disabled && is_onfido_initialized && (\n                    <div className='onfido-container__info-message'>\n                        <HintBox\n                            icon='IcInfoBlue'\n                            message={\n                                <Text as='p' size='xxxs'>\n                                    <Localize i18n_default_text='Hit the checkbox above to choose your document.' />\n                                </Text>\n                            }\n                            is_info\n                        />\n                    </div>\n                )}\n                <div\n                    data-testid={data_testid}\n                    id={onfido_element_id}\n                    className={clsx({\n                        'onfido-container__disabled': is_onfido_disabled,\n                        'onfido-container__hidden': is_onfido_container_hidden,\n                    })}\n                />\n            </section>\n        </div>\n    );\n};\n\nexport default OnfidoSdkView;\n","import React, { useCallback } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { useSettings } from '@deriv/api';\nimport { ResidenceList } from '@deriv/api-types';\nimport { Loading, ThemedScrollbars } from '@deriv/components';\nimport { useNotificationEvent, useServiceToken } from '@deriv/hooks';\nimport { observer, useStore } from '@deriv/stores';\nimport ErrorMessage from '../../../Components/error-component';\nimport MissingPersonalDetails from '../../../Components/poi/missing-personal-details';\nimport PoiConfirmWithExampleFormContainer from '../../../Components/poi/poi-confirm-with-example-form-container';\nimport OnfidoSdkView from './onfido-sdk-view';\nimport type { SdkError, SdkHandle, SdkResponse, SupportedLanguages } from '../../../Types';\nimport { convertAlpha2toAlpha3, convertAlpha3toAlpha2, getOnfidoSupportedLocaleCode } from '../../../Helpers/utils';\nimport { getOnfidoPhrases } from '../../../Constants/onfido';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TAPIError = {\n    code?: string;\n    message?: string;\n    type?: string;\n};\n\ntype TOnfidoSdkViewContainer = {\n    country_code: string;\n    documents_supported:\n        | string[]\n        | DeepRequired<ResidenceList>[0]['identity']['services']['onfido']['documents_supported'];\n    getChangeableFields: () => string[];\n    handleViewComplete: () => void;\n    height?: number | string;\n    is_default_enabled?: boolean;\n};\n\nconst OnfidoSdkViewContainer = observer(\n    ({\n        country_code,\n        documents_supported,\n        getChangeableFields,\n        handleViewComplete,\n        height,\n        is_default_enabled,\n    }: TOnfidoSdkViewContainer) => {\n        const [api_error, setAPIError] = React.useState<string>();\n        const [missing_personal_details, setMissingPersonalDetails] = React.useState('');\n        const [is_onfido_disabled, setIsOnfidoDisabled] = React.useState(true);\n        const [is_confirmed, setIsConfirmed] = React.useState(false);\n        const [is_onfido_initialized, setIsOnfidoInitialized] = React.useState(false);\n        // used to check that we only initialize and load the onfido script once\n        const [is_onfido_loaded, setIsOnfidoLoaded] = React.useState(false);\n        const { data: account_settings } = useSettings();\n\n        const { send, isSuccess: isNotified } = useNotificationEvent();\n        const { common } = useStore();\n        const { current_language } = common;\n        const { isMobile } = useDevice();\n\n        // IDV country code - Alpha ISO2. Onfido country code - Alpha ISO3\n        const onfido_country_code = convertAlpha2toAlpha3(country_code);\n\n        // Service Token country code - Alpha ISO2\n        const token_country_code = convertAlpha3toAlpha2(country_code);\n\n        const { service_token, isSuccess, isError, error, isLoading } = useServiceToken({\n            service: 'onfido',\n            country: token_country_code,\n        });\n\n        const onfido_init = React.useRef<SdkHandle>();\n\n        // Onfido `document_supported` checks are made for an array of string.\n        // Ensure that `document_supported` passed respects this no the matter source.\n        const onfido_documents = Array.isArray(documents_supported)\n            ? documents_supported\n            : Object.keys(documents_supported).map(d => documents_supported[d].display_name);\n\n        let component_to_load: React.ReactNode;\n\n        const onComplete = React.useCallback(\n            (data: Omit<SdkResponse, 'data'> & { data?: { id?: string } }) => {\n                onfido_init?.current?.tearDown();\n                const document_ids = Object.keys(data).map(key => data[key as keyof SdkResponse]?.id);\n                if (document_ids?.length) {\n                    send({\n                        category: 'authentication',\n                        event: 'poi_documents_uploaded',\n                        args: {\n                            documents: document_ids as Array<string>,\n                        },\n                    });\n                }\n            },\n            [send]\n        );\n\n        const initOnfido = React.useCallback(\n            async (service_token: string) => {\n                if (!service_token) return;\n                try {\n                    onfido_init.current = await window.Onfido.init({\n                        containerId: 'onfido',\n                        language: {\n                            locale: getOnfidoSupportedLocaleCode(current_language) as SupportedLanguages,\n                            phrases: getOnfidoPhrases(),\n                            mobilePhrases: getOnfidoPhrases(),\n                        },\n                        token: service_token,\n                        useModal: false,\n                        useMemoryHistory: true,\n                        onComplete,\n                        steps: [\n                            {\n                                type: 'document',\n                                options: {\n                                    documentTypes: {\n                                        passport: onfido_documents.some(doc => /Passport/g.test(doc)),\n                                        driving_licence: onfido_documents.some(doc => /Driving Licence/g.test(doc))\n                                            ? {\n                                                  country: onfido_country_code,\n                                              }\n                                            : false,\n                                        national_identity_card: onfido_documents.some(doc =>\n                                            /National Identity Card/g.test(doc)\n                                        )\n                                            ? {\n                                                  country: onfido_country_code,\n                                              }\n                                            : false,\n                                    },\n                                    hideCountrySelection: true,\n                                },\n                            },\n                            'face',\n                        ],\n                    });\n                    setIsOnfidoInitialized(true);\n                } catch (err) {\n                    setAPIError((err as SdkError)?.message ?? err);\n                    setIsOnfidoDisabled(true);\n                    onfido_init.current = undefined;\n                } finally {\n                    setIsOnfidoLoaded(true);\n                }\n            },\n            [onComplete, onfido_documents, onfido_country_code, current_language]\n        );\n\n        const loadOnfidoSdkScript = React.useCallback(\n            (token: string) => {\n                document.getElementById('onfido_sdk')?.remove();\n                document.getElementById('onfido_style')?.remove();\n\n                // check if the onfido sdk script has been loaded, and if its still loading the onfido script, don't re-attempt to load the script again\n                const script_node = document.createElement('script');\n                const link_node = document.createElement('link');\n\n                // [TODO] - Need to lock version of onfido sdk - Current version in CDN is 13.8.4\n                script_node.id = 'onfido_sdk';\n                script_node.src = 'https://assets.onfido.com/web-sdk-releases/13.8.4/onfido.min.js';\n                link_node.href = 'https://assets.onfido.com/web-sdk-releases/13.8.4/style.css';\n                link_node.rel = 'stylesheet';\n                link_node.id = 'onfido_style';\n\n                document.body.appendChild(script_node);\n                document.body.appendChild(link_node);\n\n                script_node.addEventListener('load', () => {\n                    initOnfido(token);\n                });\n            },\n            [initOnfido]\n        );\n\n        const handleError = (error: TAPIError) => {\n            switch (error.code) {\n                case 'MissingPersonalDetails':\n                    setMissingPersonalDetails('all');\n                    break;\n                case 'InvalidPostalCode':\n                    setMissingPersonalDetails('postal_code');\n                    break;\n                default:\n                    setAPIError(error.message);\n                    break;\n            }\n        };\n\n        const onConfirm = useCallback(() => {\n            setIsConfirmed(true);\n            setIsOnfidoDisabled(false);\n        }, []);\n\n        React.useEffect(() => {\n            if (isSuccess && service_token?.onfido?.token && !is_onfido_loaded) {\n                loadOnfidoSdkScript(service_token?.onfido?.token);\n            } else if (isError) {\n                handleError(error as TAPIError);\n            }\n        }, [error, isError, isSuccess, is_onfido_loaded, loadOnfidoSdkScript, service_token?.onfido?.token]);\n\n        React.useEffect(() => {\n            /**\n             * Enables onfido sdk\n             * Pass is_default_enabled to enable onfido immediately if personal detail component is not required\n             * so no user prompt will be there so submit the details in i.e. in case of flow for nigerian clients ATM\n             */\n            if (is_default_enabled) {\n                setIsOnfidoDisabled(false);\n            }\n        }, [is_default_enabled]);\n\n        React.useEffect(() => {\n            /**\n             * Handles cleanup operations when document submission is completed\n             */\n            if (isNotified) {\n                handleViewComplete();\n            }\n        }, [handleViewComplete, isNotified]);\n\n        if (isLoading || !is_onfido_loaded) {\n            component_to_load = <Loading is_fullscreen={false} />;\n        } else if (missing_personal_details) {\n            component_to_load = (\n                <MissingPersonalDetails\n                    has_invalid_postal_code={missing_personal_details === 'postal_code'}\n                    from='proof_of_identity'\n                />\n            );\n        } else if (api_error) {\n            // Error message will only display if retry count exceeds 3\n            component_to_load = <ErrorMessage message={api_error} />;\n        }\n\n        return (\n            <ThemedScrollbars is_bypassed={isMobile} height={height}>\n                <div className='onfido-container'>\n                    {component_to_load || (\n                        <CSSTransition\n                            appear={is_onfido_disabled}\n                            in={is_onfido_disabled}\n                            timeout={{\n                                exit: 350,\n                            }}\n                            classNames={{\n                                exit: 'account-form__poi-confirm-example_wrapper--exit',\n                            }}\n                            unmountOnExit\n                        >\n                            <div className='account-form__poi-confirm-example_wrapper account-form__poi-confirm-example_container'>\n                                <PoiConfirmWithExampleFormContainer\n                                    account_settings={account_settings}\n                                    getChangeableFields={getChangeableFields}\n                                    onFormConfirm={onConfirm}\n                                />\n                            </div>\n                        </CSSTransition>\n                    )}\n                    <OnfidoSdkView\n                        is_onfido_disabled={is_onfido_disabled}\n                        is_confirmed={is_confirmed}\n                        is_onfido_container_hidden={!!component_to_load}\n                        is_onfido_initialized={is_onfido_initialized}\n                    />\n                </div>\n            </ThemedScrollbars>\n        );\n    }\n);\n\nOnfidoSdkViewContainer.displayName = 'OnfidoSdkViewContainer';\n\nexport default OnfidoSdkViewContainer;\n","import { localize } from '@deriv/translations';\nimport { FormikValues } from 'formik';\n\nexport const ROOT_CLASS = 'manual-poi-details';\n\nexport const DOCUMENT_TYPES = {\n    NATIONAL_IDENTITY_CARD: 'national_identity_card',\n    NIMC_SLIP: 'nimc_slip',\n    PASSPORT: 'passport',\n    DRIVING_LICENCE: 'driving_licence',\n    BIRTH_CERTIFICATE: 'birth_certificate',\n    SELFIE_WITH_ID: 'selfie_with_id',\n    OTHER: 'other',\n};\n\nconst PAGE_TYPE = {\n    FRONT: 'front',\n    BACK: 'back',\n    PHOTO: 'photo',\n};\n\nexport const SELFIE_DOCUMENT = {\n    document_type: DOCUMENT_TYPES.SELFIE_WITH_ID,\n    pageType: PAGE_TYPE.PHOTO,\n    name: 'selfie_with_id',\n    icon: 'IcSelfie',\n    info: localize('Upload your selfie.'),\n};\n\nexport const date_field = {\n    name: 'expiry_date',\n    label: localize('Expiry date'),\n    type: 'date',\n    required: true,\n};\n\nexport const getDocumentIndex = ({ country_code }: FormikValues) => [\n    {\n        onfido_name: 'Passport',\n        card: {\n            title: localize('Passport'),\n            description: localize('Upload the page that contains your photo.'),\n            icon: 'IcPoiPassport',\n        },\n        details: {\n            fields: [\n                {\n                    name: 'document_id',\n                    label: localize('Passport number'),\n                    type: 'text',\n                    required: true,\n                },\n                { ...date_field },\n            ],\n            documents_title: localize('Next, upload the page of your passport that contains your photo.'),\n            documents: [\n                {\n                    document_type: DOCUMENT_TYPES.PASSPORT,\n                    pageType: PAGE_TYPE.FRONT,\n                    name: 'passport',\n                    icon: 'IcPassport',\n                    info: localize('Upload the page of your passport that contains your photo.'),\n                },\n            ],\n        },\n    },\n    {\n        onfido_name: 'Driving Licence',\n        card: {\n            title: localize('Driving licence'),\n            description: localize('Upload the front and back of your driving licence.'),\n            icon: 'IcPoiDrivingLicence',\n        },\n        details: {\n            fields_title: localize('First, enter your driving licence number and the expiry date.'),\n            fields: [\n                {\n                    name: 'document_id',\n                    label: localize('Driving licence number'),\n                    type: 'text',\n                    required: true,\n                },\n                { ...date_field },\n            ],\n            documents_title: localize('Next, upload the front and back of your driving licence.'),\n            documents: [\n                {\n                    document_type: DOCUMENT_TYPES.DRIVING_LICENCE,\n                    pageType: PAGE_TYPE.FRONT,\n                    name: 'driving_licence_front',\n                    icon: 'IcDrivingLicenceFront',\n                    info: localize('Upload the front of your driving licence.'),\n                },\n                {\n                    document_type: DOCUMENT_TYPES.DRIVING_LICENCE,\n                    pageType: PAGE_TYPE.BACK,\n                    name: 'driving_licence_back',\n                    icon: 'IcIdCardBack',\n                    info: localize('Upload the back of your driving licence.'),\n                },\n            ],\n        },\n    },\n    {\n        onfido_name: 'National Identity Card',\n        card: {\n            title: localize('Identity card'),\n            description: localize('Upload the front and back of your identity card.'),\n            icon: 'IcPoiIdentityCard',\n        },\n        details: {\n            fields_title: localize('First, enter your identity card number and the expiry date.'),\n            fields: [\n                {\n                    name: 'document_id',\n                    label: localize('Identity card number'),\n                    type: 'text',\n                    required: true,\n                },\n                { ...date_field },\n            ],\n            documents_title: localize('Next, upload the front and back of your identity card.'),\n            documents: [\n                {\n                    document_type: DOCUMENT_TYPES.NATIONAL_IDENTITY_CARD,\n                    pageType: PAGE_TYPE.FRONT,\n                    name: 'identity_card_front',\n                    icon: 'IcIdCardFront',\n                    info: localize('Upload the front of your identity card.'),\n                },\n                {\n                    document_type: DOCUMENT_TYPES.NATIONAL_IDENTITY_CARD,\n                    pageType: PAGE_TYPE.BACK,\n                    name: 'identity_card_back',\n                    icon: 'IcIdCardBack',\n                    info: localize('Upload the back of your identity card.'),\n                },\n            ],\n        },\n    },\n    ...(country_code === 'ng'\n        ? [\n              {\n                  card: {\n                      title: localize('NIMC slip and proof of age'),\n                      description: localize('Upload both of these documents to prove your identity.'),\n                      icon: 'IcPoiNimcSlip',\n                  },\n                  details: {\n                      fields: [\n                          {\n                              name: 'document_id',\n                              label: localize('NIMC slip number'),\n                              type: 'text',\n                              required: true,\n                          },\n                      ],\n                      documents_title: localize('Next, upload both of the following documents.'),\n                      documents: [\n                          {\n                              document_type: DOCUMENT_TYPES.NIMC_SLIP,\n                              lifetime_valid: true,\n                              pageType: PAGE_TYPE.FRONT,\n                              name: 'nimc_slip',\n                              icon: 'IcPoiNimcSlipHorizontal',\n                              info: localize('Upload your NIMC slip.'),\n                          },\n                          {\n                              document_type: DOCUMENT_TYPES.BIRTH_CERTIFICATE,\n                              pageType: PAGE_TYPE.PHOTO,\n                              name: 'birth_certificate_front',\n                              icon: 'IcDop',\n                              info: localize(\n                                  'Upload your proof of age: birth certificate or age declaration document.'\n                              ),\n                          },\n                      ],\n                  },\n              },\n          ]\n        : []),\n];\n","import React from 'react';\nimport { Field, FormikValues } from 'formik';\nimport { DatePicker, Input } from '@deriv/components';\nimport { toMoment } from '@deriv/shared';\nimport { ROOT_CLASS } from '../constants';\n\nconst InputField = ({ data }: FormikValues) => {\n    const min_date = toMoment().add(6, 'months').format('YYYY-MM-DD');\n    switch (data.type) {\n        case 'text':\n            return (\n                <Field name={data.name}>\n                    {({ field, form: { errors, touched } }: FormikValues) => (\n                        <Input\n                            {...field}\n                            className={`${ROOT_CLASS}__field`}\n                            type='text'\n                            label={`${data.label}${data.required ? '*' : ''}`}\n                            error={touched[field.name] && errors[field.name]}\n                        />\n                    )}\n                </Field>\n            );\n        case 'date':\n            return (\n                <Field name={data.name}>\n                    {({ field, form: { errors, touched } }: FormikValues) => (\n                        <DatePicker\n                            {...field}\n                            className={`${ROOT_CLASS}__field`}\n                            date_format='YYYY-MM-DD'\n                            display_format='DD-MM-YYYY'\n                            start_date={min_date}\n                            min_date={min_date}\n                            name={data.name}\n                            label={`${data.label}${data.required ? '*' : ''}`}\n                            error={touched[field.name] && errors[field.name]}\n                            readOnly\n                        />\n                    )}\n                </Field>\n            );\n        default:\n            return null;\n    }\n};\n\nexport default InputField;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Field, FieldProps, FormikProps, FormikValues } from 'formik';\nimport { localize } from '@deriv/translations';\nimport { supported_filetypes, max_document_size } from '@deriv/shared';\nimport { Button, Icon, Text, FileDropzone } from '@deriv/components';\nimport { ROOT_CLASS } from '../constants';\nimport { useDevice } from '@deriv-com/ui';\n\nconst DROPZONE_ERRORS = {\n    'file-too-large': localize('File size should be 8MB or less'),\n    'file-invalid-type': localize('File uploaded is not supported'),\n    'too-many-files': localize('Please select one file only'),\n    GENERAL: localize('Sorry, an error occured. Please select another file.'),\n};\ntype TDROPZONE_ERRORS = Readonly<typeof DROPZONE_ERRORS>;\n\ntype TUploader = {\n    data: FormikValues;\n    value: FormikValues;\n    is_full?: boolean;\n    has_frame?: boolean;\n    onChange?: (e: unknown) => void;\n    setFieldValue: FormikProps<FormikValues>['setFieldValue'];\n    handleChange: (file: object | null, setFieldValue: FormikProps<FormikValues>['setFieldValue']) => void;\n};\n\ntype TMessage = {\n    data?: FormikValues;\n    open?: () => void;\n};\n\ntype THandleRejectFiles = Array<{\n    file: File;\n    errors: [\n        {\n            message: string;\n            code: string;\n        }\n    ];\n}>;\n\nconst Message = ({ data, open }: TMessage) => {\n    const { isDesktop } = useDevice();\n    return (\n        <div className={`${ROOT_CLASS}__uploader-details`}>\n            <Icon className={`${ROOT_CLASS}__uploader-icon`} icon={data?.icon} size={236} />\n            <Text as='p' size='xs' color='general' align='center'>\n                {data?.info}\n            </Text>\n            <Button\n                medium\n                secondary\n                text={isDesktop ? localize('Drop file or click here to upload') : localize('Tap here to upload')}\n                onClick={open}\n            />\n        </div>\n    );\n};\n\nconst Preview = ({ data, setFieldValue, value, has_frame, handleChange }: Omit<TUploader, 'is_full' | 'onChange'>) => {\n    const [background_url, setBackgroundUrl] = React.useState('');\n\n    React.useEffect(() => {\n        setBackgroundUrl(value?.file ? URL.createObjectURL(value?.file) : '');\n    }, [value]);\n\n    return (\n        <div className={`${ROOT_CLASS}__uploader-details ${ROOT_CLASS}__uploader-details--preview`}>\n            <div\n                className={clsx(`${ROOT_CLASS}__uploader-image`, {\n                    [`${ROOT_CLASS}__uploader-image--has-frame`]: has_frame,\n                })}\n                style={{ backgroundImage: `url(${background_url})` }}\n            >\n                {has_frame && <Icon icon='IcPoiFrame' className={`${ROOT_CLASS}__uploader-frame`} />}\n                {(!background_url || value?.file.type.indexOf('pdf') !== -1) && (\n                    <React.Fragment>\n                        <Icon icon='IcCloudUpload' size={50} />\n                        <Text as='p' size='xs' color='general' align='center'>\n                            {value?.file.name}\n                        </Text>\n                    </React.Fragment>\n                )}\n                <Icon\n                    icon='IcCloseCircle'\n                    className={`${ROOT_CLASS}__uploader-remove`}\n                    onClick={() => {\n                        handleChange?.(null, setFieldValue);\n                    }}\n                    size={16}\n                />\n            </div>\n            <Text as='p' size='xs' color='general' align='center'>\n                {data?.info}\n            </Text>\n        </div>\n    );\n};\n\nconst Uploader = ({ data, value, is_full, onChange, has_frame }: Omit<TUploader, 'setFieldValue' | 'handleChange'>) => {\n    const { isDesktop } = useDevice();\n    const [image, setImage] = React.useState<FormikValues>();\n\n    React.useEffect(() => {\n        setImage(value);\n    }, [value]);\n\n    const handleChange = (file: object | null, setFieldValue: FormikProps<FormikValues>['setFieldValue']) => {\n        onChange?.(file);\n        setFieldValue?.(data?.name, file);\n    };\n\n    const handleAccept = (files: object[], setFieldValue: FormikProps<FormikValues>['setFieldValue']) => {\n        const file = { file: files[0], errors: [], ...data };\n        handleChange(file, setFieldValue);\n    };\n\n    const handleReject = (files: THandleRejectFiles, setFieldValue: FormikProps<FormikValues>['setFieldValue']) => {\n        const errors = files[0].errors?.map((error: { code: string }) =>\n            DROPZONE_ERRORS[error.code as keyof TDROPZONE_ERRORS]\n                ? DROPZONE_ERRORS[error.code as keyof TDROPZONE_ERRORS]\n                : DROPZONE_ERRORS.GENERAL\n        );\n        const file = { ...files[0], errors, ...data };\n        handleChange(file, setFieldValue);\n    };\n\n    const ValidationErrorMessage: React.ComponentProps<typeof FileDropzone>['validation_error_message'] = open => (\n        <div className={`${ROOT_CLASS}__uploader-details`}>\n            {image?.errors?.map((error: string, index: number) => (\n                <Text key={index} as='p' size='xs' color='secondary' align='center'>\n                    {error}\n                </Text>\n            ))}\n            <Button\n                medium\n                secondary\n                text={isDesktop ? localize('Drop file or click here to upload') : localize('Tap here to upload')}\n                onClick={open}\n            />\n        </div>\n    );\n\n    return (\n        <Field name={data?.name}>\n            {({ form: { setFieldValue } }: FieldProps) => (\n                <div\n                    className={clsx(`${ROOT_CLASS}__uploader`, {\n                        [`${ROOT_CLASS}__uploader--full`]: is_full,\n                    })}\n                >\n                    <FileDropzone\n                        accept={supported_filetypes}\n                        error_message={localize('Please upload supported file type.')}\n                        filename_limit={32}\n                        hover_message={localize('Drop files here..')}\n                        max_size={max_document_size}\n                        message={(open?: () => void) => <Message open={open} data={data} />}\n                        preview_single={\n                            image && (\n                                <Preview\n                                    data={data}\n                                    value={image}\n                                    has_frame={has_frame}\n                                    setFieldValue={setFieldValue}\n                                    handleChange={handleChange}\n                                />\n                            )\n                        }\n                        multiple={false}\n                        onDropAccepted={(files: object[]) => handleAccept(files, setFieldValue)}\n                        onDropRejected={(files: THandleRejectFiles) => handleReject(files, setFieldValue)}\n                        validation_error_message={value?.errors?.length ? ValidationErrorMessage : undefined}\n                        noClick\n                        value={(image ? [image] : []) as unknown as React.ComponentProps<typeof FileDropzone>['value']}\n                    />\n                </div>\n            )}\n        </Field>\n    );\n};\n\nexport default Uploader;\n","import { localize } from '@deriv/translations';\nimport { FormikErrors, FormikValues } from 'formik';\n\nexport const setInitialValues = (fields: FormikValues) => {\n    const values: FormikValues = {};\n    fields.forEach((field: FormikValues) => {\n        values[field.name] = '';\n    });\n    return values;\n};\n\nexport const checkIsEmpty = (value: unknown) => {\n    return typeof value === 'string' ? !value.trim() : !value;\n};\n\ntype TFields = {\n    name: string;\n    label: string;\n    type: string;\n    required: boolean;\n}[];\n\ntype TDocument = {\n    document_type: string;\n    pageType: string;\n    name: string;\n    icon: string;\n    info: string;\n}[];\n\nexport const validateFields = (values: FormikValues, fields: TFields = [], documents: TDocument = []) => {\n    const errors: FormikErrors<FormikValues> = {};\n\n    fields.forEach((field: { name: string; label: string; type: string; required: boolean }) => {\n        const { name, label, type } = field;\n        const value = values[name];\n\n        if (field.required && checkIsEmpty(value)) {\n            errors[name] = localize('{{label}} is required.', {\n                label,\n            });\n        } else if (type === 'text' && value.length > 30) {\n            errors[name] = localize('{{label}} must be less than 30 characters.', {\n                label,\n            });\n        } else if (type === 'text' && !/^[\\w\\s-]{0,30}$/g.test(value)) {\n            errors[name] = localize('Only letters, numbers, space, underscore, and hyphen are allowed for {{label}}.', {\n                label,\n            });\n        }\n    });\n\n    documents.forEach((document: { name: string }) => {\n        const { name } = document;\n        const value = values[name];\n\n        if (checkIsEmpty(value)) {\n            errors[name] = localize('{{name}} is required.', {\n                name,\n            });\n        } else if (value.errors?.length) {\n            errors[name] = value.errors[0];\n        }\n    });\n\n    return errors;\n};\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Formik, Form, FormikValues } from 'formik';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport { Button, Icon, Text } from '@deriv/components';\nimport InputField from './input-field';\nimport Uploader from './uploader';\nimport { setInitialValues, validateFields } from './utils';\nimport { ROOT_CLASS, date_field, getDocumentIndex } from '../constants';\nimport FormFooter from '../../../../form-footer';\nimport FormBody from '../../../../form-body';\n\nconst icons = [\n    {\n        icon: 'IcPoiClearPhoto',\n        text: localize('A clear colour photo or scanned image'),\n    },\n    {\n        icon: 'IcPoiFileFormat',\n        text: localize('JPEG, JPG, PNG, PDF, or GIF'),\n    },\n    {\n        icon: 'IcPoiFileSize',\n        text: localize('Less than 8MB'),\n    },\n    {\n        icon: 'IcPoiDocExpiry',\n        text: localize('Must be valid for at least 6 months'),\n    },\n];\n\ntype TDocumentsUpload = {\n    initial_values?: FormikValues;\n    is_from_external?: boolean;\n    goToCards: () => void;\n    onSubmit: () => void;\n    data: ReturnType<typeof getDocumentIndex>[number]['details'];\n};\n\ntype TIconsItem = {\n    data: FormikValues;\n};\n\nconst IconsItem = ({ data }: TIconsItem) => (\n    <div className={`${ROOT_CLASS}__icons-item`}>\n        <Icon icon={data.icon} size={24} />\n        <Text as='p' size='xxxs' align='center'>\n            {data.text}\n        </Text>\n    </div>\n);\n\nconst DocumentsUpload = ({ initial_values, is_from_external, data, goToCards, onSubmit }: TDocumentsUpload) => {\n    const { isDesktop } = useDevice();\n    const { fields, documents_title, documents } = data;\n    const is_expiry_date_required = fields.some(field => field.name === date_field.name);\n\n    const fields_title = is_expiry_date_required ? (\n        <Localize\n            i18n_default_text='First, enter your {{label}} and the expiry date.'\n            values={{\n                label: fields?.[0].label,\n            }}\n        />\n    ) : (\n        <Localize\n            i18n_default_text='First, enter your {{label}}.'\n            values={{\n                label: fields?.[0].label,\n            }}\n        />\n    );\n\n    return (\n        <div\n            className={clsx(ROOT_CLASS, {\n                [`${ROOT_CLASS}--mobile`]: !isDesktop,\n            })}\n        >\n            <Formik\n                initialValues={initial_values || setInitialValues([...(fields || []), ...(documents || [])])}\n                validate={values => validateFields(values, fields, documents)}\n                onSubmit={onSubmit}\n            >\n                {({ values, isValid, touched }: FormikValues) => {\n                    const is_form_touched = Object.keys(touched).length > 0;\n                    const is_form_empty = Object.values(values).some(\n                        (field, key) => (field === null || field === '') && fields?.[key]?.required\n                    );\n\n                    return (\n                        <Form className={`${ROOT_CLASS}__form`}>\n                            <FormBody className='form-body' scroll_offset={isDesktop ? '80px' : '180px'}>\n                                <div className={`${ROOT_CLASS}__fields-content`}>\n                                    <Text as='h3' size='s' color='prominent'>\n                                        {fields_title}\n                                    </Text>\n                                    <div className={`${ROOT_CLASS}__fields-wrap`}>\n                                        {fields?.map((field: FormikValues) => (\n                                            <InputField key={field.name} data={field} />\n                                        ))}\n                                    </div>\n                                    <div className={`${ROOT_CLASS}__divider`} />\n                                    <Text as='h3' size='s' color='prominent'>\n                                        {documents_title}\n                                    </Text>\n                                    <div className={`${ROOT_CLASS}__uploaders-wrap`}>\n                                        {documents?.map((item: FormikValues) => (\n                                            <Uploader\n                                                key={item.name}\n                                                data={item}\n                                                value={values[item.name]}\n                                                is_full={documents.length === 1 || is_from_external}\n                                            />\n                                        ))}\n                                    </div>\n                                    <div className={`${ROOT_CLASS}__icons`}>\n                                        {icons.map(item =>\n                                            item.icon === 'IcPoiDocExpiry' && !is_expiry_date_required ? null : (\n                                                <IconsItem key={item.icon} data={item} />\n                                            )\n                                        )}\n                                    </div>\n                                </div>\n                            </FormBody>\n                            <FormFooter>\n                                <div className={`${ROOT_CLASS}__btns`}>\n                                    <Button onClick={goToCards} secondary large text={localize('Back')} />\n                                    <Button\n                                        type='submit'\n                                        primary\n                                        large\n                                        is_disabled={!isValid || (!is_form_touched && is_form_empty)}\n                                        text={localize('Next')}\n                                    />\n                                </div>\n                            </FormFooter>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </div>\n    );\n};\n\nexport default DocumentsUpload;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Form, Formik, FormikProps, FormikValues } from 'formik';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport { Button, Text } from '@deriv/components';\nimport Uploader from './uploader';\nimport { setInitialValues, validateFields } from './utils';\nimport { ROOT_CLASS, SELFIE_DOCUMENT } from '../constants';\nimport FormBody from '../../../../form-body';\nimport FormFooter from '../../../../form-footer';\n\ntype TSelfieUpload = {\n    initial_values?: FormikValues;\n    goBack: () => void;\n    onConfirm: () => void;\n    onFileDrop: () => void;\n};\n\nconst SelfieUpload = ({ initial_values, goBack, onConfirm, onFileDrop }: TSelfieUpload) => {\n    const { isDesktop } = useDevice();\n    return (\n        <div\n            className={clsx(ROOT_CLASS, {\n                [`${ROOT_CLASS}--mobile`]: !isDesktop,\n            })}\n        >\n            <Formik\n                initialValues={initial_values || setInitialValues([SELFIE_DOCUMENT])}\n                validate={values => validateFields(values, undefined, [SELFIE_DOCUMENT])}\n                onSubmit={onConfirm}\n            >\n                {({ values, isValid, isSubmitting, touched }: Partial<FormikProps<FormikValues>>) => {\n                    let is_form_touched, is_form_empty;\n                    if (touched) {\n                        is_form_touched = Object.keys(touched).length > 0;\n                    }\n                    if (values) {\n                        is_form_empty = Object.values(values).some(field => field === null || field === '');\n                    }\n\n                    return (\n                        <Form className={`${ROOT_CLASS}__form`}>\n                            <FormBody className='form-body' scroll_offset={isDesktop ? '8rem' : '18rem'}>\n                                <div className={`${ROOT_CLASS}__fields-content`}>\n                                    <Text as='h3' size='s' weight='bold' color='prominent'>\n                                        <Localize i18n_default_text='Upload your selfie' />\n                                    </Text>\n                                    <div className={`${ROOT_CLASS}__uploaders-wrap`}>\n                                        <Uploader\n                                            data={SELFIE_DOCUMENT}\n                                            value={values ? values[SELFIE_DOCUMENT.name] : ''}\n                                            is_full\n                                            onChange={onFileDrop}\n                                            has_frame\n                                        />\n                                    </div>\n                                    <div className={`${ROOT_CLASS}__notice`}>\n                                        <Text as='p' size='xs' color='general'>\n                                            <Localize i18n_default_text='Before uploading, please ensure that you’re facing forward in the selfie, your face is within the frame, and your eyes are clearly visible even if you’re wearing glasses.' />\n                                        </Text>\n                                    </div>\n                                </div>\n                            </FormBody>\n                            <FormFooter>\n                                <div className={`${ROOT_CLASS}__btns`}>\n                                    <Button onClick={goBack} secondary large text={localize('Back')} />\n                                    <Button\n                                        type='submit'\n                                        primary\n                                        large\n                                        is_disabled={!isValid || isSubmitting || (!is_form_touched && is_form_empty)}\n                                        text={localize('Confirm and upload')}\n                                    />\n                                </div>\n                            </FormFooter>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </div>\n    );\n};\n\nexport default SelfieUpload;\n","import React from 'react';\nimport DocumentsUpload from './documents-upload';\nimport SelfieUpload from './selfie-upload';\nimport { SELFIE_DOCUMENT, getDocumentIndex } from '../constants';\nimport './card-details.scss';\nimport { FormikValues } from 'formik';\n\ntype TCardDetails = {\n    data: ReturnType<typeof getDocumentIndex>[number]['details'];\n    onComplete: (e: object) => void;\n    goToCards: () => void;\n    is_from_external?: boolean;\n};\n\nconst CardDetails = ({ data, goToCards, onComplete, is_from_external }: TCardDetails) => {\n    const [documents, setDocuments] = React.useState<FormikValues>();\n    const [selfie, setSelfie] = React.useState<FormikValues>();\n    const [is_selfie_upload, setIsSelfieUpload] = React.useState(false);\n\n    const onSubmitDocuments = (values?: FormikValues) => {\n        setDocuments(values);\n        setIsSelfieUpload(true);\n    };\n\n    const onConfirmDocuments = (values?: FormikValues) => {\n        onComplete({ ...documents, ...values });\n    };\n\n    return (\n        <React.Fragment>\n            {!is_selfie_upload ? (\n                <DocumentsUpload\n                    initial_values={documents}\n                    is_from_external={is_from_external}\n                    data={data}\n                    goToCards={goToCards}\n                    onSubmit={onSubmitDocuments}\n                />\n            ) : (\n                <SelfieUpload\n                    initial_values={selfie}\n                    goBack={() => setIsSelfieUpload(false)}\n                    onConfirm={onConfirmDocuments}\n                    onFileDrop={(value?: string) => setSelfie({ [SELFIE_DOCUMENT.name]: value })}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default CardDetails;\n","import CardDetails from './card-details';\n\nexport default CardDetails;\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors in OnfidoUpload component\nimport React from 'react';\nimport { Loading, Icon, Text, Button } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { WS } from '@deriv/shared';\nimport { UploadComplete } from '../upload-complete/upload-complete';\nimport POIManualUploadFailed from '../../../poi-manual-upload-failed';\nimport { API_ERROR_CODES } from '../../../../Constants/api-error-codes';\nimport uploadFile from '../../../file-uploader-container/upload-file';\nimport OnfidoUpload from '../../../../Sections/Verification/ProofOfIdentity/onfido-sdk-view-container';\n\nimport CardDetails from './card-details';\nimport { SELFIE_DOCUMENT, getDocumentIndex } from './constants';\nimport { FormikValues } from 'formik';\n\nconst STATUS = {\n    IS_UPLOADING: 'IS_UPLOADING',\n    IS_COMPLETED: 'IS_COMPLETED',\n    IS_FAILED: 'IS_FAILED',\n};\n\ntype TDetailComponent = {\n    document: ReturnType<typeof getDocumentIndex>[number];\n    onClickBack: () => void;\n    root_class: string;\n    country_code_key?: string;\n    height?: string | number;\n    handleComplete?: () => void;\n    is_onfido_supported?: boolean;\n    is_from_external?: boolean;\n    is_for_mt5?: boolean;\n    handlePOIforMT5Complete?: () => void;\n    needs_poa?: boolean;\n};\n\nconst DetailComponent = ({\n    document,\n    onClickBack,\n    root_class,\n    country_code_key,\n    height,\n    handleComplete,\n    is_onfido_supported,\n    is_from_external,\n    is_for_mt5,\n    handlePOIforMT5Complete,\n    needs_poa,\n    ...props\n}: TDetailComponent) => {\n    const [status, setStatus] = React.useState('');\n    const [response_error, setError] = React.useState('');\n\n    let is_any_failed = false;\n\n    const uploadFiles = (data: FormikValues) =>\n        new Promise((resolve, reject) => {\n            const docs = document.details.documents.map((item: FormikValues) => item.name);\n            const files = Object.values(data).filter(item => [...docs, SELFIE_DOCUMENT.name].includes(item.name));\n            const files_length = files.length;\n            let file_to_upload_index = 0;\n            const results: object[] = [];\n            const uploadNext = () => {\n                const item = files[file_to_upload_index];\n                const { file, document_type, pageType, lifetime_valid } = item;\n                const expiration_date =\n                    typeof data.expiry_date?.format === 'function' ? data.expiry_date.format('YYYY-MM-DD') : undefined;\n                uploadFile(file, WS.getSocket, {\n                    document_type,\n                    page_type: pageType,\n                    expiration_date,\n                    document_id: data.document_id || '',\n                    lifetime_valid: +(lifetime_valid && !expiration_date),\n                    document_issuing_country: country_code_key,\n                })\n                    .then(response => {\n                        file_to_upload_index += 1;\n                        if (response?.warning === API_ERROR_CODES.DUPLICATE_DOCUMENT) {\n                            setStatus(STATUS.IS_DUPLICATE_UPLOAD);\n                        } else if (response?.warning || response.error) {\n                            is_any_failed = true;\n                            setStatus(STATUS.IS_FAILED);\n                            setError(\n                                response.message || (response.error ? response.error.message : localize('Failed'))\n                            );\n                            if (file_to_upload_index < files_length) {\n                                uploadNext();\n                            }\n                        } else if (file_to_upload_index < files_length) {\n                            results.push(response);\n                            uploadNext();\n                        } else {\n                            resolve(results);\n                        }\n                    })\n                    .catch(error => {\n                        reject(error);\n                    });\n            };\n\n            uploadNext();\n        });\n\n    const onComplete = (values: FormikValues) => {\n        setStatus(STATUS.IS_UPLOADING);\n        uploadFiles(values)\n            .then(() => {\n                if (!is_any_failed) {\n                    if (is_for_mt5) {\n                        handlePOIforMT5Complete?.();\n                    } else {\n                        setStatus(STATUS.IS_COMPLETED);\n                    }\n                }\n            })\n            .catch(error => {\n                setStatus(STATUS.IS_FAILED);\n                setError(error.message);\n            });\n    };\n\n    switch (status) {\n        case STATUS.IS_UPLOADING:\n            return <Loading is_fullscreen={false} is_slow_loading status={[localize('Uploading documents')]} />;\n        case STATUS.IS_COMPLETED:\n            return <UploadComplete is_from_external needs_poa={needs_poa} is_manual_upload />;\n        case STATUS.IS_FAILED:\n            return <POIManualUploadFailed error={response_error} />;\n        case STATUS.IS_DUPLICATE_UPLOAD:\n            return (\n                <POIManualUploadFailed\n                    error={\n                        <Localize i18n_default_text='It seems you’ve submitted this document before. Upload a new document.' />\n                    }\n                >\n                    <Button onClick={onClickBack} large primary className='upload_error_btn'>\n                        <Localize i18n_default_text='Try Again' />\n                    </Button>\n                </POIManualUploadFailed>\n            );\n\n        default:\n            return (\n                <React.Fragment>\n                    {is_onfido_supported ? (\n                        <React.Fragment>\n                            <div className={`${root_class}__detail-header`} onClick={onClickBack}>\n                                <Icon icon='IcArrowLeftBold' />\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    weight='bold'\n                                    color='prominent'\n                                    className={`${root_class}__back-title`}\n                                >\n                                    {localize('Back')}\n                                </Text>\n                            </div>\n                            <OnfidoUpload\n                                country_code={country_code_key}\n                                documents_supported={[document.onfido_name]}\n                                height={height ?? null}\n                                handleComplete={is_for_mt5 ? handlePOIforMT5Complete : handleComplete}\n                                is_default_enabled\n                                handleViewComplete={is_for_mt5 ? handlePOIforMT5Complete : handleComplete}\n                                {...props}\n                            />\n                        </React.Fragment>\n                    ) : (\n                        <CardDetails\n                            data={document.details}\n                            onComplete={onComplete}\n                            goToCards={onClickBack}\n                            is_from_external={is_from_external}\n                        />\n                    )}\n                </React.Fragment>\n            );\n    }\n};\n\nexport default DetailComponent;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TCardWithArrow = {\n    onClick: () => void;\n    title: string;\n    description: string;\n    icon: string;\n};\n\nconst CardWithArrow = ({ onClick, title, description, icon }: TCardWithArrow) => {\n    const { isDesktop } = useDevice();\n    return (\n        <div className='manual-poi__card' onClick={onClick}>\n            <Icon className='manual-poi__card-icon' icon={icon} size={64} />\n            <div className='manual-poi__card-content'>\n                <Text as='p' size='xs' weight='bold' color='prominent'>\n                    {title}\n                </Text>\n                <Text as='p' size={isDesktop ? 'xxs' : 'xxxs'}>\n                    {description}\n                </Text>\n            </div>\n\n            <Icon icon='IcChevronRight' size={isDesktop ? 31 : 23} />\n        </div>\n    );\n};\n\nexport { CardWithArrow };\n","import React from 'react';\nimport { Card } from '@deriv/components';\nimport { CardWithArrow } from './card-with-arrow';\nimport { getDocumentIndex } from './constants';\n\ntype TDocument = {\n    toggleDetail: (index: number) => void;\n    documents: ReturnType<typeof getDocumentIndex>;\n};\n\nexport const Documents = ({ toggleDetail, documents }: TDocument) => (\n    <React.Fragment>\n        {documents.map((item, index: number) => (\n            <Card\n                key={item.card?.icon}\n                renderContent={() => <CardWithArrow onClick={() => toggleDetail(index)} {...item.card} />}\n            />\n        ))}\n    </React.Fragment>\n);\n","import React from 'react';\nimport { Button, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { identity_status_codes } from '../../../../Sections/Verification/ProofOfIdentity/proof-of-identity-utils';\nimport DetailComponent from './detail-component';\nimport { Documents } from './documents';\nimport { getDocumentIndex, DOCUMENT_TYPES } from './constants';\nimport UploadComplete from '../upload-complete';\nimport { FormikValues } from 'formik';\nimport Verified from '../verified';\nimport Limited from '../limited';\nimport Expired from '../expired';\nimport FormFooter from '../../../form-footer';\n\nconst checkNimcStep = (documents: FormikValues) => {\n    let has_nimc = false;\n    documents.forEach((document: FormikValues) => {\n        if (document.document_type === DOCUMENT_TYPES.NIMC_SLIP) {\n            has_nimc = true;\n        }\n    });\n    return has_nimc;\n};\n\ntype TUnsupported = {\n    country_code: string;\n    handlePOIforMT5Complete: () => void;\n    manual: {\n        status: string;\n    };\n    redirect_button: React.ReactElement;\n    needs_poa: boolean;\n    handleBack: () => void;\n    handleRequireSubmission: () => void;\n    handleViewComplete: () => void;\n    allow_poi_resubmission: boolean;\n    onfido: {\n        submissions_left: number;\n    };\n    is_for_mt5?: boolean;\n    is_resubmission?: boolean;\n};\n\nconst Unsupported = ({\n    country_code,\n    handlePOIforMT5Complete,\n    manual,\n    redirect_button,\n    needs_poa,\n    handleBack,\n    handleRequireSubmission,\n    allow_poi_resubmission,\n    handleViewComplete,\n    onfido,\n    is_for_mt5,\n    is_resubmission,\n    ...props\n}: TUnsupported) => {\n    const [detail, setDetail] = React.useState<number | null>(null);\n    const toggleDetail = (index: number) => setDetail(index);\n\n    const documents = getDocumentIndex({\n        country_code,\n    });\n\n    if (manual) {\n        if (manual.status === identity_status_codes.pending)\n            return <UploadComplete is_manual_upload needs_poa={needs_poa} redirect_button={redirect_button} />;\n        else if (\n            [identity_status_codes.rejected, identity_status_codes.suspected].some(status => status === manual.status)\n        ) {\n            if (!allow_poi_resubmission) return <Limited />;\n        } else if (manual.status === identity_status_codes.verified) {\n            return <Verified needs_poa={needs_poa} redirect_button={redirect_button} />;\n        } else if (manual.status === identity_status_codes.expired) {\n            return <Expired redirect_button={redirect_button} handleRequireSubmission={handleRequireSubmission} />;\n        }\n    }\n\n    if (detail !== null) {\n        const is_onfido_supported =\n            country_code === 'ng' &&\n            !checkNimcStep(documents[detail ?? 0].details.documents) &&\n            onfido &&\n            onfido.submissions_left > 0;\n        return (\n            <DetailComponent\n                is_onfido_supported={is_onfido_supported}\n                country_code_key={country_code}\n                document={documents[detail]}\n                root_class='manual-poi'\n                onClickBack={() => setDetail(null)}\n                handlePOIforMT5Complete={handlePOIforMT5Complete}\n                handleComplete={handleViewComplete}\n                is_for_mt5={is_for_mt5}\n                needs_poa={needs_poa}\n                {...props}\n            />\n        );\n    }\n\n    return (\n        <div className='manual-poi'>\n            <Text as='h2' color='prominent' size='xs' className='manual-poi__title'>\n                <Localize i18n_default_text='Please upload one of the following documents:' />\n            </Text>\n            <Documents documents={documents} toggleDetail={toggleDetail} />\n            {!is_for_mt5 && !is_resubmission && (\n                <FormFooter className='proof-of-identity__footer'>\n                    <Button className='back-btn' onClick={handleBack} type='button' has_effect large secondary>\n                        <Localize i18n_default_text='Back' />\n                    </Button>\n                </FormFooter>\n            )}\n        </div>\n    );\n};\nexport default Unsupported;\n","import Unsupported from './unsupported';\nimport './unsupported.scss';\n\nexport default Unsupported;\n","import React from 'react';\nimport { formatOnfidoError } from '@deriv/shared';\nimport UploadComplete from '../../../Components/poi/status/upload-complete';\nimport Verified from '../../../Components/poi/status/verified';\nimport RejectedReasons from '../../../Components/poi/status/rejected-reasons';\nimport Unsupported from '../../../Components/poi/status/unsupported';\nimport { identity_status_codes, service_code } from './proof-of-identity-utils';\n\nconst Onfido = ({\n    handleRequireSubmission,\n    is_from_external,\n    needs_poa,\n    onfido,\n    redirect_button,\n    manual,\n    country_code,\n    handleViewComplete,\n}) => {\n    const { status, submissions_left, last_rejected: rejected_reasons } = onfido;\n\n    switch (status) {\n        case identity_status_codes.pending:\n            return (\n                <UploadComplete\n                    is_from_external={is_from_external}\n                    needs_poa={needs_poa}\n                    redirect_button={redirect_button}\n                />\n            );\n        case identity_status_codes.rejected:\n        case identity_status_codes.suspected:\n        case identity_status_codes.expired: {\n            const submission_errors = formatOnfidoError(status, rejected_reasons);\n            if (Number(submissions_left) < 1) {\n                return (\n                    <Unsupported\n                        manual={manual}\n                        is_from_external={is_from_external}\n                        country_code={country_code}\n                        handleViewComplete={handleViewComplete}\n                        onfido={onfido}\n                    />\n                );\n            }\n            return (\n                <RejectedReasons\n                    rejected_reasons={submission_errors}\n                    handleRequireSubmission={handleRequireSubmission}\n                />\n            );\n        }\n        case identity_status_codes.verified:\n            return (\n                <Verified\n                    is_from_external={is_from_external}\n                    needs_poa={needs_poa}\n                    redirect_button={redirect_button}\n                    service={service_code.onfido}\n                />\n            );\n        default:\n            return null;\n    }\n};\n\nexport default Onfido;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Formik, Field, FormikErrors, FormikValues, FormikHelpers } from 'formik';\nimport { Autocomplete, Button, HintBox, Text, SelectNative } from '@deriv/components';\nimport { IDV_ERROR_STATUS, TIDVErrorStatus, POIContext } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport FormFooter from '../../form-footer';\nimport { useDevice } from '@deriv-com/ui';\nimport { useResidenceList } from '@deriv/api';\n\ntype TCountrySelector = {\n    handleSelectionNext?: () => void;\n    is_from_external: boolean;\n    mismatch_status?: TIDVErrorStatus;\n};\n\nconst CountrySelector = ({ handleSelectionNext, is_from_external, mismatch_status }: TCountrySelector) => {\n    const { setSelectedCountry } = React.useContext(POIContext);\n    const { data: country_list, isLoading } = useResidenceList();\n\n    const initial_form_values: FormikValues = {\n        country_input: '',\n    };\n\n    const validateFields = (values: FormikValues) => {\n        const errors: FormikErrors<FormikValues> = {};\n        const { country_input } = values;\n\n        if (!country_input) {\n            errors.country_input = localize('Please select the country of document issuance.');\n        } else if (!country_list.find((c: FormikValues) => c.text === country_input)) {\n            errors.country_input = localize('Please select a valid country of document issuance.');\n        }\n\n        return errors;\n    };\n    const { isDesktop } = useDevice();\n\n    const updateSelectedCountry = (country_name: string) => {\n        const matching_country = country_list?.find((c: FormikValues) => c.text === country_name);\n        if (matching_country) {\n            setSelectedCountry?.(matching_country);\n        }\n    };\n\n    const submitHandler = (values: FormikValues, { setSubmitting }: FormikHelpers<FormikValues>) => {\n        updateSelectedCountry(values.country_input);\n        setSubmitting(false);\n        handleSelectionNext?.();\n    };\n\n    const failed_message: React.ReactNode = mismatch_status ? IDV_ERROR_STATUS[mismatch_status]?.message ?? null : null;\n\n    return (\n        <Formik initialValues={initial_form_values} validate={validateFields} onSubmit={submitHandler}>\n            {({\n                dirty,\n                errors,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                isSubmitting,\n                isValid,\n                setFieldValue,\n                touched,\n                values,\n            }) => (\n                <React.Fragment>\n                    <div\n                        className={clsx('proof-of-identity__container proof-of-identity__country-container', {\n                            'min-height': !is_from_external,\n                        })}\n                    >\n                        {failed_message ? (\n                            <React.Fragment>\n                                <Text align='center' weight='bold' size={isDesktop ? 's' : 'xs'}>\n                                    <Localize i18n_default_text='Your identity verification failed because:' />\n                                </Text>\n                                <HintBox\n                                    className={clsx('proof-of-identity__failed-message', 'hint-box-layout')}\n                                    icon='IcAlertDanger'\n                                    message={\n                                        <Text as='p' size={isDesktop ? 'xs' : 'xxs'}>\n                                            {failed_message}\n                                        </Text>\n                                    }\n                                    is_danger\n                                />\n                            </React.Fragment>\n                        ) : (\n                            <Text className='proof-of-identity__header' align='center' weight='bold'>\n                                <Localize i18n_default_text='Proof of identity' />\n                            </Text>\n                        )}\n\n                        <Text className='proof-of-identity__country-text ' size='xs'>\n                            <Localize i18n_default_text='In which country was your document issued?' />\n                        </Text>\n                        <fieldset className='proof-of-identity__fieldset'>\n                            <Field name='country_input'>\n                                {({ field }: FormikValues) => (\n                                    <React.Fragment>\n                                        {isDesktop ? (\n                                            <Autocomplete\n                                                className={clsx({ 'external-dropdown': is_from_external })}\n                                                {...field}\n                                                data_testid='dt_external_dropdown'\n                                                name='country_input'\n                                                data-lpignore='true'\n                                                error={touched.country_input && errors.country_input}\n                                                autoComplete='off'\n                                                type='text'\n                                                label={localize('Country')}\n                                                list_items={country_list}\n                                                value={values.country_input}\n                                                onBlur={(e: FormikValues) => {\n                                                    handleBlur(e);\n                                                    const current_input = e.target.value;\n                                                    if (\n                                                        !country_list.find(\n                                                            (c: FormikValues) => c.text === current_input\n                                                        )\n                                                    ) {\n                                                        setFieldValue('country_input', '', true);\n                                                        updateSelectedCountry('');\n                                                    }\n                                                }}\n                                                onChange={handleChange}\n                                                onItemSelection={({ text }: FormikValues) => {\n                                                    const select_value =\n                                                        text === 'No results found' || !text ? '' : text;\n                                                    setFieldValue('country_input', select_value, true);\n                                                    updateSelectedCountry(text);\n                                                }}\n                                                required\n                                            />\n                                        ) : (\n                                            <div className='proof-of-identity__dropdown-container'>\n                                                <SelectNative\n                                                    {...field}\n                                                    name='country_input'\n                                                    error={touched.country_input && errors.country_input}\n                                                    label={localize('Country')}\n                                                    placeholder={localize('Please select')}\n                                                    list_items={country_list}\n                                                    value={values.country_input}\n                                                    onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                                                        handleChange(e);\n                                                        updateSelectedCountry(e.target.value);\n                                                    }}\n                                                    use_text={true}\n                                                    required\n                                                />\n                                            </div>\n                                        )}\n                                    </React.Fragment>\n                                )}\n                            </Field>\n                        </fieldset>\n                    </div>\n                    <FormFooter className={clsx('proof-of-identity__footer', { 'external-footer': is_from_external })}>\n                        <Button\n                            className='proof-of-identity__submit-button'\n                            type='submit'\n                            onClick={() => handleSubmit()}\n                            has_effect\n                            is_disabled={!dirty || isSubmitting || !isValid || isLoading}\n                            is_loading={false}\n                            text={localize('Next')}\n                            large\n                            primary\n                        />\n                    </FormFooter>\n                </React.Fragment>\n            )}\n        </Formik>\n    );\n};\n\nexport default CountrySelector;\n","import PoiCountrySelector from './poi-country-selector';\n\nexport default PoiCountrySelector;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Form, Formik, FormikErrors, FormikHelpers } from 'formik';\nimport { Button, HintBox, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport {\n    filterObjProperties,\n    formatIDVFormValues,\n    getIDVNotApplicableOption,\n    removeEmptyPropertiesFromObject,\n    toMoment,\n    WS,\n} from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { useDevice } from '@deriv-com/ui';\nimport {\n    isAdditionalDocumentValid,\n    isDocumentNumberValid,\n    isDocumentTypeValid,\n    makeSettingsRequest,\n    shouldHideHelperImage,\n    validate,\n    validateName,\n} from '../../../Helpers/utils';\nimport { DerivLightNameDobPoiIcon } from '@deriv/quill-icons';\nimport IDVForm from '../../forms/idv-form';\nimport PersonalDetailsForm from '../../forms/personal-details-form';\nimport FormBody from '../../form-body';\nimport FormFooter from '../../form-footer';\nimport FormSubHeader from '../../form-sub-header';\nimport { ResidenceList } from '@deriv/api-types';\nimport {\n    CLAIMED_DOCUMENT_ERROR_MESSAGE,\n    DUPLICATE_ACCOUNT_ERROR_MESSAGE,\n    GENERIC_ERROR_MESSAGE,\n} from '../../../Configs/poi-error-config';\nimport { TIDVFormValues, TConfirmPersonalDetailsForm } from 'Types';\nimport { API_ERROR_CODES } from '../../../Constants/api-error-codes';\n\ntype TIDVDocumentSubmitProps = {\n    handleBack: React.MouseEventHandler;\n    handleViewComplete: () => void;\n    selected_country: ResidenceList[0];\n    getChangeableFields: () => Array<string>;\n    handleSelectionNext?: (should_show_manual: boolean) => void;\n};\n\nexport type TIdvDocumentSubmitForm = TIDVFormValues & TConfirmPersonalDetailsForm;\n\nconst IdvDocumentSubmit = observer(\n    ({ handleBack, handleViewComplete, handleSelectionNext, selected_country }: TIDVDocumentSubmitProps) => {\n        const { client } = useStore();\n        const { account_settings, getChangeableFields } = client;\n        const { isDesktop } = useDevice();\n\n        const IDV_NOT_APPLICABLE_OPTION = React.useMemo(() => getIDVNotApplicableOption(), []);\n        const shouldSkipIdv = (document_id?: string) => document_id === IDV_NOT_APPLICABLE_OPTION.id;\n        const visible_settings = ['first_name', 'last_name', 'date_of_birth'];\n        const side_note_image = <DerivLightNameDobPoiIcon height='195px' width='285px' />;\n\n        const form_initial_values = filterObjProperties(account_settings, visible_settings) as {\n            [Property in keyof TConfirmPersonalDetailsForm]: string;\n        };\n\n        if (form_initial_values.date_of_birth) {\n            form_initial_values.date_of_birth = toMoment(form_initial_values.date_of_birth).format('YYYY-MM-DD');\n        }\n\n        const changeable_fields = getChangeableFields();\n\n        const initial_values: TIdvDocumentSubmitForm = {\n            document_type: {\n                id: '',\n                text: '',\n                value: '',\n                example_format: '',\n            },\n            document_number: '',\n            ...form_initial_values,\n            confirmation_checkbox: false,\n        };\n\n        const validateFields = (values: TIdvDocumentSubmitForm) => {\n            const errors: FormikErrors<Record<keyof TIdvDocumentSubmitForm, string>> = {};\n            const { document_type, document_number, document_additional } = values;\n\n            if (shouldSkipIdv(document_type.id)) {\n                return errors;\n            }\n\n            const needs_additional_document = !!document_type.additional;\n\n            errors.document_type = isDocumentTypeValid(document_type);\n            if (!shouldHideHelperImage(document_type?.id)) {\n                if (needs_additional_document) {\n                    errors.document_additional = isAdditionalDocumentValid(document_type, document_additional);\n                }\n                errors.document_number = isDocumentNumberValid(document_number, document_type);\n            }\n            const required_fields = ['first_name', 'last_name', 'date_of_birth'];\n            const validateValues = validate(errors, values);\n            validateValues(val => val, required_fields, localize('This field is required'));\n\n            if (values.first_name) {\n                errors.first_name = validateName(values.first_name);\n            }\n            if (values.last_name) {\n                errors.last_name = validateName(values.last_name);\n            }\n\n            if (!values.confirmation_checkbox) {\n                errors.confirmation_checkbox = 'error';\n            }\n\n            return removeEmptyPropertiesFromObject(errors);\n        };\n\n        const submitHandler = async (\n            values: TIdvDocumentSubmitForm,\n            { setSubmitting, setStatus }: FormikHelpers<TIdvDocumentSubmitForm>\n        ) => {\n            if (shouldSkipIdv(values?.document_type?.id)) {\n                handleSelectionNext?.(true);\n                return;\n            }\n\n            setSubmitting(true);\n\n            const request = makeSettingsRequest(values, changeable_fields);\n\n            const data = await WS.setSettings(request);\n\n            if (data?.error) {\n                const response_error =\n                    data.error?.code === API_ERROR_CODES.DUPLICATE_ACCOUNT\n                        ? DUPLICATE_ACCOUNT_ERROR_MESSAGE\n                        : GENERIC_ERROR_MESSAGE;\n                setStatus({ error_message: response_error });\n                setSubmitting(false);\n                return;\n            }\n            const get_settings = await WS.authorized.storage.getSettings();\n            if (get_settings?.error) {\n                setStatus({ error_message: get_settings?.error?.message ?? GENERIC_ERROR_MESSAGE });\n                setSubmitting(false);\n                return;\n            }\n\n            const submit_data = {\n                identity_verification_document_add: 1,\n                ...formatIDVFormValues(values, selected_country.value as string),\n            };\n\n            const idv_update_response = await WS.send(submit_data);\n\n            if (idv_update_response?.error) {\n                const response_error =\n                    idv_update_response.error?.code === API_ERROR_CODES.CLAIMED_DOCUMENT\n                        ? CLAIMED_DOCUMENT_ERROR_MESSAGE\n                        : (idv_update_response.error?.message ?? GENERIC_ERROR_MESSAGE);\n                setStatus({ error_message: response_error });\n                setSubmitting(false);\n                return;\n            }\n            setSubmitting(false);\n            handleViewComplete();\n        };\n\n        return (\n            <Formik\n                initialValues={{ ...initial_values }}\n                validate={validateFields}\n                onSubmit={submitHandler}\n                enableReinitialize\n            >\n                {({ dirty, isSubmitting, isValid, values, status }) => {\n                    const should_skip_idv = shouldSkipIdv(values?.document_type?.id);\n                    const is_button_disabled = should_skip_idv ? false : !dirty || isSubmitting || !isValid;\n                    const getButtonText = () =>\n                        should_skip_idv ? (\n                            <Localize i18n_default_text='Next' />\n                        ) : (\n                            <Localize i18n_default_text='Verify' />\n                        );\n                    return (\n                        <Form\n                            className={clsx('proof-of-identity__container proof-of-identity__container--reset', {\n                                'min-height': shouldSkipIdv(values?.document_type?.id),\n                            })}\n                        >\n                            {status?.error_message && (\n                                <div className='account-form__poi-confirm-example--generic-error-msg'>\n                                    <HintBox\n                                        icon='IcAlertDanger'\n                                        message={\n                                            <Text as='p' size='xxxs'>\n                                                {status.error_message}\n                                            </Text>\n                                        }\n                                        is_danger\n                                        className='hint-box-layout'\n                                    />\n                                </div>\n                            )}\n                            <FormBody className='form-body' scroll_offset={isDesktop ? '80px' : '180px'}>\n                                <FormSubHeader title={localize('Identity verification')} />\n                                <IDVForm selected_country={selected_country} class_name='idv-layout' />\n                                {!shouldSkipIdv(values?.document_type?.id) && (\n                                    <React.Fragment>\n                                        <FormSubHeader title={localize('Details')} />\n                                        <PersonalDetailsForm\n                                            class_name='account-form__poi-confirm-example_container'\n                                            is_rendered_for_idv\n                                            editable_fields={values.confirmation_checkbox ? [] : changeable_fields}\n                                            side_note={side_note_image}\n                                            inline_note_text={\n                                                <Localize\n                                                    i18n_default_text='To avoid delays, enter your <0>name</0> and <0>date of birth</0> exactly as they appear on your identity document.'\n                                                    components={[<strong key={0} />]}\n                                                />\n                                            }\n                                        />\n                                    </React.Fragment>\n                                )}\n                            </FormBody>\n                            <FormFooter className='proof-of-identity__footer '>\n                                {isDesktop && (\n                                    <Button\n                                        className='back-btn'\n                                        onClick={handleBack}\n                                        type='button'\n                                        has_effect\n                                        large\n                                        secondary\n                                    >\n                                        <Localize i18n_default_text='Back' />\n                                    </Button>\n                                )}\n                                <Button\n                                    className='proof-of-identity__submit-button'\n                                    type='submit'\n                                    has_effect\n                                    is_disabled={is_button_disabled}\n                                    large\n                                    primary\n                                >\n                                    {getButtonText()}\n                                </Button>\n                            </FormFooter>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        );\n    }\n);\n\nexport default IdvDocumentSubmit;\n","import IdvDocumentSubmit from './idv-document-submit';\n\nexport default IdvDocumentSubmit;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Form, Formik, FormikHelpers, FormikValues } from 'formik';\nimport { GetAccountStatus, GetSettings, ResidenceList } from '@deriv/api-types';\nimport { Button, HintBox, Loading, Text } from '@deriv/components';\nimport {\n    filterObjProperties,\n    getIDVNotApplicableOption,\n    IDV_ERROR_STATUS,\n    isEmptyObject,\n    removeEmptyPropertiesFromObject,\n    TIDVErrorStatus,\n    toMoment,\n    WS,\n} from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { DerivLightNameDobPoiIcon } from '@deriv/quill-icons';\nimport FormBody from '../../../form-body';\nimport IDVForm from '../../../forms/idv-form';\nimport FormFooter from '../../../form-footer';\nimport FormSubHeader from '../../../form-sub-header';\nimport PersonalDetailsForm from '../../../forms/personal-details-form.jsx';\nimport {\n    isAdditionalDocumentValid,\n    isDocumentNumberValid,\n    isDocumentTypeValid,\n    makeSettingsRequest,\n    shouldHideHelperImage,\n    validate,\n    validateName,\n} from '../../../../Helpers/utils';\nimport {\n    GENERIC_ERROR_MESSAGE,\n    DUPLICATE_ACCOUNT_ERROR_MESSAGE,\n    CLAIMED_DOCUMENT_ERROR_MESSAGE,\n    generateIDVError,\n} from '../../../../Configs/poi-error-config';\nimport { API_ERROR_CODES } from '../../../../Constants/api-error-codes';\nimport { TIDVFormValues, TConfirmPersonalDetailsForm } from '../../../../Types';\nimport LoadErrorMessage from '../../../load-error-message';\nimport { TIdvDocumentSubmitForm } from '../../idv-document-submit/idv-document-submit';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TRestState = {\n    api_error: string;\n    errors?: boolean;\n    form_initial_values: TIdvFailedForm;\n    changeable_fields: string[];\n};\n\ntype TIdvFailed = {\n    account_settings: GetSettings;\n    getChangeableFields: () => string[];\n    handleSubmit: () => void;\n    is_from_external: boolean;\n    mismatch_status: TIDVErrorStatus;\n    residence_list: ResidenceList;\n    latest_status: DeepRequired<GetAccountStatus>['authentication']['attempts']['latest'];\n    selected_country?: ResidenceList[0];\n    handleSelectionNext?: (should_show_manual: boolean) => void;\n};\n\ntype TIDVFailureConfig = {\n    required_fields: string[];\n    side_note_image: JSX.Element;\n    failure_message: React.ReactNode;\n    inline_note_text: React.ReactNode;\n};\n\ntype TIdvFailedForm = Partial<TIDVFormValues> & Partial<TConfirmPersonalDetailsForm>;\n\nconst IdvFailed = ({\n    getChangeableFields,\n    is_from_external,\n    residence_list,\n    account_settings,\n    handleSubmit,\n    mismatch_status = IDV_ERROR_STATUS.Failed.code,\n    latest_status,\n    selected_country,\n    handleSelectionNext,\n}: TIdvFailed) => {\n    const { client } = useStore();\n    const { setIsAlreadyAttempted } = client;\n    const { isMobile, isDesktop } = useDevice();\n\n    const [idv_failure, setIdvFailure] = React.useState<TIDVFailureConfig>({\n        required_fields: [],\n        side_note_image: <DerivLightNameDobPoiIcon height='195px' width='285px' />,\n        failure_message: null,\n        inline_note_text: null,\n    });\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [rest_state, setRestState] = React.useState<TRestState>({\n        api_error: '',\n        errors: false,\n        form_initial_values: {},\n        changeable_fields: [],\n    });\n\n    // Document upload not required for the below error codes\n    const is_document_upload_required = React.useMemo(\n        () =>\n            ![\n                IDV_ERROR_STATUS.DobMismatch.code,\n                IDV_ERROR_STATUS.NameMismatch.code,\n                IDV_ERROR_STATUS.NameDobMismatch.code,\n            ].includes(mismatch_status),\n        [mismatch_status]\n    );\n\n    /**\n     * If user needs to resubmit IDV document, the country should be the new selected country\n     * If user needs to update Personal info, the country should be the country of the latest status\n     */\n    const chosen_country = React.useMemo(\n        () =>\n            is_document_upload_required && !is_from_external\n                ? selected_country ?? {}\n                : residence_list.find(residence_data => residence_data.value === latest_status?.country_code) ?? {},\n        [selected_country, is_document_upload_required, latest_status?.country_code, residence_list, is_from_external]\n    );\n\n    const IDV_NOT_APPLICABLE_OPTION = React.useMemo(() => getIDVNotApplicableOption(), []);\n    const shouldSkipIdv = (document_id?: string) => document_id === IDV_NOT_APPLICABLE_OPTION.id;\n\n    React.useEffect(() => {\n        const initializeFormValues = async (required_fields: string[]) => {\n            await WS?.wait('get_settings');\n            const form_data = filterObjProperties(account_settings, required_fields);\n            if (form_data.date_of_birth) {\n                form_data.date_of_birth = toMoment(form_data.date_of_birth).format('YYYY-MM-DD');\n            }\n            // Remove the checkbox value as it is used only for moving cursor to the error field\n            form_data.confirmation_checkbox = false;\n            let initial_form_values = form_data;\n            if (is_document_upload_required) {\n                initial_form_values = {\n                    document_type: {\n                        id: '',\n                        text: '',\n                        value: '',\n                        example_format: '',\n                        sample_image: '',\n                    },\n                    document_number: '',\n                    ...initial_form_values,\n                };\n            }\n            setRestState({\n                form_initial_values: { ...initial_form_values },\n                changeable_fields: [...getChangeableFields()],\n                api_error: '',\n            });\n            setIsLoading(false);\n        };\n\n        setIsAlreadyAttempted(true);\n\n        const error_config = generateIDVError(\n            is_document_upload_required,\n            latest_status,\n            chosen_country,\n            mismatch_status\n        );\n        setIdvFailure(error_config);\n        initializeFormValues(error_config?.required_fields ?? []).catch(e => {\n            setRestState({\n                form_initial_values: {},\n                changeable_fields: [],\n                api_error: e?.error?.message,\n            });\n        });\n    }, [\n        mismatch_status,\n        account_settings,\n        is_document_upload_required,\n        getChangeableFields,\n        generateIDVError,\n        setIsAlreadyAttempted,\n    ]);\n\n    const onSubmit = async (values: TIdvFailedForm, { setStatus, setSubmitting }: FormikHelpers<TIdvFailedForm>) => {\n        if (shouldSkipIdv(values?.document_type?.id)) {\n            handleSelectionNext?.(true);\n            return;\n        }\n\n        delete values.confirmation_checkbox;\n        setSubmitting(true);\n        setStatus({ error_msg: null });\n        const { document_number, document_type } = values;\n        const request = makeSettingsRequest(\n            values,\n            rest_state?.changeable_fields ? [...rest_state.changeable_fields] : []\n        );\n        const data = await WS.setSettings(request);\n\n        if (data.error) {\n            const response_error =\n                data.error?.code === API_ERROR_CODES.DUPLICATE_ACCOUNT\n                    ? DUPLICATE_ACCOUNT_ERROR_MESSAGE\n                    : GENERIC_ERROR_MESSAGE;\n            setStatus({ error_msg: response_error });\n            setSubmitting(false);\n        } else {\n            const response = await WS.authorized.storage.getSettings();\n            if (response.error) {\n                setRestState(prev_state => ({ ...prev_state, api_error: response.error.message }));\n                setSubmitting(false);\n                return;\n            }\n            const submit_data = {\n                identity_verification_document_add: 1,\n                document_number,\n                document_type: document_type?.id,\n                issuing_country: chosen_country.value,\n            };\n\n            if (!submit_data.document_type || shouldSkipIdv(submit_data.document_type)) {\n                setSubmitting(false);\n                handleSubmit();\n                return;\n            }\n            const idv_update_response = await WS.send(submit_data);\n            if (idv_update_response?.error) {\n                const response_error =\n                    idv_update_response.error?.code === API_ERROR_CODES.CLAIMED_DOCUMENT\n                        ? CLAIMED_DOCUMENT_ERROR_MESSAGE\n                        : idv_update_response?.error?.message ?? GENERIC_ERROR_MESSAGE;\n                setStatus({ error_msg: response_error });\n                setSubmitting(false);\n                return;\n            }\n            setSubmitting(false);\n            handleSubmit();\n        }\n    };\n\n    const validateFields = (values: TIdvFailedForm) => {\n        const errors: Record<string, unknown> = {};\n        if (is_document_upload_required) {\n            const { document_type, document_number, document_additional } = values;\n\n            if (shouldSkipIdv(document_type?.id)) {\n                return errors;\n            }\n\n            const needs_additional_document = !!document_type?.additional;\n            errors.document_type = isDocumentTypeValid(document_type as FormikValues);\n            if (!shouldHideHelperImage(document_type?.id as string)) {\n                if (needs_additional_document) {\n                    errors.document_additional = isAdditionalDocumentValid(document_type, document_additional);\n                }\n                errors.document_number = isDocumentNumberValid(document_number ?? '', document_type as FormikValues);\n            }\n        }\n\n        const validateValues = validate(errors as Record<string, string>, values);\n\n        validateValues(val => val, idv_failure?.required_fields ?? [], localize('This field is required'));\n\n        if (values.first_name) {\n            errors.first_name = validateName(values.first_name);\n        }\n        if (values.last_name) {\n            errors.last_name = validateName(values.last_name);\n        }\n\n        if (!values.confirmation_checkbox) {\n            errors.confirmation_checkbox = 'error';\n        }\n\n        setRestState(prev_state => ({\n            ...prev_state,\n            errors: !isEmptyObject(removeEmptyPropertiesFromObject(errors)),\n        }));\n\n        return removeEmptyPropertiesFromObject(errors);\n    };\n\n    if (rest_state?.api_error) return <LoadErrorMessage error_message={rest_state.api_error} />;\n\n    if (is_loading && Object.keys(rest_state?.form_initial_values ?? {}).length === 0) {\n        return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    }\n\n    const setScrollOffset = () => {\n        if (!isDesktop) {\n            if (is_from_external) {\n                return '140px';\n            }\n            return '180px';\n        }\n        return '80px';\n    };\n\n    const buttonText = (is_idv_skipping: boolean) => {\n        if (is_idv_skipping) return localize('Next');\n        if (is_document_upload_required) return localize('Verify');\n        return localize('Update profile');\n    };\n\n    return (\n        <Formik\n            initialValues={rest_state?.form_initial_values ?? {}}\n            onSubmit={onSubmit}\n            validate={validateFields}\n            className='proof-of-identity__container'\n        >\n            {({ isSubmitting, isValid, dirty, status, values }) => (\n                <Form\n                    className={clsx('proof-of-identity__mismatch-container', {\n                        'upload-layout': is_document_upload_required,\n                        'min-height': shouldSkipIdv(values?.document_type?.id),\n                    })}\n                >\n                    <FormBody className='form-body' scroll_offset={setScrollOffset()}>\n                        <Text size={isMobile ? 'xs' : 's'} weight='bold' align='center'>\n                            <Localize i18n_default_text='Your identity verification failed because:' />\n                        </Text>\n                        {(status?.error_msg || idv_failure?.failure_message) && (\n                            <HintBox\n                                className={clsx('proof-of-identity__failed-message', 'hint-box-layout')}\n                                icon='IcAlertDanger'\n                                message={\n                                    <Text as='p' size={isMobile ? 'xxs' : 'xs'} data-testid={mismatch_status}>\n                                        {status?.error_msg ?? idv_failure?.failure_message}\n                                    </Text>\n                                }\n                                is_danger\n                            />\n                        )}\n                        {is_document_upload_required && (\n                            <div>\n                                <Text size='xs' align={isMobile ? 'left' : 'center'}>\n                                    <Localize i18n_default_text='Let’s try again. Choose another document and enter the corresponding details.' />\n                                </Text>\n                                <FormSubHeader title={localize('Identity verification')} />\n                                <IDVForm selected_country={chosen_country} class_name='idv-layout idv-resubmit' />\n                                {!shouldSkipIdv(values?.document_type?.id) && (\n                                    <FormSubHeader title={localize('Details')} />\n                                )}\n                            </div>\n                        )}\n                        {!shouldSkipIdv(values?.document_type?.id) && (\n                            <PersonalDetailsForm\n                                class_name='account-form__poi-confirm-example_container'\n                                editable_fields={values.confirmation_checkbox ? [] : rest_state?.changeable_fields}\n                                is_rendered_for_idv\n                                side_note={idv_failure?.side_note_image}\n                                inline_note_text={idv_failure?.inline_note_text}\n                                mismatch_status={mismatch_status}\n                            />\n                        )}\n                    </FormBody>\n                    <FormFooter className='proof-of-identity__footer'>\n                        <Button\n                            className='proof-of-identity__submit-button'\n                            type='submit'\n                            has_effect\n                            is_disabled={!dirty || isSubmitting || !isValid}\n                            text={buttonText(shouldSkipIdv(values?.document_type?.id))}\n                            large\n                            primary\n                        />\n                    </FormFooter>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default IdvFailed;\n","import IdvRejected from './idv-failed';\n\nexport default IdvRejected;\n","import React from 'react';\nimport { formatIDVError, WS, IDV_ERROR_STATUS, POIContext, isIDVReportNotAvailable } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport CountrySelector from '../../../Components/poi/poi-country-selector';\nimport IdvDocumentSubmit from '../../../Components/poi/idv-document-submit';\nimport IdvFailed from '../../../Components/poi/idv-status/idv-failed';\nimport IdvSubmitComplete from '../../../Components/poi/idv-status/idv-submit-complete';\nimport Unsupported from '../../../Components/poi/status/unsupported';\nimport UploadComplete from '../../../Components/poi/status/upload-complete';\nimport OnfidoSdkViewContainer from './onfido-sdk-view-container';\nimport { identity_status_codes, submission_status_code, service_code } from './proof-of-identity-utils';\n\nconst POISubmission = observer(\n    ({\n        allow_poi_resubmission,\n        has_require_submission,\n        height,\n        identity_last_attempt,\n        idv,\n        is_from_external,\n        is_idv_disallowed,\n        needs_poa,\n        onfido,\n        onStateChange,\n        redirect_button,\n        residence_list,\n        should_show_mismatch_form,\n    }) => {\n        const {\n            submission_service,\n            setSubmissionService,\n            submission_status,\n            setSubmissionStatus,\n            selected_country,\n            setSelectedCountry,\n        } = React.useContext(POIContext);\n\n        const { client, notifications } = useStore();\n\n        const { account_settings, getChangeableFields, account_status } = client;\n        const { refreshNotifications } = notifications;\n        const is_high_risk = account_status.risk_classification === 'high';\n\n        const handleSelectionNext = (should_show_manual = false) => {\n            if (Object.keys(selected_country).length) {\n                const { submissions_left: idv_submissions_left } = idv;\n                const { submissions_left: onfido_submissions_left } = onfido;\n                const is_idv_supported = selected_country.identity.services.idv.is_country_supported;\n                const is_onfido_supported =\n                    selected_country.identity.services.onfido.is_country_supported && selected_country.value !== 'ng';\n\n                if (!should_show_manual && is_idv_supported && Number(idv_submissions_left) > 0 && !is_idv_disallowed) {\n                    setSubmissionService(service_code.idv);\n                } else if (!should_show_manual && Number(onfido_submissions_left) > 0 && is_onfido_supported) {\n                    setSubmissionService(service_code.onfido);\n                } else {\n                    setSubmissionService(service_code.manual);\n                }\n                setSubmissionStatus(submission_status_code.submitting);\n            }\n        };\n\n        const handleViewComplete = () => {\n            if (onStateChange && typeof onStateChange === 'function') {\n                onStateChange(identity_status_codes.pending);\n            }\n            setSubmissionStatus(submission_status_code.complete);\n\n            WS.authorized.getAccountStatus().then(() => {\n                refreshNotifications();\n            });\n        };\n\n        const handleBack = () => setSubmissionStatus(submission_status_code.selecting);\n\n        const getCountryFromResidence = React.useCallback(\n            country_code => residence_list.find(residence => residence.value === country_code),\n            [residence_list]\n        );\n\n        const needs_resubmission = has_require_submission || allow_poi_resubmission;\n        const is_report_not_available = isIDVReportNotAvailable(idv);\n        const mismatch_status = formatIDVError(idv.last_rejected, idv.status, is_high_risk, is_report_not_available);\n\n        const setIdentityService = React.useCallback(\n            identity_last_attempt => {\n                const { service, country_code } = identity_last_attempt;\n                setSelectedCountry(getCountryFromResidence(country_code));\n                switch (service) {\n                    case service_code.idv:\n                    case service_code.onfido: {\n                        if (Number(idv.submissions_left) > 0 || Number(onfido.submissions_left) > 0) {\n                            setSubmissionStatus(submission_status_code.selecting);\n                        } else {\n                            setSubmissionService(service_code.manual);\n                            setSubmissionStatus(submission_status_code.submitting);\n                        }\n                        break;\n                    }\n                    case service_code.manual: {\n                        setSubmissionService(service_code.manual);\n                        setSubmissionStatus(submission_status_code.submitting);\n                        break;\n                    }\n                    default:\n                        break;\n                }\n            },\n            [\n                getCountryFromResidence,\n                idv.submissions_left,\n                onfido.submissions_left,\n                setSelectedCountry,\n                setSubmissionService,\n                setSubmissionStatus,\n                is_idv_disallowed,\n            ]\n        );\n\n        React.useEffect(() => {\n            if (submission_status != submission_status_code.selecting) {\n                return;\n            }\n            if (needs_resubmission && identity_last_attempt) {\n                setIdentityService(identity_last_attempt);\n            } else if (\n                mismatch_status &&\n                [\n                    IDV_ERROR_STATUS.DobMismatch.code,\n                    IDV_ERROR_STATUS.NameMismatch.code,\n                    IDV_ERROR_STATUS.NameDobMismatch.code,\n                ].includes(mismatch_status) &&\n                idv.submissions_left > 0\n            ) {\n                setSubmissionService(service_code.idv);\n                setSubmissionStatus(submission_status_code.submitting);\n            } else {\n                setSubmissionStatus(submission_status_code.selecting);\n            }\n        }, [\n            allow_poi_resubmission,\n            identity_last_attempt,\n            needs_resubmission,\n            setIdentityService,\n            submission_status,\n            idv,\n            mismatch_status,\n            setSubmissionService,\n            setSubmissionStatus,\n        ]);\n\n        switch (submission_status) {\n            case submission_status_code.selecting: {\n                return (\n                    <CountrySelector\n                        handleSelectionNext={handleSelectionNext}\n                        is_from_external={is_from_external}\n                        mismatch_status={mismatch_status}\n                    />\n                );\n            }\n\n            case submission_status_code.submitting: {\n                switch (submission_service) {\n                    case service_code.idv:\n                        return should_show_mismatch_form ? (\n                            <IdvFailed\n                                account_settings={account_settings}\n                                getChangeableFields={getChangeableFields}\n                                mismatch_status={mismatch_status}\n                                residence_list={residence_list}\n                                handleSubmit={handleViewComplete}\n                                latest_status={identity_last_attempt}\n                                selected_country={selected_country}\n                                handleSelectionNext={handleSelectionNext}\n                                report_available={!!idv?.report_available}\n                            />\n                        ) : (\n                            <IdvDocumentSubmit\n                                handleSelectionNext={handleSelectionNext}\n                                handleViewComplete={handleViewComplete}\n                                handleBack={handleBack}\n                                selected_country={selected_country}\n                            />\n                        );\n                    case service_code.onfido: {\n                        const country_code = selected_country.value;\n                        const doc_obj = selected_country.identity.services.onfido.documents_supported;\n                        const documents_supported = Object.keys(doc_obj).map(d => doc_obj[d].display_name);\n                        return (\n                            <OnfidoSdkViewContainer\n                                country_code={country_code}\n                                documents_supported={documents_supported}\n                                getChangeableFields={getChangeableFields}\n                                handleViewComplete={handleViewComplete}\n                                height={height}\n                            />\n                        );\n                    }\n                    case service_code.manual:\n                        return (\n                            <Unsupported\n                                country_code={selected_country.value}\n                                is_from_external={is_from_external}\n                                allow_poi_resubmission={allow_poi_resubmission}\n                                handleViewComplete={handleViewComplete}\n                                onfido={onfido}\n                                handleBack={handleBack}\n                                is_resubmission={needs_resubmission}\n                            />\n                        );\n                    default:\n                        return null;\n                }\n            }\n            case submission_status_code.complete: {\n                switch (submission_service) {\n                    case service_code.idv:\n                        return (\n                            <IdvSubmitComplete\n                                is_from_external={is_from_external}\n                                mismatch_status={mismatch_status}\n                                needs_poa={needs_poa}\n                                redirect_button={redirect_button}\n                            />\n                        );\n                    // This will be replaced in the next Manual Upload Project\n                    case service_code.manual:\n                        return (\n                            <UploadComplete\n                                is_from_external={is_from_external}\n                                needs_poa={needs_poa}\n                                redirect_button={redirect_button}\n                                is_manual_upload\n                            />\n                        );\n                    case service_code.onfido:\n                        return (\n                            <UploadComplete\n                                is_from_external={is_from_external}\n                                needs_poa={needs_poa}\n                                redirect_button={redirect_button}\n                            />\n                        );\n                    default:\n                        return null;\n                }\n            }\n            default:\n                return null;\n        }\n    }\n);\n\nexport default POISubmission;\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Loading } from '@deriv/components';\nimport { isEmptyObject, WS, getPlatformRedirect, platforms } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { identity_status_codes, service_code } from './proof-of-identity-utils';\nimport DemoMessage from '../../../Components/demo-message';\nimport ErrorMessage from '../../../Components/error-component';\nimport Expired from '../../../Components/poi/status/expired';\nimport IdvContainer from './idv.jsx';\nimport Limited from '../../../Components/poi/status/limited';\nimport { Localize } from '@deriv/translations';\nimport NotRequired from '../../../Components/poi/status/not-required';\nimport Onfido from './onfido.jsx';\nimport POISubmission from './proof-of-identity-submission.jsx';\nimport Unsupported from '../../../Components/poi/status/unsupported';\nimport UploadComplete from '../../../Components/poi/status/upload-complete';\nimport Verified from '../../../Components/poi/status/verified';\nimport { populateVerificationStatus } from '../Helpers/verification';\n\nconst ProofOfIdentityContainer = observer(\n    ({ height, is_from_external, onStateChange, getChangeableFields, updateAccountStatus }) => {\n        const history = useHistory();\n        const [api_error, setAPIError] = React.useState();\n        const [has_require_submission, setHasRequireSubmission] = React.useState(false);\n        const [residence_list, setResidenceList] = React.useState([]);\n        const [is_status_loading, setStatusLoading] = React.useState(true);\n\n        const { client, common, notifications } = useStore();\n\n        const {\n            account_settings,\n            account_status,\n            fetchResidenceList,\n            is_switching,\n            is_high_risk,\n            is_withdrawal_lock,\n            should_allow_authentication,\n            is_virtual,\n        } = client;\n        const { app_routing_history, routeBackInApp, is_language_changing } = common;\n        const { refreshNotifications } = notifications;\n\n        const from_platform = getPlatformRedirect(app_routing_history);\n\n        const should_show_redirect_btn = Object.keys(platforms).includes(from_platform?.ref);\n\n        const routeBackTo = redirect_route => routeBackInApp(history, [redirect_route]);\n        const handleRequireSubmission = () => setHasRequireSubmission(true);\n        const country_code = account_settings?.citizen || account_settings?.country_code;\n\n        const handleManualSubmit = () => {\n            WS.authorized.getAccountStatus().then(() => {\n                refreshNotifications();\n            });\n        };\n\n        const loadResidenceList = React.useCallback(() => {\n            fetchResidenceList().then(response_residence_list => {\n                if (response_residence_list.error) {\n                    setAPIError(response_residence_list.error);\n                } else {\n                    setResidenceList(response_residence_list.residence_list);\n                }\n            });\n        }, [fetchResidenceList]);\n\n        React.useEffect(() => {\n            if (is_language_changing) {\n                loadResidenceList();\n            }\n        }, [is_language_changing, loadResidenceList]);\n\n        React.useEffect(() => {\n            // only re-mount logic when switching is done\n            if (!is_switching) {\n                setAPIError(null);\n                WS.authorized.getAccountStatus().then(response_account_status => {\n                    if (response_account_status.error) {\n                        setAPIError(response_account_status.error);\n                        setStatusLoading(false);\n                        return;\n                    }\n                    loadResidenceList();\n                    setStatusLoading(false);\n                });\n            }\n        }, [loadResidenceList, is_switching]);\n\n        if (api_error) {\n            return <ErrorMessage error_message={api_error?.message || api_error} />;\n        } else if (is_status_loading || is_switching || isEmptyObject(account_status) || residence_list.length === 0) {\n            /**\n             * Display loader while waiting for the account status and residence list to be populated\n             */\n            return <Loading is_fullscreen={false} />;\n        } else if (is_virtual) {\n            return <DemoMessage />;\n        }\n\n        const verification_status = populateVerificationStatus(account_status);\n        const {\n            identity,\n            idv,\n            allow_poi_resubmission,\n            identity_last_attempt,\n            identity_status,\n            is_age_verified,\n            is_idv_disallowed,\n            manual,\n            needs_poa,\n            onfido,\n            poi_expiring_soon,\n        } = verification_status;\n        const should_ignore_idv = is_high_risk && is_withdrawal_lock;\n\n        if (!should_allow_authentication && !is_age_verified && !poi_expiring_soon) {\n            return <NotRequired />;\n        }\n        const onClickRedirectButton = () => {\n            const platform = platforms[from_platform.ref];\n            const { is_hard_redirect = false, url = '' } = platform ?? {};\n            if (is_hard_redirect) {\n                window.location.href = url;\n                window.sessionStorage.removeItem('config.platform');\n            } else {\n                routeBackTo(from_platform.route);\n            }\n        };\n\n        const redirect_button = should_show_redirect_btn && (\n            <Button primary className='proof-of-identity__redirect' onClick={onClickRedirectButton}>\n                <Localize\n                    i18n_default_text='Back to {{platform_name}}'\n                    values={{ platform_name: from_platform.name }}\n                />\n            </Button>\n        );\n        const should_show_mismatch_form =\n            identity_status != identity_status_codes.verified &&\n            idv.submissions_left > 0 &&\n            [identity_status_codes.rejected, identity_status_codes.suspected, identity_status_codes.expired].includes(\n                idv.status\n            );\n\n        if (\n            identity_status === identity_status_codes.none ||\n            has_require_submission ||\n            allow_poi_resubmission ||\n            should_show_mismatch_form ||\n            poi_expiring_soon\n        ) {\n            return (\n                <POISubmission\n                    account_settings={account_settings}\n                    allow_poi_resubmission={allow_poi_resubmission}\n                    has_require_submission={has_require_submission}\n                    height={height ?? null}\n                    getChangeableFields={getChangeableFields}\n                    identity_last_attempt={identity_last_attempt}\n                    idv={idv}\n                    is_from_external={!!is_from_external}\n                    is_idv_disallowed={is_idv_disallowed || should_ignore_idv}\n                    manual={manual}\n                    needs_poa={needs_poa}\n                    onfido={onfido}\n                    onStateChange={onStateChange}\n                    redirect_button={redirect_button}\n                    refreshNotifications={refreshNotifications}\n                    residence_list={residence_list}\n                    updateAccountStatus={updateAccountStatus}\n                    should_show_mismatch_form={should_show_mismatch_form}\n                />\n            );\n        } else if (\n            !identity_last_attempt ||\n            // Prioritise verified status from back office. How we know this is if there is mismatch between current statuses (Should be refactored)\n\n            (identity_status === identity_status_codes.verified &&\n                identity_status !== identity?.services[identity_last_attempt?.service].status)\n        ) {\n            switch (identity_status) {\n                case identity_status_codes.pending:\n                    return (\n                        <UploadComplete\n                            is_from_external={!!is_from_external}\n                            needs_poa={needs_poa}\n                            redirect_button={redirect_button}\n                            is_manual_upload={manual?.status === 'pending'}\n                        />\n                    );\n                case identity_status_codes.verified:\n                    return (\n                        <Verified\n                            is_from_external={!!is_from_external}\n                            needs_poa={needs_poa}\n                            redirect_button={redirect_button}\n                            service={identity_last_attempt?.service}\n                        />\n                    );\n                case identity_status_codes.expired:\n                    return (\n                        <Expired\n                            is_from_external={!!is_from_external}\n                            redirect_button={redirect_button}\n                            handleRequireSubmission={handleRequireSubmission}\n                        />\n                    );\n                case identity_status_codes.rejected:\n                case identity_status_codes.suspected:\n                    return <Limited handleRequireSubmission={handleRequireSubmission} />;\n                default:\n                    break;\n            }\n        }\n\n        switch (identity_last_attempt.service) {\n            case service_code.idv:\n                return (\n                    <IdvContainer\n                        account_settings={account_settings}\n                        handleRequireSubmission={handleRequireSubmission}\n                        getChangeableFields={getChangeableFields}\n                        idv={idv}\n                        is_from_external={!!is_from_external}\n                        needs_poa={needs_poa}\n                        redirect_button={redirect_button}\n                        residence_list={residence_list}\n                    />\n                );\n            case service_code.onfido:\n                return (\n                    <Onfido\n                        handleRequireSubmission={handleRequireSubmission}\n                        is_from_external={!!is_from_external}\n                        needs_poa={needs_poa}\n                        onfido={onfido}\n                        manual={manual}\n                        redirect_button={redirect_button}\n                        country_code={country_code}\n                        handleViewComplete={handleManualSubmit}\n                    />\n                );\n            case service_code.manual:\n                return (\n                    <Unsupported\n                        manual={manual}\n                        country_code={country_code}\n                        is_from_external={is_from_external}\n                        needs_poa={needs_poa}\n                        redirect_button={redirect_button}\n                        handleRequireSubmission={handleRequireSubmission}\n                        handleViewComplete={handleManualSubmit}\n                        onfido={onfido}\n                    />\n                );\n            default:\n                return null;\n        }\n    }\n);\n\nexport default ProofOfIdentityContainer;\n","import React from 'react';\nimport { Div100vhContainer } from '@deriv/components';\nimport { isDesktop } from '@deriv/shared';\nimport ProofOfAddressContainer from '@deriv/account/src/Sections/Verification/ProofOfAddress/proof-of-address-container';\nimport ProofOfIdentityContainer from '@deriv/account/src/Sections/Verification/ProofOfIdentity/proof-of-identity-container';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TVerificationModalContent = {\n    onFinish: () => void;\n};\n\ntype TItemsState = {\n    body: typeof ProofOfIdentityContainer | typeof ProofOfAddressContainer;\n};\n\nconst VerificationModalContent = observer((props: TVerificationModalContent) => {\n    const [step, setStep] = React.useState(0);\n    const [form_error, setFormError] = React.useState('');\n    const state_index = step;\n    let is_mounted = React.useRef(true).current;\n\n    const { client, notifications } = useStore();\n\n    const { authentication_status, fetchStatesList } = client;\n    const { refreshNotifications } = notifications;\n\n    const poi_config: TItemsState = {\n        body: ProofOfIdentityContainer,\n    };\n\n    const poa_config: TItemsState = {\n        body: ProofOfAddressContainer,\n    };\n\n    const should_show_poi = !['pending', 'verified'].includes(authentication_status.identity_status);\n    const should_show_poa = !['pending', 'verified'].includes(authentication_status.document_status);\n\n    const verification_configs = [...(should_show_poi ? [poi_config] : []), ...(should_show_poa ? [poa_config] : [])];\n\n    const [items, setItems] = React.useState<TItemsState[]>(verification_configs);\n\n    const clearError = () => {\n        setFormError('');\n    };\n\n    React.useEffect(() => {\n        refreshNotifications();\n    }, [items, refreshNotifications]);\n\n    React.useEffect(() => {\n        fetchStatesList();\n    }, [fetchStatesList]);\n\n    const unmount = () => {\n        is_mounted = false;\n        props.onFinish();\n    };\n\n    const saveFormData = () => {\n        if (!is_mounted) return; // avoiding state update on unmounted component\n        const cloned_items: TItemsState[] = [...items];\n        setItems(cloned_items);\n    };\n\n    const nextStep = () => {\n        clearError();\n        if (step + 1 < items.length) {\n            saveFormData();\n            setStep(step + 1);\n        } else unmount();\n    };\n\n    const prevStep = () => {\n        if (step - 1 >= 0) {\n            setStep(step - 1);\n            setFormError('');\n        } else unmount();\n    };\n\n    const getCurrent = (key?: keyof TItemsState) => {\n        return key ? items[state_index][key] : items[state_index];\n    };\n\n    const onStateChange = () => {\n        saveFormData();\n        nextStep();\n    };\n\n    const BodyComponent = getCurrent('body');\n\n    return (\n        <Div100vhContainer\n            className='proof-of-identity'\n            id='verification_modal_content'\n            is_disabled={isDesktop()}\n            height_offset='40px'\n        >\n            <div className='proof-of-identity__main-container' data-testid='dt_verification_modal_body'>\n                <BodyComponent\n                    index={state_index}\n                    onSubmit={nextStep}\n                    onStateChange={onStateChange}\n                    height='auto'\n                    onCancel={prevStep}\n                    onSave={saveFormData}\n                    form_error={form_error}\n                />\n            </div>\n        </Div100vhContainer>\n    );\n});\n\nexport default VerificationModalContent;\n","import verificationModal from './verification-modal';\n\nexport default verificationModal;\n","import React from 'react';\nimport { DesktopWrapper, MobileDialog, MobileWrapper, Modal, UILoader } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport VerificationModalContent from './verification-modal-content';\n\nimport './verification-modal.scss';\nimport { localize } from '@deriv/translations';\n\nconst VerificationModal = observer(() => {\n    const { ui, client } = useStore();\n    const { authentication_status } = client;\n    const { is_verification_modal_visible, setIsVerificationModalVisible, setIsVerificationSubmitted } = ui;\n\n    const should_show_poi = !['pending', 'verified'].includes(authentication_status.identity_status);\n    const should_show_poa = !['pending', 'verified'].includes(authentication_status.document_status);\n\n    let modal_title;\n\n    if (should_show_poi && should_show_poa) {\n        modal_title = localize('Submit your proof of identity and address');\n    } else if (should_show_poi && !should_show_poa) {\n        modal_title = localize('Submit your proof of identity');\n    } else {\n        modal_title = localize('Submit your proof of address');\n    }\n\n    return (\n        <React.Suspense fallback={<UILoader />}>\n            <DesktopWrapper>\n                <Modal\n                    className='verification-modal'\n                    is_open={is_verification_modal_visible}\n                    title={modal_title}\n                    toggleModal={() => setIsVerificationModalVisible(false)}\n                    height='70rem'\n                    width='99.6rem'\n                    exit_classname='verification-modal--custom-exit'\n                >\n                    <VerificationModalContent\n                        onFinish={() => {\n                            setIsVerificationModalVisible(false);\n                            setIsVerificationSubmitted(true);\n                        }}\n                    />\n                </Modal>\n            </DesktopWrapper>\n            <MobileWrapper>\n                <MobileDialog\n                    portal_element_id='deriv_app'\n                    title={modal_title}\n                    wrapper_classname='verification-modal'\n                    visible={is_verification_modal_visible}\n                    onClose={() => setIsVerificationModalVisible(false)}\n                >\n                    <VerificationModalContent\n                        onFinish={() => {\n                            setIsVerificationModalVisible(false);\n                            setIsVerificationSubmitted(true);\n                        }}\n                    />\n                </MobileDialog>\n            </MobileWrapper>\n        </React.Suspense>\n    );\n});\n\nexport default VerificationModal;\n","import DocumentUploader from '@binary-com/binary-document-uploader';\nimport { useMutation } from '@deriv/api';\nimport { WS, compressImageFiles, readFiles } from '@deriv/shared';\nimport { useCallback, useMemo, useState } from 'react';\n\ntype TSettingsPayload = Partial<Parameters<ReturnType<typeof useMutation<'document_upload'>>['mutate']>[0]['payload']>;\n\ntype TFile =\n    | Partial<\n          TSettingsPayload & {\n              filename: File['name'];\n              buffer: FileReader['result'];\n              documentFormat: string;\n              file_size: File['size'];\n          }\n      >\n    | {\n          message: string;\n      };\n\ntype TUploaderResponse = {\n    [key: string]: unknown;\n    message?: string;\n    warning?: string;\n};\nconst fileReadErrorMessage = (filename: string) => {\n    return `Unable to read file ${filename}`;\n};\n\n/**\n * Custom hook to handle file uploading with the binary-document-uploader package\n */\nconst useFileUploader = () => {\n    const [error, setError] = useState<unknown>(null);\n    const uploader_instance = useMemo(() => new DocumentUploader({ connection: WS.getSocket() }), []);\n\n    const upload = useCallback(\n        async (files: File[], settings?: TSettingsPayload, onError?: () => void) => {\n            if (!files?.length) return Promise.reject(new Error('No files selected'));\n\n            return new Promise<{\n                message?: string;\n                warning?: string;\n                [key: string]: unknown;\n            }>((resolve, reject) => {\n                let is_any_file_error = false;\n                let file_error: string | null = null;\n\n                (async () => {\n                    try {\n                        const compressed_files: Blob[] = await compressImageFiles(files);\n                        const processed_files: TFile[] = await readFiles(\n                            compressed_files,\n                            fileReadErrorMessage,\n                            settings ?? {}\n                        );\n                        processed_files.forEach(file => {\n                            if (file && 'message' in file) {\n                                is_any_file_error = true;\n                                file_error = file.message;\n                                reject(file.message);\n                            }\n                        });\n                        if (is_any_file_error || !processed_files.length) {\n                            onError?.();\n                            return reject(new Error(file_error ?? 'Something went wrong!')); // don't start submitting files until all front-end validation checks pass\n                        }\n\n                        // send files\n                        const response: TUploaderResponse = await uploader_instance.upload(processed_files[0]);\n                        resolve(response);\n                    } catch (error: unknown) {\n                        setError(error);\n                        reject(error);\n                    }\n                })();\n            });\n        },\n        [uploader_instance]\n    );\n\n    return {\n        /**\n         * Error message from the file uploader\n         */\n        error,\n        /**\n         * Uploads a file to the server with the binary-document-uploader package after compressing and reading the file with meta data\n         */\n        upload,\n        /**\n         * Instance of the binary-document-uploader\n         */\n        uploader_instance,\n    };\n};\n\nexport default useFileUploader;\n","import React from 'react';\nimport { useMutation } from '@deriv/api';\nimport { TSocketRequestPayload } from '@deriv/api/types';\n\ntype TNotificationEventPayload = TSocketRequestPayload<'notification_event'>['payload'];\n\n/**\n * Hook to send notification event to the server\n * @name useNotificationEvent\n * @returns response, mutation function and other properties from useRequest hook\n */\nconst useNotificationEvent = () => {\n    const { data, mutate, ...rest } = useMutation('notification_event');\n\n    /**\n     * Function to send notification event to the server\n     * @param payload - notification event payload\n     */\n    const send = React.useCallback((payload: TNotificationEventPayload) => mutate({ payload }), [mutate]);\n\n    return {\n        notification_event: data?.notification_event,\n        send,\n        ...rest,\n    };\n};\n\nexport default useNotificationEvent;\n","import { useQuery } from '@deriv/api';\nimport { TSocketRequestPayload } from '@deriv/api/types';\n\ntype TServiceTokenPayload = TSocketRequestPayload<'service_token'>['payload'];\n\n/**\n * Hook to get the service token for using 3rd party SDK\n * @name useServiceToken\n * @param payload to be sent while making the API call\n * @returns response and its status\n */\nconst useServiceToken = (payload: TServiceTokenPayload) => {\n    const { data, ...rest } = useQuery('service_token', {\n        payload,\n        options: { retry: 3, enabled: Boolean(payload) },\n    });\n\n    return {\n        service_token: data?.service_token,\n        ...rest,\n    };\n};\n\nexport default useServiceToken;\n"],"names":["IconMessageContent","children","className","full_width","icon","is_disabled_for_mobile","message","text","isDesktop","useDevice","_jsx","Div100vhContainer","clsx","is_disabled","height_offset","_jsxs","Text","as","color","weight","align","size","useAuthorize","current_token","getActiveAuthTokenIDFromLocalStorage","invalidate","useInvalidateQuery","switchEnvironment","queryClient","useAPIContext","currentLoginID","setCurrentLoginID","useState","getActiveLoginIDFromLocalStorage","_useQuery","useQuery","payload","authorize","options","enabled","Boolean","refetchOnWindowFocus","refetchOnReconnect","data","rest","_objectWithoutProperties","_excluded","modified_authorize","useMemo","_objectSpread","switchAccount","useCallback","loginid","active_loginid","sessionStorage","setItem","localStorage","cancelQueries","useResidenceList","residence_list_rest","modified_residence_list","residence_list","map","residence","useSettings","isSuccess","_useMutation","useMutation","onSuccess","mutate","mutate_rest","_excluded2","update","modified_settings","_data$get_settings$ci","_data$get_settings","_data$get_settings$ac","_data$get_settings2","_data$get_settings$pl","_data$get_settings3","_data$get_settings$ta","_data$get_settings4","_data$get_settings$ta2","_data$get_settings5","citizenship","get_settings","citizen","account","account_opening_reason","placeofbirth","place_of_birth","taxResidence","tax_residence","taxIdentificationnumber","tax_identification_number","has_submitted_personal_details","mutation","useQueryClient","name","invalidateQueries","Array","isArray","Expired","onClick","Localize","i18n_default_text","components","Icon","Button","has_effect","primary","NotRequired","localize","LoadErrorMessage","error_message","LeaveConfirmMessage","back","leave","isMobile","data_testid","type","secondary","large","TransitionBlockerWithRouter","withRouter","TransitionBlocker","dirty","onDirty","history","useHistory","location","useLocation","showModal","setShowModal","React","nextLocation","setNextLocation","pathname","unblock","block","push","_Fragment","Modal","is_open","small","toggleModal","Body","LeaveConfirm","FormikConsumer","formik","submitCount","API_ERROR_CODES","Object","freeze","DUPLICATE_ACCOUNT","CLAIMED_DOCUMENT","DUPLICATE_DOCUMENT","UploadMessage","FileUploader","onFileDrop","onError","document_files","setDocumentFiles","file_error","setFileError","FileDropzone","accept","supported_filetypes","filename_limit","hover_message","max_size","max_document_size","multiple","onDropAccepted","files","length","onDropRejected","is_file_too_large","file","supported_files","filter","each_file","getSupportedFiles","validation_error_message","value","removeFile","useKycAuthStatus","client","useStore","is_authorize","kyc_auth_status_rest","kyc_auth_status","getFileUploaderDescriptions","page","is_eu","proof_of_income_descriptions","title","descriptions","id","proof_of_address_descriptions","values","expiry_in_months","getSupportedProofOfAddressDocuments","FileUploaderContainer","examples","files_description","country_of_residence","placeholder","useTranslations","isLoading","country","document_list","setDocumentList","address","supported_documents","doc_list","doc","includes","Loading","is_fullscreen","Field","field","form","setFieldValue","Autocomplete","autoComplete","list_items","label","onItemSelection","item","required","FilesDescription","line_height","ScrollbarsContainer","scroll_offset","isFullHeight","height_unit","ThemedScrollbars","is_bypassed","height","FormBody","Fragment","FormFooter","CommonMistakeExamplePartials","description","image","LegacyLossIcon","iconSize","role","CommonMistakeExamples","example_images","DerivLightIcDocumentNameMismatchIcon","ref","DerivLightIcDocumentAddressMismatchIcon","DerivLightIcOldIssuedDocumentMoreThan6Icon","DerivLightIcOldIssuedDocumentMoreThan12Icon","DerivLightIcBlurryDocumentIcon","DerivLightIcCroppedDocumentIcon","DerivLightIcEnvelopeIcon","getExampleImagesConfig","config","observer","setOffset","is_for_cfd_modal","is_resubmit","form_state","status","handleSubmit","isSubmitting","isValid","useFormikContext","file_selection_error","setFileSelectionError","states_list","account_settings","getChangeableFields","changeable_fields","poa_uploader_files_descriptions","Form","noValidate","onSubmit","msg","InlineMessage","FormSubHeader","title_text_size","PersonalDetailsForm","is_qualified_for_poa","editable_fields","FormBodySection","country_code","Footer","has_separator","FormSubmitButton","is_loading","is_btn_loading","is_submit_success","ProgressBar","is_active","errors","step","setStep","isNextBtnDisabled","address_line_1","address_line_2","address_city","address_state","address_postcode","LabelPairedArrowLeftMdBoldIcon","prev_step","onSubmitForCFDModal","notifications","fetchResidenceList","fetchStatesList","addNotificationMessageByKey","addNotificationByKey","removeNotificationMessage","removeNotificationByKey","setIsLoading","form_values","setFormValues","api_initial_load_error","setAPIInitialLoadError","setFormState","should_allow_submit","should_show_form","should_scroll_to_top","setShouldScrollToTop","upload","useFileUploader","then","async","Promise","all","WS","wait","_account_settings$add","_account_settings$add2","_account_settings$add3","_account_settings$add4","_account_settings$add5","_el$parentElement","el","document","querySelector","target_element","parentElement","scrollIntoView","behavior","showForm","form_initial_values","document_type","current_value","getLocation","mobile_scroll_offset","Formik","initialValues","setStatus","setSubmitting","settings_values","setSettings","error","get_settings_response","authorized","storage","getSettings","selected_doc_type","find","api_response","warning","get_account_status_response","getAccountStatus","get_account_status","needs_verification","authentication","needs_poi","forEach","key","isServerError","validate","validateValues","val","address_line_1_validation_result","validAddress","is_required","is_ok","address_line_2_validation_result","validation_letter_symbol_message","validLetterSymbol","validAddressState","validLength","min","max","validPostCode","field_name","max_number","interpolation","escapeValue","enableReinitialize","validateOnMount","undefined","POAMobileLayout","POADesktopLayout","RouteButton","button_label","route","ButtonLink","to","Submitted","redirect_button","is_redirected_from_platform","isNavigationFromP2P","isNavigationFromDerivGO","routes","proof_of_identity","traders_hub","Unverified","button_text","ContinueTradingButton","trade","PoiButton","Verified","populateVerificationStatus","account_status","attempts","identity","income","identity_status","document_status","income_status","allow_document_upload","some","allow_poi_resubmission","allow_poa_resubmission","allow_poinc_resubmission","is_age_verified","is_fully_authenticated","is_idv_disallowed","poa_address_mismatch","poi_expiring_soon","poa_authenticated_with_idv","poa_authenticated_with_idv_photo","poa_expiring_soon","poi_acknowledged","has_poa","has_poi","has_poinc","has_submitted_poa","needs_poa","needs_poinc","idv","onfido","manual","services","identity_last_attempt","latest","has_attempted_idv","h","service","_from_platform$ref","authentication_status","setAuthenticationStatus","resubmit_poa","has_submitted_duplicate_poa","common","ui","app_routing_history","has_restricted_mt5_account","is_switching","is_verification_modal_visible","refreshNotifications","mt5_poa_status","getItem","response","removeItem","handleResubmit","onSubmitDocument","from_platform","getPlatformRedirect","should_show_redirect_btn","keys","platforms","should_allow_resubmit","cashier_p2p","_platforms","url","window","href","platform_name","handleDuplicatePOASubmission","ProofOfAddressForm","getDocumentStatus","AUTH_STATUS_CODES","NONE","PENDING","VERIFIED","EXPIRED","REJECTED","SUSPECTED","identity_status_codes","none","pending","rejected","verified","expired","suspected","submission_status_code","service_code","has_button","has_any_real_account","has_real_account","toggleAccountsDialog","toggleShouldShowRealAccountsList","DemoMessage","IconWithMessage","is_deriv_com","test","hostname","host","ErrorComponent","header","code","redirect_label","redirectOnClick","should_show_refresh","isTmbEnabled","useTMB","isTmbEnabledValue","setIsTmbEnabledValue","useEffect","tmbStatus","checkTmbStatus","refresh_message","Cookies","get","requestOidcAuthentication","redirectCallbackUri","origin","catch","err","console","PageError","messages","redirect_urls","redirect_labels","buttonOnClick","reload","handleRequireSubmission","is_from_external","IdvLimited","setSubmissionStatus","POIContext","DerivLightExclamationPoiIcon","DEFAULT_BTN_TEXT","PoaButton","custom_text","class_name","proof_of_address","IdvSubmitComplete","mismatch_status","is_already_attempted","is_mismatch_error","IDV_ERROR_STATUS","NameDobMismatch","DobMismatch","NameMismatch","is_expired_or_failed_error","Failed","poa_button","DerivLightWaitingPoiIcon","getHeaderText","IdvVerified","header_Text","DerivLightApprovedPoiIcon","Idv","submissions_left","last_rejected","formatIDVError","Number","POILimited","Chat","open","OnfidoNotRequired","UploadComplete","is_manual_upload","ListItem","index","text_size","IconMessageList","message_list","onContinue","getOnfidoError","idx","RejectedReasons","rejected_reasons","POIManualUploadFailed","fileReadErrorMessage","filename","uploadFile","getSocket","settings","resolve","reject","uploader","DocumentUploader","connection","is_file_error","compressImageFiles","files_to_process","readFiles","processed_files","total_to_upload","GoToPersonalDetailsButton","anchor","from","from_string","anchor_string","MissingPersonalDetails","has_invalid_postal_code","handleOnClick","GENERIC_ERROR_MESSAGE","DUPLICATE_ACCOUNT_ERROR_MESSAGE","onKeyDown","CLAIMED_DOCUMENT_ERROR_MESSAGE","generateIDVError","is_document_upload_required","latest_status","chosen_country","document_name","getIDVDocumentType","required_fields","side_note_image","DerivLightNamePoiIcon","width","inline_note_text","failure_message","DerivLightDobPoiIcon","DerivLightNameDobPoiIcon","getIDVError","PoiConfirmWithExampleFormContainer","onFormConfirm","checked","setChecked","rest_state","setRestState","show_form","first_name","last_name","date_of_birth","api_error","visible_settings","filterObjProperties","toMoment","format","e","initializeFormValues","_extends","_objectDestructuringEmpty","error_msg","request","makeSettingsRequest","_data$error","_response$get_setting","setTimeout","validateName","isEmptyObject","removeEmptyPropertiesFromObject","is_rendered_for_onfido","side_note","Checkbox","disabled","HintBox","is_danger","OnfidoSdkView","is_onfido_disabled","is_onfido_container_hidden","onfido_element_id","is_confirmed","is_onfido_initialized","is_status_message_visible","setIsStatusMessageVisible","transition_in_timeout_ref","transition_out_timeout_ref","current","clearTimeout","CSSTransition","appear","in","timeout","exit","classNames","unmountOnExit","is_info","OnfidoSdkViewContainer","documents_supported","handleViewComplete","is_default_enabled","_service_token$onfido3","setAPIError","missing_personal_details","setMissingPersonalDetails","setIsOnfidoDisabled","setIsConfirmed","setIsOnfidoInitialized","is_onfido_loaded","setIsOnfidoLoaded","send","isNotified","useNotificationEvent","current_language","onfido_country_code","convertAlpha2toAlpha3","token_country_code","convertAlpha3toAlpha2","service_token","isError","useServiceToken","onfido_init","onfido_documents","d","display_name","component_to_load","onComplete","_onfido_init$current","tearDown","document_ids","_data","category","event","args","documents","initOnfido","Onfido","init","containerId","language","locale","getOnfidoSupportedLocaleCode","phrases","getOnfidoPhrases","mobilePhrases","token","useModal","useMemoryHistory","steps","documentTypes","passport","driving_licence","national_identity_card","hideCountrySelection","_message","loadOnfidoSdkScript","_document$getElementB","_document$getElementB2","getElementById","remove","script_node","createElement","link_node","src","rel","body","appendChild","addEventListener","onConfirm","_service_token$onfido","_service_token$onfido2","handleError","ErrorMessage","displayName","ROOT_CLASS","DOCUMENT_TYPES","PAGE_TYPE","SELFIE_DOCUMENT","pageType","info","date_field","InputField","min_date","add","touched","Input","DatePicker","date_format","display_format","start_date","readOnly","DROPZONE_ERRORS","GENERAL","Message","medium","Preview","has_frame","handleChange","background_url","setBackgroundUrl","URL","createObjectURL","style","backgroundImage","indexOf","Uploader","is_full","onChange","setImage","ValidationErrorMessage","_image$errors","_value$errors","preview_single","handleAccept","handleReject","_files$0$errors","noClick","setInitialValues","fields","checkIsEmpty","trim","validateFields","icons","IconsItem","DocumentsUpload","initial_values","goToCards","documents_title","is_expiry_date_required","fields_title","is_form_touched","is_form_empty","_fields$key","SelfieUpload","goBack","CardDetails","setDocuments","selfie","setSelfie","is_selfie_upload","setIsSelfieUpload","STATUS","IS_UPLOADING","IS_COMPLETED","IS_FAILED","_ref","onClickBack","root_class","country_code_key","handleComplete","is_onfido_supported","is_for_mt5","handlePOIforMT5Complete","props","response_error","setError","is_any_failed","docs","details","files_length","file_to_upload_index","results","uploadNext","_data$expiry_date","lifetime_valid","expiration_date","expiry_date","page_type","document_id","document_issuing_country","IS_DUPLICATE_UPLOAD","is_slow_loading","OnfidoUpload","onfido_name","CardWithArrow","Documents","toggleDetail","_item$card","Card","renderContent","card","handleBack","is_resubmission","detail","setDetail","getDocumentIndex","Limited","has_nimc","checkNimcStep","DetailComponent","submission_errors","formatOnfidoError","Unsupported","CountrySelector","handleSelectionNext","_IDV_ERROR_STATUS$mis","_IDV_ERROR_STATUS$mis2","setSelectedCountry","country_list","updateSelectedCountry","country_name","matching_country","c","failed_message","country_input","submitHandler","handleBlur","onBlur","current_input","target","SelectNative","use_text","selected_country","IDV_NOT_APPLICABLE_OPTION","getIDVNotApplicableOption","shouldSkipIdv","example_format","document_number","confirmation_checkbox","document_additional","needs_additional_document","additional","isDocumentTypeValid","shouldHideHelperImage","isAdditionalDocumentValid","isDocumentNumberValid","_values$document_type","_get_settings$error$m","_get_settings$error","submit_data","identity_verification_document_add","formatIDVFormValues","idv_update_response","_idv_update_response$","_idv_update_response$2","_idv_update_response$3","_values$document_type2","_values$document_type3","_values$document_type4","should_skip_idv","is_button_disabled","IDVForm","is_rendered_for_idv","IdvFailed","_rest_state$form_init","_rest_state$form_init2","setIsAlreadyAttempted","idv_failure","setIdvFailure","_residence_list$find","residence_data","_error_config$require","error_config","form_data","initial_form_values","sample_image","_e$error","prev_state","issuing_country","_idv_failure$required","_status$error_msg","_values$document_type5","is_idv_skipping","POISubmission","has_require_submission","onStateChange","should_show_mismatch_form","submission_service","setSubmissionService","submission_status","is_high_risk","risk_classification","should_show_manual","idv_submissions_left","onfido_submissions_left","is_idv_supported","is_country_supported","getCountryFromResidence","needs_resubmission","is_report_not_available","isIDVReportNotAvailable","setIdentityService","report_available","IdvDocumentSubmit","doc_obj","ProofOfIdentityContainer","updateAccountStatus","setHasRequireSubmission","setResidenceList","is_status_loading","setStatusLoading","is_withdrawal_lock","should_allow_authentication","is_virtual","routeBackInApp","is_language_changing","handleManualSubmit","loadResidenceList","response_residence_list","response_account_status","verification_status","should_ignore_idv","onClickRedirectButton","platform","is_hard_redirect","redirect_route","IdvContainer","form_error","setFormError","state_index","is_mounted","poi_config","poa_config","ProofOfAddressContainer","verification_configs","items","setItems","unmount","onFinish","saveFormData","cloned_items","nextStep","BodyComponent","onCancel","prevStep","onSave","setIsVerificationModalVisible","setIsVerificationSubmitted","should_show_poi","should_show_poa","modal_title","fallback","UILoader","DesktopWrapper","exit_classname","VerificationModalContent","MobileWrapper","MobileDialog","portal_element_id","wrapper_classname","visible","onClose","uploader_instance","is_any_file_error","compressed_files","Error","notification_event","retry"],"sourceRoot":""}