{"version":3,"file":"js/core.chunk.7030.78973846415b1162ad96.js","mappings":"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","sources":["webpack:///../../account/src/Components/form-body-section/form-body-section.tsx","webpack:///../../account/src/Components/form-body-section/index.ts","webpack:///../../account/src/Components/form-sub-header/form-sub-header.tsx","webpack:///../../account/src/Components/form-sub-header/index.ts","webpack:///../../account/src/Components/forms/form-fields/form-input-field.tsx","webpack:///../../account/src/Components/forms/form-fields/date-of-birth-field.tsx","webpack:///../../account/src/Constants/financial-information-list.ts","webpack:///../../account/src/Components/forms/form-fields/employment-status.tsx","webpack:///../../account/src/Components/forms/form-fields/tax-residence.tsx","webpack:///../../account/src/Components/forms/form-fields/tax-indentification-number.tsx","webpack:///../../account/src/Constants/external-urls.ts","webpack:///../../account/src/Components/forms/idv-form.tsx","webpack:///../../account/src/Components/forms/form-fields/account-opening-reason.tsx","webpack:///../../account/src/Components/forms/personal-details-form.jsx","webpack:///../../account/src/Components/inline-note-with-icon/inline-note-with-icon.tsx","webpack:///../../account/src/Components/inline-note-with-icon/index.ts","webpack:///../../account/src/Constants/onfido.js","webpack:///../../account/src/Configs/idv-document-config.ts","webpack:///../../account/src/Helpers/utils.tsx","webpack:///../../api/src/useMutation.ts","webpack:///../../hooks/src/useGetPhoneNumberList.ts"],"sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\n\nimport { Text } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { Localize } from '@deriv/translations';\n\nexport type TFormBodySection = {\n    /**\n     *  A boolean value indicating whether the section has a side note.\n     */\n    has_side_note?: boolean;\n    /**\n     * The side note to display next to the main content.\n     */\n    side_note?: string | React.ReactElement;\n    /**\n     * The position of the side note relative to the main content.\n     * @default 'left'\n     * */\n    side_note_position?: 'left' | 'right';\n    /**\n     * The type of the side note either it can be locaziled string (`localize or Localize`) component or image as JSX element.\n     * @default 'text'\n     * */\n    type?: 'text' | 'image';\n};\n\n/**\n *  A component that renders a form body section with an optional side note.\n *\n *  This component renders a section of a form body. It can optionally display a side note\n *  and allows reversing the order of the side note and the main content.\n *  @returns {JSX.Element} A React component that renders a form body section.\n */\nconst FormBodySection = ({\n    children,\n    has_side_note,\n    side_note,\n    side_note_position = 'left',\n    type = 'text',\n}: React.PropsWithChildren<TFormBodySection>): JSX.Element => {\n    const { isDesktop } = useDevice();\n    if (has_side_note) {\n        return (\n            <div\n                data-testid='dt_side_note_container'\n                className={clsx('account-form__section', {\n                    'account-form__section--reversed': side_note_position === 'right',\n                })}\n            >\n                <div\n                    className={clsx('account-form__section-side-note', {\n                        'account-form__section-side-note__example': type !== 'text',\n                    })}\n                >\n                    {type === 'text' ? (\n                        <Text color='less-prominent' size={isDesktop ? 'xs' : 'xxs'} data-testid='dt_side_note_text'>\n                            {side_note}\n                        </Text>\n                    ) : (\n                        <React.Fragment>\n                            <Text as='p' size={isDesktop ? 'xs' : 'xxs'} weight='bold'>\n                                <Localize i18n_default_text='Example :' />\n                            </Text>\n                            <div className='account-form__section-side-note__example-image'>{side_note}</div>\n                        </React.Fragment>\n                    )}\n                </div>\n                <div className='account-form__section-content'>{children}</div>\n            </div>\n        );\n    }\n    return children as JSX.Element;\n};\n\nexport default FormBodySection;\n","import FormBodySection from './form-body-section';\n\nexport default FormBodySection;\n","// [TODO] - To be removed once CFD is configured to use the new form-body component\nimport React, { Fragment } from 'react';\nimport clsx from 'clsx';\nimport { Text } from '@deriv/components';\n\nexport type TFormSubHeader = {\n    description?: string;\n    subtitle?: string;\n    title: string;\n    title_text_size?: string;\n};\n\nexport const FormSubHeader = ({ description, subtitle, title, title_text_size = 'xs' }: TFormSubHeader) => {\n    const title_as_class = title.replace(/\\s+/g, '-').toLowerCase();\n\n    return (\n        <Fragment>\n            <div\n                className={clsx('account-form__header', title_as_class, {\n                    'account-form__header--has-description': !!description,\n                })}\n                data-testid='form-sub-header'\n            >\n                <div className='account-form__header-section'>\n                    <Text\n                        as='h1'\n                        color='prominent'\n                        weight='bold'\n                        size={title_text_size}\n                        className='account-form__title'\n                    >\n                        {title}\n                    </Text>\n                    {subtitle && (\n                        <Text as='h2' size='xxxs' color='prominent' className='account-form__subtitle'>\n                            {subtitle}\n                        </Text>\n                    )}\n                </div>\n            </div>\n            {description && (\n                <Text as='p' className='account-form__description'>\n                    {description}\n                </Text>\n            )}\n        </Fragment>\n    );\n};\n","import { FormSubHeader } from './form-sub-header';\n\nexport default FormSubHeader;\n","import React from 'react';\nimport { FieldInputProps, FormikHelpers, FormikState, Field } from 'formik';\nimport { Input } from '@deriv/components';\n\ntype FormInputFieldProps = {\n    name: string;\n    optional?: boolean;\n    warn?: string;\n} & React.ComponentProps<typeof Input>;\n\ntype TFormInputFieldHelpers<T> = {\n    field: FieldInputProps<string>;\n    form: FormikHelpers<T> & FormikState<T>;\n};\n\n/**\n * FormInputField is a wrapper around Input that can be used with Formik.\n * @name FormInputField\n * @param name - Name of the field\n * @param [optional] - Whether the field is optional\n * @param [warn] - Display a warning message\n * @param [props] - Other props to pass to Input\n * @returns ReactNode\n */\nconst FormInputField = ({ name, warn, ...rest }: FormInputFieldProps) => (\n    <Field name={name}>\n        {({ field, form: { errors, touched, setFieldTouched } }: TFormInputFieldHelpers<Record<string, string>>) => {\n            return (\n                <Input\n                    {...field}\n                    {...rest}\n                    type='text'\n                    autoComplete='off'\n                    error={touched[field.name] && errors[field.name] ? errors[field.name] : undefined}\n                    warn={warn}\n                    onChange={\n                        rest.onChange ||\n                        ((e: React.ChangeEvent<HTMLInputElement>) => {\n                            !touched[field.name] && setFieldTouched(field.name);\n                            field.onChange(e);\n                        })\n                    }\n                />\n            );\n        }}\n    </Field>\n);\n\nexport default FormInputField;\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors\n// [TODO] - Remove React after CFD is configured with new JSX transformer\nimport React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { DateOfBirthPicker } from '@deriv/components';\nimport { toMoment } from '@deriv/shared';\n\ntype TDateOfBirthFieldProps = {\n    name: string;\n    portal_id: string;\n} & Omit<React.ComponentProps<typeof DateOfBirthPicker>, 'onBlur' | 'onChange' | 'error'>;\n\n/**\n * DateOfBirthField is a wrapper around DateOfBirthPicker that can be used with Formik.\n * @name DateOfBirthField\n * @param name - Name of the field\n * @param portal_id - Portal ID\n * @param [props] - Other props to pass to DateOfBirthPicker\n * @returns {ReactNode}\n */\nconst DateOfBirthField = ({ name, portal_id, ...rest }: TDateOfBirthFieldProps) => (\n    <Field name={name}>\n        {({ field, form: { setFieldValue }, meta: { error, touched } }: FieldProps<string | moment.Moment>) => (\n            <DateOfBirthPicker\n                {...rest}\n                {...field}\n                error={touched ? error : undefined}\n                name={name}\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onChange={({ target }: any) =>\n                    setFieldValue(name, target?.value ? toMoment(target.value).format('YYYY-MM-DD') : '', true)\n                }\n                portal_id={portal_id}\n            />\n        )}\n    </Field>\n);\n\nexport default DateOfBirthField;\n","import { localize } from '@deriv-com/translations';\n\nexport const getIncomeSourceList = () => [\n    {\n        text: localize('Salaried Employee'),\n        value: 'Salaried Employee',\n    },\n    {\n        text: localize('Self-Employed'),\n        value: 'Self-Employed',\n    },\n    {\n        text: localize('Investments & Dividends'),\n        value: 'Investments & Dividends',\n    },\n    {\n        text: localize('Pension'),\n        value: 'Pension',\n    },\n    {\n        text: localize('State Benefits'),\n        value: 'State Benefits',\n    },\n    {\n        text: localize('Savings & Inheritance'),\n        value: 'Savings & Inheritance',\n    },\n];\n\nexport const getEmploymentStatusList = (version?: string, isFeatureDisabled: boolean = true) => {\n    // If the feature is disabled OR if version is 'v1' or undefined, return the first dropdown\n    if (isFeatureDisabled || version === 'v1' || version === undefined) {\n        return [\n            {\n                text: localize('Employed'),\n                value: 'Employed',\n            },\n            {\n                text: localize('Pensioner'),\n                value: 'Pensioner',\n            },\n            {\n                text: localize('Self-Employed'),\n                value: 'Self-Employed',\n            },\n            {\n                text: localize('Student'),\n                value: 'Student',\n            },\n            {\n                text: localize('Unemployed'),\n                value: 'Unemployed',\n            },\n        ];\n    }\n\n    // If the feature is enabled and version is 'v2' OR an empty string (\"\"), return the second dropdown\n    return [\n        {\n            text: localize('Employed full-time'),\n            value: 'Employed full-time',\n        },\n        {\n            text: localize('Employed part-time'),\n            value: 'Employed part-time',\n        },\n        {\n            text: localize('Pensioner'),\n            value: 'Pensioner',\n        },\n        {\n            text: localize('Self-employed'),\n            value: 'Self-employed',\n        },\n        {\n            text: localize('Unemployed'),\n            value: 'Unemployed',\n        },\n    ];\n};\n\nexport const getEmploymentIndustryList = () => [\n    {\n        text: localize('Construction'),\n        value: 'Construction',\n    },\n    {\n        text: localize('Education'),\n        value: 'Education',\n    },\n    {\n        text: localize('Finance'),\n        value: 'Finance',\n    },\n    {\n        text: localize('Health'),\n        value: 'Health',\n    },\n    {\n        text: localize('Tourism'),\n        value: 'Tourism',\n    },\n    {\n        text: localize('Information & Communications Technology'),\n        value: 'Information & Communications Technology',\n    },\n    {\n        text: localize('Science & Engineering'),\n        value: 'Science & Engineering',\n    },\n    {\n        text: localize('Legal'),\n        value: 'Legal',\n    },\n    {\n        text: localize('Social & Cultural'),\n        value: 'Social & Cultural',\n    },\n    {\n        text: localize('Agriculture'),\n        value: 'Agriculture',\n    },\n    {\n        text: localize('Real Estate'),\n        value: 'Real Estate',\n    },\n    {\n        text: localize('Food Services'),\n        value: 'Food Services',\n    },\n    {\n        text: localize('Manufacturing'),\n        value: 'Manufacturing',\n    },\n    {\n        text: localize('Unemployed'),\n        value: 'Unemployed',\n    },\n];\n\nexport const getOccupationList = () => [\n    {\n        text: localize('Chief Executives, Senior Officials and Legislators'),\n        value: 'Chief Executives, Senior Officials and Legislators',\n    },\n    {\n        text: localize('Managers'),\n        value: 'Managers',\n    },\n    {\n        text: localize('Professionals'),\n        value: 'Professionals',\n    },\n    {\n        text: localize('Clerks'),\n        value: 'Clerks',\n    },\n    {\n        text: localize('Personal Care, Sales and Service Workers'),\n        value: 'Personal Care, Sales and Service Workers',\n    },\n    {\n        text: localize('Agricultural, Forestry and Fishery Workers'),\n        value: 'Agricultural, Forestry and Fishery Workers',\n    },\n    {\n        text: localize('Craft, Metal, Electrical and Electronics Workers'),\n        value: 'Craft, Metal, Electrical and Electronics Workers',\n    },\n    {\n        text: localize('Plant and Machine Operators and Assemblers'),\n        value: 'Plant and Machine Operators and Assemblers',\n    },\n    {\n        text: localize('Cleaners and Helpers'),\n        value: 'Cleaners and Helpers',\n    },\n    {\n        text: localize('Mining, Construction, Manufacturing and Transport Workers'),\n        value: 'Mining, Construction, Manufacturing and Transport Workers',\n    },\n    {\n        text: localize('Armed Forces'),\n        value: 'Armed Forces',\n    },\n    {\n        text: localize('Government Officers'),\n        value: 'Government Officers',\n    },\n    {\n        text: localize('Students'),\n        value: 'Students',\n    },\n    {\n        text: localize('Unemployed'),\n        value: 'Unemployed',\n    },\n];\n\nexport const getSourceOfWealthList = () => [\n    {\n        text: localize('Accumulation of Income/Savings'),\n        value: 'Accumulation of Income/Savings',\n    },\n    {\n        text: localize('Cash Business'),\n        value: 'Cash Business',\n    },\n    {\n        text: localize('Company Ownership'),\n        value: 'Company Ownership',\n    },\n    {\n        text: localize('Divorce Settlement'),\n        value: 'Divorce Settlement',\n    },\n    {\n        text: localize('Inheritance'),\n        value: 'Inheritance',\n    },\n    {\n        text: localize('Investment Income'),\n        value: 'Investment Income',\n    },\n    {\n        text: localize('Sale of Property'),\n        value: 'Sale of Property',\n    },\n];\n\nexport const getEducationLevelList = () => [\n    {\n        text: localize('Primary'),\n        value: 'Primary',\n    },\n    {\n        text: localize('Secondary'),\n        value: 'Secondary',\n    },\n    {\n        text: localize('Tertiary'),\n        value: 'Tertiary',\n    },\n];\n\nexport const getNetIncomeList = () => [\n    {\n        text: localize('Less than $25,000'),\n        value: 'Less than $25,000',\n    },\n    {\n        text: localize('$25,000 - $50,000'),\n        value: '$25,000 - $50,000',\n    },\n    {\n        text: localize('$50,001 - $100,000'),\n        value: '$50,001 - $100,000',\n    },\n    {\n        text: localize('$100,001 - $500,000'),\n        value: '$100,001 - $500,000',\n    },\n    {\n        text: localize('Over $500,000'),\n        value: 'Over $500,000',\n    },\n];\n\nexport const getEstimatedWorthList = () => [\n    {\n        text: localize('Less than $100,000'),\n        value: 'Less than $100,000',\n    },\n    {\n        text: localize('$100,000 - $250,000'),\n        value: '$100,000 - $250,000',\n    },\n    {\n        text: localize('$250,001 - $500,000'),\n        value: '$250,001 - $500,000',\n    },\n    {\n        text: localize('$500,001 - $1,000,000'),\n        value: '$500,001 - $1,000,000',\n    },\n    {\n        text: localize('Over $1,000,000'),\n        value: 'Over $1,000,000',\n    },\n];\n\nexport const getAccountTurnoverList = () => {\n    return [...getNetIncomeList()];\n};\n\nexport const getBinaryOptionsTradingExperienceList = () => [\n    {\n        text: localize('0-1 year'),\n        value: '0-1 year',\n    },\n    {\n        text: localize('1-2 years'),\n        value: '1-2 years',\n    },\n    {\n        text: localize('Over 3 years'),\n        value: 'Over 3 years',\n    },\n];\n\nexport const getBinaryOptionsTradingFrequencyList = () => [\n    {\n        text: localize('0-5 transactions in the past 12 months'),\n        value: '0-5 transactions in the past 12 months',\n    },\n    {\n        text: localize('6-10 transactions in the past 12 months'),\n        value: '6-10 transactions in the past 12 months',\n    },\n    {\n        text: localize('11-39 transactions in the past 12 months'),\n        value: '11-39 transactions in the past 12 months',\n    },\n    {\n        text: localize('40 transactions or more in the past 12 months'),\n        value: '40 transactions or more in the past 12 months',\n    },\n];\n\nexport const getCfdTradingExperienceList = () => {\n    return [...getBinaryOptionsTradingExperienceList()];\n};\n\nexport const getCfdTradingFrequencyList = () => {\n    return [...getBinaryOptionsTradingFrequencyList()];\n};\n\nexport const getForexTradingExperienceList = () => {\n    return [...getBinaryOptionsTradingExperienceList()];\n};\n\nexport const getForexTradingFrequencyList = () => {\n    return [...getBinaryOptionsTradingFrequencyList()];\n};\n\nexport const getOtherInstrumentsTradingExperienceList = () => {\n    return [...getBinaryOptionsTradingExperienceList()];\n};\n\nexport const getOtherInstrumentsTradingFrequencyList = () => {\n    return [...getBinaryOptionsTradingFrequencyList()];\n};\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Field, FieldProps } from 'formik';\n\nimport { Dropdown, SelectNative } from '@deriv/components';\nimport { useTranslations } from '@deriv-com/translations';\nimport { useDevice } from '@deriv-com/ui';\n\nimport { getEmploymentStatusList } from '../../../Constants/financial-information-list';\n\ntype TEmploymentStatusFieldProps = {\n    required: boolean;\n    is_disabled: boolean;\n    fieldFocused?: boolean;\n    version?: string;\n    is_feature_flag_disabled?: boolean;\n};\n\nconst EmploymentStatusField = ({\n    required,\n    is_feature_flag_disabled,\n    is_disabled,\n    fieldFocused,\n    version,\n}: TEmploymentStatusFieldProps) => {\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    return (\n        <Field name='employment_status'>\n            {({ field, form: { setFieldValue, setFieldTouched, handleBlur, handleChange }, meta }: FieldProps) => (\n                <div className='employment-status-field'>\n                    {isDesktop ? (\n                        <Dropdown\n                            {...field}\n                            placeholder={required ? localize('Employment status*') : localize('Employment status')}\n                            is_align_text_left\n                            name={field.name}\n                            list={getEmploymentStatusList(version, is_feature_flag_disabled)}\n                            value={field.value}\n                            onChange={(e: { target: { name: string; value: string } }) => {\n                                setFieldValue('tin_skipped', 0, true);\n                                setFieldValue(field.name, e.target?.value, true);\n                                handleChange(e);\n                            }}\n                            handleBlur={handleBlur}\n                            error={meta.touched ? meta.error : undefined}\n                            disabled={is_disabled}\n                            className={clsx('dropdown-field', { 'focus-field': fieldFocused })}\n                        />\n                    ) : (\n                        <SelectNative\n                            {...field}\n                            placeholder={localize('Please select')}\n                            name={field.name}\n                            label={required ? localize('Employment status*') : localize('Employment status')}\n                            list_items={getEmploymentStatusList(version, is_feature_flag_disabled)}\n                            value={field.value}\n                            error={meta.touched ? meta.error : undefined}\n                            onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                                setFieldValue('tin_skipped', 0, true);\n                                setFieldTouched('employment_status', true);\n                                handleChange(e);\n                            }}\n                            disabled={is_disabled}\n                            className={clsx({ 'focus-field': fieldFocused })}\n                        />\n                    )}\n                </div>\n            )}\n        </Field>\n    );\n};\n\nexport default EmploymentStatusField;\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors in Autocomplete & SelectNative components\n\nimport { ChangeEvent } from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { ResidenceList } from '@deriv/api-types';\nimport { Autocomplete, SelectNative, Popover } from '@deriv/components';\nimport { useResidenceList } from '@deriv/hooks';\nimport { TItem } from '@deriv/components/src/components/dropdown-list';\nimport { useTranslations } from '@deriv-com/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport clsx from 'clsx';\n\ntype TTaxResidenceFieldProps = {\n    required?: boolean;\n    setIsTaxResidencePopoverOpen: (is_open: boolean) => void;\n    setIsTinPopoverOpen: (is_open: boolean) => void;\n    is_tax_residence_popover_open: boolean;\n    disabled: boolean;\n    fieldFocused?: boolean;\n};\n\nconst TaxResidenceField = ({\n    required = false,\n    setIsTaxResidencePopoverOpen,\n    setIsTinPopoverOpen,\n    is_tax_residence_popover_open,\n    disabled,\n    fieldFocused,\n}: TTaxResidenceFieldProps) => {\n    const { data: residence_list } = useResidenceList();\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    return (\n        <Field name='tax_residence'>\n            {({ field, form: { setFieldValue }, meta }: FieldProps) => (\n                <div className='details-form__tax'>\n                    {isDesktop ? (\n                        <Autocomplete\n                            {...field}\n                            data-lpignore='true'\n                            autoComplete='off' // prevent chrome autocomplete\n                            label={required ? localize('Tax residence*') : localize('Tax residence')}\n                            error={meta.touched ? meta.error : undefined}\n                            list_items={residence_list}\n                            onItemSelection={(item: TItem) => {\n                                setFieldValue(\n                                    'tax_residence',\n                                    (item as ResidenceList[0]).value ? (item as ResidenceList[0]).text : '',\n                                    true\n                                );\n                            }}\n                            data-testid='tax_residence'\n                            disabled={disabled}\n                            required={required}\n                            className={clsx({ 'focus-field': fieldFocused })}\n                        />\n                    ) : (\n                        <SelectNative\n                            {...field}\n                            placeholder={required ? localize('Tax residence*') : localize('Tax residence')}\n                            name={field.name}\n                            label={required ? localize('Tax residence*') : localize('Tax residence')}\n                            list_items={residence_list}\n                            value={field.value}\n                            use_text\n                            error={meta.touched ? meta.error : ''}\n                            onChange={(e: ChangeEvent<HTMLSelectElement>) => {\n                                field.onChange(e);\n                                setFieldValue('tax_residence', e.target.value, true);\n                            }}\n                            required={required}\n                            data_testid='tax_residence_mobile'\n                            disabled={disabled}\n                            className={clsx({ 'focus-field': fieldFocused })}\n                        />\n                    )}\n                    <div\n                        data-testid='tax_residence_pop_over'\n                        onClick={e => {\n                            setIsTaxResidencePopoverOpen(true);\n                            setIsTinPopoverOpen(false);\n                            e.stopPropagation();\n                        }}\n                    >\n                        <Popover\n                            alignment={isDesktop ? 'right' : 'left'}\n                            icon='info'\n                            message={localize(\n                                'The country in which you meet the criteria for paying taxes. Usually the country in which you physically reside.'\n                            )}\n                            zIndex='9998'\n                            disable_message_icon\n                            is_open={is_tax_residence_popover_open}\n                        />\n                    </div>\n                </div>\n            )}\n        </Field>\n    );\n};\n\nexport default TaxResidenceField;\n","import clsx from 'clsx';\n\nimport { Popover } from '@deriv/components';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { useDevice } from '@deriv-com/ui';\n\nimport { OECD_TIN_FORMAT_URL } from '../../../Constants/external-urls';\n\nimport FormInputField from './form-input-field';\n\ntype TTaxIdentificationNumberFieldProps = {\n    required?: boolean;\n    disabled: boolean;\n    is_tin_popover_open: boolean;\n    setIsTinPopoverOpen: (is_open: boolean) => void;\n    setIsTaxResidencePopoverOpen: (is_open: boolean) => void;\n    fieldFocused?: boolean;\n};\n\nconst TaxIdentificationNumberField = ({\n    required = false,\n    is_tin_popover_open,\n    setIsTinPopoverOpen,\n    setIsTaxResidencePopoverOpen,\n    disabled,\n    fieldFocused,\n}: TTaxIdentificationNumberFieldProps) => {\n    const { localize } = useTranslations();\n\n    const { isDesktop } = useDevice();\n\n    return (\n        <div className='details-form__tax'>\n            <FormInputField\n                name='tax_identification_number'\n                label={required ? localize('Tax identification number*') : localize('Tax identification number')}\n                placeholder={localize('Tax identification number')}\n                data-testid='tax_identification_number'\n                disabled={disabled}\n                required={required}\n                className={clsx({ 'focus-field': fieldFocused })}\n            />\n            <div\n                data-testid='tax_identification_number_pop_over'\n                onClick={e => {\n                    setIsTaxResidencePopoverOpen(false);\n                    setIsTinPopoverOpen(true);\n                    if ((e.target as HTMLElement).tagName !== 'A') e.stopPropagation();\n                }}\n            >\n                <Popover\n                    alignment={isDesktop ? 'right' : 'left'}\n                    icon='info'\n                    is_open={is_tin_popover_open}\n                    message={\n                        <Localize\n                            i18n_default_text={\n                                \"Don't know your tax identification number? Click <0>here</0> to learn more.\"\n                            }\n                            components={[\n                                <a\n                                    key={0}\n                                    className='link link--red'\n                                    rel='noopener noreferrer'\n                                    target='_blank'\n                                    href={OECD_TIN_FORMAT_URL}\n                                />,\n                            ]}\n                        />\n                    }\n                    zIndex='9998'\n                    disable_message_icon\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default TaxIdentificationNumberField;\n","export const OECD_TIN_FORMAT_URL =\n    'https://web-archive.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/index.htm';\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { Field, FormikProps, FieldProps, useFormikContext } from 'formik';\nimport { ResidenceList } from '@deriv/api-types';\nimport { Autocomplete, Input, SelectNative } from '@deriv/components';\nimport { formatInput, getIDVNotApplicableOption } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport {\n    getDocumentData,\n    preventEmptyClipboardPaste,\n    generatePlaceholderText,\n    getExampleFormat,\n} from '../../Helpers/utils';\nimport { TDocument, TIDVFormValues } from '../../Types';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TIDVFormProps = {\n    selected_country: ResidenceList[0];\n    hide_hint?: boolean;\n    class_name?: string;\n    is_for_real_account_signup_modal?: boolean;\n    is_for_mt5?: boolean;\n};\n\nconst IDVForm = ({\n    class_name,\n    selected_country,\n    hide_hint,\n    is_for_real_account_signup_modal = false,\n    is_for_mt5 = false,\n}: TIDVFormProps) => {\n    const [document_list, setDocumentList] = React.useState<Array<TDocument>>([]);\n    const [selected_doc, setSelectedDoc] = React.useState('');\n    const { isDesktop } = useDevice();\n\n    const { documents_supported: document_data } = selected_country?.identity?.services?.idv ?? {};\n\n    const { errors, touched, values, handleBlur, handleChange, setFieldValue }: FormikProps<TIDVFormValues> =\n        useFormikContext();\n    const default_document = {\n        id: '',\n        text: '',\n        value: '',\n        example_format: '',\n    };\n\n    const IDV_NOT_APPLICABLE_OPTION = React.useMemo(\n        () => getIDVNotApplicableOption(is_for_real_account_signup_modal),\n        [is_for_real_account_signup_modal]\n    );\n\n    React.useEffect(() => {\n        if (document_data && selected_country && selected_country.value) {\n            const document_types = Object.keys(document_data);\n            if (document_types.length === 0) return;\n\n            const new_document_list = document_types.map(key => {\n                const { display_name, format } = document_data[key];\n                const { new_display_name, example_format, additional_document_example_format } = getDocumentData(\n                    selected_country.value ?? '',\n                    key\n                );\n                const needs_additional_document = !!document_data[key].additional;\n\n                if (needs_additional_document) {\n                    return {\n                        id: key,\n                        text: display_name ?? new_display_name, // Display document name from API if available, else use the one from the helper function\n                        additional: {\n                            display_name: document_data[key].additional?.display_name,\n                            format: document_data[key].additional?.format,\n                            example_format: additional_document_example_format,\n                        },\n                        value: format,\n                        example_format,\n                    };\n                }\n                return {\n                    id: key,\n                    text: display_name ?? new_display_name, // Display document name from API if available, else use the one from the helper function\n                    value: format,\n                    example_format,\n                };\n            });\n\n            setDocumentList([...new_document_list, IDV_NOT_APPLICABLE_OPTION]);\n        }\n    }, [document_data, selected_country, IDV_NOT_APPLICABLE_OPTION, is_for_mt5]);\n\n    const resetDocumentItemSelected = () => {\n        setFieldValue('document_type', default_document, true);\n    };\n\n    const getDocument = (text: string) => {\n        return document_list.find(d => d.text === text) ?? default_document;\n    };\n\n    const onKeyUp = (e: { target: HTMLInputElement }, document_name: string) => {\n        const example_format =\n            document_name === 'document_number'\n                ? values?.document_type?.example_format\n                : values?.document_type?.additional?.example_format;\n        let current_input: string | null = null;\n        current_input = example_format?.includes('-')\n            ? formatInput(example_format, current_input ?? e.target.value, '-')\n            : e.target.value;\n        setFieldValue(document_name, current_input, true);\n    };\n\n    const bindDocumentData = (item: TDocument) => {\n        setFieldValue('document_type', item, true);\n        setSelectedDoc(item?.id);\n        if (item?.id === IDV_NOT_APPLICABLE_OPTION.id) {\n            setFieldValue('document_number', '', false);\n            setFieldValue('document_additional', '', false);\n        }\n    };\n    return (\n        <section className={clsx('idv-form', class_name)}>\n            <div className='details-form'>\n                <div className='poi-form-on-signup__fields'>\n                    <div\n                        className={clsx('proof-of-identity__container', {\n                            'proof-of-identity__container--idv': hide_hint,\n                        })}\n                    >\n                        <div className={clsx('proof-of-identity__inner-container')}>\n                            <div className='proof-of-identity__fieldset-container'>\n                                <fieldset className={clsx({ 'proof-of-identity__fieldset': !hide_hint })}>\n                                    <Field name='document_type'>\n                                        {({ field }: FieldProps) => (\n                                            <React.Fragment>\n                                                {isDesktop ? (\n                                                    <Autocomplete\n                                                        {...field}\n                                                        data-lpignore='true'\n                                                        error={touched.document_type && errors.document_type}\n                                                        autoComplete='off'\n                                                        type='text'\n                                                        label={localize('Choose the document type')}\n                                                        list_items={document_list}\n                                                        value={values.document_type.text}\n                                                        onBlur={(e: { target: HTMLInputElement }) => {\n                                                            handleBlur(e);\n                                                            if (!getDocument(e.target.value)) {\n                                                                resetDocumentItemSelected();\n                                                            }\n                                                        }}\n                                                        onChange={handleChange}\n                                                        onItemSelection={(item: TDocument) => {\n                                                            if (item.text === 'No results found' || !item.text) {\n                                                                setSelectedDoc('');\n                                                                resetDocumentItemSelected();\n                                                            } else {\n                                                                bindDocumentData(item);\n                                                            }\n                                                        }}\n                                                        required\n                                                    />\n                                                ) : (\n                                                    <SelectNative\n                                                        {...field}\n                                                        name='document_type'\n                                                        error={\n                                                            touched.document_type &&\n                                                            (errors.document_type as string | undefined)\n                                                        }\n                                                        label={localize('Choose the document type')}\n                                                        placeholder={localize('Please select')}\n                                                        list_items={document_list}\n                                                        value={values.document_type.text}\n                                                        onChange={e => {\n                                                            handleChange(e);\n                                                            const selected_document = getDocument(e.target.value);\n                                                            bindDocumentData(selected_document);\n                                                        }}\n                                                        use_text={true}\n                                                        required\n                                                    />\n                                                )}\n                                            </React.Fragment>\n                                        )}\n                                    </Field>\n                                </fieldset>\n                                {values?.document_type?.id !== IDV_NOT_APPLICABLE_OPTION.id && (\n                                    <React.Fragment>\n                                        <fieldset\n                                            className={clsx('additional-field', {\n                                                'proof-of-identity__fieldset-input': !hide_hint,\n                                            })}\n                                        >\n                                            <Field name='document_number'>\n                                                {({ field }: FieldProps) => (\n                                                    <Input\n                                                        {...field}\n                                                        name='document_number'\n                                                        bottom_label={\n                                                            values.document_type &&\n                                                            getExampleFormat(values.document_type.example_format ?? '')\n                                                        }\n                                                        disabled={!values.document_type.id}\n                                                        error={\n                                                            (values.document_type.id &&\n                                                                touched.document_number &&\n                                                                errors.document_number) ||\n                                                            errors.error_message\n                                                        }\n                                                        autoComplete='off'\n                                                        placeholder={generatePlaceholderText(selected_doc)}\n                                                        value={values.document_number}\n                                                        onPaste={preventEmptyClipboardPaste}\n                                                        onBlur={handleBlur}\n                                                        onChange={handleChange}\n                                                        onKeyUp={(e: { target: HTMLInputElement }) =>\n                                                            onKeyUp(e, 'document_number')\n                                                        }\n                                                        required\n                                                        label={\n                                                            values.document_type.id &&\n                                                            generatePlaceholderText(selected_doc)\n                                                        }\n                                                    />\n                                                )}\n                                            </Field>\n                                        </fieldset>\n                                        {values.document_type.additional?.display_name && (\n                                            <fieldset className='additional-field'>\n                                                <Field name='document_additional'>\n                                                    {({ field }: FieldProps) => {\n                                                        const additional_document_placeholder = localize(\n                                                            'Enter your {{document_name}}',\n                                                            {\n                                                                document_name:\n                                                                    values.document_type?.additional?.display_name?.toLowerCase() ??\n                                                                    localize('additional document number'),\n                                                            }\n                                                        );\n                                                        return (\n                                                            <Input\n                                                                {...field}\n                                                                name='document_additional'\n                                                                bottom_label={\n                                                                    values.document_type.additional &&\n                                                                    getExampleFormat(\n                                                                        values.document_type.additional?.example_format\n                                                                    )\n                                                                }\n                                                                disabled={!values.document_type.id}\n                                                                error={\n                                                                    (touched.document_additional &&\n                                                                        errors.document_additional) ||\n                                                                    errors.error_message\n                                                                }\n                                                                autoComplete='off'\n                                                                placeholder={additional_document_placeholder}\n                                                                value={values.document_additional}\n                                                                onPaste={preventEmptyClipboardPaste}\n                                                                onBlur={handleBlur}\n                                                                onChange={handleChange}\n                                                                onKeyUp={(e: { target: HTMLInputElement }) =>\n                                                                    onKeyUp(e, 'document_additional')\n                                                                }\n                                                                required\n                                                            />\n                                                        );\n                                                    }}\n                                                </Field>\n                                            </fieldset>\n                                        )}\n                                    </React.Fragment>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default IDVForm;\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors in Autocomplete & SelectNative components\nimport React from 'react';\nimport { useDevice } from '@deriv-com/ui';\nimport { SelectNative, Dropdown } from '@deriv/components';\nimport { useTranslations } from '@deriv-com/translations';\nimport { Field, FieldProps } from 'formik';\nimport clsx from 'clsx';\n\ntype TAccountOpeningReasonFieldProps = {\n    required: boolean;\n    account_opening_reason_list: { text: string; value: string }[];\n    setFieldValue: (field: string, value: string, should_validate?: boolean) => void;\n    disabled: boolean;\n    fieldFocused?: boolean;\n    is_modal?: boolean;\n};\n\nconst AccountOpeningReasonField = ({\n    required,\n    account_opening_reason_list,\n    setFieldValue,\n    disabled,\n    fieldFocused,\n    is_modal,\n}: TAccountOpeningReasonFieldProps) => {\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    return (\n        <React.Fragment>\n            <Field name='account_opening_reason'>\n                {({ field, meta }: FieldProps) => (\n                    <div className='account-form__fieldset' id='account-opening-reason'>\n                        {isDesktop ? (\n                            <Dropdown\n                                placeholder={\n                                    required ? localize('Account opening reason*') : localize('Account opening reason')\n                                }\n                                {...field}\n                                disabled={disabled}\n                                is_align_text_left\n                                list={account_opening_reason_list}\n                                error={meta.touched && meta.error ? meta.error : ''}\n                                required\n                                className={clsx({ 'focus-field': fieldFocused })}\n                                list_portal_id={is_modal ? 'modal_root' : ''}\n                            />\n                        ) : (\n                            <SelectNative\n                                placeholder={localize('Please select')}\n                                {...field}\n                                label={\n                                    required ? localize('Account opening reason*') : localize('Account opening reason')\n                                }\n                                list_items={account_opening_reason_list}\n                                error={meta.touched && meta.error ? meta.error : ''}\n                                onChange={e => {\n                                    field.onChange(e);\n                                    setFieldValue('account_opening_reason', e.target.value, true);\n                                }}\n                                required\n                                data_testid='account_opening_reason_mobile'\n                                disabled={disabled}\n                                className={clsx({ 'focus-field': fieldFocused })}\n                            />\n                        )}\n                    </div>\n                )}\n            </Field>\n        </React.Fragment>\n    );\n};\n\nexport default AccountOpeningReasonField;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport clsx from 'clsx';\nimport { Field, useFormikContext } from 'formik';\n\nimport { Autocomplete, Checkbox, InlineMessage, RadioGroup, SelectNative, Text } from '@deriv/components';\nimport { useGetPhoneNumberList, useGrowthbookGetFeatureValue, useResidenceList } from '@deriv/hooks';\nimport { routes, validPhone } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\n\nimport { isFieldImmutable, verifyFields } from '../../Helpers/utils';\nimport FormBodySection from '../form-body-section';\nimport FormSubHeader from '../form-sub-header';\nimport InlineNoteWithIcon from '../inline-note-with-icon';\n\nimport AccountOpeningReasonField from './form-fields/account-opening-reason';\nimport { DateOfBirthField, FormInputField } from './form-fields';\n\nconst PersonalDetailsForm = props => {\n    const { isDesktop } = useDevice();\n    const {\n        inline_note_text,\n        is_virtual,\n        is_eu_user,\n        is_svg,\n        is_rendered_for_idv,\n        editable_fields = [],\n        has_real_account,\n        is_fully_authenticated,\n        account_opening_reason_list,\n        closeRealAccountSignup,\n        salutation_list,\n        is_rendered_for_onfido,\n        is_qualified_for_poa,\n        class_name,\n        states_list,\n        side_note,\n        no_confirmation_needed,\n        mismatch_status,\n    } = props;\n    const autocomplete_value = 'none';\n    // need to put this check related to DIEL clients\n    const is_svg_only = is_svg && !is_eu_user;\n\n    const [isCountryCodeDropdownEnabled, isCountryCodeLoaded] = useGrowthbookGetFeatureValue({\n        featureFlag: 'enable_country_code_dropdown',\n    });\n\n    const { errors, touched, values, setFieldValue, handleChange, handleBlur } = useFormikContext();\n\n    const { data: residence_list } = useResidenceList();\n\n    const { legacy_core_countries_list } = useGetPhoneNumberList();\n\n    const getNameAndDobLabels = () => {\n        const is_asterisk_needed = is_svg || is_eu_user || is_rendered_for_onfido || is_rendered_for_idv;\n        const first_name_label = is_asterisk_needed ? localize('First name*') : localize('First name');\n        const last_name_label = is_asterisk_needed ? localize('Last name*') : localize('Last name');\n        const dob_label = is_asterisk_needed ? localize('Date of birth*') : localize('Date of birth');\n\n        return {\n            first_name_label,\n            last_name_label,\n            dob_label,\n        };\n    };\n\n    const is_rendered_for_idv_or_onfido = is_rendered_for_idv || is_rendered_for_onfido;\n\n    const getFieldHint = field_name =>\n        is_svg_only || is_rendered_for_idv_or_onfido ? (\n            <Localize\n                i18n_default_text={'Your {{ field_name }} as in your identity document'}\n                values={{ field_name }}\n            />\n        ) : (\n            <Localize\n                i18n_default_text={'Please enter your {{ field_name }} as in your official identity documents.'}\n                values={{ field_name }}\n            />\n        );\n\n    const handleSalutationSelection = event => {\n        if (event.target?.type === 'radio') {\n            setFieldValue('salutation', event.target?.value);\n        }\n    };\n\n    const poa_clarification_message = (\n        <Localize i18n_default_text='Use the same address that appears on your proof of address (utility bill, bank statement, etc.).' />\n    );\n\n    // need to disable the checkbox if the user has not filled in the name and dob fields initially\n    const is_confirmation_checkbox_disabled = verifyFields(mismatch_status).some(\n        field => !values[field] || errors[field]\n    );\n\n    return (\n        <React.Fragment>\n            <div\n                className={clsx(class_name, {\n                    'account-form__poi-confirm-example': is_rendered_for_idv,\n                })}\n            >\n                {(is_svg_only || is_rendered_for_idv_or_onfido) && (\n                    <div className='account-form__poi-inline-message'>\n                        <InlineMessage message={inline_note_text} size='md' />\n                    </div>\n                )}\n                {is_qualified_for_poa && (\n                    <InlineNoteWithIcon\n                        icon='IcAlertWarning'\n                        message={poa_clarification_message}\n                        font_size={isDesktop ? 'xs' : 'xxxs'}\n                    />\n                )}\n                <FormBodySection\n                    has_side_note={is_rendered_for_idv_or_onfido || is_svg_only}\n                    side_note={side_note}\n                    side_note_position='right'\n                    type='image'\n                >\n                    <fieldset className='account-form__fieldset'>\n                        {'salutation' in values && !is_eu_user && (\n                            <div>\n                                <Text size={isDesktop ? 'xxs' : 'xs'} align={!isDesktop && 'center'}>\n                                    {is_virtual ? (\n                                        localize(\n                                            'Please remember that it is your responsibility to keep your answers accurate and up to date. You can update your personal details at any time in your account settings.'\n                                        )\n                                    ) : (\n                                        <Localize\n                                            i18n_default_text='Please remember that it is your responsibility to keep your answers accurate and up to date. You can update your personal details at any time in your <0>account settings</0>.'\n                                            components={[\n                                                <Link\n                                                    to={routes.personal_details}\n                                                    key={0}\n                                                    className='link'\n                                                    onClick={closeRealAccountSignup}\n                                                />,\n                                            ]}\n                                        />\n                                    )}\n                                </Text>\n                            </div>\n                        )}\n                        {is_eu_user && !is_rendered_for_onfido && !is_qualified_for_poa && (\n                            <FormSubHeader\n                                title={'salutation' in values ? localize('Title and name') : localize('Name')}\n                            />\n                        )}\n                        {'salutation' in values && (\n                            <span onClick={handleSalutationSelection}>\n                                <RadioGroup\n                                    className='dc-radio__input'\n                                    name='salutation'\n                                    selected={values.salutation}\n                                    onToggle={e => {\n                                        e.persist();\n                                        setFieldValue('salutation', e.target.value);\n                                    }}\n                                    required\n                                >\n                                    {salutation_list.map(item => (\n                                        <RadioGroup.Item\n                                            key={item.value}\n                                            label={item.label}\n                                            value={item.value}\n                                            disabled={\n                                                !!values.salutation && isFieldImmutable('salutation', editable_fields)\n                                            }\n                                            has_error={!!(touched.salutation && errors.salutation)}\n                                        />\n                                    ))}\n                                </RadioGroup>\n                            </span>\n                        )}\n                        {'first_name' in values && (\n                            <FormInputField\n                                name='first_name'\n                                required={is_svg}\n                                label={getNameAndDobLabels().first_name_label}\n                                hint={getFieldHint(localize('first name'))}\n                                disabled={\n                                    isFieldImmutable('first_name', editable_fields) ||\n                                    (values?.first_name && has_real_account)\n                                }\n                                placeholder={localize('John')}\n                                data-testid='first_name'\n                            />\n                        )}\n                        {'last_name' in values && (\n                            <FormInputField\n                                name='last_name'\n                                required={is_svg}\n                                label={getNameAndDobLabels().last_name_label}\n                                hint={getFieldHint(localize('last name'))}\n                                disabled={\n                                    isFieldImmutable('last_name', editable_fields) ||\n                                    (values?.last_name && has_real_account)\n                                }\n                                placeholder={localize('Doe')}\n                                data-testid='last_name'\n                            />\n                        )}\n                        {is_eu_user && !is_qualified_for_poa && <FormSubHeader title={localize('Other details')} />}\n                        {'date_of_birth' in values && (\n                            <DateOfBirthField\n                                name='date_of_birth'\n                                required={is_svg}\n                                label={getNameAndDobLabels().dob_label}\n                                hint={getFieldHint(localize('date of birth'))}\n                                disabled={\n                                    isFieldImmutable('date_of_birth', editable_fields) ||\n                                    (values?.date_of_birth && has_real_account)\n                                }\n                                placeholder={localize('01-07-1999')}\n                                portal_id='modal_root'\n                                data_testid='date_of_birth'\n                            />\n                        )}\n                        {'address_line_1' in values && (\n                            <FormInputField\n                                name='address_line_1'\n                                label={localize('First line of address*')}\n                                disabled={isFieldImmutable('address_line_1', editable_fields)}\n                                data-testid='address_line_1'\n                                autoComplete='off'\n                                data-lpignore='true'\n                                type='text'\n                                maxLength={70}\n                                required\n                                onBlur={handleBlur}\n                                error={touched.address_line_1 && errors.address_line_1}\n                                value={values.address_line_1}\n                            />\n                        )}\n                        {'address_line_2' in values && (\n                            <FormInputField\n                                name='address_line_2'\n                                label={localize('Second line of address (optional)')}\n                                disabled={isFieldImmutable('address_line_2', editable_fields)}\n                                data-testid='address_line_2'\n                                autoComplete='off'\n                                data-lpignore='true'\n                                type='text'\n                                maxLength={70}\n                                onBlur={handleBlur}\n                                error={touched.address_line_2 && errors.address_line_2}\n                                value={values.address_line_2}\n                            />\n                        )}\n                        {'address_city' in values && (\n                            <FormInputField\n                                name='address_city'\n                                label={localize('Town/City*')}\n                                disabled={isFieldImmutable('address_city', editable_fields)}\n                                data-testid='address_city'\n                                autoComplete='off'\n                                data-lpignore='true'\n                                type='text'\n                                maxLength={70}\n                                required\n                                onBlur={handleBlur}\n                                error={touched.address_city && errors.address_city}\n                                value={values.address_city}\n                            />\n                        )}\n                        {'address_state' in values &&\n                            (states_list?.length ? (\n                                <React.Fragment>\n                                    {isDesktop ? (\n                                        <Field name='address_state'>\n                                            {({ field }) => (\n                                                <Autocomplete\n                                                    {...field}\n                                                    data-lpignore='true'\n                                                    autoComplete='new-password' // prevent chrome autocomplete\n                                                    type='text'\n                                                    label={localize('State/Province')}\n                                                    error={touched.address_state && errors.address_state}\n                                                    list_items={states_list}\n                                                    onItemSelection={({ value, text }) =>\n                                                        setFieldValue('address_state', value ? text : '', true)\n                                                    }\n                                                />\n                                            )}\n                                        </Field>\n                                    ) : (\n                                        <SelectNative\n                                            placeholder={localize('Please select')}\n                                            label={localize('State/Province')}\n                                            value={values.address_state}\n                                            list_items={states_list}\n                                            error={touched.address_state && errors.address_state}\n                                            use_text\n                                            onChange={e => setFieldValue('address_state', e.target.value, true)}\n                                        />\n                                    )}\n                                </React.Fragment>\n                            ) : (\n                                <FormInputField\n                                    data-lpignore='true'\n                                    autoComplete='off'\n                                    type='text'\n                                    name='address_state'\n                                    label={localize('State/Province')}\n                                    value={values.address_state}\n                                    error={touched.address_state && errors.address_state}\n                                    onBlur={handleBlur}\n                                />\n                            ))}\n                        {'address_postcode' in values && (\n                            <FormInputField\n                                name='address_postcode'\n                                label={localize('Postal/ZIP code')}\n                                disabled={isFieldImmutable('address_postcode', editable_fields)}\n                                data-testid='address_postcode'\n                                autoComplete='off'\n                                data-lpignore='true'\n                                type='text'\n                                maxLength={70}\n                                onBlur={handleBlur}\n                                error={touched.address_postcode && errors.address_postcode}\n                                value={values.address_postcode}\n                            />\n                        )}\n                        {!is_svg_only && 'place_of_birth' in values && (\n                            <PlaceOfBirthField\n                                handleChange={handleChange}\n                                setFieldValue={setFieldValue}\n                                disabled={isFieldImmutable('place_of_birth', editable_fields)}\n                                residence_list={residence_list}\n                                required\n                            />\n                        )}\n                        {'citizen' in values && (\n                            <Field name='citizen'>\n                                {({ field }) => (\n                                    <React.Fragment>\n                                        {isDesktop ? (\n                                            <Autocomplete\n                                                {...field}\n                                                data-lpignore='true'\n                                                autoComplete={autocomplete_value} // prevent chrome autocomplete\n                                                type='text'\n                                                label={is_eu_user ? localize('Citizenship*') : localize('Citizenship')}\n                                                error={touched.citizen && errors.citizen}\n                                                disabled={\n                                                    (values?.citizen && is_fully_authenticated) ||\n                                                    isFieldImmutable('citizen', editable_fields) ||\n                                                    (values?.citizen && has_real_account)\n                                                }\n                                                list_items={residence_list}\n                                                onItemSelection={({ value, text }) =>\n                                                    setFieldValue('citizen', value ? text : '', true)\n                                                }\n                                                list_portal_id='modal_root'\n                                                required\n                                                data-testid='citizenship'\n                                            />\n                                        ) : (\n                                            <SelectNative\n                                                placeholder={localize('Citizenship')}\n                                                name={field.name}\n                                                disabled={\n                                                    (values?.citizen && is_fully_authenticated) ||\n                                                    isFieldImmutable('citizen', editable_fields) ||\n                                                    (values?.citizen && has_real_account)\n                                                }\n                                                label={is_eu_user ? localize('Citizenship*') : localize('Citizenship')}\n                                                list_items={residence_list}\n                                                value={values.citizen}\n                                                use_text\n                                                error={touched.citizen && errors.citizen}\n                                                onChange={e => {\n                                                    handleChange(e);\n                                                    setFieldValue('citizen', e.target.value, true);\n                                                }}\n                                                {...field}\n                                                required\n                                                should_hide_disabled_options={false}\n                                                data_testid='citizenship_mobile'\n                                            />\n                                        )}\n                                    </React.Fragment>\n                                )}\n                            </Field>\n                        )}\n                        {!is_svg_only && 'phone' in values && (\n                            <PhoneField\n                                is_country_code_dropdown_enabled={isCountryCodeLoaded && isCountryCodeDropdownEnabled}\n                                handleChange={handleChange}\n                                setFieldValue={setFieldValue}\n                                country_code_list={legacy_core_countries_list}\n                                value={values.phone}\n                                editable_fields={editable_fields}\n                                has_real_account={has_real_account}\n                                required\n                            />\n                        )}\n                        {!is_svg_only && 'account_opening_reason' in values && (\n                            <AccountOpeningReasonField\n                                required\n                                account_opening_reason_list={account_opening_reason_list}\n                                setFieldValue={setFieldValue}\n                                disabled={\n                                    isFieldImmutable('account_opening_reason', editable_fields) ||\n                                    (values?.account_opening_reason && has_real_account)\n                                }\n                            />\n                        )}\n                    </fieldset>\n                </FormBodySection>\n                {!no_confirmation_needed && is_rendered_for_idv && (\n                    <Checkbox\n                        name='confirmation_checkbox'\n                        className='formik__confirmation-checkbox'\n                        value={values.confirmation_checkbox}\n                        label={\n                            <Localize i18n_default_text='I confirm that the name and date of birth above match my chosen identity document' />\n                        }\n                        label_font_size={isDesktop ? 'xs' : 'xxs'}\n                        disabled={is_confirmation_checkbox_disabled}\n                        onChange={handleChange}\n                        has_error={!!(touched.confirmation_checkbox && errors.confirmation_checkbox)}\n                    />\n                )}\n            </div>\n\n            {is_svg_only && (\n                <div className='account-form__poi-additional-information'>\n                    <FormSubHeader title={localize('Additional information')} />\n                    {'phone' in values && (\n                        <PhoneField\n                            is_country_code_dropdown_enabled={isCountryCodeLoaded && isCountryCodeDropdownEnabled}\n                            handleChange={handleChange}\n                            setFieldValue={setFieldValue}\n                            country_code_list={legacy_core_countries_list}\n                            value={values.phone}\n                            editable_fields={editable_fields}\n                            has_real_account={has_real_account}\n                            required\n                        />\n                    )}\n                    <React.Fragment>\n                        {'place_of_birth' in values && (\n                            <PlaceOfBirthField\n                                handleChange={handleChange}\n                                setFieldValue={setFieldValue}\n                                disabled={isFieldImmutable('place_of_birth', editable_fields)}\n                                residence_list={residence_list}\n                                required\n                            />\n                        )}\n                        {'account_opening_reason' in values && (\n                            <AccountOpeningReasonField\n                                account_opening_reason_list={account_opening_reason_list}\n                                setFieldValue={setFieldValue}\n                                disabled={\n                                    isFieldImmutable('account_opening_reason', editable_fields) ||\n                                    (values?.account_opening_reason && has_real_account)\n                                }\n                                required\n                                is_modal\n                            />\n                        )}\n                    </React.Fragment>\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default PersonalDetailsForm;\n\nconst PhoneField = ({\n    handleChange,\n    setFieldValue,\n    country_code_list,\n    value,\n    editable_fields,\n    has_real_account,\n    required,\n    is_country_code_dropdown_enabled,\n}) => (\n    <React.Fragment>\n        <div className='account-form__phone-container'>\n            {is_country_code_dropdown_enabled && (\n                <CountryCodeDropdown\n                    handleChange={handleChange}\n                    setFieldValue={setFieldValue}\n                    disabled={\n                        isFieldImmutable('phone', editable_fields) ||\n                        (value && has_real_account && validPhone(value) && value?.length >= 9 && value?.length <= 35)\n                    }\n                    country_code_list={country_code_list}\n                    required\n                />\n            )}\n            <FormInputField\n                className='account-form__phone-container--input'\n                name='phone'\n                label={required ? localize('Phone number*') : localize('Phone number')}\n                placeholder={required ? localize('Phone number*') : localize('Phone number')}\n                disabled={\n                    isFieldImmutable('phone', editable_fields) ||\n                    (value && has_real_account && validPhone(value) && value?.length >= 9 && value?.length <= 35)\n                }\n                {...(is_country_code_dropdown_enabled && {\n                    onChange: e => {\n                        const phone_number = e.target.value.replace(/\\D/g, '');\n                        setFieldValue('phone', phone_number, true);\n                    },\n                })}\n                maxLength={50}\n                data-testid='phone'\n            />\n        </div>\n    </React.Fragment>\n);\n\nconst CountryCodeDropdown = ({ handleChange, setFieldValue, disabled, country_code_list, required }) => {\n    const { isDesktop } = useDevice();\n    return (\n        <Field name='calling_country_code'>\n            {({ field, meta }) => (\n                <React.Fragment>\n                    {isDesktop ? (\n                        <Autocomplete\n                            {...field}\n                            disabled={disabled}\n                            data-lpignore='true'\n                            autoComplete='new-password' // prevent chrome autocomplete\n                            label={required ? localize('Code*') : localize('Code')}\n                            error={meta.touched && meta.error}\n                            list_items={country_code_list}\n                            onItemSelection={country_list => {\n                                setFieldValue('calling_country_code', country_list.value, true);\n                            }}\n                            required\n                            data-testid='calling_country_code'\n                        />\n                    ) : (\n                        <SelectNative\n                            placeholder={required ? localize('Code*') : localize('Code')}\n                            name={field.name}\n                            disabled={disabled}\n                            label={required ? localize('Code*') : localize('Code')}\n                            list_items={country_code_list}\n                            value={field.value}\n                            use_text\n                            error={meta.touched && meta.error}\n                            onChange={e => {\n                                handleChange(e);\n                                setFieldValue('calling_country_code', e.target.value, true);\n                            }}\n                            {...field}\n                            list_portal_id='modal_root'\n                            required\n                            is_country_code_dropdown\n                            should_hide_disabled_options={false}\n                            data_testid='calling_country_code_mobile'\n                        />\n                    )}\n                </React.Fragment>\n            )}\n        </Field>\n    );\n};\n\nconst PlaceOfBirthField = ({ handleChange, setFieldValue, disabled, residence_list, required }) => {\n    const { isDesktop } = useDevice();\n    return (\n        <Field name='place_of_birth'>\n            {({ field, meta }) => (\n                <React.Fragment>\n                    {isDesktop ? (\n                        <Autocomplete\n                            {...field}\n                            disabled={disabled}\n                            data-lpignore='true'\n                            autoComplete='none' // prevent chrome autocomplete\n                            type='text'\n                            label={required ? localize('Place of birth*') : localize('Place of birth')}\n                            error={meta.touched && meta.error}\n                            list_items={residence_list}\n                            onItemSelection={({ value, text }) =>\n                                setFieldValue('place_of_birth', value ? text : '', true)\n                            }\n                            required\n                            data-testid='place_of_birth'\n                        />\n                    ) : (\n                        <SelectNative\n                            placeholder={required ? localize('Place of birth') : localize('Place of birth')}\n                            name={field.name}\n                            disabled={disabled}\n                            label={required ? localize('Place of birth*') : localize('Place of birth')}\n                            list_items={residence_list}\n                            value={field.value}\n                            use_text\n                            error={meta.touched && meta.error}\n                            onChange={e => {\n                                handleChange(e);\n                                setFieldValue('place_of_birth', e.target.value, true);\n                            }}\n                            {...field}\n                            list_portal_id='modal_root'\n                            required\n                            should_hide_disabled_options={false}\n                            data_testid='place_of_birth_mobile'\n                        />\n                    )}\n                </React.Fragment>\n            )}\n        </Field>\n    );\n};\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\n\ntype TInlineNoteWithIconExtend = {\n    icon?: string;\n    font_size?: string;\n    message: React.ReactNode;\n    title: React.ReactNode;\n};\n\nconst InlineNoteWithIcon = ({ icon, message, font_size = 'xxxs', title }: TInlineNoteWithIconExtend) => {\n    return (\n        <div className='da-inline-note-with-icon'>\n            {icon && (\n                <div>\n                    <Icon icon={icon} size={16} />\n                </div>\n            )}\n            <Text as='p' size={font_size} line_height='s'>\n                {title && <strong> {title} </strong>}\n                {message}\n            </Text>\n        </div>\n    );\n};\n\nexport default InlineNoteWithIcon;\n","import InlineNoteWithIcon from './inline-note-with-icon';\nimport './inline-note-with-icon.scss';\n\nexport default InlineNoteWithIcon;\n","import { localize } from '@deriv/translations';\n\n//TODO: Check if these phrases are required;\nexport const getOnfidoPhrases = () => ({\n    country_select: {\n        alert_dropdown: {\n            country_not_found: localize('Country not found'),\n        },\n        alert: {\n            another_doc: localize(\n                'Documents from that country are not currently supported — <fallback>try another document type</fallback>'\n            ),\n        },\n        button_primary: localize('Submit document'),\n        search: {\n            accessibility: localize('Select country'),\n            input_placeholder: localize('e.g. United States'),\n            label: localize('Search for country'),\n        },\n        title: localize('Select issuing country'),\n    },\n    cross_device_checklist: {\n        button_primary: localize('Submit verification'),\n        info: localize('Tips'),\n        list_item_doc_multiple: localize('Documents uploaded'),\n        list_item_doc_one: localize('Document uploaded'),\n        list_item_selfie: localize('Selfie uploaded'),\n        subtitle: localize(\"We're now ready to verify your identity\"),\n        title: localize(\"Great, that's everything we need\"),\n    },\n    cross_device_error_desktop: {\n        subtitle: localize('The link only works on mobile devices'),\n        title: localize(\"Something's gone wrong\"),\n    },\n    cross_device_error_restart: {\n        subtitle: localize(\"You'll need to restart your verification on your computer\"),\n        title: localize(\"Something's gone wrong\"),\n    },\n    cross_device_intro: {\n        button_primary: localize('Get secure link'),\n        list_accessibility: localize('Steps required to continue verification on your mobile'),\n        list_item_finish: localize('Check back here to finish the submission'),\n        list_item_open_link: localize('Open the link and complete the tasks'),\n        list_item_send_phone: localize('Send a secure link to your phone'),\n        subtitle: localize(\"Here's how to do it:\"),\n        title: localize('Continue on your phone'),\n    },\n    cross_device_return: {\n        body: localize('Your computer may take a few seconds to update'),\n        subtitle: localize('You can now return to your computer to continue'),\n        title: localize('Uploads successful'),\n    },\n    doc_confirmation: {\n        alert: {\n            blur_detail: localize('Make sure everything is clear'),\n            blur_title: localize('Blurry photo detected'),\n            crop_detail: localize('Make sure full document is visible'),\n            crop_title: localize('Cut-off image detected'),\n            glare_detail: localize('Move away from direct light'),\n            glare_title: localize('Glare detected'),\n            no_doc_detail: localize('Make sure all of the document is in the photo'),\n            no_doc_title: localize('No document detected'),\n        },\n        body_id: localize('Make sure your card details are clear to read, with no blur or glare'),\n        body_image_medium: localize('It’ll take longer to verify you if we can’t read it'),\n        body_image_poor: localize('To smoothly verify you, we need a better photo'),\n        body_license: localize('Make sure your license details are clear to read, with no blur or glare'),\n        body_passport: localize('Make sure your passport details are clear to read, with no blur or glare'),\n        body_permit: localize('Make sure your permit details are clear to read, with no blur or glare'),\n        body_tax_letter: localize('Make sure details are clear to read, with no blur or glare'),\n        button_close: localize('Close'),\n        button_primary_redo: localize('Redo'),\n        button_primary_upload: localize('Confirm'),\n        button_primary_upload_anyway: localize('Upload anyway'),\n        button_secondary_redo: localize('Redo'),\n        button_zoom: localize('Enlarge image'),\n        image_accessibility: localize('Photo of your document'),\n        title: localize('Check your image'),\n    },\n    doc_select: {\n        button_id: localize('Identity card'),\n        button_id_detail: localize('Front and back'),\n        button_license: localize(\"Driver's license\"),\n        button_license_detail: localize('Front and back'),\n        button_passport: localize('Passport'),\n        button_passport_detail: localize('Face photo page'),\n        button_permit: localize('Residence permit'),\n        button_permit_detail: localize('Front and back'),\n        extra_no_mobile: localize('Sorry, no mobile phone bills'),\n        list_accessibility: localize('Documents you can use to verify your identity'),\n        subtitle: localize('It must be an official photo ID'),\n        subtitle_poa: localize('These are the documents most likely to show your current home address'),\n        title: localize('Choose document'),\n        title_poa: localize('Select a %{country} document'),\n    },\n    doc_submit: {\n        button_link_upload: localize('or upload photo – no scans or photocopies'),\n        button_primary: localize('Continue on phone'),\n        subtitle: localize('Take a photo with your phone'),\n        title_id_back: localize('Submit identity card (back)'),\n        title_id_front: localize('Submit identity card (front)'),\n        title_license_back: localize('Submit license (back)'),\n        title_license_front: localize('Submit license (front)'),\n        title_passport: localize('Submit passport photo pages'),\n        title_permit_back: localize('Submit residence permit (back)'),\n        title_permit_front: localize('Submit residence permit (front)'),\n    },\n    error_unsupported_browser: {\n        subtitle_android: localize('Restart the process on the latest version of Google Chrome'),\n        subtitle_ios: localize('Restart the process on the latest version of Safari'),\n        title_android: localize('Unsupported browser'),\n        title_ios: localize('Unsupported browser'),\n    },\n    generic: {\n        accessibility: {\n            close_sdk_screen: localize('Close identity verification screen'),\n            dismiss_alert: localize('Dismiss alert'),\n        },\n        back: localize('back'),\n        close: localize('close'),\n        errors: {\n            interrupted_flow_error: {\n                instruction: localize('Restart process on a different device'),\n                message: localize('Camera not detected'),\n            },\n            invalid_size: {\n                instruction: localize('Must be under 10MB.'),\n                message: localize('File size exceeded.'),\n            },\n            invalid_type: {\n                instruction: localize('Try using another file type.'),\n                message: localize('File not uploaded.'),\n            },\n            lazy_loading: {\n                message: localize('An error occurred while loading the component'),\n            },\n            multiple_faces: {\n                instruction: localize('Only your face can be in the selfie'),\n                message: localize('Multiple faces found'),\n            },\n            no_face: {\n                instruction: localize('Your face is needed in the selfie'),\n                message: localize('No face found'),\n            },\n            request_error: {\n                instruction: localize('Please try again'),\n                message: localize('Connection lost'),\n            },\n            sms_failed: {\n                instruction: localize('Copy the link to your phone'),\n                message: localize(\"Something's gone wrong\"),\n            },\n            sms_overuse: {\n                instruction: localize('Copy the link to your phone'),\n                message: localize('Too many failed attempts'),\n            },\n            unsupported_file: {\n                instruction: localize('Try using a JPG or PNG file'),\n                message: localize('File type not supported'),\n            },\n        },\n        lazy_load_placeholder: localize('Loading...'),\n        loading: localize('Loading'),\n    },\n    get_link: {\n        alert_wrong_number: localize('Check that your number is correct'),\n        button_copied: localize('Copied'),\n        button_copy: localize('Copy'),\n        button_submit: localize('Send link'),\n        info_qr_how: localize('How to scan a QR code'),\n        info_qr_how_list_item_camera: localize('Point your phone’s camera at the QR code'),\n        info_qr_how_list_item_download: localize(\n            'If it doesn’t work, download a QR code scanner from Google Play or the App Store'\n        ),\n        link_divider: localize('or'),\n        link_qr: localize('Scan QR code'),\n        link_sms: localize('Get link via SMS'),\n        link_url: localize('Copy link'),\n        loader_sending: localize('Sending'),\n        number_field_input_placeholder: localize('Enter mobile number'),\n        number_field_label: localize('Enter your mobile number:'),\n        subtitle_qr: localize('Scan the QR code with your phone'),\n        subtitle_sms: localize('Send this one-time link to your phone'),\n        subtitle_url: localize('Open the link on your mobile'),\n        title: localize('Get your secure link'),\n        url_field_label: localize('Copy the link to your mobile browser'),\n    },\n    linked_computer: {\n        button_primary: localize('Continue'),\n        info: localize('Make sure'),\n        list_item_desktop_open: localize('2. Your desktop window stays open'),\n        list_item_sent_by_you: localize('1. This link was sent by you'),\n        subtitle: localize('Continue with the verification'),\n        title: localize('Linked to your computer'),\n    },\n    mobilePhrases: {\n        photo_upload: {\n            body_id_back: localize('Take a photo of the back of your card'),\n            body_id_front: localize('Take a photo of the front of your card'),\n            body_license_back: localize('Take a photo of the back of your license'),\n            body_license_front: localize('Take a photo of the front of your license'),\n            body_passport: localize('Take a photo of your passport photo page'),\n            body_selfie: localize('Take a selfie showing your face'),\n        },\n        selfie_capture: {\n            alert: {\n                camera_inactive: {\n                    detail: localize('Take a photo using the <fallback>basic camera mode</fallback> instead'),\n                },\n                camera_not_working: {\n                    detail: localize('Take a photo using the <fallback>basic camera mode</fallback> instead'),\n                },\n            },\n        },\n        upload_guide: {\n            button_primary: localize('Take a photo'),\n            title: localize('Passport photo page'),\n        },\n    },\n    outro: {\n        body: localize('Thank you'),\n        title: localize('Verification complete'),\n    },\n    permission_recovery: {\n        button_primary: localize('Refresh'),\n        info: localize('Recovery'),\n        list_header_cam: localize('Follow these steps to recover camera access:'),\n        list_item_action_cam: localize('Refresh this page to restart the identity verification process'),\n        list_item_how_to_cam: localize('Grant access to your camera from your browser settings'),\n        subtitle_cam: localize('Recover camera access to continue face verification'),\n        title_cam: localize('Camera access is denied'),\n    },\n    permission: {\n        body_cam: localize('We cannot verify you without using your camera'),\n        button_primary_cam: localize('Enable camera'),\n        subtitle_cam: localize('When prompted, you must enable camera access to continue'),\n        title_cam: localize('Allow camera access'),\n    },\n    photo_upload: {\n        body_bank_statement: localize('Provide the whole document page for best results'),\n        body_benefits_letter: localize('Provide the whole document page for best results'),\n        body_bill: localize('Provide the whole document page for best results'),\n        body_government_letter: localize('Provide the whole document page for best results'),\n        body_id_back: localize('Upload back of card from your computer'),\n        body_id_front: localize('Upload front of card from your computer'),\n        body_license_back: localize('Upload back of license from your computer'),\n        body_license_front: localize('Upload front of license from your computer'),\n        body_passport: localize('Upload passport photo page from your computer'),\n        body_selfie: localize('Upload a selfie from your computer'),\n        body_tax_letter: localize('Provide the whole document page for best results'),\n        button_take_photo: localize('Take photo'),\n        button_upload: localize('Upload'),\n        title_selfie: localize('Selfie'),\n    },\n    selfie_capture: {\n        alert: {\n            camera_inactive: {\n                detail: localize(\n                    'Check that it is connected and functional. You can also <fallback>continue verification on your phone</fallback>'\n                ),\n                detail_no_fallback: localize('Make sure your device has a working camera'),\n                title: localize('Camera not working?'),\n            },\n            camera_not_working: {\n                detail: localize('It may be disconnected. <fallback>Try using your phone instead</fallback>.'),\n                detail_no_fallback: localize(\"Make sure your device's camera works\"),\n                title: localize('Camera not working'),\n            },\n            timeout: {\n                detail: localize(\"Remember to press stop when you're done. <fallback>Redo video actions</fallback>\"),\n                title: localize('Looks like you took too long'),\n            },\n        },\n        button_accessibility: localize('Take a photo'),\n        frame_accessibility: localize('View from camera'),\n        title: localize('Take a selfie'),\n    },\n    selfie_confirmation: {\n        image_accessibility: localize('Photo of your face'),\n        subtitle: localize('Make sure your selfie clearly shows your face'),\n        title: localize('Check selfie'),\n    },\n    selfie_intro: {\n        button_primary: localize('Continue'),\n        list_accessibility: localize('Tips to take a good selfie'),\n        list_item_face_forward: localize('Face forward and make sure your eyes are clearly visible'),\n        list_item_no_glasses: localize('Remove your glasses, if necessary'),\n        subtitle: localize(\"We'll compare it with your document\"),\n        title: localize('Take a selfie'),\n    },\n    sms_sent: {\n        info: localize('Tips'),\n        info_link_expire: localize('Your link will expire in one hour'),\n        info_link_window: localize('Keep this window open while using your mobile'),\n        link: localize('Resend link'),\n        subtitle: localize(\"We've sent a secure link to %{number}\"),\n        subtitle_minutes: localize('It may take a few minutes to arrive'),\n        title: localize('Check your mobile'),\n    },\n    switch_phone: {\n        info: localize('Tips'),\n        info_link_expire: localize('Your mobile link will expire in one hour'),\n        info_link_refresh: localize(\"Don't refresh this page\"),\n        info_link_window: localize('Keep this window open while using your mobile'),\n        link: localize('Cancel'),\n        subtitle: localize(\"Once you've finished we'll take you to the next step\"),\n        title: localize('Connected to your mobile'),\n    },\n    upload_guide: {\n        button_primary: localize('Upload photo'),\n        image_detail_blur_alt: localize('Example of a blurry document'),\n        image_detail_blur_label: localize('All details must be clear — nothing blurry'),\n        image_detail_cutoff_alt: localize('Example of a cut-off document'),\n        image_detail_cutoff_label: localize('Show all details — including the bottom 2 lines'),\n        image_detail_glare_alt: localize('Example of a document with glare'),\n        image_detail_glare_label: localize('Move away from direct light — no glare'),\n        image_detail_good_alt: localize('Document example'),\n        image_detail_good_label: localize('The photo should clearly show your document'),\n        subtitle: localize('Scans and photocopies are not accepted'),\n        title: localize('Upload passport photo page'),\n    },\n});\n\nexport const LANGUAGE_CODES = {\n    ID: 'id_ID',\n    EN: 'en_US',\n};\n","import { localize } from '@deriv/translations';\n\n// Note: Ensure that the object keys matches BE API's keys. This is simply a mapping for FE templates\n\nconst getIDVDocumentConfig = () => ({\n    ke: {\n        alien_card: {\n            new_display_name: '',\n            example_format: '123456',\n        },\n        national_id: {\n            new_display_name: '',\n            example_format: '12345678',\n        },\n        passport: {\n            new_display_name: '',\n            example_format: 'A12345678',\n        },\n    },\n    za: {\n        national_id: {\n            new_display_name: localize('National ID'),\n            example_format: '1234567890123',\n        },\n        national_id_no_photo: {\n            new_display_name: localize('National ID (No Photo)'),\n            example_format: '1234567890123',\n        },\n    },\n    ng: {\n        bvn: {\n            new_display_name: localize('Bank Verification Number'),\n            example_format: '12345678901',\n        },\n        cac: {\n            new_display_name: localize('Corporate Affairs Commission'),\n            example_format: '12345678',\n        },\n        drivers_license: {\n            new_display_name: '',\n            example_format: 'ABC123456789',\n        },\n        nin: {\n            new_display_name: localize('National Identity Number'),\n            example_format: '12345678901',\n        },\n        nin_slip: {\n            new_display_name: localize('National Identity Number Slip'),\n            example_format: '12345678901',\n        },\n        tin: {\n            new_display_name: localize('Taxpayer identification number'),\n            example_format: '12345678-1234',\n        },\n        voter_id: {\n            new_display_name: localize('Voter ID'),\n            example_format: '1234567890123456789',\n        },\n    },\n    gh: {\n        drivers_license: {\n            new_display_name: '',\n            example_format: 'B1234567',\n        },\n        national_id: {\n            new_display_name: localize('National ID'),\n            example_format: 'GHA-123456789-1',\n        },\n        passport: {\n            new_display_name: localize('Passport'),\n            example_format: 'G1234567',\n        },\n        ssnit: {\n            new_display_name: localize('Social Security and National Insurance Trust'),\n            example_format: 'C123456789012',\n        },\n        voter_id: {\n            new_display_name: localize('Voter ID'),\n            example_format: '01234567890',\n        },\n    },\n    br: {\n        cpf: {\n            new_display_name: localize('CPF'),\n            example_format: '123.456.789-12',\n        },\n    },\n    ug: {\n        national_id: {\n            new_display_name: localize('National ID'),\n            example_format: 'CM12345678PE1D',\n        },\n        national_id_no_photo: {\n            new_display_name: localize('National ID (No Photo)'),\n            example_format: 'CM12345678PE1D',\n            additional_document_example_format: '0123456789',\n        },\n    },\n    zw: {\n        national_id: {\n            new_display_name: localize('National ID'),\n            example_format: '081234567F53',\n        },\n    },\n    cl: {\n        national_id: {\n            example_format: '123456789',\n        },\n    },\n    ar: {\n        dni: {\n            example_format: '12345678',\n        },\n    },\n    mx: {\n        curp: {\n            example_format: 'ABCD123456HEFGIJ00',\n        },\n    },\n    id: {\n        nik: {\n            example_format: '1234567890123456',\n        },\n    },\n    in: {\n        aadhaar: {\n            example_format: '123456789012',\n            additional_document_example_format: 'ABCDE1234F',\n        },\n        drivers_license: {\n            example_format: 'AB1234567890123',\n        },\n        epic: {\n            example_format: 'ABC1234567',\n        },\n        pan: {\n            example_format: 'ABCDE1234F',\n        },\n        passport: {\n            example_format: 'A1234567',\n            additional_document_example_format: 'AB1234567890123',\n        },\n    },\n    pe: {\n        national_id: {\n            example_format: '12345678',\n        },\n    },\n    vn: {\n        national_id: {\n            example_format: '12345678901',\n        },\n    },\n});\n\nexport const getIDVDocuments = (country_code: string) => {\n    const IDV_DOCUMENT_DATA: { [key: string]: object } = getIDVDocumentConfig();\n    return IDV_DOCUMENT_DATA[country_code];\n};\n","import React from 'react';\nimport { FormikErrors, FormikValues } from 'formik';\nimport countries from 'i18n-iso-countries';\nimport { ResidenceList, GetAccountStatus } from '@deriv/api-types';\nimport {\n    filterObjProperties,\n    toMoment,\n    validLength,\n    validName,\n    getIDVNotApplicableOption,\n    IDV_ERROR_STATUS,\n    AUTH_STATUS_CODES,\n    VERIFICATION_SERVICES,\n} from '@deriv/shared';\nimport { localize } from '@deriv-com/translations';\nimport { getIDVDocuments } from '../Configs/idv-document-config';\nimport { TServerError } from '../Types';\nimport { LANGUAGE_CODES } from '../Constants/onfido';\n\nexport const documentAdditionalError = (\n    additional_document_value: string | undefined,\n    document_additional_config: FormikValues\n) => {\n    let error_message = null;\n    if (!additional_document_value) {\n        error_message = localize('Please enter your {{document_name}}. ', {\n            document_name: document_additional_config?.display_name?.toLowerCase() ?? localize('document number'),\n        });\n    } else {\n        const format_regex = getRegex(document_additional_config?.format);\n        if (!format_regex.test(additional_document_value)) {\n            error_message = localize('Please enter the correct format. ');\n        }\n    }\n\n    return error_message;\n};\n\n// Unsupported Regex List\nconst regex = [\n    {\n        regex_string: '^(?i)G[a-zA-Z0-9]{7,9}$',\n        value: '^G[a-zA-Z0-9]{7,9}$',\n        flags: 'i',\n    },\n];\n\nconst IDV_NOT_APPLICABLE_OPTION = getIDVNotApplicableOption();\n\ntype TIDVSupportCheck = {\n    residence_list: ResidenceList;\n    account_status: GetAccountStatus;\n    real_account_signup_target: string;\n    citizen: string;\n};\n\nexport const shouldShowIdentityInformation = ({\n    account_status,\n    citizen,\n    residence_list,\n    real_account_signup_target,\n}: TIDVSupportCheck) => {\n    const country = residence_list.find(item => item.value === citizen);\n    const maltainvest = real_account_signup_target === 'maltainvest';\n    const identity = account_status?.authentication?.identity;\n\n    const is_identity_verified = identity?.status === AUTH_STATUS_CODES.VERIFIED;\n    const should_skip_idv =\n        is_identity_verified || account_status?.status?.some((status: string) => status === 'skip_idv'); //status added by BE when idv should be skipped for the user\n    return Boolean(\n        !maltainvest && citizen && country?.identity?.services?.idv?.is_country_supported && !should_skip_idv\n    );\n};\n\nexport const getDocumentData = (country_code: string, document_type: string) => {\n    const DEFAULT_CONFIG = {\n        new_display_name: '',\n        example_format: '',\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const IDV_DOCUMENT_DATA: any = getIDVDocuments(country_code);\n    if (IDV_DOCUMENT_DATA) {\n        return IDV_DOCUMENT_DATA[document_type] ?? DEFAULT_CONFIG;\n    }\n    return DEFAULT_CONFIG;\n};\n\nexport const preventEmptyClipboardPaste = (e: React.ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const clipboardData = (e.clipboardData ?? window.clipboardData).getData('text');\n    if (clipboardData.length === 0) {\n        e.preventDefault();\n    }\n};\n\nexport const getRegex = (target_regex: string) => {\n    const output_regex = regex.find(r => r.regex_string === target_regex);\n    if (output_regex) {\n        return new RegExp(output_regex.value, output_regex.flags);\n    }\n    return new RegExp(target_regex);\n};\n\n/**\n * @param {string} selected_doc  - Could be one of the following: 'drivers_license', 'ssnit', 'id_card', 'passport'\n * @returns {string} - Returns the placeholder text for the document number input\n */\nexport const generatePlaceholderText = (selected_doc: string): string => {\n    switch (selected_doc) {\n        case 'drivers_license':\n            return localize('Enter Driver License Reference number');\n        case 'ssnit':\n            return localize('Enter your SSNIT number');\n        case 'national_id_no_photo':\n            return localize('Enter your National Identification Number (NIN)');\n        default:\n            return localize('Enter your document number');\n    }\n};\n\nexport const isFieldImmutable = (field: string, mutable_fields: string[] = []) => !mutable_fields.includes(field);\n\nexport const makeSettingsRequest = (values: FormikValues, changeable_fields: string[]) => {\n    const request = filterObjProperties(values, changeable_fields);\n\n    if (request.first_name) {\n        request.first_name = request.first_name.trim();\n    }\n    if (request.last_name) {\n        request.last_name = request.last_name.trim();\n    }\n    if (request.date_of_birth) {\n        request.date_of_birth = toMoment(request.date_of_birth).format('YYYY-MM-DD');\n    }\n\n    return request;\n};\n\nexport const validateName = (name: string) => {\n    if (name) {\n        if (!validLength(name.trim(), { min: 1, max: 50 })) {\n            return localize('Enter no more than 50 characters.');\n        } else if (!validName(name)) {\n            return localize('Letters, spaces, periods, hyphens, apostrophes only.');\n        }\n    }\n    return '';\n};\n\nexport const getExampleFormat = (example_format?: string) =>\n    example_format ? localize('Example: ') + example_format : '';\n\nexport const isDocumentTypeValid = (document_type: FormikValues) => {\n    if (!document_type?.text) {\n        return localize('Please select a document type.');\n    }\n    return undefined;\n};\n\nexport const isAdditionalDocumentValid = (document_type: FormikValues, additional_document_value?: string) => {\n    const error_message = documentAdditionalError(additional_document_value, document_type?.additional);\n    if (error_message) {\n        return error_message + getExampleFormat(document_type?.additional?.example_format);\n    }\n    return undefined;\n};\n\nexport const isDocumentNumberValid = (document_number?: string, document_type?: FormikValues) => {\n    const is_document_number_invalid = document_number === document_type?.example_format;\n    if (!document_number && document_type?.text) {\n        let document_name = '';\n        const example_format = getExampleFormat(document_type.example_format);\n        switch (document_type.id) {\n            case 'drivers_license':\n                document_name = localize('Driver License Reference number');\n                break;\n            case 'ssnit':\n                document_name = localize('SSNIT number');\n                break;\n            case 'national_id_no_photo':\n                document_name = localize('NIN');\n                break;\n            default:\n                document_name = localize('document number');\n                break;\n        }\n        return localize('Please enter your {{document_name}}. {{example_format}}', { document_name, example_format });\n    } else if (is_document_number_invalid) {\n        return localize('Please enter a valid ID number.');\n    }\n    const format_regex = getRegex(document_type?.value);\n    if (document_number && !format_regex.test(document_number)) {\n        return localize('Please enter the correct format. ') + getExampleFormat(document_type?.example_format);\n    }\n    return undefined;\n};\n\nexport const shouldHideHelperImage = (document_id: string) => document_id === IDV_NOT_APPLICABLE_OPTION.id;\n\nexport const isServerError = (error: unknown): error is TServerError =>\n    typeof error === 'object' && error !== null && 'code' in error;\n\n/**\n *  Returns the alpha 3 code for a given country code\n * @name convertAlpha2toAlpha3\n * @param country_code  - country code\n * @returns alpha 3 code\n */\nexport const convertAlpha2toAlpha3 = (country_code: string) =>\n    country_code.length !== 3 ? countries.alpha2ToAlpha3(country_code.toUpperCase()) : country_code;\n\n/**\n * Returns the alpha 2 code for a given country code\n * @name convertAlpha3toAlpha2\n * @param country_code - country code\n * @returns alpha 2 code\n */\n\nexport const convertAlpha3toAlpha2 = (country_code: string) =>\n    country_code.length !== 2 ? countries.alpha3ToAlpha2(country_code.toUpperCase()) : country_code;\n\n/**\n * Generates a language code supported by Onfido\n * @name getOnfidoSupportedLocaleCode\n * @param language_code\n * @returns language code supported by Onfido\n */\nexport const getOnfidoSupportedLocaleCode = (language_code: string) => {\n    try {\n        const code = language_code.toLowerCase().split('_');\n        if (code[0] === 'id') {\n            return LANGUAGE_CODES.ID;\n        }\n        return code.length > 1 ? `${code[0]}_${code[1].toUpperCase()}` : code[0];\n    } catch (e) {\n        return LANGUAGE_CODES.EN;\n    }\n};\n\nexport const getIDVDocumentType = (\n    idv_latest_attempt: DeepRequired<GetAccountStatus>['authentication']['attempts']['latest'],\n    residence: ResidenceList[0]\n) => {\n    if (!idv_latest_attempt || !Object.keys(residence).length) return localize('identity document');\n    const { document_type } = idv_latest_attempt;\n    if (!document_type) return localize('identity document');\n    if (residence?.identity?.services?.idv?.documents_supported) {\n        const {\n            identity: {\n                services: {\n                    idv: { documents_supported },\n                },\n            },\n        } = residence;\n        return documents_supported[document_type as string].display_name;\n    }\n    return null;\n};\n\nexport const validate = <T,>(errors: FormikErrors<FormikValues>, values: T) => {\n    return (fn: (value: string) => string, arr: string[], err_msg: string) => {\n        arr.forEach(field => {\n            const value = values[field as keyof typeof values] as string;\n            if (!fn(value) && !errors[field]) errors[field] = err_msg;\n        });\n    };\n};\n\ntype TIDVErrorStatus = keyof typeof IDV_ERROR_STATUS;\nexport const verifyFields = (status: TIDVErrorStatus) => {\n    switch (status) {\n        case IDV_ERROR_STATUS.DobMismatch.code:\n            return ['date_of_birth'];\n        case IDV_ERROR_STATUS.NameMismatch.code:\n            return ['first_name', 'last_name'];\n        default:\n            return ['first_name', 'last_name', 'date_of_birth'];\n    }\n};\n\nexport const isSpecialPaymentMethod = (payment_method_icon: string) =>\n    ['IcOnlineNaira', 'IcAstroPayLight', 'IcAstroPayDark'].some(icon => icon === payment_method_icon);\n\nexport const convertPhoneTypeDisplay = (phone_verification_type: string) => {\n    if (phone_verification_type === VERIFICATION_SERVICES.SMS) return phone_verification_type.toUpperCase();\n\n    return 'WhatsApp';\n};\n","import { useCallback } from 'react';\nimport { useMutation as _useMutation } from '@tanstack/react-query';\nimport useAPI from './useAPI';\nimport type {\n    TSocketAcceptableProps,\n    TSocketEndpointNames,\n    TSocketError,\n    TSocketRequestMutationOptions,\n    TSocketRequestPayload,\n    TSocketResponseData,\n} from '../types';\n\nconst useMutation = <T extends TSocketEndpointNames>(name: T, options?: TSocketRequestMutationOptions<T>) => {\n    const { send } = useAPI();\n    const {\n        mutate: _mutate,\n        mutateAsync: _mutateAsync,\n        ...rest\n    } = _useMutation<TSocketResponseData<T>, TSocketError<T>, TSocketAcceptableProps<T>>(props => {\n        const prop = props?.[0];\n        const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n\n        return send(name, payload);\n    }, options);\n\n    const mutate = useCallback((...payload: TSocketAcceptableProps<T>) => _mutate(payload), [_mutate]);\n    const mutateAsync = useCallback((...payload: TSocketAcceptableProps<T>) => _mutateAsync(payload), [_mutateAsync]);\n\n    return {\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useMutation;\n","import { useCallback, useMemo } from 'react';\n\nimport { useQuery } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nconst useGetPhoneNumberList = () => {\n    const { client } = useStore();\n    const {\n        account_settings,\n        website_status: { clients_country },\n        is_authorize,\n    } = client;\n    const {\n        data,\n        isLoading: isPhoneSettingLoading,\n        refetch,\n    } = useQuery('phone_settings', {\n        options: { enabled: is_authorize },\n    });\n\n    const no_of_available_carriers = data?.phone_settings?.carriers && data?.phone_settings?.carriers.length;\n\n    const is_global_sms_available = data?.phone_settings?.carriers?.includes('sms');\n\n    const is_global_whatsapp_available = data?.phone_settings?.carriers?.includes('whatsapp');\n\n    const is_carriers_supported = data?.phone_settings?.carriers && data.phone_settings.carriers.length > 0;\n\n    const countries = data?.phone_settings?.countries?.sort((a, b) => a.display_name.localeCompare(b.display_name));\n\n    const getSelectedPhoneCode = useCallback(() => {\n        const country = countries?.find(c => c.country_code.toLowerCase() === clients_country);\n        return country?.calling_country_code;\n    }, [clients_country, countries]);\n\n    const getSelectedCountryList = useCallback(() => {\n        //@ts-expect-error calling_country_code is not defined in GetSettings\n        const phone_code = account_settings?.calling_country_code;\n        const country = phone_code\n            ? countries?.find(c => c.calling_country_code === phone_code)\n            : countries?.find(c => c.country_code.toLowerCase() === clients_country);\n        return country;\n    }, [clients_country, countries, account_settings]);\n\n    const getShortCodeSelected = useCallback(() => {\n        //@ts-expect-error calling_country_code is not defined in GetSettings\n        const phone_code = account_settings?.calling_country_code;\n        // Assuming you have access to the residency_list or a similar data structure\n        const country = countries?.find(country => country.calling_country_code === phone_code);\n        return country?.country_code || '';\n    }, [account_settings, countries]);\n\n    const formatted_countries_list = countries?.map(country => ({\n        name: country.display_name,\n        short_code: country.country_code,\n        phone_code: country.calling_country_code,\n        carriers: country.carriers,\n    }));\n\n    const legacy_core_countries_list = useMemo(\n        () =>\n            countries?.map(country => ({\n                text: `${country.display_name} (${country.calling_country_code})`,\n                value: country.calling_country_code,\n                id: `${country.calling_country_code}_${country.country_code}`,\n                carriers: country.carriers,\n                disabled: false,\n            })) ?? [],\n        [countries]\n    );\n\n    //@ts-expect-error will remove this once the account_settings is updated\n    const selected_phone_code = account_settings?.calling_country_code || getSelectedPhoneCode();\n\n    const selected_country_list = getSelectedCountryList();\n\n    const short_code_selected = getShortCodeSelected() || clients_country;\n\n    return {\n        updatePhoneSettings: refetch,\n        is_global_sms_available,\n        is_global_whatsapp_available,\n        no_of_available_carriers,\n        is_carriers_supported,\n        legacy_core_countries_list,\n        formatted_countries_list,\n        short_code_selected,\n        selected_phone_code,\n        selected_country_list,\n        isLoading: isPhoneSettingLoading,\n    };\n};\n\nexport default useGetPhoneNumberList;\n"],"names":["FormBodySection","children","has_side_note","side_note","side_note_position","type","isDesktop","useDevice","_jsxs","className","clsx","_jsx","Text","color","size","React","as","weight","Localize","i18n_default_text","FormSubHeader","description","subtitle","title","title_text_size","title_as_class","replace","toLowerCase","Fragment","_ref","name","warn","rest","_objectWithoutProperties","_excluded","Field","field","form","errors","touched","setFieldTouched","Input","_objectSpread","autoComplete","error","undefined","onChange","e","portal_id","setFieldValue","meta","DateOfBirthPicker","target","value","toMoment","format","getEmploymentStatusList","version","isFeatureDisabled","text","localize","EmploymentStatusField","required","is_feature_flag_disabled","is_disabled","fieldFocused","useTranslations","handleBlur","handleChange","Dropdown","placeholder","is_align_text_left","list","_e$target","disabled","SelectNative","label","list_items","TaxResidenceField","setIsTaxResidencePopoverOpen","setIsTinPopoverOpen","is_tax_residence_popover_open","data","residence_list","useResidenceList","Autocomplete","onItemSelection","item","use_text","data_testid","onClick","stopPropagation","Popover","alignment","icon","message","zIndex","disable_message_icon","is_open","TaxIdentificationNumberField","is_tin_popover_open","FormInputField","tagName","components","rel","href","IDVForm","class_name","selected_country","hide_hint","is_for_real_account_signup_modal","is_for_mt5","_selected_country$ide","_selected_country$ide2","_values$document_type3","_values$document_type5","document_list","setDocumentList","selected_doc","setSelectedDoc","documents_supported","document_data","identity","services","idv","values","useFormikContext","default_document","id","example_format","IDV_NOT_APPLICABLE_OPTION","getIDVNotApplicableOption","document_types","Object","keys","length","new_document_list","map","key","_selected_country$val","display_name","new_display_name","additional_document_example_format","getDocumentData","_document_data$key$ad","_document_data$key$ad2","additional","resetDocumentItemSelected","getDocument","_document_list$find","find","d","onKeyUp","document_name","_values$document_type","_values$document_type2","document_type","current_input","includes","formatInput","bindDocumentData","onBlur","selected_document","_values$document_type4","bottom_label","getExampleFormat","document_number","error_message","generatePlaceholderText","onPaste","preventEmptyClipboardPaste","_values$document_type6","_values$document_type7","_values$document_type8","additional_document_placeholder","document_additional","AccountOpeningReasonField","account_opening_reason_list","is_modal","list_portal_id","props","inline_note_text","is_virtual","is_eu_user","is_svg","is_rendered_for_idv","editable_fields","has_real_account","is_fully_authenticated","closeRealAccountSignup","salutation_list","is_rendered_for_onfido","is_qualified_for_poa","states_list","no_confirmation_needed","mismatch_status","is_svg_only","isCountryCodeDropdownEnabled","isCountryCodeLoaded","useGrowthbookGetFeatureValue","featureFlag","legacy_core_countries_list","useGetPhoneNumberList","getNameAndDobLabels","is_asterisk_needed","first_name_label","last_name_label","dob_label","is_rendered_for_idv_or_onfido","getFieldHint","field_name","poa_clarification_message","is_confirmation_checkbox_disabled","verifyFields","some","InlineMessage","InlineNoteWithIcon","font_size","align","Link","to","routes","personal_details","event","_event$target","_event$target2","RadioGroup","selected","salutation","onToggle","persist","Item","isFieldImmutable","has_error","hint","first_name","last_name","DateOfBirthField","date_of_birth","maxLength","address_line_1","address_line_2","address_city","address_state","address_postcode","PlaceOfBirthField","citizen","should_hide_disabled_options","PhoneField","is_country_code_dropdown_enabled","country_code_list","phone","account_opening_reason","Checkbox","confirmation_checkbox","label_font_size","CountryCodeDropdown","validPhone","phone_number","country_list","is_country_code_dropdown","Icon","line_height","getOnfidoPhrases","country_select","alert_dropdown","country_not_found","alert","another_doc","button_primary","search","accessibility","input_placeholder","cross_device_checklist","info","list_item_doc_multiple","list_item_doc_one","list_item_selfie","cross_device_error_desktop","cross_device_error_restart","cross_device_intro","list_accessibility","list_item_finish","list_item_open_link","list_item_send_phone","cross_device_return","body","doc_confirmation","blur_detail","blur_title","crop_detail","crop_title","glare_detail","glare_title","no_doc_detail","no_doc_title","body_id","body_image_medium","body_image_poor","body_license","body_passport","body_permit","body_tax_letter","button_close","button_primary_redo","button_primary_upload","button_primary_upload_anyway","button_secondary_redo","button_zoom","image_accessibility","doc_select","button_id","button_id_detail","button_license","button_license_detail","button_passport","button_passport_detail","button_permit","button_permit_detail","extra_no_mobile","subtitle_poa","title_poa","doc_submit","button_link_upload","title_id_back","title_id_front","title_license_back","title_license_front","title_passport","title_permit_back","title_permit_front","error_unsupported_browser","subtitle_android","subtitle_ios","title_android","title_ios","generic","close_sdk_screen","dismiss_alert","back","close","interrupted_flow_error","instruction","invalid_size","invalid_type","lazy_loading","multiple_faces","no_face","request_error","sms_failed","sms_overuse","unsupported_file","lazy_load_placeholder","loading","get_link","alert_wrong_number","button_copied","button_copy","button_submit","info_qr_how","info_qr_how_list_item_camera","info_qr_how_list_item_download","link_divider","link_qr","link_sms","link_url","loader_sending","number_field_input_placeholder","number_field_label","subtitle_qr","subtitle_sms","subtitle_url","url_field_label","linked_computer","list_item_desktop_open","list_item_sent_by_you","mobilePhrases","photo_upload","body_id_back","body_id_front","body_license_back","body_license_front","body_selfie","selfie_capture","camera_inactive","detail","camera_not_working","upload_guide","outro","permission_recovery","list_header_cam","list_item_action_cam","list_item_how_to_cam","subtitle_cam","title_cam","permission","body_cam","button_primary_cam","body_bank_statement","body_benefits_letter","body_bill","body_government_letter","button_take_photo","button_upload","title_selfie","detail_no_fallback","timeout","button_accessibility","frame_accessibility","selfie_confirmation","selfie_intro","list_item_face_forward","list_item_no_glasses","sms_sent","info_link_expire","info_link_window","link","subtitle_minutes","switch_phone","info_link_refresh","image_detail_blur_alt","image_detail_blur_label","image_detail_cutoff_alt","image_detail_cutoff_label","image_detail_glare_alt","image_detail_glare_label","image_detail_good_alt","image_detail_good_label","LANGUAGE_CODES","ID","EN","getIDVDocuments","country_code","ke","alien_card","national_id","passport","za","national_id_no_photo","ng","bvn","cac","drivers_license","nin","nin_slip","tin","voter_id","gh","ssnit","br","cpf","ug","zw","cl","ar","dni","mx","curp","nik","in","aadhaar","epic","pan","pe","vn","regex","regex_string","flags","shouldShowIdentityInformation","account_status","real_account_signup_target","_account_status$authe","_account_status$statu","_country$identity","country","maltainvest","authentication","should_skip_idv","status","AUTH_STATUS_CODES","VERIFIED","Boolean","is_country_supported","DEFAULT_CONFIG","IDV_DOCUMENT_DATA","_IDV_DOCUMENT_DATA$do","_e$clipboardData","clipboardData","window","getData","preventDefault","getRegex","target_regex","output_regex","r","RegExp","mutable_fields","makeSettingsRequest","changeable_fields","request","filterObjProperties","trim","validateName","validLength","min","max","validName","isDocumentTypeValid","isAdditionalDocumentValid","additional_document_value","documentAdditionalError","document_additional_config","_document_additional_","_document_additional_2","test","_document_type$additi","isDocumentNumberValid","is_document_number_invalid","format_regex","shouldHideHelperImage","document_id","isServerError","convertAlpha2toAlpha3","countries","toUpperCase","convertAlpha3toAlpha2","getOnfidoSupportedLocaleCode","language_code","code","split","getIDVDocumentType","idv_latest_attempt","residence","_residence$identity","validate","fn","arr","err_msg","forEach","IDV_ERROR_STATUS","DobMismatch","NameMismatch","useMutation","options","send","useAPI","_useMutation2","_useMutation","prop","payload","mutate","_mutate","mutateAsync","_mutateAsync","useCallback","_data$phone_settings","_data$phone_settings2","_data$phone_settings3","_data$phone_settings4","_data$phone_settings5","_data$phone_settings6","client","useStore","account_settings","website_status","clients_country","is_authorize","isLoading","isPhoneSettingLoading","refetch","useQuery","enabled","no_of_available_carriers","phone_settings","carriers","is_global_sms_available","is_global_whatsapp_available","is_carriers_supported","sort","a","b","localeCompare","getSelectedPhoneCode","c","calling_country_code","getSelectedCountryList","phone_code","getShortCodeSelected","formatted_countries_list","short_code","useMemo","_countries$map","selected_phone_code","selected_country_list","updatePhoneSettings","short_code_selected"],"sourceRoot":""}