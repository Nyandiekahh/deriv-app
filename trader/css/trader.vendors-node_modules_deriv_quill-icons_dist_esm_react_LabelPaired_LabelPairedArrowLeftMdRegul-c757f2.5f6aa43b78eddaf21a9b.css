@import url(https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap);
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.callback {
  font-family: Ubuntu, sans-serif;
  height: 100vh;
  width: 100vw;
  background-repeat: no-repeat;
  background-position: center;
  position: relative;
  align-items: center;
  background: #fff;
}

.callback__content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100%;
  gap: 40px;
}

.callback__title {
  color: #000;
  font-size: 24px;
  text-align: center;
  font-weight: 700;
  margin: 0;
}

.callback__button {
  border: 1px solid #000000;
  border-radius: 16px;
  font-weight: 700;
  font-size: 16px;
  line-height: 24px;
  text-align: center;
  background: inherit;
  color: #000;
  max-height: 48px;
}

.callback__button:hover {
  background: inherit;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.quill__color--primary-coral {
  background-color: var(--component-button-bg-coral-primary-default);
  color: var(--component-button-label-color-coral-primary);
  fill: var(--component-button-label-color-coral-primary);
  border: none;
}

.quill__color--primary-coral:hover:not(:disabled) {
  background-color: var(--component-button-bg-coral-primary-hover);
}

.quill__color--primary-coral:active:not(:disabled) {
  background-color: var(--component-button-bg-coral-primary-active);
}

.quill__color--primary-coral:disabled {
  opacity: var(--opacity-disabled);
  background: var(--component-button-bg-coral-primary-default);
}

.quill__color--primary-coral[data-loading=true] {
  background-color: var(--component-button-bg-coral-primary-loading);
}

.quill__color--primary-black {
  background-color: var(--component-button-bg-black-primary-default);
  color: var(--component-button-label-color-black-primary);
  fill: var(--component-button-label-color-black-primary);
  border: none;
}

.quill__color--primary-black:hover:not(:disabled) {
  background-color: var(--component-button-bg-black-primary-hover);
}

.quill__color--primary-black:focus:not(:disabled) {
  background-color: var(--component-button-bg-black-primary-default);
}

.quill__color--primary-black:active:not(:disabled) {
  background-color: var(--component-button-bg-black-primary-active);
}

.quill__color--primary-black:disabled {
  opacity: var(--opacity-disabled);
  background: var(--component-button-bg-black-primary-default);
}

.quill__color--primary-black[data-loading=true] {
  background-color: var(--component-button-bg-black-primary-loading);
}

.quill__color--primary-white {
  background-color: var(--component-button-bg-white-primary-default);
  color: var(--component-button-label-color-white-primary);
  fill: var(--component-button-label-color-white-primary);
  border: none;
}

.quill__color--primary-white:hover:not(:disabled) {
  background-color: var(--component-button-bg-white-primary-hover);
}

.quill__color--primary-white:focus:not(:disabled) {
  background-color: var(--component-button-bg-white-primary-default);
}

.quill__color--primary-white:active:not(:disabled) {
  background-color: var(--component-button-bg-white-primary-active);
}

.quill__color--primary-white:disabled {
  opacity: var(--opacity-disabled);
  background: var(--component-button-bg-white-primary-default);
}

.quill__color--primary-white[data-loading=true] {
  background-color: var(--component-button-bg-white-primary-loading);
}

.quill__color--primary-purchase {
  background-color: var(--component-button-bg-buy-primary-default);
  color: var(--component-button-label-color-buy-primary);
  fill: var(--component-button-label-color-buy-primary);
  border: none;
}

.quill__color--primary-purchase:hover:not(:disabled) {
  background-color: var(--component-button-bg-buy-primary-hover);
}

.quill__color--primary-purchase:focus:not(:disabled) {
  background-color: var(--component-button-bg-buy-primary-default);
}

.quill__color--primary-purchase:active:not(:disabled) {
  background-color: var(--component-button-bg-buy-primary-active);
}

.quill__color--primary-purchase:disabled {
  opacity: var(--opacity-disabled);
  background: var(--component-button-bg-buy-primary-default);
}

.quill__color--primary-purchase[data-loading=true] {
  background-color: var(--component-button-bg-buy-primary-loading);
}

.quill__color--primary-sell {
  background-color: var(--component-button-bg-sell-primary-default);
  color: var(--component-button-label-color-sell-primary);
  fill: var(--component-button-label-color-sell-primary);
  border: none;
}

.quill__color--primary-sell:hover:not(:disabled) {
  background-color: var(--component-button-bg-sell-primary-hover);
}

.quill__color--primary-sell:focus:not(:disabled) {
  background-color: var(--component-button-bg-sell-primary-default);
}

.quill__color--primary-sell:active:not(:disabled) {
  background-color: var(--component-button-bg-sell-primary-active);
}

.quill__color--primary-sell:disabled {
  opacity: var(--opacity-disabled);
  background: var(--component-button-bg-sell-primary-default);
}

.quill__color--primary-sell[data-loading=true] {
  background-color: var(--component-button-bg-sell-primary-loading);
}

.quill__color--primary-black-white {
  background-color: var(--component-button-bg-blackWhite-primary-default);
  color: var(--component-button-label-color-blackWhite-primary);
  fill: var(--component-button-label-color-blackWhite-primary);
  border: none;
}

.quill__color--primary-black-white:hover:not(:disabled) {
  background-color: var(--component-button-bg-blackWhite-primary-hover);
}

.quill__color--primary-black-white:focus:not(:disabled) {
  background-color: var(--component-button-bg-blackWhite-primary-default);
}

.quill__color--primary-black-white:active:not(:disabled) {
  background-color: var(--component-button-bg-blackWhite-primary-active);
}

.quill__color--primary-black-white:disabled {
  opacity: var(--opacity-disabled);
  background: var(--component-button-bg-blackWhite-primary-default);
}

.quill__color--primary-black-white[data-loading=true] {
  background-color: var(--component-button-bg-blackWhite-primary-loading);
}

.quill__color--primary-white-black {
  background-color: var(--component-button-bg-whiteBlack-primary-default);
  color: var(--component-button-label-color-whiteBlack-primary);
  fill: var(--component-button-label-color-whiteBlack-primary);
  border: none;
}

.quill__color--primary-white-black:hover:not(:disabled) {
  background-color: var(--component-button-bg-whiteBlack-primary-hover);
}

.quill__color--primary-white-black:focus:not(:disabled) {
  background-color: var(--component-button-bg-whiteBlack-primary-default);
}

.quill__color--primary-white-black:active:not(:disabled) {
  background-color: var(--component-button-bg-whiteBlack-primary-active);
}

.quill__color--primary-white-black:disabled {
  opacity: var(--opacity-disabled);
  background: var(--component-button-bg-whiteBlack-primary-default);
}

.quill__color--primary-white-black[data-loading=true] {
  background-color: var(--component-button-bg-whiteBlack-primary-loading);
}

.quill__color--secondary-coral {
  background-color: transparent;
  border-style: solid;
  border-color: var(--component-button-border-color-coral);
  color: var(--component-button-label-color-coral-secondary);
  fill: var(--component-button-label-color-coral-secondary);
}

.quill__color--secondary-coral:hover:not(:disabled) {
  background-color: var(--component-button-bg-coral-secondary-hover);
}

.quill__color--secondary-coral:focus:not(:disabled) {
  background-color: transparent;
}

.quill__color--secondary-coral:active:not(:disabled) {
  background-color: var(--component-button-bg-coral-secondary-active);
}

.quill__color--secondary-coral:disabled {
  opacity: var(--opacity-disabled);
  background: transparent;
}

.quill__color--secondary-coral[data-loading=true] {
  background-color: var(--component-button-bg-coral-secondary-loading);
}

.quill__color--secondary-black {
  background-color: transparent;
  border-style: solid;
  border-color: var(--component-button-border-color-black);
  color: var(--component-button-label-color-black-secondary);
  fill: var(--component-button-label-color-black-secondary);
}

.quill__color--secondary-black:hover:not(:disabled) {
  background-color: var(--component-button-bg-black-secondary-hover);
}

.quill__color--secondary-black:focus:not(:disabled) {
  background-color: transparent;
}

.quill__color--secondary-black:active:not(:disabled) {
  background-color: var(--component-button-bg-black-secondary-active);
}

.quill__color--secondary-black:disabled {
  opacity: var(--opacity-disabled);
  background: transparent;
}

.quill__color--secondary-black[data-loading=true] {
  background-color: var(--component-button-bg-black-secondary-loading);
}

.quill__color--secondary-white {
  background-color: transparent;
  border-style: solid;
  border-color: var(--component-button-border-color-white);
  color: var(--component-button-label-color-white-secondary);
  fill: var(--component-button-label-color-white-secondary);
}

.quill__color--secondary-white:hover:not(:disabled) {
  background-color: var(--component-button-bg-white-secondary-hover);
}

.quill__color--secondary-white:focus:not(:disabled) {
  background-color: transparent;
}

.quill__color--secondary-white:active:not(:disabled) {
  background-color: var(--component-button-bg-white-secondary-active);
}

.quill__color--secondary-white:disabled {
  opacity: var(--opacity-disabled);
  background: transparent;
}

.quill__color--secondary-white[data-loading=true] {
  background-color: var(--component-button-bg-white-secondary-loading);
}

.quill__color--secondary-purchase {
  background-color: transparent;
  border-style: solid;
  border-color: var(--component-button-border-color-buy);
  color: var(--component-button-label-color-buy-secondary);
  fill: var(--component-button-label-color-buy-secondary);
}

.quill__color--secondary-purchase:hover:not(:disabled) {
  background-color: var(--component-button-bg-buy-secondary-hover);
}

.quill__color--secondary-purchase:focus:not(:disabled) {
  background-color: transparent;
}

.quill__color--secondary-purchase:active:not(:disabled) {
  background-color: var(--component-button-bg-buy-secondary-active);
}

.quill__color--secondary-purchase:disabled {
  opacity: var(--opacity-disabled);
  background: transparent;
}

.quill__color--secondary-purchase[data-loading=true] {
  background-color: var(--component-button-bg-buy-secondary-loading);
}

.quill__color--secondary-sell {
  background-color: transparent;
  border-style: solid;
  border-color: var(--component-button-border-color-sell);
  color: var(--component-button-label-color-sell-secondary);
  fill: var(--component-button-label-color-sell-secondary);
}

.quill__color--secondary-sell:hover:not(:disabled) {
  background-color: var(--component-button-bg-sell-secondary-hover);
}

.quill__color--secondary-sell:focus:not(:disabled) {
  background-color: transparent;
}

.quill__color--secondary-sell:active:not(:disabled) {
  background-color: var(--component-button-bg-sell-secondary-active);
}

.quill__color--secondary-sell:disabled {
  opacity: var(--opacity-disabled);
  background: transparent;
}

.quill__color--secondary-sell[data-loading=true] {
  background-color: var(--component-button-bg-sell-secondary-loading);
}

.quill__color--secondary-black-white {
  background-color: transparent;
  border-style: solid;
  border-color: var(--component-button-border-color-blackWhite);
  color: var(--component-button-label-color-blackWhite-secondary);
  fill: var(--component-button-label-color-blackWhite-secondary);
}

.quill__color--secondary-black-white:hover:not(:disabled) {
  background-color: var(--component-button-bg-blackWhite-secondary-hover);
}

.quill__color--secondary-black-white:focus:not(:disabled) {
  background-color: transparent;
}

.quill__color--secondary-black-white:active:not(:disabled) {
  background-color: var(--component-button-bg-blackWhite-secondary-active);
}

.quill__color--secondary-black-white:disabled {
  opacity: var(--opacity-disabled);
  background: transparent;
}

.quill__color--secondary-black-white[data-loading=true] {
  background-color: var(--component-button-bg-blackWhite-secondary-loading);
}

.quill__color--secondary-white-black {
  background-color: transparent;
  border-style: solid;
  border-color: var(--component-button-border-color-whiteBlack);
  color: var(--component-button-label-color-whiteBlack-secondary);
  fill: var(--component-button-label-color-whiteBlack-secondary);
}

.quill__color--secondary-white-black:hover:not(:disabled) {
  background-color: var(--component-button-bg-whiteBlack-secondary-hover);
}

.quill__color--secondary-white-black:focus:not(:disabled) {
  background-color: transparent;
}

.quill__color--secondary-white-black:active:not(:disabled) {
  background-color: var(--component-button-bg-whiteBlack-secondary-active);
}

.quill__color--secondary-white-black:disabled {
  opacity: var(--opacity-disabled);
  background: transparent;
}

.quill__color--secondary-white-black[data-loading=true] {
  background-color: var(--component-button-bg-whiteBlack-secondary-loading);
}

.quill__color--tertiary-coral {
  background-color: transparent;
  color: var(--component-button-label-color-coral-tertiary);
  fill: var(--component-button-label-color-coral-tertiary);
  text-decoration: underline;
  border: none;
}

.quill__color--tertiary-coral:hover:not(:disabled) {
  background-color: var(--component-button-bg-coral-tertiary-hover);
}

.quill__color--tertiary-coral:focus:not(:disabled) {
  background-color: transparent;
}

.quill__color--tertiary-coral:active:not(:disabled) {
  background-color: var(--component-button-bg-coral-tertiary-active);
}

.quill__color--tertiary-coral:disabled {
  opacity: var(--opacity-disabled);
  background: transparent;
}

.quill__color--tertiary-coral[data-loading=true] {
  background-color: var(--component-button-bg-coral-tertiary-loading);
}

.quill__color--tertiary-black {
  background-color: transparent;
  color: var(--component-button-label-color-black-tertiary);
  fill: var(--component-button-label-color-black-tertiary);
  text-decoration: underline;
  border: none;
}

.quill__color--tertiary-black:hover:not(:disabled) {
  background-color: var(--component-button-bg-black-tertiary-hover);
}

.quill__color--tertiary-black:focus:not(:disabled) {
  background-color: transparent;
}

.quill__color--tertiary-black:active:not(:disabled) {
  background-color: var(--component-button-bg-black-tertiary-active);
}

.quill__color--tertiary-black:disabled {
  opacity: var(--opacity-disabled);
  background: transparent;
}

.quill__color--tertiary-black[data-loading=true] {
  background-color: var(--component-button-bg-black-tertiary-loading);
}

.quill__color--tertiary-white {
  background-color: transparent;
  color: var(--component-button-label-color-white-tertiary);
  fill: var(--component-button-label-color-white-tertiary);
  text-decoration: underline;
  border: none;
}

.quill__color--tertiary-white:hover:not(:disabled) {
  background-color: var(--component-button-bg-white-tertiary-hover);
}

.quill__color--tertiary-white:focus:not(:disabled) {
  background-color: transparent;
}

.quill__color--tertiary-white:active:not(:disabled) {
  background-color: var(--component-button-bg-white-tertiary-active);
}

.quill__color--tertiary-white:disabled {
  opacity: var(--opacity-disabled);
  background: transparent;
}

.quill__color--tertiary-white[data-loading=true] {
  background-color: var(--component-button-bg-white-tertiary-loading);
}

.quill__color--tertiary-purchase {
  background-color: transparent;
  color: var(--component-button-label-color-buy-tertiary);
  fill: var(--component-button-label-color-buy-tertiary);
  text-decoration: underline;
  border: none;
}

.quill__color--tertiary-purchase:hover:not(:disabled) {
  background-color: var(--component-button-bg-buy-tertiary-hover);
}

.quill__color--tertiary-purchase:focus:not(:disabled) {
  background-color: transparent;
}

.quill__color--tertiary-purchase:active:not(:disabled) {
  background-color: var(--component-button-bg-buy-tertiary-active);
}

.quill__color--tertiary-purchase:disabled {
  opacity: var(--opacity-disabled);
  background: transparent;
}

.quill__color--tertiary-purchase[data-loading=true] {
  background-color: var(--component-button-bg-buy-tertiary-loading);
}

.quill__color--tertiary-sell {
  background-color: transparent;
  color: var(--component-button-label-color-sell-tertiary);
  fill: var(--component-button-label-color-sell-tertiary);
  text-decoration: underline;
  border: none;
}

.quill__color--tertiary-sell:hover:not(:disabled) {
  background-color: var(--component-button-bg-sell-tertiary-hover);
}

.quill__color--tertiary-sell:focus:not(:disabled) {
  background-color: transparent;
}

.quill__color--tertiary-sell:active:not(:disabled) {
  background-color: var(--component-button-bg-sell-tertiary-active);
}

.quill__color--tertiary-sell:disabled {
  opacity: var(--opacity-disabled);
  background: transparent;
}

.quill__color--tertiary-sell[data-loading=true] {
  background-color: var(--component-button-bg-sell-tertiary-loading);
}

.quill__color--tertiary-black-white {
  background-color: transparent;
  color: var(--component-button-label-color-blackWhite-tertiary);
  fill: var(--component-button-label-color-blackWhite-tertiary);
  text-decoration: underline;
  border: none;
}

.quill__color--tertiary-black-white:hover:not(:disabled) {
  background-color: var(--component-button-bg-blackWhite-tertiary-hover);
}

.quill__color--tertiary-black-white:focus:not(:disabled) {
  background-color: transparent;
}

.quill__color--tertiary-black-white:active:not(:disabled) {
  background-color: var(--component-button-bg-blackWhite-tertiary-active);
}

.quill__color--tertiary-black-white:disabled {
  opacity: var(--opacity-disabled);
  background: transparent;
}

.quill__color--tertiary-black-white[data-loading=true] {
  background-color: var(--component-button-bg-blackWhite-tertiary-loading);
}

.quill__color--tertiary-white-black {
  background-color: transparent;
  color: var(--component-button-label-color-whiteBlack-tertiary);
  fill: var(--component-button-label-color-whiteBlack-tertiary);
  text-decoration: underline;
  border: none;
}

.quill__color--tertiary-white-black:hover:not(:disabled) {
  background-color: var(--component-button-bg-whiteBlack-tertiary-hover);
}

.quill__color--tertiary-white-black:focus:not(:disabled) {
  background-color: transparent;
}

.quill__color--tertiary-white-black:active:not(:disabled) {
  background-color: var(--component-button-bg-whiteBlack-tertiary-active);
}

.quill__color--tertiary-white-black:disabled {
  opacity: var(--opacity-disabled);
  background: transparent;
}

.quill__color--tertiary-white-black[data-loading=true] {
  background-color: var(--component-button-bg-whiteBlack-tertiary-loading);
}

.quill-icon-button__size--sm {
  min-height: var(--component-button-height-sm);
  min-width: var(--component-button-width-sm);
  border-radius: var(--component-button-border-radius-sm);
  border-width: var(--component-button-border-width-sm);
}

.quill-icon-button__size--md {
  min-height: var(--component-button-height-md);
  min-width: var(--component-button-width-md);
  border-radius: var(--component-button-border-radius-md);
  border-width: var(--component-button-border-width-sm);
}

.quill-icon-button__size--lg {
  min-height: var(--component-button-height-lg);
  min-width: var(--component-button-width-lg);
  border-radius: var(--component-button-border-radius-lg);
  border-width: var(--component-button-border-width-sm);
}

.quill-icon-button__size--xl {
  min-height: var(--component-button-height-xl);
  min-width: var(--component-button-width-xl);
  border-radius: var(--component-button-border-radius-xl);
  border-width: var(--component-button-border-width-md);
}

.quill-button {
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  outline-offset: 3px;
}

.quill-button:disabled {
  cursor: auto;
}

.quill-button__size--sm {
  padding-left: var(--component-button-spacing-padding-sm);
  padding-right: var(--component-button-spacing-padding-sm);
  height: var(--component-button-height-sm);
  border-radius: var(--component-button-border-radius-sm);
  gap: var(--component-button-spacing-gap-sm);
  border-width: var(--component-button-border-width-sm);
}

.quill-button__size--md {
  padding-left: var(--component-button-spacing-padding-md);
  padding-right: var(--component-button-spacing-padding-md);
  height: var(--component-button-height-md);
  border-radius: var(--component-button-border-radius-md);
  gap: var(--component-button-spacing-gap-md);
  border-width: var(--component-button-border-width-sm);
}

.quill-button__size--lg {
  padding-left: var(--component-button-spacing-padding-lg);
  padding-right: var(--component-button-spacing-padding-lg);
  height: var(--component-button-height-lg);
  border-radius: var(--component-button-border-radius-lg);
  gap: var(--component-button-spacing-gap-lg);
  border-width: var(--component-button-border-width-sm);
}

.quill-button__size--xl {
  padding-left: var(--component-button-spacing-padding-xl);
  padding-right: var(--component-button-spacing-padding-xl);
  height: var(--component-button-height-xl);
  border-radius: var(--component-button-border-radius-xl);
  gap: var(--component-button-spacing-gap-xl);
  border-width: var(--component-button-border-width-md);
}

.quill-button__transform {
  transition-property: transform;
  transition-duration: var(--core-motion-duration-200);
  transition-timing-function: ease-in-out;
}

.quill-button__transform-rotate {
  transform: rotate(180deg);
}

.quill-button__loader-icon {
  animation: spin 2s linear infinite;
}

@keyframes spin {
  0% {
    transform: rotate(0);
  }
  to {
    transform: rotate(360deg);
  }
}
.quill-button__white-bg-wrapper {
  background-color: var(--core-color-solid-slate-50);
  padding: 0;
  padding: initial;
  height: -moz-fit-content;
  height: fit-content;
  width: -moz-fit-content;
  width: fit-content;
}

.quill-button__full-width {
  width: 100%;
}

.quill-button-label {
  text-wrap: nowrap;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
@keyframes skeleton-pulse {
  0% {
    background-color: var(--semantic-color-monochrome-surface-normal-lowest);
  }
  50% {
    background-color: var(--semantic-color-monochrome-surface-normal-low);
  }
  to {
    background-color: var(--semantic-color-monochrome-surface-normal-lowest);
  }
}
.quill-loader__skeleton {
  display: flex;
  background-color: var(--semantic-color-monochrome-surface-normal-lowest);
}

.quill-loader__skeleton--animated {
  animation: skeleton-pulse var(--core-motion-duration-600) var(--motion-easing-inandout) infinite;
}

.quill-loader__skeleton--rounded {
  border-radius: var(--core-borderRadius-400);
}

.quill-loader__skeleton--circle {
  border-radius: 100%;
}

.quill-loader__skeleton--full-width {
  width: 100%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.quill-skeleton-container {
  display: flex;
  width: 100%;
  height: 100%;
}

.quill-skeleton-container__direction--column {
  flex-direction: column;
}

.quill-skeleton-container__direction--row {
  flex-direction: row;
  align-items: center;
}

.quill-skeleton-container__alignment--row-left {
  align-items: flex-start;
}

.quill-skeleton-container__alignment--row-center {
  align-items: center;
}

.quill-skeleton-container__alignment--row-right {
  align-items: flex-end;
}

.quill-skeleton-container__alignment--column-left {
  justify-content: flex-start;
}

.quill-skeleton-container__alignment--column-center {
  justify-content: center;
}

.quill-skeleton-container__alignment--column-right {
  justify-content: flex-end;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
:root {
  --temp-static-spacing-5: 5px;
  --temp-static-spacing-7: 7px;
  --temp-static-spacing-9: 9px;
  --temp-static-spacing-13: 13px;
  --temp-static-spacing-15: 15px;
  --temp-static-spacing-104: 104px;
  --temp-static-spacing-128: 128px;
  --temp-static-spacing-144: 144px;
  --temp-static-spacing-202: 202px;
  --temp-static-spacing-288: 288px;
  --temp-static-spacing-289: 289px;
  --temp-static-spacing-312: 312px;
  --temp-static-spacing-360: 360px;
}

.quill-link {
  display: inline-flex;
  gap: var(--core-borderRadius-400);
  text-decoration: none;
  cursor: pointer;
  align-items: center;
  color: var(--component-textIcon-normal-prominent);
}

.quill-link__color-black {
  color: var(--component-textIcon-normal-prominent);
}

.quill-link__color-white {
  color: var(--component-textIcon-inverse-prominent);
}

.quill-link--hover, .quill-link:active {
  -webkit-text-decoration: var(--core-fontDecoration-underline);
          text-decoration: var(--core-fontDecoration-underline);
}

.quill-link--disabled {
  pointer-events: none;
  opacity: var(--opacity-disabled);
}

.quill-link__icon-color-black {
  fill: var(--component-textIcon-normal-prominent);
}

.quill-link__icon-color-white {
  fill: var(--component-textIcon-inverse-prominent);
}

.quill-link__icon {
  display: inline-flex;
}

.quill-link__icon-size-caption {
  width: var(--core-borderRadius-400);
  height: var(--core-borderRadius-900);
}

.quill-link__icon-size-sm {
  width: var(--core-borderRadius-400);
  height: var(--core-borderRadius-1100);
}

.quill-link__icon-size-md {
  width: var(--core-borderRadius-500);
  height: var(--core-borderRadius-1200);
}

.quill-link__icon-size-lg {
  width: 13px;
  width: var(--temp-static-spacing-13);
  height: var(--core-borderRadius-1500);
}

.quill-link__icon-size-xl {
  width: 15px;
  width: var(--temp-static-spacing-15);
  height: var(--core-borderRadius-1800);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
:root {
  --temp-static-spacing-5: 5px;
  --temp-static-spacing-7: 7px;
  --temp-static-spacing-9: 9px;
  --temp-static-spacing-13: 13px;
  --temp-static-spacing-15: 15px;
  --temp-static-spacing-104: 104px;
  --temp-static-spacing-128: 128px;
  --temp-static-spacing-144: 144px;
  --temp-static-spacing-202: 202px;
  --temp-static-spacing-288: 288px;
  --temp-static-spacing-289: 289px;
  --temp-static-spacing-312: 312px;
  --temp-static-spacing-360: 360px;
}

.quill-input__container {
  display: flex;
  width: 100%;
  flex-direction: column;
  gap: var(--component-field-spacing-gap-xs);
}

.quill-input__container input[type=number]::-webkit-outer-spin-button, .quill-input__container input[type=number]::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.quill-input__container input[type=number] {
  -moz-appearance: textfield;
  -ms-appearance: textfield;
}

.quill-input__container .message__container {
  display: flex;
  gap: var(--component-field-spacing-gap-sm);
  justify-content: space-between;
}

.quill-input__container .message__container--lg, .quill-input__container .message__container--md {
  padding-left: var(--component-field-spacing-padding-md);
  padding-right: var(--component-field-spacing-padding-md);
}

.quill-input__container .message__container--sm {
  padding-left: var(--component-field-spacing-padding-sm);
  padding-right: var(--component-field-spacing-padding-sm);
}

.quill-input__container .message__container__password_validation {
  display: flex;
  flex-direction: column;
  gap: var(--semantic-spacing-gap-md);
}

.quill-input__container .message__container__status--neutral {
  color: var(--component-textIcon-normal-subtle);
}

.quill-input__container .message__container__status--success {
  color: var(--component-textIcon-statusNormal-success);
}

.quill-input__container .message__container__status--error {
  color: var(--component-textIcon-statusNormal-danger);
}

.quill-input__container .message__container__disabled {
  color: var(--component-textIcon-normal-subtle);
}

.quill-input__container .message__container__text {
  font-size: var(--semantic-typography-caption-regular-default-fontSize);
  line-height: var(--semantic-typography-caption-regular-default-lineHeight);
  font-weight: var(--semantic-typography-caption-regular-default-fontWeight);
  font-family: var(--semantic-typography-caption-regular-default-fontFamily);
}

.quill-input__container .icon_wrapper {
  background-color: transparent;
  border: none;
  padding: var(--core-spacing-50);
  display: flex;
  margin: auto;
}

.quill-input-icons__wrapper {
  display: flex;
  width: 100%;
  gap: var(--component-field-spacing-gap-sm);
}

.quill-input__rotate {
  transition-property: transform;
  transition-timing-function: var(--core-motion-ease-400);
  transition-duration: var(--core-motion-duration-200);
  transform: rotate(0);
}

.quill-input__rotate[data-state=open] {
  transform: rotate(180deg);
}

.quill-input__icon {
  margin: auto;
  fill: var(--component-textIcon-normal-prominent);
}

.quill-input-label__wrapper {
  display: flex;
  position: relative;
  flex-grow: 1;
}

.quill-input-label__wrapper[\:has\(input\[type\%3Dselect\]\)] {
  z-index: -1;
}

.quill-input-label__wrapper:has(input[type=select]) {
  z-index: -1;
}

.quill-input-label__wrapper[focus-within][\:has\(label\)] {
  padding-top: var(--core-spacing-600);
}

.quill-input-label__wrapper[focus-within]:has(label) {
  padding-top: var(--core-spacing-600);
}

.quill-input-label__wrapper[focus-within][\:has\(label\)] {
  padding-top: var(--core-spacing-600);
}

.quill-input-label__wrapper:focus-within[\:has\(label\)] {
  padding-top: var(--core-spacing-600);
}

.quill-input-label__wrapper:focus-within:has(label) {
  padding-top: var(--core-spacing-600);
}

.quill-input-label__wrapper[focus-within] > .label {
  top: var(--core-spacing-50);
}

.quill-input-label__wrapper:focus-within > .label {
  top: var(--core-spacing-50);
}

.quill-input-label__wrapper[focus-within] > .label__status--neutral {
  color: var(--component-field-label-color-focus);
}

.quill-input-label__wrapper:focus-within > .label__status--neutral {
  color: var(--component-field-label-color-focus);
}

.quill-input-label__wrapper--has-value[\:has\(label\)] {
  top: var(--core-spacing-50);
  padding-top: var(--core-spacing-600);
}

.quill-input-label__wrapper--has-value:has(label) {
  top: var(--core-spacing-50);
  padding-top: var(--core-spacing-600);
}

.quill-input-label__wrapper--has-value > .label {
  top: var(--core-spacing-50);
}

.quill-input-no-label__wrapper {
  display: flex;
  align-items: center;
  width: 100%;
}

.quill-input-label__label {
  margin: auto var(--core-spacing-200) auto;
}

.quill-input-label__label--right {
  margin-left: var(--core-spacing-200);
}

.quill-input__wrapper {
  width: 100%;
  align-items: center;
  font-family: var(--core-fontFamily-ibmPlex-sans);
  overflow: hidden;
  position: relative;
  display: flex;
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
}

.quill-input__wrapper[\:has\(input\:disabled\)] {
  cursor: not-allowed;
}

.quill-input__wrapper:has(input:disabled) {
  cursor: not-allowed;
}

.quill-input__wrapper[\:has\(input\:disabled\)] .label {
  color: var(--component-field-label-color-disabled);
}

.quill-input__wrapper:has(input:disabled) .label {
  color: var(--component-field-label-color-disabled);
}

.quill-input__wrapper[\:has\(input\:disabled\)] svg {
  fill: var(--component-field-label-color-disabled);
}

.quill-input__wrapper:has(input:disabled) svg {
  fill: var(--component-field-label-color-disabled);
}

.quill-input__wrapper:hover {
  transition-property: border;
  transition-timing-function: var(--core-motion-ease-400);
  transition-duration: var(--core-motion-duration-200);
}

.quill-input__wrapper__variant--outline {
  z-index: 1;
  background-color: var(--component-field-bg-outline-default);
  border: var(--component-field-border-width) solid var(--component-field-border-color-default);
}

.quill-input__wrapper__variant--outline[\:has\(input\:disabled\)] {
  border-color: var(--component-field-border-color-default);
}

.quill-input__wrapper__variant--outline:has(input:disabled) {
  border-color: var(--component-field-border-color-default);
}

.quill-input__wrapper__variant--outline--neutral:hover {
  border-color: var(--component-field-border-color-hover);
}

.quill-input__wrapper__variant--outline--neutral[focus-within], .quill-input__wrapper__variant--outline--neutral:focus {
  border-color: var(--component-field-border-color-focus);
}

.quill-input__wrapper__variant--outline--neutral:focus-within, .quill-input__wrapper__variant--outline--neutral:focus {
  border-color: var(--component-field-border-color-focus);
}

.quill-input__wrapper__variant--outline--success {
  border-color: var(--component-field-border-color-successDefault);
}

.quill-input__wrapper__variant--outline--success:hover {
  border-color: var(--component-field-border-color-successHover);
}

.quill-input__wrapper__variant--outline--success[focus-within], .quill-input__wrapper__variant--outline--success:focus {
  border-color: var(--component-field-border-color-successFocus);
}

.quill-input__wrapper__variant--outline--success:focus-within, .quill-input__wrapper__variant--outline--success:focus {
  border-color: var(--component-field-border-color-successFocus);
}

.quill-input__wrapper__variant--outline--error {
  border-color: var(--component-field-border-color-failDefault);
}

.quill-input__wrapper__variant--outline--error:hover {
  border-color: var(--component-field-border-color-failHover);
}

.quill-input__wrapper__variant--outline--error[focus-within], .quill-input__wrapper__variant--outline--error:focus {
  border-color: var(--component-field-border-color-failFocus);
}

.quill-input__wrapper__variant--outline--error:focus-within, .quill-input__wrapper__variant--outline--error:focus {
  border-color: var(--component-field-border-color-failFocus);
}

.quill-input__wrapper__variant--fill {
  border-right: var(--component-field-border-width) solid transparent;
  border-left: var(--component-field-border-width) solid transparent;
}

.quill-input__wrapper__variant--fill[\:has\(input\:disabled\)] {
  background-color: var(--component-field-bg-fill-default);
}

.quill-input__wrapper__variant--fill:has(input:disabled) {
  background-color: var(--component-field-bg-fill-default);
}

.quill-input__wrapper__variant--fill--neutral {
  background-color: var(--component-field-bg-fill-default);
}

.quill-input__wrapper__variant--fill--neutral:hover {
  background-color: var(--component-field-bg-fill-hover);
}

.quill-input__wrapper__variant--fill--neutral[focus-within], .quill-input__wrapper__variant--fill--neutral:focus {
  border: var(--component-field-border-width) solid var(--component-field-border-color-focus);
  background-color: var(--component-field-bg-fill-focus);
}

.quill-input__wrapper__variant--fill--neutral:focus-within, .quill-input__wrapper__variant--fill--neutral:focus {
  border: var(--component-field-border-width) solid var(--component-field-border-color-focus);
  background-color: var(--component-field-bg-fill-focus);
}

.quill-input__wrapper__variant--fill--success {
  background-color: var(--component-field-bg-fill-successDefault);
}

.quill-input__wrapper__variant--fill--success:hover {
  background-color: var(--component-field-bg-fill-successHover);
}

.quill-input__wrapper__variant--fill--success[focus-within], .quill-input__wrapper__variant--fill--success:focus {
  border: var(--component-field-border-width) solid var(--component-field-border-color-successFocus);
  background-color: var(--component-field-bg-fill-successFocus);
}

.quill-input__wrapper__variant--fill--success:focus-within, .quill-input__wrapper__variant--fill--success:focus {
  border: var(--component-field-border-width) solid var(--component-field-border-color-successFocus);
  background-color: var(--component-field-bg-fill-successFocus);
}

.quill-input__wrapper__variant--fill--error {
  background-color: var(--component-field-bg-fill-failDefault);
}

.quill-input__wrapper__variant--fill--error:hover {
  background-color: var(--component-field-bg-fill-failHover);
}

.quill-input__wrapper__variant--fill--error[focus-within], .quill-input__wrapper__variant--fill--error:focus {
  border: var(--component-field-border-width) solid var(--component-field-border-color-failFocus);
  background-color: var(--component-field-bg-fill-failFocus);
}

.quill-input__wrapper__variant--fill--error:focus-within, .quill-input__wrapper__variant--fill--error:focus {
  border: var(--component-field-border-width) solid var(--component-field-border-color-failFocus);
  background-color: var(--component-field-bg-fill-failFocus);
}

.quill-input__wrapper__size--sm {
  padding-left: var(--component-field-spacing-padding-sm);
  padding-right: var(--component-field-spacing-padding-sm);
  height: var(--component-field-height-sm);
  border-radius: var(--component-field-border-radius-sm);
  gap: var(--component-field-spacing-gap-sm);
}

.quill-input__wrapper__size--md {
  padding-left: var(--component-field-spacing-padding-md);
  padding-right: var(--component-field-spacing-padding-md);
  height: var(--size-generic-lg);
  border-radius: var(--component-field-border-radius-md);
  gap: var(--core-spacing-800);
}

.quill-input__wrapper__size--lg {
  padding-left: var(--component-field-spacing-padding-md);
  padding-right: var(--component-field-spacing-padding-md);
  height: var(--component-field-height-md);
  border-radius: var(--component-field-border-radius-md);
  gap: var(--core-spacing-800);
}

.quill-input__wrapper .input {
  width: 100%;
  background-color: transparent;
  border: none;
  cursor: pointer;
}

.quill-input__wrapper .input:disabled {
  cursor: not-allowed;
}

.quill-input__wrapper .input:disabled + .label {
  cursor: not-allowed;
}

.quill-input__wrapper .input:focus {
  outline: 2px solid transparent;
  outline-offset: 2px;
  color: var(--component-field-label-color-focus);
}

.quill-input__wrapper .input:hover {
  color: var(--component-field-label-color-default);
}

.quill-input__wrapper .input::-moz-placeholder {
  color: var(--component-field-placeholder-color);
}

.quill-input__wrapper .input::placeholder {
  color: var(--component-field-placeholder-color);
}

.quill-input__wrapper .input:not(placeholder-shown) {
  color: var(--component-field-label-color-default);
}

.quill-input__wrapper .input:disabled {
  color: var(--component-field-label-color-disabled);
}

.quill-input__wrapper .input[\:has\(~\%20label\)] {
  font-size: var(--core-fontSize-100);
}

.quill-input__wrapper .input:has(~ label) {
  font-size: var(--core-fontSize-100);
}

.quill-input__wrapper .input[\:has\(~\%20label\)]::-moz-placeholder {
  color: transparent;
}

.quill-input__wrapper .input[\:has\(~\%20label\)]::placeholder {
  color: transparent;
}

.quill-input__wrapper .input:has(~ label)::-moz-placeholder {
  color: transparent;
}

.quill-input__wrapper .input:has(~ label)::placeholder {
  color: transparent;
}

.quill-input__wrapper .input[\:has\(~\%20label\)]:focus::-moz-placeholder {
  color: var(--component-field-label-color-disabled);
}

.quill-input__wrapper .input[\:has\(~\%20label\)]:focus::placeholder {
  color: var(--component-field-label-color-disabled);
}

.quill-input__wrapper .input:has(~ label):focus::-moz-placeholder {
  color: var(--component-field-label-color-disabled);
}

.quill-input__wrapper .input:has(~ label):focus::placeholder {
  color: var(--component-field-label-color-disabled);
}

.quill-input__wrapper .input::-webkit-search-decoration, .quill-input__wrapper .input::-webkit-search-cancel-button, .quill-input__wrapper .input::-webkit-search-results-button, .quill-input__wrapper .input::-webkit-search-results-decoration, .quill-input__wrapper .input::-ms-clear, .quill-input__wrapper .input::-ms-reveal {
  display: none;
}

.quill-input__wrapper .input::-ms-clear, .quill-input__wrapper .input::-ms-reveal {
  width: 0;
  height: 0;
}

.quill-input__wrapper .input__align--left {
  text-align: left;
}

.quill-input__wrapper .input__align--center[\:not-has\(~\%20label\)] {
  text-align: center;
}

.quill-input__wrapper .input__align--center:not(:has(~ label)) {
  text-align: center;
}

.quill-input__wrapper .input__size--sm {
  font-size: var(--semantic-typography-body-sm-regular-default-fontSize);
  line-height: var(--semantic-typography-body-sm-regular-default-lineHeight);
}

.quill-input__wrapper .input__size--md, .quill-input__wrapper .input__size--lg {
  font-size: var(--semantic-typography-body-md-regular-default-fontSize);
  line-height: var(--semantic-typography-body-md-regular-default-lineHeight);
}

.quill-input__wrapper .label {
  position: absolute;
  transition-property: all;
  transition-timing-function: var(--core-motion-ease-400);
  transition-duration: var(--core-motion-duration-200);
  display: flex;
  align-items: center;
  width: 100%;
  cursor: pointer;
  left: var(--core-spacing-50);
  gap: var(--semantic-spacing-gap-sm);
}

.quill-input__wrapper .label__status--neutral {
  color: var(--component-field-label-color-default);
}

.quill-input__wrapper .label__status--success {
  color: var(--component-field-label-color-success);
}

.quill-input__wrapper .label__status--error {
  color: var(--component-field-label-color-fail);
}

.quill-input__wrapper .label-field-marker__required--true {
  color: var(--core-color-solid-red-900);
}

.quill-input__wrapper .label-field-marker__required--false {
  color: var(--component-textIcon-normal-disabled);
}

.quill-input__wrapper .peer:-moz-placeholder-shown + .label {
  line-height: var(--core-lineHeight-300);
  font-size: var(--core-fontSize-100);
  height: 100%;
}

.quill-input__wrapper .peer:placeholder-shown + .label {
  line-height: var(--core-lineHeight-300);
  font-size: var(--core-fontSize-100);
  height: 100%;
}

.quill-input__wrapper .peer:focus + .label {
  line-height: var(--core-lineHeight-100);
  font-size: var(--core-fontSize-50);
  height: var(--core-size-600);
  gap: var(--semantic-spacing-gap-sm);
}

.quill-input__wrapper .peer:focus + .label-field-marker {
  font-size: var(--semantic-typography-caption-regular-default-fontSize);
}

.quill-input__wrapper .peer:not(placeholder-shown) + .label {
  line-height: var(--core-lineHeight-100);
  font-size: var(--core-fontSize-50);
  height: var(--core-size-600);
}

.quill-input__wrapper .peer:not(placeholder-shown) + .label-field-marker {
  font-size: var(--semantic-typography-body-md-regular-default-fontSize);
}

.quill-input__wrapper .status-icon--neutral {
  fill: var(--component-textIcon-normal-default);
}

.quill-input__wrapper .status-icon--success {
  fill: var(--component-textIcon-statusNormal-success);
}

.quill-input__wrapper .status-icon--error {
  fill: var(--component-textIcon-statusNormal-danger);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.action-sheet--content {
  padding: var(--component-actionSheet-spacing-padding-md);
  flex-grow: 1;
  overflow-y: auto;
}

@media (min-width: 1024px) {
  .action-sheet--content {
    padding: var(--component-actionSheet-spacing-padding-lg);
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.quill-action-sheet--handle-bar {
  z-index: 1;
  display: flex;
  touch-action: none;
  align-items: center;
  justify-content: center;
  padding-top: var(--component-actionSheet-spacing-padding-sm);
  padding-bottom: var(--component-actionSheet-spacing-padding-sm);
  cursor: pointer;
}

[dir="ltr"] .quill-action-sheet--handle-bar:before {
  left: 0;
}

[dir="rtl"] .quill-action-sheet--handle-bar:before {
  right: 0;
}

.quill-action-sheet--handle-bar:before {
  content: "";
  display: block;
  height: var(--core-size-1200);
  width: 100%;
  position: absolute;
  top: 0;
}

@media (min-width: 1024px) {
  .quill-action-sheet--handle-bar {
    display: none;
  }
}
.quill-action-sheet--handle-bar--line {
  height: var(--component-handle-height);
  width: var(--component-handle-width);
  border-radius: var(--component-handle-border-radius);
  background-color: var(--component-handle-bg);
}

.quill-action-sheet--handle-bar--absolute {
  position: absolute;
  width: 100%;
}

.quill-action-sheet--handle-bar--sticky {
  position: sticky;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.quill-action-sheet--portal {
  position: fixed;
  top: var(--semantic-spacing-general-none);
  right: var(--semantic-spacing-general-none);
  bottom: var(--semantic-spacing-general-none);
  left: var(--semantic-spacing-general-none);
  transition: all var(--core-motion-duration-200) var(--core-motion-ease-400);
}

.quill-action-sheet--portal--wrapper {
  pointer-events: none;
  z-index: 150;
  display: flex;
  -webkit-user-select: none;
  -moz-user-select: none;
       user-select: none;
  align-items: flex-end;
  justify-content: center;
  overflow-x: hidden;
}

.quill-action-sheet--portal__variant--modal {
  position: fixed;
  z-index: 150;
  top: var(--semantic-spacing-general-none);
  right: var(--semantic-spacing-general-none);
  bottom: var(--semantic-spacing-general-none);
  left: var(--semantic-spacing-general-none);
  background-color: var(--core-color-opacity-black-600);
  pointer-events: auto;
}

.quill-action-sheet--root {
  pointer-events: auto;
  box-shadow: var(--core-elevation-shadow-540);
  touch-action: none;
  position: relative;
  z-index: 20;
  margin-left: auto;
  margin-right: auto;
  display: flex;
  max-height: 90dvh;
  width: 100%;
  max-width: 800px;
  flex-direction: column;
  overflow-y: auto;
  border-top-left-radius: var(--semantic-borderRadius-lg);
  border-top-right-radius: var(--semantic-borderRadius-lg);
  background-color: var(--component-actionSheet-bg);
  transition: all var(--motion-easing-inandout) var(--core-motion-duration-200);
}

@media (min-width: 1024px) {
  .quill-action-sheet--root {
    max-width: 360px;
    border-radius: var(--semantic-spacing-general-none);
    max-height: 100vh;
  }
}
.quill-action-sheet--root--enter, .quill-action-sheet--root--exit {
  transform: translateY(100%);
}

@media (min-width: 1024px) {
  .quill-action-sheet--root--enter.position--right {
    transform: translate(100%);
  }
  .quill-action-sheet--root--exit.position--right {
    transform: translate(100%);
  }
}
@media (min-width: 1024px) {
  .quill-action-sheet--root--enter.position--left {
    transform: translate(-100%);
  }
  .quill-action-sheet--root--exit.position--left {
    transform: translate(-100%);
  }
}
.quill-action-sheet--root--enter-done {
  transform: translate(0);
  transition: all var(--motion-easing-inandout) var(--core-motion-duration-200);
}

@media (min-width: 1024px) {
  .quill-action-sheet--root__position--left {
    margin-left: var(--semantic-spacing-general-none);
  }
}
@media (min-width: 1024px) {
  .quill-action-sheet--root__position--right {
    margin-right: var(--semantic-spacing-general-none);
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.quill-steps-container {
  display: flex;
  flex-direction: column;
}

.step {
  display: flex;
  gap: 1rem;
}

.step-circle {
  display: flex;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  border-radius: var(--component-stepper-node-border-radius);
  border: var(--component-stepper-node-border-width) solid var(--component-stepper-node-border-color-active);
  margin: var(--component-stepper-spacing-3xs) 0;
}

.step-circle__size-sm {
  width: var(--component-stepper-node-size-sm);
  height: var(--component-stepper-node-size-sm);
}

.step-circle__size-md {
  width: var(--component-stepper-node-size-md);
  height: var(--component-stepper-node-size-md);
}

.step-circle__size-lg {
  width: var(--component-stepper-node-size-lg);
  height: var(--component-stepper-node-size-lg);
}

.step-circle--active {
  background-color: var(--component-stepper-node-border-color-active);
}

.step-circle--inactive {
  background: none;
}

.step-circle--disabled {
  border-color: var(--component-stepper-node-border-color-incomplete);
}

.step-circle__pointer {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.step-circle__label--disabled {
  color: var(--component-stepper-node-border-color-incomplete) !important;
}

.step-circle__label-sm {
  margin-top: calc((var(--component-stepper-node-size-sm) + var(--component-stepper-spacing-3xs) * 2 - var(--semantic-typography-body-sm-bold-default-lineHeight)) / 2) !important;
}

.step-circle__label-md {
  margin-top: calc((var(--component-stepper-node-size-md) + var(--component-stepper-spacing-3xs) * 2 - var(--semantic-typography-body-md-bold-default-lineHeight)) / 2) !important;
}

.step-circle__label-lg {
  margin-top: calc((var(--component-stepper-node-size-lg) + var(--component-stepper-spacing-3xs) * 2 - var(--semantic-typography-body-lg-bold-default-lineHeight)) / 2) !important;
}

.step-line {
  width: var(--component-stepper-track-width);
  background-color: var(--component-stepper-node-border-color-active);
}

.step-line--disabled {
  background-color: var(--component-stepper-node-border-color-incomplete);
}

.step-line--size-sm {
  height: calc((var(--component-stepper-track-height-sm) + var(--component-stepper-track-height-sm)) * 2);
}

.step-line--size-md {
  height: calc(var(--component-stepper-track-height-md) + var(--component-stepper-track-height-md));
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
html.light {
  --switch-background-color: var(--core-color-opacity-black-200);
  --switch-active-color: var(--core-color-opacity-black-400);
  --switch-enabled: var(--core-color-opacity-green-600);
  --switch-active-enabled-color: var(--core-color-solid-green-900);
  --switch-hover-enabled-color: var(--core-color-opacity-green-800);
}

html.dark {
  --switch-background-color: var(--core-color-opacity-white-400);
  --switch-active-color: var(--core-color-opacity-white-200);
  --switch-enabled: var(--core-color-opacity-green-800);
  --switch-active-enabled-color: var(--core-color-opacity-green-400);
  --switch-hover-enabled-color: var(--core-color-opacity-green-600);
}

.toggle-switch {
  border: none;
  padding: var(--core-spacing-50);
  background-color: transparent;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  -webkit-user-select: none;
  -moz-user-select: none;
       user-select: none;
  width: var(--core-size-2400);
  height: var(--core-size-1400);
  border-width: var(--core-borderRadius-100);
}

.toggle-switch.focus-visible {
  outline: var(--core-borderRadius-100) solid var(--core-color-solid-blue-700);
  border-radius: var(--semantic-borderRadius-lg);
}

.toggle-switch:focus-visible {
  outline: var(--core-borderRadius-100) solid var(--core-color-solid-blue-700);
  border-radius: var(--semantic-borderRadius-lg);
}

.toggle-switch__slider {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  width: var(--core-size-2200);
  height: var(--size-generic-sm);
  background-color: var(--switch-background-color);
  border-radius: var(--semantic-borderRadius-lg);
  transition: background-color var(--core-motion-duration-200) ease;
  cursor: pointer;
  position: relative;
}

.toggle-switch__slider:hover {
  background-color: var(--component-selectionControl-icon-disabled);
}

.toggle-switch__slider:active {
  background-color: var(--switch-active-color);
}

.toggle-switch__slider.enabled {
  background-color: var(--switch-enabled);
}

.toggle-switch__slider.enabled:hover {
  background-color: var(--switch-hover-enabled-color);
}

.toggle-switch__slider.enabled:active {
  background-color: var(--switch-active-enabled-color);
}

.toggle-switch__knob {
  position: absolute;
  width: var(--core-size-1000);
  height: var(--core-size-1000);
  border-radius: var(--core-borderRadius-2500);
  background-color: var(--core-color-solid-slate-50);
  transition: left var(--core-motion-duration-200) ease;
  top: 50%;
  transform: translateY(-50%);
  left: var(--core-spacing-100);
}

.toggle-switch__knob.enabled, .toggle-switch .enabled .toggle-switch__knob {
  left: calc(100% - var(--core-size-2200) / 2);
}

.toggle-switch:disabled {
  pointer-events: none;
}

.toggle-switch:disabled .toggle-switch__knob {
  background-color: var(--core-color-opacity-white-400);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
:root {
  --temp-static-spacing-5: 5px;
  --temp-static-spacing-7: 7px;
  --temp-static-spacing-9: 9px;
  --temp-static-spacing-13: 13px;
  --temp-static-spacing-15: 15px;
  --temp-static-spacing-104: 104px;
  --temp-static-spacing-128: 128px;
  --temp-static-spacing-144: 144px;
  --temp-static-spacing-202: 202px;
  --temp-static-spacing-288: 288px;
  --temp-static-spacing-289: 289px;
  --temp-static-spacing-312: 312px;
  --temp-static-spacing-360: 360px;
}

.segmented-control-single {
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: 1fr;
  align-items: stretch;
  width: -moz-fit-content;
  width: fit-content;
  height: -moz-fit-content;
  height: fit-content;
  background-color: var(--semantic-color-monochrome-surface-normal-lowest);
  -webkit-tap-highlight-color: transparent;
}

.segmented-control-single .item {
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  position: relative;
  z-index: 2;
  min-width: 0;
  text-align: center;
  background-color: transparent;
  border: none;
  outline: none;
}

.segmented-control-single .item * {
  z-index: 2;
}

.segmented-control-single .item:disabled {
  opacity: var(--core-opacity-300);
  cursor: not-allowed;
  pointer-events: none;
}

.segmented-control-single .item.focused, .segmented-control-single .item.focused:before {
  box-shadow: 0 0 0 var(--borderWidth-xs) var(--core-color-solid-blue-700) inset;
}

.segmented-control-single .item:hover:not(:disabled) {
  background-color: var(--component-segmentedControl-bg-single-item-hover);
}

.segmented-control-single .item:active:not(:disabled):not(.selected), .segmented-control-single .item:active:not(:disabled):not(.animated):before {
  box-shadow: none;
  box-shadow: initial;
  background-color: var(--component-segmentedControl-bg-single-item-active);
}

.segmented-control-single .item.selected:not(:disabled) {
  background: var(--component-segmentedControl-bg-single-item-selected);
  color: var(--component-segmentedControl-label-single-color-selected);
}

.segmented-control-single .item.animated:before {
  content: "";
  position: absolute;
  background-color: var(--component-segmentedControl-bg-single-item-selected);
  width: 100%;
  min-height: 100%;
  animation: var(--core-motion-duration-200) var(--motion-easing-inandout) slide-in;
  top: 0;
  left: 0;
  border-radius: inherit;
  z-index: 1;
}

.segmented-control-single .item .icon {
  display: flex;
  align-items: center;
  justify-content: center;
}

.segmented-control-single .item .icon svg {
  fill: var(--component-segmentedControl-icon-single-default);
}

.segmented-control-single .item.selected:not(:disabled) *, .segmented-control-single .item.animated * {
  color: var(--component-segmentedControl-label-single-color-selected);
}

.segmented-control-single .item.selected:not(:disabled) svg, .segmented-control-single .item.animated svg {
  fill: var(--component-segmentedControl-icon-single-default);
}

.segmented-control-single--has-container-width {
  width: inherit;
  min-width: -moz-fit-content;
  min-width: fit-content;
}

.segmented-control-single--has-container-width .item {
  flex: 1;
}

.segmented-control-single--sm {
  min-height: var(--size-generic-lg);
  padding: var(--semantic-spacing-general-xs);
  border-radius: var(--semantic-borderRadius-md);
}

.segmented-control-single--sm .item {
  min-height: var(--size-generic-md);
  padding: 5px var(--semantic-spacing-general-sm) 5px var(--semantic-spacing-general-sm);
  padding: var(--temp-static-spacing-5) var(--semantic-spacing-general-sm) var(--temp-static-spacing-5) var(--semantic-spacing-general-sm);
  gap: var(--semantic-spacing-gap-sm);
  border-radius: var(--semantic-borderRadius-sm);
}

.segmented-control-single--sm .item .icon {
  width: var(--size-generic-sm);
}

.segmented-control-single--md {
  min-height: var(--size-generic-2xl);
  padding: var(--semantic-spacing-general-sm);
  border-radius: var(--semantic-borderRadius-lg);
}

.segmented-control-single--md .item {
  min-height: var(--size-generic-lg);
  padding: var(--semantic-spacing-general-sm) var(--semantic-spacing-general-md) var(--semantic-spacing-general-sm) var(--semantic-spacing-general-md);
  gap: var(--semantic-spacing-gap-md);
  border-radius: var(--semantic-borderRadius-md);
}

.segmented-control-single--lg {
  min-height: var(--size-generic-4xl);
  padding: var(--core-spacing-600);
  border-radius: var(--semantic-borderRadius-xl);
}

.segmented-control-single--lg .item {
  min-height: var(--size-generic-xl);
  padding: 9px var(--semantic-spacing-general-lg) 9px var(--semantic-spacing-general-lg);
  padding: var(--temp-static-spacing-9) var(--semantic-spacing-general-lg) var(--temp-static-spacing-9) var(--semantic-spacing-general-lg);
  gap: var(--core-spacing-600);
  border-radius: var(--core-borderRadius-600);
}

@keyframes slide-in {
  0% {
    transform: translate(var(--x));
  }
  to {
    transform: translate(0);
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.section-message {
  display: flex;
  padding: var(--semantic-spacing-general-md);
  gap: var(--semantic-spacing-gap-md);
  background-color: var(--core-color-opacity-black-75);
  border-radius: var(--core-borderRadius-800);
}

.section-message--info {
  background-color: var(--core-color-opacity-blue-100);
}

.section-message--success {
  background-color: var(--core-color-opacity-green-100);
}

.section-message--danger {
  background-color: var(--core-color-opacity-red-100);
}

.section-message--warning {
  background-color: var(--core-color-opacity-yellow-100);
}

.section-message-content {
  display: flex;
  flex-direction: column;
  gap: var(--semantic-spacing-gap-lg);
}

.section-message-content .title-and-message {
  display: flex;
  flex-direction: column;
  gap: var(--semantic-spacing-gap-md);
}

.section-message-content .title-and-message p {
  white-space: pre-wrap;
  word-break: break-word;
}

.section-message-links {
  display: flex;
  gap: var(--semantic-spacing-gap-lg);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.variant__number {
  border: none;
  display: inline-flex;
  flex-direction: column;
  cursor: pointer;
  justify-content: center;
  position: relative;
  align-items: center;
  height: var(--component-pagination-height-number);
  width: var(--component-pagination-width-number);
  border-radius: var(--component-pagination-border-radius-button);
  background-color: transparent;
  background-color: initial;
}

.variant__number:hover {
  background-color: var(--component-pagination-bg-hover);
}

.variant__number:active {
  background-color: var(--component-pagination-bg-active);
}

.variant__number[aria-current=true]:not(:active):not(hover) {
  background-color: var(--component-pagination-bg-selected);
}

.variant__bullet {
  padding: var(--core-spacing-50);
  border: none;
  width: var(--component-pagination-width-bullet);
  height: var(--component-pagination-height-bullet);
  border-radius: var(--component-pagination-border-radius-bullet);
  position: relative;
  background-color: var(--component-pagination-bg-default);
  cursor: pointer;
}

.variant__bullet:hover {
  background-color: var(--component-pagination-bg-hover);
}

.variant__bullet:active {
  background-color: var(--component-pagination-bg-active);
}

.variant__bullet[aria-current=true] {
  background-color: var(--component-pagination-bg-selected);
}

.hidden_pages {
  border: none;
  padding: var(--core-spacing-50);
  background-color: transparent;
  height: var(--component-pagination-height-number);
  width: var(--component-pagination-width-number);
  border-radius: var(--component-pagination-border-radius-button);
}

.hidden_pages-dots {
  margin: var(--core-spacing-50);
  display: flex;
  justify-content: center;
  align-items: center;
  color: var(--component-pagination-icon-disabled);
  font-size: var(--core-size-700);
  width: var(--component-pagination-width-number);
  height: var(--core-size-1100);
  text-align: center;
}

.number-text {
  color: var(--component-pagination-label-color-default);
}

.number-text[aria-current=true] {
  font-weight: 700;
  color: var(--component-pagination-label-color-selected);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
@keyframes rotating {
  0% {
    transform: rotate(0);
  }
  to {
    transform: rotate(360deg);
  }
}
.quill-loader__spinner {
  animation: rotating var(--core-motion-duration-600) var(--motion-easing-linear) infinite;
  fill: var(--component-textIcon-normal-prominent);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.quill-breadcrumb--container {
  display: flex;
  overflow: visible;
  gap: var(--component-breadcrumb-spacing-gap-sm);
  align-items: center;
}

@media (min-width: 768px) {
  .quill-breadcrumb--container {
    gap: var(--component-breadcrumb-spacing-gap-md);
  }
}
.quill-breadcrumb--dropdown {
  position: relative;
  right: -18px;
  margin-left: -18px;
  width: 14px;
  opacity: 0;
}

.quill-breadcrumb--item {
  display: flex;
  align-items: center;
  white-space: nowrap;
  text-decoration: none;
  color: var(--component-textIcon-normal-prominent);
}

.quill-breadcrumb--item--disabled {
  pointer-events: none;
  opacity: var(--opacity-disabled);
}

.quill-breadcrumb--item:active {
  -webkit-text-decoration: var(--core-fontDecoration-underline);
          text-decoration: var(--core-fontDecoration-underline);
}

.quill-breadcrumb--chevron {
  display: none;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.quill-custom-dropdown__container {
  position: relative;
  display: inline-block;
}

.quill-custom-dropdown__input label {
  pointer-events: none;
  cursor: text;
}

.quill-custom-dropdown__content {
  position: absolute;
  top: 100%;
  z-index: 100;
  width: 100%;
}

.quill-custom-dropdown__content-align--left {
  left: 0;
  right: auto;
}

.quill-custom-dropdown__content-align--right {
  right: 0;
  left: auto;
}

.datepicker__input label {
  pointer-events: none;
  cursor: text;
}

.datepicker__wrapper {
  position: relative;
  max-width: 360px;
  max-width: var(--temp-static-spacing-360);
}

.datepicker__wrapper--open {
  z-index: 99;
}

.datepicker__wrapper--disabled {
  pointer-events: none;
}

.datepicker__container {
  background-color: var(--component-dropdownList-bg);
}

@media (min-width: 768px) {
  .datepicker__container {
    position: absolute;
    border-radius: var(--core-borderRadius-400);
    box-shadow: var(--semantic-elevation-shadow-card-hover);
    margin-top: var(--core-size-200);
    width: 312px;
    width: var(--temp-static-spacing-312);
  }
}
.datepicker-dropdown__menu {
  transform-origin: top;
  transform: scaleY(0);
  transition: transform var(--core-motion-duration-200) var(--core-motion-ease-400);
  width: inherit;
  display: flex;
}

.datepicker-dropdown__menu--open {
  transform: scaleY(1);
}

.datepicker-dropdown__menu--close {
  transform: scaleY(0.5);
}

.datepicker-dropdown__menu--center {
  justify-content: center;
}

.dropdown__wrapper {
  position: relative;
  max-width: 360px;
}

.dropdown__wrapper ul {
  margin: var(--core-spacing-50);
  padding: var(--core-spacing-50);
}

.dropdown__container {
  position: absolute;
  background-color: var(--component-dropdownList-bg);
  border-radius: var(--core-borderRadius-400);
  box-shadow: var(--semantic-elevation-shadow-card-hover);
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  margin-top: var(--core-size-200);
  width: 100%;
  overflow-y: auto;
}

.dropdown__container--height {
  max-height: 420px;
}

.dropdown__container--size-sm {
  padding: var(--core-spacing-200);
}

.dropdown__container--size-md, .dropdown__container--size-lg {
  padding: var(--core-spacing-400);
}

.dropdown__item--active {
  background-color: var(--component-dropdownItem-bg-active);
}

.deriv-dropdown__menu {
  transform-origin: top;
  transform: scaleY(0);
  transition: transform var(--core-motion-duration-200) var(--core-motion-ease-400);
}

.deriv-dropdown__menu--open {
  opacity: 1;
  transform: scaleY(1);
}

.deriv-dropdown__menu--close {
  opacity: 0;
  transform: scaleY(0);
}

.quill-input__wrapper[\:has\(.quill-country-code\)] {
  display: flex;
  padding-left: 0;
}

.quill-input__wrapper:has(.quill-country-code) {
  display: flex;
  padding-left: 0;
}

.quill-input__wrapper__variant--outline--neutral[\:has\(.quill-country-code__opened\)] {
  border-color: var(--component-field-border-color-focus);
}

.quill-input__wrapper__variant--outline--neutral:has(.quill-country-code__opened) {
  border-color: var(--component-field-border-color-focus);
}

.quill-input__wrapper__variant--outline--success[\:has\(.quill-country-code__opened\)] {
  border-color: var(--component-field-border-color-successFocus);
}

.quill-input__wrapper__variant--outline--success:has(.quill-country-code__opened) {
  border-color: var(--component-field-border-color-successFocus);
}

.quill-input__wrapper__variant--outline--error[\:has\(.quill-country-code__opened\)] {
  border-color: var(--component-field-border-color-failFocus);
}

.quill-input__wrapper__variant--outline--error:has(.quill-country-code__opened) {
  border-color: var(--component-field-border-color-failFocus);
}

.quill-input__wrapper__variant--fill--neutral[\:has\(.quill-country-code__opened\)] {
  border: var(--component-field-border-width) solid var(--component-field-border-color-focus);
  background-color: var(--component-field-bg-fill-focus);
}

.quill-input__wrapper__variant--fill--neutral:has(.quill-country-code__opened) {
  border: var(--component-field-border-width) solid var(--component-field-border-color-focus);
  background-color: var(--component-field-bg-fill-focus);
}

.quill-input__wrapper__variant--fill--success[\:has\(.quill-country-code__opened\)] {
  border: var(--component-field-border-width) solid var(--component-field-border-color-successFocus);
  background-color: var(--component-field-bg-fill-successFocus);
}

.quill-input__wrapper__variant--fill--success:has(.quill-country-code__opened) {
  border: var(--component-field-border-width) solid var(--component-field-border-color-successFocus);
  background-color: var(--component-field-bg-fill-successFocus);
}

.quill-input__wrapper__variant--fill--error[\:has\(.quill-country-code__opened\)] {
  border: var(--component-field-border-width) solid var(--component-field-border-color-failFocus);
  background-color: var(--component-field-bg-fill-failFocus);
}

.quill-input__wrapper__variant--fill--error:has(.quill-country-code__opened) {
  border: var(--component-field-border-width) solid var(--component-field-border-color-failFocus);
  background-color: var(--component-field-bg-fill-failFocus);
}

.quill-phone-input__container {
  position: relative;
}

.quill-phone-input-addon {
  display: flex;
  height: 100%;
}

.quill-custom-dropdown__container[\:has\(.quill-country-code\)] {
  display: flex;
  height: 100%;
}

.quill-custom-dropdown__container:has(.quill-country-code) {
  display: flex;
  height: 100%;
}

.quill-custom-dropdown__content[\:has\(.input-phone-number-search\)] {
  padding-top: 0;
}

.quill-custom-dropdown__content:has(.input-phone-number-search) {
  padding-top: 0;
}

.quill-custom-dropdown__content .input-phone-number-search {
  padding-top: 8px;
  padding-bottom: 8px;
  position: sticky;
  top: 0;
  z-index: 100;
  background: var(--component-actionSheet-bg);
}

.quill-country-code {
  display: flex;
  gap: var(--component-field-spacing-gap-sm);
  height: 100%;
  align-items: center;
  padding-left: var(--component-field-spacing-padding-md);
  padding-right: var(--component-field-spacing-padding-md);
}

.quill-country-code__disabled .quill-country-code__label, .quill-country-code__disabled .quill-country-code__value {
  color: var(--component-field-input-color-disabled);
}

.quill-country-code__variant--outline {
  border-right: var(--borderWidth-xs) solid var(--component-field-border-color-default);
  background-color: var(--component-field-bg-outline-default);
}

.quill-country-code__variant--fill {
  border-right: var(--borderWidth-sm) solid;
}

.quill-country-code__size--sm {
  padding-left: var(--component-field-spacing-padding-sm);
  padding-right: var(--component-field-spacing-padding-sm);
}

.quill-country-code__label {
  color: var(--component-field-label-color-enabled);
}

.quill-country-code__label--success {
  color: var(--component-field-label-color-success);
}

.quill-country-code__label--error {
  color: var(--component-field-label-color-fail);
}

.quill-country-code__value {
  color: var(--component-field-input-color-enabled);
}

.quill-country-code__value.focus {
  color: var(--component-field-input-color-focus);
}

.quill-country-code .mobile-icon {
  fill: var(--component-textIcon-normal-default);
}

.dropdown__transform {
  fill: var(--component-textIcon-normal-prominent);
  transition-property: transform;
  transition-duration: var(--core-motion-duration-200);
  transition-timing-function: ease-in-out;
}

.dropdown__transform-rotate {
  transform: rotate(180deg);
}

.action-sheet--content[\:has\(.phone-code-search\)] {
  padding-top: 0;
}

.action-sheet--content:has(.phone-code-search) {
  padding-top: 0;
}

.action-sheet--content .phone-code-search {
  padding-top: 8px;
  padding-bottom: 8px;
  position: sticky;
  top: 0;
  z-index: 100;
  background: var(--component-actionSheet-bg);
}

.action-sheet--content .dropdown-wrapper {
  padding-top: 8px;
}

[dir="ltr"] .quill-input__wrapper-with_button-right--sm {
  padding-right: var(--core-spacing-200);
}

[dir="rtl"] .quill-input__wrapper-with_button-right--sm {
  padding-left: var(--core-spacing-200);
}

.quill-input__wrapper-with_button-right--sm {
  padding-top: var(--core-spacing-200);
  padding-bottom: var(--core-spacing-200);
}

[dir="ltr"] .quill-input__wrapper-with_button-right--md {
  padding-right: var(--core-spacing-600);
}

[dir="rtl"] .quill-input__wrapper-with_button-right--md {
  padding-left: var(--core-spacing-600);
}

.quill-input__wrapper-with_button-right--md {
  padding-top: var(--core-spacing-600);
  padding-bottom: var(--core-spacing-600);
}

.quill-input__wrapper-with_button-bottom--md {
  flex-direction: column;
  height: auto;
  padding: var(--component-field-spacing-padding-md);
}

.quill-input__wrapper-with_button-bottom--md--has-label {
  gap: var(--core-spacing-1200);
}

.quill-input__wrapper-with_button-bottom--md--has-label[\:has\(input\:focus\)] {
  padding-top: 7px;
  padding-top: var(--temp-static-spacing-7);
  gap: 15px;
  gap: var(--temp-static-spacing-15);
}

.quill-input__wrapper-with_button-bottom--md--has-label[\:has\(input\:focus\)] {
  padding-top: 7px;
  padding-top: var(--temp-static-spacing-7);
  gap: 15px;
  gap: var(--temp-static-spacing-15);
}

.quill-input__wrapper-with_button-bottom--md--has-label:has(input:focus) {
  padding-top: 7px;
  padding-top: var(--temp-static-spacing-7);
  gap: 15px;
  gap: var(--temp-static-spacing-15);
}

.quill-input__wrapper-with_button-bottom--md--has-label[\:has\(input\:focus\)] .input {
  padding-top: var(--core-spacing-300);
}

.quill-input__wrapper-with_button-bottom--md--has-label:has(input:focus) .input {
  padding-top: var(--core-spacing-300);
}

.quill-input__wrapper-with_button-bottom--md--has-label[\:has\(input\:focus\)] .label {
  top: 7px;
  top: var(--temp-static-spacing-7);
}

.quill-input__wrapper-with_button-bottom--md--has-label[\:has\(input\:focus\)] .label {
  top: 7px;
  top: var(--temp-static-spacing-7);
}

.quill-input__wrapper-with_button-bottom--md--has-label:has(input:focus) .label {
  top: 7px;
  top: var(--temp-static-spacing-7);
}

.quill-input__wrapper-with_button-bottom--md--no-label {
  padding: var(--component-field-spacing-padding-md);
  gap: var(--component-field-spacing-padding-md);
}

.quill-input__wrapper-with_button-bottom--md--no-label .input {
  padding-top: var(--core-spacing-50);
}

.quill-input__wrapper-with_button-bottom--sm {
  flex-direction: column;
  height: auto;
  padding-top: var(--core-spacing-200);
  padding-bottom: var(--core-spacing-400);
  padding-left: var(--core-spacing-400);
  padding-right: var(--core-spacing-400);
}

.quill-input__wrapper--has-value.quill-input__wrapper-with_button-bottom--md {
  padding-top: 7px;
  padding-top: var(--temp-static-spacing-7);
  gap: 15px;
  gap: var(--temp-static-spacing-15);
}

.quill-input__wrapper--has-value.quill-input__wrapper-with_button-bottom--md .input {
  padding-top: var(--core-spacing-300);
}

.quill-input__wrapper--has-value.quill-input__wrapper-with_button-bottom--md .label {
  top: 7px;
  top: var(--temp-static-spacing-7);
}

.quill-generic-picker__container {
  position: relative;
  max-width: 360px;
}

.quill-generic-picker__input label {
  pointer-events: none;
  cursor: text;
}

.quill-generic-picker__input--is-open-true--outline {
  border: var(--component-field-border-width) solid var(--component-field-border-color-focus);
  border-radius: var(--component-field-border-radius-md);
}

.quill-generic-picker__input--is-open-true--outline--neutral, .quill-generic-picker__input--is-open-true--outline--neutral:hover {
  border-color: var(--component-field-border-color-focus);
}

.quill-generic-picker__input--is-open-true--outline--success, .quill-generic-picker__input--is-open-true--outline--success:hover {
  border-color: var(--component-field-border-color-successFocus);
}

.quill-generic-picker__input--is-open-true--outline--error, .quill-generic-picker__input--is-open-true--outline--error:hover {
  border-color: var(--component-field-border-color-failFocus);
}

.quill-generic-picker__input--is-open-true--fill--neutral {
  border: var(--component-field-border-width) solid var(--component-field-border-color-focus);
  border-radius: var(--component-field-border-radius-md);
}

.quill-generic-picker__input--is-open-true--fill--success {
  border: var(--component-field-border-width) solid var(--component-field-border-color-successFocus);
  border-radius: var(--component-field-border-radius-md);
}

.quill-generic-picker__input--is-open-true--fill--error {
  border: var(--component-field-border-width) solid var(--component-field-border-color-failFocus);
  border-radius: var(--component-field-border-radius-md);
}

.quill-generic-picker__content {
  position: absolute;
  width: 100%;
  margin: var(--core-spacing-200) 0;
  overflow: hidden;
  height: 0;
  opacity: 0;
  transition: all var(--core-motion-duration-200) var(--core-motion-ease-400);
}

@media (min-width: 768px) {
  .quill-generic-picker__content__is-open {
    height: 240px;
    opacity: 1;
    box-shadow: var(--semantic-elevation-shadow-card-hover);
  }
}
.quill-generic-picker__content --hide-scrollbar {
  scrollbar-width: none;
  -ms-overflow-style: none;
}

.quill-generic-picker__content --hide-scrollbar::-webkit-scrollbar {
  display: none;
}

.quill-generic-picker__content--container {
  position: relative;
}

.quill-generic-picker__content--container__is-open {
  z-index: 1;
}

.quill__dropdown-button__item {
  display: flex;
  padding: var(--core-spacing-50) var(--core-spacing-600);
  align-items: center;
  gap: var(--core-spacing-400);
  align-self: stretch;
  border-radius: var(--core-borderRadius-200);
  color: var(--component-dropdownItem-label-color-default);
}

.quill__dropdown-button__item--size-sm, .quill__dropdown-button__item--size-md {
  min-height: var(--core-borderRadius-1600);
}

.quill__dropdown-button__item--size-lg, .quill__dropdown-button__item--size-xl {
  min-height: var(--core-borderRadius-2400);
}

.quill__dropdown-button__item:hover {
  background-color: var(--component-dropdownItem-bg-hover);
  cursor: pointer;
}

.quill__dropdown-button__item--selected:not(:active):not(hover) {
  background-color: var(--component-dropdownItem-bg-selected);
  color: var(--component-dropdownItem-label-color-selectedWhite);
}

.quill__dropdown-button__item--active {
  background-color: var(--component-dropdownItem-bg-active);
}

.quill__dropdown-button__content {
  min-width: 360px;
}

.quill-action-sheet--header {
  display: flex;
  flex-direction: column;
}

.quill-action-sheet--header__expandable--true {
  top: var(--semantic-spacing-general-lg);
}

.quill-action-sheet--header__expandable--false {
  top: var(--semantic-spacing-general-none);
}

.quill-action-sheet--title {
  display: flex;
  justify-content: center;
  margin: var(--component-actionSheet-spacing-padding-sm) var(--component-actionSheet-spacing-padding-md);
  gap: var(--component-actionSheet-spacing-gap-md);
  align-items: center;
  position: relative;
  height: var(--core-size-2400);
}

@media (min-width: 1024px) {
  .quill-action-sheet--title {
    margin: var(--component-actionSheet-spacing-padding-md) var(--component-actionSheet-spacing-padding-lg);
  }
}
.quill-action-sheet--title-text {
  flex-grow: 1;
}

.quill-action-sheet--title--icon {
  display: flex;
  width: var(--component-button-height-lg);
  height: var(--component-button-height-lg);
  justify-content: center;
  align-items: center;
  border-radius: var(--component-button-border-radius-lg);
  fill: var(--component-textIcon-normal-prominent);
  position: absolute;
  top: 0;
}

[dir="ltr"] .quill-action-sheet--title--icon--right {
  right: 0;
}

[dir="rtl"] .quill-action-sheet--title--icon--right {
  left: 0;
}

[dir="ltr"] .quill-action-sheet--title--icon--left {
  left: 0;
}

[dir="rtl"] .quill-action-sheet--title--icon--left {
  right: 0;
}

@media (min-width: 1024px) {
  [dir="ltr"] .quill-action-sheet--title--icon {
    left: 0;
  }
  [dir="rtl"] .quill-action-sheet--title--icon {
    right: 0;
  }
}
.quill-action-sheet--title--icon--close {
  position: absolute;
  top: 0;
  right: 0;
  left: auto;
  left: initial;
  display: none;
  cursor: pointer;
}

@media (min-width: 1024px) {
  .quill-action-sheet--title--icon--close {
    display: flex;
  }
}
.quill-action-sheet--description {
  padding-left: var(--component-actionSheet-spacing-padding-md);
  padding-right: var(--component-actionSheet-spacing-padding-md);
  padding-bottom: var(--component-actionSheet-spacing-padding-sm);
}

@media (min-width: 1024px) {
  .quill-action-sheet--description {
    padding-left: var(--component-actionSheet-spacing-padding-lg);
    padding-right: var(--component-actionSheet-spacing-padding-lg);
    padding-bottom: var(--component-actionSheet-spacing-padding-md);
  }
}
.quill-action-sheet--footer {
  display: flex;
  gap: var(--component-button-spacing-gap-lg);
  padding: var(--component-actionSheet-spacing-padding-md);
  margin-top: auto;
}

@media (min-width: 1024px) {
  .quill-action-sheet--footer {
    padding: var(--component-actionSheet-spacing-padding-lg);
  }
}
.quill-action-sheet--footer__variant--vertical {
  flex-direction: column;
}

.quill-action-sheet--footer__variant--horizontal {
  flex-direction: row-reverse;
}

:root {
  --temp-static-spacing-5: 5px;
  --temp-static-spacing-7: 7px;
  --temp-static-spacing-9: 9px;
  --temp-static-spacing-13: 13px;
  --temp-static-spacing-15: 15px;
  --temp-static-spacing-104: 104px;
  --temp-static-spacing-128: 128px;
  --temp-static-spacing-144: 144px;
  --temp-static-spacing-202: 202px;
  --temp-static-spacing-288: 288px;
  --temp-static-spacing-289: 289px;
  --temp-static-spacing-312: 312px;
  --temp-static-spacing-360: 360px;
}

.quill-modal__background {
  position: fixed;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  z-index: 9999;
  display: flex;
  align-items: center;
  background-color: var(--core-color-opacity-black-600);
}

.quill-modal__container {
  position: relative;
  overflow: hidden;
  display: flex;
  border-radius: var(--component-modal-border-radius-overlay);
  width: var(--component-modal-width-overlay);
  max-height: 720px;
  justify-content: space-evenly;
  flex-direction: column;
  background-color: var(--component-modal-bg);
  margin: 0 auto;
}

.quill-modal__handle-bar {
  position: absolute;
  cursor: pointer;
  top: var(--semantic-spacing-general-sm);
  left: calc(50% - var(--core-size-2400) / 2);
  width: var(--component-handle-width);
  height: var(--component-handle-height);
  background-color: var(--component-handle-bg);
  border-radius: var(--component-handle-border-radius);
}

.quill-modal__handle-bar:before {
  content: "";
  height: var(--core-size-1500);
  width: 100vw;
  left: calc(-50vw + var(--core-size-2400) / 2);
  top: calc(var(--core-size-50) - var(--semantic-spacing-general-sm));
  position: absolute;
}

.quill-modal__close-icon {
  position: absolute;
  top: var(--core-spacing-1000);
  right: var(--core-spacing-800);
}

.quill-modal__content-wrapper {
  flex-grow: 1;
  overflow-y: scroll;
}

.quill-modal__content-wrapper::-webkit-scrollbar {
  display: none;
}

.quill-modal__content-image {
  min-height: 144px;
  min-height: var(--temp-static-spacing-144);
  display: flex;
  justify-content: center;
  align-items: center;
}

.quill-modal__content-image-size {
  height: 202px;
  height: var(--temp-static-spacing-202);
}

@media (min-width: 1024px) {
  .quill-modal__content-image-size {
    height: 288px;
    height: var(--temp-static-spacing-288);
  }
}
.quill-modal__content-image + .quill-modal-bottom__content-title {
  margin-top: var(--component-modal-spacing-overlay-padding-sm);
}

@media (min-width: 1024px) {
  .quill-modal__content-image + .quill-modal-bottom__content-title {
    margin-top: var(--component-modal-spacing-overlay-padding-sm);
  }
}
.quill-modal__content-title {
  margin: var(--component-modal-spacing-bottom-padding-lg) var(--component-modal-spacing-overlay-padding-sm) 0;
}

@media (min-width: 1024px) {
  .quill-modal__content-title {
    margin: var(--component-modal-spacing-overlay-padding-md);
  }
}
.quill-modal__content-title-has-image {
  margin: var(--component-modal-spacing-overlay-padding-sm);
}

@media (min-width: 1024px) {
  .quill-modal__content-title-has-image {
    margin: var(--component-modal-spacing-overlay-padding-sm) var(--component-modal-spacing-overlay-padding-md) var(--component-modal-spacing-overlay-padding-md);
  }
}
.quill-modal__content-body {
  margin: var(--component-modal-spacing-overlay-padding-sm) var(--component-modal-spacing-overlay-padding-sm);
}

@media (min-width: 1024px) {
  .quill-modal__content-body {
    margin: var(--component-modal-spacing-overlay-padding-sm) var(--component-modal-spacing-overlay-padding-md);
  }
}
.quill-modal__button {
  border-width: var(--core-borderWidth-75);
}

.quill-modal__button-wrapper {
  align-self: stretch;
  padding: var(--component-modal-spacing-overlay-padding-sm);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  gap: var(--semantic-spacing-gap-md);
}

@media (min-width: 1024px) {
  .quill-modal__button-wrapper {
    padding: var(--component-modal-spacing-overlay-padding-sm) var(--component-modal-spacing-overlay-padding-md);
  }
}
.quill-notification {
  position: relative;
  display: flex;
  width: 100%;
  cursor: pointer;
  height: -moz-fit-content;
  height: fit-content;
  background-color: var(--component-notification-bg-banner);
}

.quill-notification:link, .quill-notification:visited, .quill-notification:hover, .quill-notification:active {
  text-decoration: none;
}

.quill-notification .icon {
  position: relative;
  display: flex;
  flex-shrink: 0;
  justify-content: center;
  align-items: center;
  width: var(--core-size-1600);
  height: var(--core-size-1600);
  border-radius: var(--semantic-borderRadius-pill);
  cursor: pointer;
}

.quill-notification .icon.info {
  background-color: var(--semantic-color-blue-opacity-surface-midHigh);
}

.quill-notification .icon.error {
  background-color: var(--semantic-color-red-opacity-surface-midHigh);
}

.quill-notification .icon.success {
  background-color: var(--semantic-color-green-opacity-surface-midHigh);
}

.quill-notification .icon.warning {
  background-color: var(--semantic-color-yellow-opacity-surface-midHigh);
}

.quill-notification .icon .badge-unread {
  position: absolute;
  top: 0;
  right: 0;
  width: var(--core-size-400);
  height: var(--core-size-400);
  border-radius: var(--semantic-borderRadius-pill);
  background-color: var(--core-color-solid-red-700);
}

.quill-notification .close {
  position: absolute;
  right: var(--semantic-spacing-general-sm);
  top: var(--semantic-spacing-general-sm);
}

.quill-notification .body {
  display: flex;
  gap: var(--semantic-spacing-gap-lg);
}

.quill-notification__banner, .quill-notification__banner--mobile {
  min-height: var(--core-size-3600);
  padding: var(--semantic-spacing-general-md) var(--semantic-spacing-general-2xl) var(--semantic-spacing-general-md) var(--semantic-spacing-general-md);
  border-radius: var(--semantic-borderRadius-lg);
  border: var(--borderWidth-xs) solid color-mix(in srgb, var(--component-textIcon-normal-prominent) 8%, transparent);
  box-shadow: 0 var(--semantic-spacing-general-xs) var(--semantic-spacing-general-sm) var(--semantic-spacing-general-2xs) color-mix(in srgb, var(--component-textIcon-normal-prominent) 3%, transparent);
  animation: var(--motion-duration-snappy) var(--motion-easing-inandout) enter-desktop;
  transform: translateY(0);
  transition: transform var(--motion-duration-snappy) var(--motion-easing-inandout);
}

.quill-notification__banner .details .title, .quill-notification__banner--mobile .details .title {
  color: var(--component-notification-title-color-banner);
}

.quill-notification__banner .details .message, .quill-notification__banner--mobile .details .message {
  color: var(--component-notification-message-color-banner);
}

.quill-notification__banner.hidden, .quill-notification__banner--mobile.hidden {
  transform: translateY(100vh);
}

.quill-notification__banner--mobile {
  animation: var(--motion-duration-snappy) var(--motion-easing-inandout) enter-mobile;
  padding: var(--semantic-spacing-general-md);
}

.quill-notification__banner--mobile.hidden {
  transform: translateY(-100vh);
}

[dir="ltr"] .quill-notification__banners,[dir="ltr"]  .quill-notification__banners--mobile {
  left: var(--semantic-spacing-general-sm);
}

[dir="rtl"] .quill-notification__banners,[dir="rtl"]  .quill-notification__banners--mobile {
  right: var(--semantic-spacing-general-sm);
}

.quill-notification__banners, .quill-notification__banners--mobile {
  position: absolute;
  width: 360px;
  bottom: var(--semantic-spacing-general-sm);
  z-index: 6;
}

.quill-notification__banners .details .title, .quill-notification__banners--mobile .details .title {
  color: var(--component-notification-title-color-banner);
}

.quill-notification__banners .details .message, .quill-notification__banners--mobile .details .message {
  color: var(--component-notification-message-color-banner);
}

.quill-notification__banners--mobile, .quill-notification__banners--mobile--mobile {
  width: calc(100% - var(--semantic-spacing-general-md));
  top: var(--semantic-spacing-general-sm);
  bottom: auto;
  bottom: initial;
  width: calc(100vw - var(--size-generic-xs));
}

.quill-notification__item, .quill-notification__item--mobile {
  padding: var(--semantic-spacing-general-md);
  justify-content: space-between;
  height: var(--core-size-4900);
}

.quill-notification__item .body, .quill-notification__item .details, .quill-notification__item--mobile .body, .quill-notification__item--mobile .details {
  min-width: 0;
  flex-grow: 1;
}

.quill-notification__item .message--one-liner, .quill-notification__item--mobile .message--one-liner {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.quill-notification__item .date-time, .quill-notification__item--mobile .date-time {
  color: var(--component-textIcon-normal-subtle);
  margin-top: var(--semantic-spacing-general-xs);
}

.quill-notification__item .buttons, .quill-notification__item--mobile .buttons {
  display: flex;
  align-self: center;
  justify-content: flex-end;
  gap: var(--semantic-spacing-gap-md);
  visibility: hidden;
  width: var(--core-size-3600);
  flex-shrink: 0;
}

.quill-notification__item .buttons .mark-as-read, .quill-notification__item .buttons .delete, .quill-notification__item--mobile .buttons .mark-as-read, .quill-notification__item--mobile .buttons .delete {
  border-radius: var(--core-borderRadius-600);
}

.quill-notification__item .buttons .mark-as-read:hover, .quill-notification__item .buttons .delete:hover, .quill-notification__item--mobile .buttons .mark-as-read:hover, .quill-notification__item--mobile .buttons .delete:hover {
  background-color: color-mix(in srgb, var(--component-textIcon-normal-prominent) 8%, transparent);
}

.quill-notification__item .buttons .mark-as-read svg, .quill-notification__item .buttons .delete svg, .quill-notification__item--mobile .buttons .mark-as-read svg, .quill-notification__item--mobile .buttons .delete svg {
  fill: var(--component-textIcon-normal-prominent);
}

.quill-notification__item:hover, .quill-notification__item--mobile:hover {
  background-color: color-mix(in srgb, var(--component-textIcon-normal-prominent) 4%, transparent);
}

.quill-notification__item:active, .quill-notification__item--mobile:active {
  background-color: color-mix(in srgb, var(--component-textIcon-normal-prominent) 8%, transparent);
}

.quill-notification__item:hover .buttons, .quill-notification__item:active .buttons, .quill-notification__item--mobile:hover .buttons, .quill-notification__item--mobile:active .buttons {
  visibility: visible;
}

.quill-notification__item-wrapper, .quill-notification__item--mobile-wrapper {
  position: relative;
  width: inherit;
  overflow: hidden;
  max-height: var(--core-size-4900);
}

.quill-notification__item-wrapper:not(:last-child):after, .quill-notification__item--mobile-wrapper:not(:last-child):after {
  position: absolute;
  content: "";
  width: calc(100% - var(--core-size-3200));
  height: 100%;
  right: 0;
  outline: var(--borderWidth-xs) solid color-mix(in srgb, var(--component-textIcon-normal-prominent) 8%, transparent);
}

.quill-notification__item-wrapper.deleted, .quill-notification__item-wrapper.deleted:not(:last-child):after, .quill-notification__item--mobile-wrapper.deleted, .quill-notification__item--mobile-wrapper.deleted:not(:last-child):after {
  opacity: var(--core-opacity-50);
  max-height: 0;
  transition: max-height var(--core-motion-duration-200), opacity var(--core-motion-duration-200);
  transition-timing-function: var(--motion-easing-inandout);
}

.quill-notification__item--mobile {
  transform: translate(0);
  transition: transform var(--motion-duration-snappy) var(--motion-easing-inandout);
}

.quill-notification__item--mobile .buttons {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  visibility: visible;
  transform: translate(100%);
  width: -moz-fit-content;
  width: fit-content;
  gap: initial;
  height: 100%;
}

.quill-notification__item--mobile .buttons .mark-as-read, .quill-notification__item--mobile .buttons .delete {
  width: var(--core-size-3600);
  height: 100%;
  background-color: var(--core-color-solid-slate-1400);
  border-radius: 0;
  border-radius: initial;
}

.quill-notification__item--mobile .buttons .mark-as-read:active, .quill-notification__item--mobile .buttons .mark-as-read:hover, .quill-notification__item--mobile .buttons .delete:active, .quill-notification__item--mobile .buttons .delete:hover {
  background-color: var(--core-color-opacity-black-800);
}

.quill-notification__item--mobile .buttons .mark-as-read svg, .quill-notification__item--mobile .buttons .delete svg {
  fill: var(--core-color-solid-slate-50);
}

.quill-notification__item--mobile .buttons .delete {
  background-color: var(--core-color-solid-red-700);
}

.quill-notification__item--mobile .buttons .delete:active, .quill-notification__item--mobile .buttons .delete:hover {
  background-color: var(--core-color-solid-red-900);
}

.quill-notification__item--mobile.show-buttons {
  transform: translate(calc(var(--core-size-3600) * -2));
}

.quill-notification__item--mobile.show-buttons--read {
  transform: translate(calc(var(--core-size-3600) * -1));
}

.quill-notification__items-list {
  width: inherit;
  overflow: hidden;
  border: var(--borderWidth-xs) solid color-mix(in srgb, var(--component-textIcon-normal-prominent) 8%, transparent);
  border-radius: var(--semantic-borderRadius-md);
}

@keyframes enter-mobile {
  0% {
    transform: translateY(-100vh);
  }
  to {
    transform: translateY(0);
  }
}
@keyframes enter-desktop {
  0% {
    transform: translateY(100vh);
  }
  to {
    transform: translateY(0);
  }
}
.pagination__container {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--component-pagination-spacing-gap-body);
}

.pagination__chevron {
  display: flex;
  align-items: center;
  cursor: pointer;
  justify-content: center;
  height: var(--component-pagination-height-number);
  width: var(--component-pagination-width-number);
  border-radius: var(--component-pagination-border-radius-button);
  color: var(--component-pagination-bg-default);
}

.pagination__chevron:disabled {
  cursor: auto;
  color: var(--component-pagination-icon-disabled);
}

.pagination__chevron:hover:not(:disabled) {
  background-color: var(--component-pagination-bg-hover);
}

.pagination__chevron:active:not(:disabled) {
  background-color: var(---component-pagination-bg-active);
}

.pagination__chevron-svg {
  fill: var(--component-pagination-icon-default);
}

.pagination__chevron-disabled {
  fill: var(--component-pagination-icon-disabled);
}

.quill-checkbox {
  display: flex;
  position: relative;
  align-items: center;
  gap: var(--component-selectionControl-spacing-gap-sm);
}

.quill-checkbox__wrapper {
  height: var(--size-generic-sm);
  width: var(--size-generic-sm);
  position: relative;
}

.quill-checkbox__wrapper--right {
  order: 3;
}

.quill-checkbox__box {
  position: absolute;
  cursor: pointer;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  height: var(--size-generic-xs);
  width: var(--size-generic-xs);
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.quill-checkbox__box:disabled {
  cursor: default;
}

.quill-checkbox__box:hover:not(:disabled) ~ .quill-checkbox__box-icon {
  fill: var(--component-selectionControl-icon-hover);
}

.quill-checkbox__box:active:not(:disabled) ~ .quill-checkbox__box-icon {
  fill: var(--component-selectionControl-icon-active);
}

.quill-checkbox__box.focus-visible {
  outline: none;
}

.quill-checkbox__box:focus-visible {
  outline: none;
}

.quill-checkbox__box.focus-visible:after {
  content: "";
  width: var(--size-generic-xs);
  height: var(--size-generic-xs);
  outline: var(--borderWidth-sm) solid var(--core-color-solid-blue-700);
  border-radius: var(--semantic-borderRadius-sm);
  position: absolute;
  top: 52%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.quill-checkbox__box:focus-visible:after {
  content: "";
  width: var(--size-generic-xs);
  height: var(--size-generic-xs);
  outline: var(--borderWidth-sm) solid var(--core-color-solid-blue-700);
  border-radius: var(--semantic-borderRadius-sm);
  position: absolute;
  top: 52%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.quill-checkbox__box-icon {
  pointer-events: none;
  fill: var(--component-selectionControl-icon-selectedDefault);
}

.quill-checkbox__box-icon--pale {
  fill: var(--component-selectionControl-icon-default);
}

.quill-checkbox__label, .quill-checkbox__info-icon {
  cursor: pointer;
}

.quill-checkbox__info-icon {
  display: flex;
  flex-shrink: 0;
  fill: var(--component-selectionControl-icon-default);
}

.quill-checkbox--disabled .quill-checkbox__box-icon {
  fill: var(--component-selectionControl-icon-disabled);
}

.quill-checkbox--disabled .quill-checkbox__label {
  color: var(--component-selectionControl-label-color-disabled);
  cursor: default;
}

.quill-checkbox--disabled .quill-checkbox__info-icon {
  fill: var(--component-selectionControl-icon-disabled);
  cursor: default;
}

.tooltip-content {
  border-radius: var(--core-borderRadius-400);
}

.tooltip-content__variant-base {
  padding: var(--core-size-400) var(--core-size-800);
  color: var(--component-textIcon-inverse-default);
  min-height: var(--core-size-1600);
}

.tooltip-content__variant-rich {
  position: relative;
  padding: var(--core-size-800);
}

.tooltip-content__variant-rich-content {
  display: flex;
  gap: var(--core-size-800);
  flex-direction: column;
  align-items: flex-start;
  min-width: var(--core-size-4300);
}

.tooltip-content__variant-rich-title {
  padding-right: var(--core-size-1200);
}

.tooltip-content__variant-rich-header {
  display: flex;
  justify-content: space-between;
  color: var(--component-textIcon-inverse-prominent);
}

.tooltip-content__variant-rich-text {
  display: flex;
  flex-direction: column;
  gap: var(--core-size-200);
  color: var(--component-textIcon-inverse-default);
}

.tooltip-content__variant-rich-icon {
  position: absolute;
  cursor: pointer;
  right: var(--core-spacing-400);
  top: var(--core-spacing-400);
}

.quill-checkbox-group .quill-checkbox {
  margin-bottom: var(--component-selectionControl-spacing-gap-sm);
}

.quill-checkbox-group__children-wrapper {
  margin-left: var(--core-spacing-1600);
}

[dir="ltr"] .quill-snackbar {
  padding-left: var(--component-snackbar-spacing-padding-md);
  padding-right: var(--component-snackbar-spacing-padding-sm);
}

[dir="rtl"] .quill-snackbar {
  padding-right: var(--component-snackbar-spacing-padding-md);
  padding-left: var(--component-snackbar-spacing-padding-sm);
}

.quill-snackbar {
  display: flex;
  width: calc(100vw - var(--core-spacing-1600));
  max-width: 560px;
  min-height: var(--component-snackbar-height-min);
  padding-top: var(--component-snackbar-spacing-padding-sm);
  padding-bottom: var(--component-snackbar-spacing-padding-sm);
  align-items: center;
  gap: var(--component-snackbar-spacing-gap);
  border-radius: var(--component-snackbar-border-radius);
  border: var(--component-snackbar-border-width) solid var(--component-snackbar-border-color);
  box-shadow: var(--core-elevation-shadow-330);
  position: fixed;
  z-index: 999;
  bottom: -16px;
  transition: bottom var(--motion-duration-snappy) var(--motion-easing-inandout);
}

.quill-snackbar__status--neutral {
  background-color: var(--component-snackbar-bg-neutral);
}

.quill-snackbar__status--fail {
  background-color: var(--component-snackbar-bg-fail);
  z-index: 149;
}

.quill-snackbar--container {
  display: flex;
  justify-content: center;
}

.quill-snackbar.slide-up {
  animation: slide-up var(--motion-duration-snappy) var(--motion-easing-inandout) forwards;
}

.quill-snackbar.slide-down {
  animation: slide-down var(--motion-duration-snappy) var(--motion-easing-inandout) forwards;
}

@media (min-width: 640px) {
  .quill-snackbar {
    display: inline-flex;
    width: var(--component-snackbar-width-max);
  }
}
.quill-snackbar__icon--container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  flex-shrink: 0;
}

.quill-snackbar__message {
  flex: 1 0 0;
  text-overflow: ellipsis;
  overflow: hidden;
  word-wrap: break-word;
}

.quill-snackbar__message--has-fix-height {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
}

@media (min-width: 640px) {
  .quill-snackbar__message {
    -webkit-line-clamp: 1;
  }
}
.quill-snackbar__message--container {
  display: flex;
  padding-right: var(--semantic-spacing-general-sm);
  align-items: flex-start;
  flex: 1 0 0;
  min-width: var(--semantic-spacing-general-none);
}

.quill-snackbar .button-label svg {
  display: flex;
}

@keyframes slide-up {
  0% {
    bottom: -100%;
  }
  to {
    bottom: var(--core-size-800);
  }
}
@keyframes slide-down {
  0% {
    bottom: var(--core-size-800);
  }
  to {
    bottom: -100%;
  }
}
.snackbar--container {
  display: flex;
  justify-content: center;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.quill__item-container {
  background-color: var(--component-dropdownList-bg);
  box-shadow: var(--component-dropdownList-elevation-shadow);
  border-radius: var(--component-dropdownList-border-radius);
  border-width: var(--component-dropdownList-border-width);
  border-color: var(--component-dropdownList-border-color);
  margin-top: var(--core-spacing-200);
  overflow-y: auto;
}

.quill__item-container--size-sm {
  padding: var(--component-dropdownList-spacing-padding-sm);
}

.quill__item-container--size-md {
  padding: var(--component-dropdownList-spacing-padding-md);
}

.quill__item-container--height-sm {
  max-height: var(--component-dropdownList-height-item-sm);
}

.quill__item-container--height-md {
  max-height: var(--component-dropdownList-height-item-md);
}

.quill__item-container--height-lg {
  max-height: var(--component-dropdownList-height-item-lg);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.quill-radio-button {
  display: flex;
  align-items: center;
}

.quill-radio-button__label {
  margin: 0 var(--core-spacing-300);
  cursor: pointer;
}

.quill-radio-button__label--disabled {
  color: var(--component-selectionControl-icon-disabled);
  cursor: default;
}

.quill-radio-button__icon {
  cursor: pointer;
}

.quill-radio-button__icon svg {
  display: flex;
  flex-direction: column;
}

.quill-radio-button__icon svg:focus {
  outline: none;
}

.quill-radio-button__icon svg.focus-visible {
  border: none;
  border-radius: 50%;
  box-shadow: 0 0 var(--core-borderWidth-75) var(--core-borderWidth-100) var(--core-color-solid-blue-700) inset;
}

.quill-radio-button__icon svg:focus-visible {
  border: none;
  border-radius: 50%;
  box-shadow: 0 0 var(--core-borderWidth-75) var(--core-borderWidth-100) var(--core-color-solid-blue-700) inset;
}

.quill-radio-button__icon--disabled {
  cursor: default;
}

.quill-radio-button__icon--right {
  order: 3;
}

.quill-radio-button__input {
  display: none;
}

.quill-radio-button__info {
  margin-left: var(--core-spacing-100);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
:root {
  --temp-static-spacing-5: 5px;
  --temp-static-spacing-7: 7px;
  --temp-static-spacing-9: 9px;
  --temp-static-spacing-13: 13px;
  --temp-static-spacing-15: 15px;
  --temp-static-spacing-104: 104px;
  --temp-static-spacing-128: 128px;
  --temp-static-spacing-144: 144px;
  --temp-static-spacing-202: 202px;
  --temp-static-spacing-288: 288px;
  --temp-static-spacing-289: 289px;
  --temp-static-spacing-312: 312px;
  --temp-static-spacing-360: 360px;
}

.quill-dropdown-title__container {
  display: flex;
  align-items: center;
}

.quill-dropdown-title__container--md {
  padding-left: var(--component-dropdownItem-spacing-padding-md);
  padding-right: var(--component-dropdownItem-spacing-padding-md);
  gap: var(--component-dropdownItem-spacing-gap-md);
  height: var(--core-spacing-2000);
}

.quill-dropdown-title__container--sm {
  padding-left: var(--component-dropdownItem-spacing-padding-sm);
  padding-right: var(--component-dropdownItem-spacing-padding-sm);
  gap: var(--component-dropdownItem-spacing-gap-sm);
  height: var(--core-spacing-1200);
}

.quill-dropdown-title__label {
  flex-grow: 1;
}

.quill-dropdown-title__icon {
  height: var(--core-spacing-1200);
  width: var(--core-spacing-1200);
  display: flex;
  justify-content: center;
  align-items: center;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.badge__container {
  position: relative;
}

.badge__container-children {
  height: 100%;
  width: 100%;
}

.badge__position-bottom-sm {
  bottom: -2px;
  right: -2px;
}

.badge__position-bottom-md {
  bottom: -4px;
  right: -4px;
}

.badge__position-bottom-lg {
  bottom: -8px;
  right: -8px;
}

.badge__position-top-sm, .badge__position-top-md {
  top: -9px;
  right: -9px;
}

.badge__position-top-lg, .badge__position-top-xl {
  top: -12px;
  right: -12px;
}

.badge__position-top-2xl {
  top: -18px;
  right: -18px;
}

.badge__position-center {
  top: var(--core-size-800);
  right: var(--core-size-700);
}

.badge__base {
  display: inline-flex;
  position: absolute;
  border-radius: var(--component-badge-status-border-radius);
  align-items: center;
  justify-content: center;
  color: var(--component-badge-notification-label-color);
}

.badge__variant__status--size-sm {
  height: var(--component-badge-status-height-sm);
  min-width: var(--component-badge-status-width-sm);
}

.badge__variant__status--size-md {
  height: var(--component-badge-status-height-md);
  min-width: var(--component-badge-status-width-md);
}

.badge__variant__status--size-lg {
  height: var(--component-badge-status-height-lg);
  min-width: var(--component-badge-status-width-lg);
}

.badge__variant__notification--size-sm {
  padding-left: var(--component-badge-notification-spacing-padding-sm);
  padding-right: var(--component-badge-notification-spacing-padding-sm);
  min-width: var(--core-spacing-900);
}

.badge__variant__notification--size-md {
  padding-left: var(--component-badge-notification-spacing-padding-md);
  padding-right: var(--component-badge-notification-spacing-padding-md);
  min-width: var(--core-spacing-1200);
}

.badge__variant__notification--size-lg {
  padding-left: var(--component-badge-notification-spacing-padding-lg);
  padding-right: var(--component-badge-notification-spacing-padding-lg);
}

.badge__color--success {
  background-color: var(--component-badge-status-bg-success);
}

.badge__color--warning {
  background-color: var(--component-badge-status-bg-warning);
}

.badge__color--danger {
  background-color: var(--component-badge-status-bg-danger);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.quill-navigation-bottom-bar__container {
  display: flex;
  align-items: center;
  height: var(--component-navigationBar-sizing-body-heightBottom);
  padding-left: var(--component-navigationBar-spacing-md);
  padding-right: var(--component-navigationBar-spacing-md);
  gap: var(--component-navigationBar-spacing-sm);
  border-top-style: solid;
  background-color: var(--component-navigationBar-bg-body);
  border-top-width: var(--component-navigationBar-border-width);
  border-top-color: var(--component-navigationBar-border-color);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.quill-navigation-bottom-bar__action {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  flex-grow: 1;
  cursor: pointer;
  height: var(--component-navigationBar-sizing-item-md);
  border-radius: var(--component-navigationBar-border-radius);
}

.quill-navigation-bottom-bar__action-selected--true > .quill-navigation-bottom-bar__action-icon svg {
  fill: var(--component-navigationBar-label-color-selected);
}

.quill-navigation-bottom-bar__action-selected--true > .quill-navigation-bottom-bar__action-label {
  color: var(--component-navigationBar-label-color-selected);
}

.quill-navigation-bottom-bar__action-selected--false > .quill-navigation-bottom-bar__action-icon svg {
  fill: var(--component-navigationBar-icon-default);
}

.quill-navigation-bottom-bar__action-badge-container {
  top: -4px;
}

.quill-navigation-bottom-bar__action-label {
  font-size: var(--component-navigationBar-label-typography-xs);
  color: var(--component-navigationBar-label-color-default);
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.quill-navigation-bottom-bar__action-label-container {
  position: relative;
  width: 100%;
}

.quill-navigation-bottom-bar__action-label-container:before {
  content: "&nbsp;";
  visibility: hidden;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.tag {
  min-width: auto;
  display: inline-flex;
  align-items: center;
  justify-self: center;
}

.tag__size-sm {
  padding-left: var(--component-tag-spacing-padding-sm);
  padding-right: var(--component-tag-spacing-padding-sm);
  gap: var(--component-tag-spacing-padding-sm);
  height: var(--component-tag-height-sm);
  border-radius: var(--component-tag-border-radius-xs);
}

.tag__size-sm > svg {
  width: 12px;
  height: 18px;
}

.tag__size-xs {
  padding-left: var(--component-tag-spacing-gap-xs);
  padding-right: var(--component-tag-spacing-gap-xs);
  gap: var(--component-tag-spacing-gap-xs);
  height: var(--component-tag-height-xs);
  border-radius: var(--component-tag-border-radius-xs);
}

.tag__size-xs > svg {
  width: 12px;
  height: 18px;
}

.tag__size-md {
  padding-left: var(--component-tag-spacing-gap-md);
  padding-right: var(--component-tag-spacing-gap-md);
  gap: var(--component-tag-spacing-gap-md);
  height: var(--component-tag-height-md);
  border-radius: var(--component-tag-border-radius-sm);
}

.tag__size-md > svg {
  width: 14px;
  height: 22px;
}

.tag__size-lg {
  padding-left: var(--component-tag-spacing-gap-lg);
  padding-right: var(--component-tag-spacing-gap-lg);
  gap: var(--component-tag-spacing-gap-lg);
  height: var(--component-tag-height-lg);
  border-radius: var(--component-tag-border-radius-md);
}

.tag__size-lg > svg {
  width: 16px;
  height: 24px;
}

.tag__icon {
  display: flex;
  align-items: center;
}

.tag__icon--xs > svg {
  width: var(--core-spacing-600);
  height: var(--core-spacing-900);
}

.tag__icon--sm > svg {
  width: var(--core-spacing-600);
  height: var(--core-spacing-900);
}

.tag__icon--md > svg {
  width: var(--core-spacing-700);
  height: var(--core-spacing-1100);
}

.tag__icon--lg > svg {
  width: var(--core-spacing-800);
  height: var(--core-spacing-1200);
}

.tag__color--success {
  color: var(--component-tag-label-color-success);
}

.tag__color--success-fill {
  background-color: var(--component-tag-bg-success);
}

.tag__color--success-outline {
  border: var(--component-tag-border-width) solid var(--component-tag-border-color-success);
}

.tag__color--success-svg {
  fill: var(--component-tag-icon-success);
}

.tag__color--error {
  color: var(--component-tag-label-color-danger);
}

.tag__color--error-fill {
  background-color: var(--component-tag-bg-danger);
}

.tag__color--error-outline {
  border: var(--component-tag-border-width) solid var(--component-tag-border-color-danger);
}

.tag__color--error-svg {
  fill: var(--component-tag-icon-danger);
}

.tag__color--warning {
  color: var(--component-tag-label-color-warning);
}

.tag__color--warning-fill {
  background-color: var(--component-tag-bg-warning);
}

.tag__color--warning-outline {
  border: var(--component-tag-border-width) solid var(--component-tag-border-color-warning);
}

.tag__color--warning-svg {
  fill: var(--component-tag-icon-warning);
}

.tag__color--info {
  color: var(--component-tag-label-color-information);
}

.tag__color--info-fill {
  background-color: var(--component-tag-bg-information);
}

.tag__color--info-outline {
  border: var(--component-tag-border-width) solid var(--component-tag-border-color-information);
}

.tag__color--info-svg {
  fill: var(--component-tag-icon-information);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
html.light {
  --border-bottom-color-default: var(--core-color-opacity-black-100);
}

html.dark {
  --border-bottom-color-default: var(--core-color-opacity-white-100);
}

.tab-list--container {
  position: relative;
  display: flex;
  justify-content: center;
  border-bottom: var(--component-tab-border-width-body) solid var(--component-tab-border-color-default);
}

.tab-list--item {
  display: flex;
  overflow-x: auto;
  overscroll-behavior-x: contain;
  scrollbar-width: none;
  -ms-overflow-style: none;
}

.tab-list--item::-webkit-scrollbar {
  display: none;
}

.tab-list--item-hug-content {
  gap: var(--semantic-spacing-gap-md);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.tab-trigger__icon-position--left {
  display: flex;
  align-items: center;
}

.tab-trigger__icon-position--top {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.tab__icon {
  display: inline-flex;
}

.tab__icon svg {
  fill: var(--component-tab-icon-default);
}

.tab__icon svg[aria-selected=true] {
  fill: var(--component-tab-icon-selected);
}

.label-class {
  text-align: center;
}

html.light {
  --border-bottom-color-hover: var(--core-color-opacity-black-200);
  --border-bottom-color-active: var(--core-color-opacity-black-300);
}

html.dark {
  --border-bottom-color-hover: var(--core-color-opacity-white-200);
  --border-bottom-color-active: var(--core-color-opacity-white-300);
}

.tab-menu {
  display: inline-flex;
  cursor: pointer;
  position: relative;
  white-space: nowrap;
  z-index: 2;
  border: none;
  background-color: transparent;
  border-bottom: var(--component-tab-border-width-item) solid transparent;
}

.tab-menu:hover:not(:disabled) {
  border-bottom: var(--component-tab-border-width-item) solid var(--border-bottom-color-hover);
}

.tab-menu:active:not(:disabled) {
  border-bottom: var(--component-tab-border-width-item) solid var(--border-bottom-color-active);
}

.tab-menu[aria-selected=true]:not(:disabled):not(:active):not(hover) {
  border-bottom: var(--component-tab-border-width-item) solid var(--component-tab-icon-selected);
}

.tab-menu:disabled {
  opacity: var(--core-opacity-300);
  cursor: auto;
}

.tab-menu__variants__fill-size-sm {
  padding: var(--semantic-spacing-general-xs) var(--component-tab-spacing-padding-sm);
  min-width: 106px;
  text-wrap: nowrap;
  justify-content: center;
  gap: var(--semantic-spacing-general-xs);
}

.tab-menu__variants__fill-size-md {
  min-width: 106px;
  text-wrap: nowrap;
  padding: var(--component-tab-spacing-padding-sm) var(--component-tab-spacing-padding-md);
  justify-content: center;
  gap: var(--component-tab-spacing-padding-sm);
}

.tab-menu__variants__hug-size-sm {
  padding: var(--semantic-spacing-general-xs) var(--component-tab-spacing-padding-sm);
  justify-content: center;
  text-wrap: nowrap;
  gap: var(--semantic-spacing-general-xs);
}

.tab-menu__variants__hug-size-md {
  padding: var(--component-tab-spacing-padding-sm) var(--component-tab-spacing-padding-md);
  justify-content: center;
  text-wrap: nowrap;
  gap: var(--component-tab-spacing-padding-sm);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.quill-input__wrapper[\:has\(.quill-addon\)] {
  display: flex;
}
.quill-input__wrapper:has(.quill-addon) {
  display: flex;
}

.quill-input__wrapper[\:has\(.quill-addon__position--left\)] {
  padding-left: 0;
}

.quill-input__wrapper:has(.quill-addon__position--left) {
  padding-left: 0;
}

.quill-input__wrapper[\:has\(.quill-addon__position--right\)] {
  flex-direction: row-reverse;
  padding-right: 0;
}

.quill-input__wrapper:has(.quill-addon__position--right) {
  flex-direction: row-reverse;
  padding-right: 0;
}

.quill-addon {
  display: flex;
  height: 100%;
  align-items: center;
  padding-left: var(--semantic-spacing-general-md);
  padding-right: var(--semantic-spacing-general-md);
}

.quill-addon__position--left--outline {
  border-right: var(--borderWidth-xs) solid var(--component-field-border-color-default);
}

.quill-addon__position--left--fill {
  border-right: var(--borderWidth-sm) solid;
}

.quill-addon__position--right--outline {
  border-left: var(--borderWidth-xs) solid var(--component-field-border-color-default);
}

.quill-addon__position--right--fill {
  border-left: var(--borderWidth-sm) solid;
}

.quill-addon__variant--outline {
  background-color: var(--semantic-color-slate-solid-surface-frame-mid);
}

.quill-addon__label--disabled {
  color: var(--core-color-opacity-black-300);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.quill-radio-group__item-wrapper {
  margin-left: var(--core-spacing-300);
}
