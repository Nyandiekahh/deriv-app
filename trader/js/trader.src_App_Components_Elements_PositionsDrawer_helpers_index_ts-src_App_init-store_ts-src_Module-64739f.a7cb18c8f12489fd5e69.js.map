{"version":3,"file":"trader/js/trader.src_App_Components_Elements_PositionsDrawer_helpers_index_ts-src_App_init-store_ts-src_Module-64739f.a7cb18c8f12489fd5e69.js","mappings":"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","sources":["webpack://@deriv/trader/../stores/src/storeContext.ts","webpack://@deriv/trader/../stores/src/stores/FeatureFlagsStore.ts","webpack://@deriv/trader/../stores/src/stores/BaseStore.ts","webpack://@deriv/trader/../stores/src/storeProvider.tsx","webpack://@deriv/trader/../stores/src/useStore.ts","webpack://@deriv/trader/./src/Analytics/index.ts","webpack://@deriv/trader/./src/App/Components/Animations/bounce.tsx","webpack://@deriv/trader/./src/App/Components/Animations/slide-in.tsx","webpack://@deriv/trader/./src/App/Components/Elements/PositionsDrawer/helpers/positions-helper.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Actions/symbol.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Constants/validation-rules.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Actions/purchase.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/accumulator.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Actions/contract-type.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Actions/duration.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Actions/start-date.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/process.ts","webpack://@deriv/trader/./src/Stores/base-store.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/chart.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/trade-store.ts","webpack://@deriv/trader/./src/Stores/Modules/Positions/positions-store.ts","webpack://@deriv/trader/./src/Stores/Modules/Markets/markets-store.ts","webpack://@deriv/trader/./src/Stores/Modules/index.ts","webpack://@deriv/trader/./src/Stores/index.ts","webpack://@deriv/trader/./src/App/init-store.ts","webpack://@deriv/trader/./src/AppV2/Utils/positions-utils.ts","webpack://@deriv/trader/./src/AppV2/Utils/trade-params-utils.tsx","webpack://@deriv/trader/./src/AppV2/Utils/trade-types-utils.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/LastDigitPrediction/digit.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/LastDigitPrediction/digit-spot.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/LastDigitPrediction/last-digit-stat.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/LastDigitPrediction/digit-display.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/LastDigitPrediction/last-digit-pointer.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/LastDigitPrediction/last-digit-prediction.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/Digits/digits.tsx","webpack://@deriv/trader/./src/Modules/Contract/Components/Digits/index.ts","webpack://@deriv/trader/./src/Modules/Page404/Components/Page404.tsx","webpack://@deriv/trader/./src/Modules/Page404/index.ts","webpack://@deriv/trader/./src/Modules/SmartChart/Components/Markers/accumulators-profit-loss-text.tsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/Markers/accumulators-profit-loss-tooltip.tsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/Markers/accumulators-chart-elements.tsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/Markers/marker.tsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/bottom-widgets.tsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/toolbar-widgets.tsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/recent-trade-info.tsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/top-widgets.tsx","webpack://@deriv/trader/./src/Modules/SmartChart/index.js","webpack://@deriv/trader/./src/Modules/Trading/Helpers/contract-type.tsx","webpack://@deriv/trader/./src/Modules/Trading/Helpers/digits.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/contract-type.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/proposal.ts","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/start-date.ts","webpack://@deriv/trader/./src/Stores/Providers/modules-providers.tsx","webpack://@deriv/trader/./src/Stores/useModulesStores.tsx","webpack://@deriv/trader/./src/Stores/useTraderStores.tsx","webpack://@deriv/trader/./src/_common/base/server_time.ts","webpack://@deriv/trader/./src/trader-providers.tsx","webpack://@deriv/trader/../utils/src/getLocalStorage.ts","webpack://@deriv/trader/../utils/src/getFeatureFlag.ts","webpack://@deriv/trader/../utils/src/chat.ts","webpack://@deriv/trader/../utils/src/getActiveAccounts.ts"],"sourcesContent":["import { createContext } from 'react';\nimport type { TStores } from '../types';\n\nconst StoreContext = createContext<TStores | null>(null);\n\nexport default StoreContext;\n","import BaseStore from './BaseStore';\n\nconst FLAGS = {\n    dtrader_v2_mobile: false,\n    dtrader_v2_desktop: false,\n    next_qs: false,\n    sharkfin: false,\n    wallet: false,\n} satisfies Record<string, boolean>;\n\nexport default class FeatureFlagsStore extends BaseStore<{ [k in keyof typeof FLAGS]: boolean }> {\n    private static instance: FeatureFlagsStore | null = null;\n\n    constructor() {\n        if (FeatureFlagsStore.instance) {\n            FeatureFlagsStore.instance.cleanup();\n        }\n\n        super('FeatureFlagsStore', () => {\n            // Set the default values for the first time.\n            if (!this.data) this.update(FLAGS);\n            // Update the store data if a new flag was added or removed.\n            if (this.data && Object.keys(this.data).length !== Object.keys(FLAGS).length) {\n                this.update(old => {\n                    const data = FLAGS;\n\n                    Object.keys(FLAGS).forEach(flag => {\n                        // @ts-expect-error flag key is always present in the object, Hence can ignore the TS error.\n                        if (old[flag] !== undefined) data[flag] = old[flag];\n                    });\n\n                    return data;\n                });\n            }\n        });\n\n        this.data = FLAGS;\n        FeatureFlagsStore.instance = this;\n    }\n\n    cleanup() {\n        this.unmount();\n    }\n}\n","import { action, makeObservable, observable } from 'mobx';\nimport { makePersistable, stopPersisting } from 'mobx-persist-store';\n\nexport default class BaseStore<T> {\n    data: T | undefined = undefined;\n\n    constructor(name: string, onHydrationDone?: VoidFunction) {\n        makeObservable(this, {\n            data: observable,\n            update: action.bound,\n            unmount: action.bound,\n        });\n\n        makePersistable(this, { name, properties: ['data'], storage: window.localStorage }).then(() =>\n            onHydrationDone?.()\n        );\n    }\n\n    update(data: NonNullable<T> | ((previous?: T) => NonNullable<T>)) {\n        this.data = data instanceof Function ? data(this.data) : data;\n    }\n\n    unmount() {\n        stopPersisting(this);\n    }\n}\n","import React, { useEffect, useMemo } from 'react';\nimport StoreContext from './storeContext';\nimport { FeatureFlagsStore } from './stores';\nimport type { TCoreStores, TStores } from '../types';\n\nconst StoreProvider = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    const memoizedValue: TStores = useMemo(() => {\n        // If the store is mocked for testing purposes, then return the mocked value.\n        if ('is_mock' in store && store.is_mock) return store as unknown as TStores;\n\n        // Otherwise, instantiate store and return it.\n        return {\n            ...store,\n            feature_flags: new FeatureFlagsStore(),\n        };\n    }, [store]);\n\n    useEffect(() => {\n        return () => {\n            Object.values(memoizedValue).forEach(value => {\n                if (typeof value === 'object' && 'unmount' in value) value.unmount();\n            });\n        };\n    }, [memoizedValue]);\n\n    return <StoreContext.Provider value={memoizedValue}>{children}</StoreContext.Provider>;\n};\n\nexport default StoreProvider;\n","import { useContext } from 'react';\nimport StoreContext from './storeContext';\n\nconst useStore = () => {\n    const store = useContext(StoreContext);\n\n    if (!store) {\n        throw new Error('useStore must be used within StoreProvider');\n    }\n\n    return store;\n};\n\nexport default useStore;\n","import { cacheTrackEvents } from '@deriv/shared';\nimport { Analytics } from '@deriv-com/analytics';\n\nexport const sendDtraderV2OpenToAnalytics = () => {\n    cacheTrackEvents.loadEvent([\n        {\n            event: {\n                name: 'ce_dtrader_trade_form',\n                properties: {\n                    action: 'open',\n                },\n            },\n        },\n    ]);\n};\n\nexport const sendSelectedTradeTypeToAnalytics = (\n    trade_name: string,\n    subform_name: string,\n    market_name: string,\n    trade_type_count: number\n) => {\n    cacheTrackEvents.loadEvent([\n        {\n            event: {\n                name: 'ce_dtrader_trade_form',\n                properties: {\n                    action: 'select_trade_type',\n                    trade_name,\n                    subform_name,\n                    market_name,\n                    trade_type_count,\n                },\n            },\n        },\n    ]);\n};\n\nexport const sendOpenGuideToAnalytics = (trade_name: string, subform_name: string) => {\n    cacheTrackEvents.loadEvent([\n        {\n            event: {\n                name: 'ce_dtrader_trade_form',\n                properties: {\n                    action: 'open_guide',\n                    trade_name,\n                    subform_name,\n                },\n            },\n        },\n    ]);\n};\n\nexport const sendMarketTypeToAnalytics = (market_name: string, trade_name: string) => {\n    cacheTrackEvents.loadEvent([\n        {\n            event: {\n                name: 'ce_dtrader_trade_form',\n                properties: {\n                    action: 'select_market_type',\n                    market_name,\n                    trade_name,\n                },\n            },\n        },\n    ]);\n};\n\nexport const sendDtraderV2PurchaseToAnalytics = (trade_name: string, market_name: string, contract_id: number) => {\n    cacheTrackEvents.loadEvent([\n        {\n            event: {\n                name: 'ce_dtrader_trade_form',\n                properties: {\n                    action: 'run_contract',\n                    trade_name,\n                    market_name,\n                    contract_id,\n                },\n            },\n        },\n    ]);\n};\n\nexport const sendDtraderPurchaseToAnalytics = (trade_name: string, market_name: string, contract_id: number) => {\n    cacheTrackEvents.loadEvent([\n        {\n            event: {\n                name: 'ce_contracts_set_up_form',\n                properties: {\n                    action: 'run_contract',\n                    trade_name,\n                    market_name,\n                    contract_id,\n                },\n            },\n        },\n    ]);\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\n\ntype TBounce = React.PropsWithChildren<{\n    className: string;\n    is_visible: boolean;\n    keyname: string;\n}>;\n\nconst BounceUp = {\n    animate: {\n        y: 0,\n        opacity: 1,\n    },\n    initial: {\n        y: 35,\n        opacity: 0,\n    },\n    transition: {\n        type: 'spring',\n        stiffness: 500,\n        damping: 15,\n        duration: 0.3,\n    },\n};\n\nconst Bounce = ({ children, className, is_visible, keyname }: TBounce) =>\n    is_visible ? (\n        <motion.div\n            initial={BounceUp.initial}\n            animate={BounceUp.animate}\n            transition={BounceUp.transition}\n            className={className}\n            key={keyname}\n        >\n            {children}\n        </motion.div>\n    ) : null;\n\nexport { Bounce };\n","import React from 'react';\nimport { motion } from 'framer-motion';\n\ntype TSlideIn = React.PropsWithChildren<{\n    className: string;\n    is_visible?: boolean;\n    keyname: string;\n    type?: string;\n}>;\n\nconst SlideInFromTop = {\n    initial: {\n        y: -20,\n        opacity: 0,\n    },\n    animate: {\n        y: 0,\n        opacity: 1,\n    },\n    transition: {\n        duration: 0.2,\n    },\n};\n\nconst SlideInFromBottom = {\n    initial: {\n        y: 20,\n        opacity: 0,\n    },\n    animate: {\n        y: 0,\n        opacity: 1,\n    },\n    transition: {\n        duration: 0.2,\n    },\n};\n\nconst SlideIn = ({ children, className, keyname, is_visible, type }: TSlideIn) => {\n    if (type === 'bottom') {\n        return (\n            <>\n                {is_visible && (\n                    <motion.div\n                        initial={SlideInFromBottom.initial}\n                        animate={SlideInFromBottom.animate}\n                        transition={SlideInFromBottom.transition}\n                        className={className}\n                        key={keyname}\n                    >\n                        {children}\n                    </motion.div>\n                )}\n            </>\n        );\n    }\n    return (\n        <>\n            {is_visible && (\n                <motion.div\n                    initial={SlideInFromTop.initial}\n                    animate={SlideInFromTop.animate}\n                    transition={SlideInFromTop.transition}\n                    className={className}\n                    key={keyname}\n                >\n                    {children}\n                </motion.div>\n            )}\n        </>\n    );\n};\n\nexport { SlideIn };\n","import { localize } from '@deriv/translations';\nimport {\n    addComma,\n    isHighLow,\n    getContractTypesConfig,\n    isCallPut,\n    isVanillaContract,\n    TContractInfo,\n    CONTRACT_TYPES,\n    TRADE_TYPES,\n} from '@deriv/shared';\n\nexport const addCommaToNumber = (\n    num: number | null | undefined,\n    decimal_places?: number | undefined\n): string | number | null | undefined => {\n    if (!num || isNaN(num)) {\n        return num;\n    }\n    const n = String(decimal_places ? (+num).toFixed(decimal_places) : num);\n    const p = n.indexOf('.');\n    return n.replace(/\\d(?=(?:\\d{3})+(?:\\.|$))/g, (m, i) => (p <= 0 || i < p ? `${m},` : m));\n};\n\nexport const getBarrierLabel = (contract_info: TContractInfo) => {\n    if (isDigitType(contract_info.contract_type)) {\n        return localize('Target');\n    }\n    if (isVanillaContract(contract_info.contract_type)) {\n        return localize('Strike');\n    }\n    return localize('Barrier');\n};\n\nexport const getBarrierValue = (contract_info: TContractInfo) => {\n    if (isDigitType(contract_info.contract_type)) {\n        return digitTypeMap(contract_info)[contract_info.contract_type as keyof ReturnType<typeof digitTypeMap>];\n    }\n    return contract_info.barrier ? addComma(contract_info.barrier) : null;\n};\n\nexport const isDigitType = (contract_type: TContractInfo['contract_type']) =>\n    contract_type && /digit/.test(contract_type.toLowerCase());\n\nconst digitTypeMap = (contract_info: TContractInfo) => ({\n    [CONTRACT_TYPES.MATCH_DIFF.DIFF]: localize('Not {{barrier}}', { barrier: contract_info.barrier }),\n    [CONTRACT_TYPES.EVEN_ODD.EVEN]: localize('Even'),\n    [CONTRACT_TYPES.MATCH_DIFF.MATCH]: localize('Equals {{barrier}}', { barrier: contract_info.barrier }),\n    [CONTRACT_TYPES.EVEN_ODD.ODD]: localize('Odd'),\n    [CONTRACT_TYPES.OVER_UNDER.OVER]: localize('Over {{barrier}}', { barrier: contract_info.barrier }),\n    [CONTRACT_TYPES.OVER_UNDER.UNDER]: localize('Under {{barrier}}', { barrier: contract_info.barrier }),\n});\n\nexport const filterByContractType = (\n    { contract_type, shortcode }: { contract_type?: string; shortcode?: string },\n    trade_contract_type: string\n) => {\n    const is_call_put = isCallPut(trade_contract_type as Parameters<typeof isCallPut>[0]);\n    const is_high_low = isHighLow({ shortcode });\n    const is_vanilla = isVanillaContract(contract_type);\n    const { CALL, CALLE, PUT, PUTE } = CONTRACT_TYPES;\n    const trade_types = is_call_put\n        ? [CALL, CALLE, PUT, PUTE]\n        : getContractTypesConfig()[trade_contract_type]?.trade_types;\n    const match = trade_types?.includes(contract_type ?? '');\n    if (trade_contract_type === TRADE_TYPES.HIGH_LOW) return is_high_low;\n    return match && (is_vanilla || !is_high_low);\n};\n","import { ContractType } from 'Stores/Modules/Trading/Helpers/contract-type';\n\nexport const onChangeSymbolAsync = async (symbol: string): Promise<void> => {\n    await ContractType.buildContractTypesConfig(symbol);\n};\n","import { localize } from '@deriv/translations';\nimport { isHourValid, isMinuteValid, isTimeValid, toMoment, TRuleOptions } from '@deriv/shared';\nimport { isSessionAvailable } from '../Helpers/start-date';\nimport { TTradeStore } from 'Types';\n\ntype TValidationRules = {\n    [key: string]: {\n        rules?: Array<string | TRuleOptions<TTradeStore>>[];\n        trigger?: string;\n    };\n};\n\nconst tradeSpecificBarrierCheck = (is_vanilla: boolean, input: number) => is_vanilla || input !== 0;\n\nexport const getValidationRules = (): TValidationRules => ({\n    amount: {\n        rules: [\n            ['req', { message: localize('Amount is a required field.') }],\n            ['number', { min: 0, type: 'float' }],\n        ],\n    },\n    barrier_1: {\n        rules: [\n            [\n                'req',\n                {\n                    condition: store => !!store.barrier_count && store.form_components.indexOf('barrier') > -1,\n                    message: localize('Barrier is a required field.'),\n                },\n            ],\n            ['barrier', { condition: (store: TTradeStore) => !!store.barrier_count }],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['barrier_1'], options, store, inputs) =>\n                        Number(store?.barrier_count) > 1 ? +value > Number(inputs?.barrier_2) : true,\n                    message: localize('Higher barrier must be higher than lower barrier.'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['barrier_1'], options, store, inputs) =>\n                        /^[+-]/.test(inputs?.barrier_1 ?? '')\n                            ? tradeSpecificBarrierCheck(!!store?.is_vanilla, Number(inputs?.barrier_1))\n                            : true,\n                    message: localize('Barrier cannot be zero.'),\n                },\n            ],\n        ],\n        trigger: 'barrier_2',\n    },\n    barrier_2: {\n        rules: [\n            [\n                'req',\n                {\n                    condition: store => store.barrier_count > 1 && store.form_components.indexOf('barrier') > -1,\n                    message: localize('Barrier is a required field.'),\n                },\n            ],\n            ['barrier', { condition: (store: TTradeStore) => !!store.barrier_count }],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['barrier_2'], options, store, inputs) =>\n                        (/^[+-]/g.test(inputs?.barrier_1 ?? '') && /^[+-]/g.test(value)) ||\n                        (/^(?![+-])/g.test(inputs?.barrier_1 ?? '') && /^(?![+-])/g.test(value)),\n                    message: localize('Both barriers should be relative or absolute'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['barrier_2'], options, store, inputs) =>\n                        Number(inputs?.barrier_1) > +value,\n                    message: localize('Lower barrier must be lower than higher barrier.'),\n                },\n            ],\n        ],\n        trigger: 'barrier_1',\n    },\n    duration: {\n        rules: [['req', { message: localize('Duration is a required field.') }]],\n    },\n    start_date: {\n        trigger: 'start_time',\n    },\n    expiry_date: {\n        trigger: 'expiry_time',\n    },\n    start_time: {\n        rules: [\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['start_time'], options, store) =>\n                        store?.contract_start_type === 'spot' || isTimeValid(value ?? ''),\n                    message: localize('Please enter the start time in the format \"HH:MM\".'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['start_time'], options, store) =>\n                        store?.contract_start_type === 'spot' || isHourValid(value ?? ''),\n                    message: localize('Hour must be between 0 and 23.'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['start_time'], options, store) =>\n                        store?.contract_start_type === 'spot' || isMinuteValid(value ?? ''),\n                    message: localize('Minute must be between 0 and 59.'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['start_time'], options, store) => {\n                        if (store?.contract_start_type === 'spot') return true;\n                        if (!isTimeValid(value ?? '')) return false;\n                        const start_moment = toMoment(store?.start_date);\n                        const start_moment_clone = start_moment.clone();\n                        const [h, m] = value?.split(':') ?? [];\n                        return isSessionAvailable(\n                            store?.sessions,\n                            start_moment_clone.hour(+h).minute(+m),\n                            start_moment\n                        );\n                    },\n                    message: localize('Start time cannot be in the past.'),\n                },\n            ],\n        ],\n    },\n    expiry_time: {\n        rules: [\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['expiry_time'], options, store) =>\n                        store?.contract_start_type === 'spot' || isTimeValid(value ?? ''),\n                    message: localize('Please enter the expiry time in the format \"HH:MM\".'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['expiry_time'], options, store) =>\n                        store?.contract_start_type === 'spot' || isHourValid(value ?? ''),\n                    message: localize('Hour must be between 0 and 23.'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['expiry_time'], options, store) =>\n                        store?.contract_start_type === 'spot' || isMinuteValid(value ?? ''),\n                    message: localize('Minute must be between 0 and 59.'),\n                },\n            ],\n            [\n                'custom',\n                {\n                    func: (value: TTradeStore['expiry_time'], options, store) => {\n                        if (store?.contract_start_type === 'spot') return true;\n                        if (!isTimeValid(value ?? '')) return false;\n                        const start_moment = toMoment(store?.start_date);\n                        const start_moment_clone = start_moment.clone();\n                        const [h, m] = value?.split(':') ?? [];\n                        return isSessionAvailable(\n                            store?.sessions,\n                            start_moment_clone.hour(+h).minute(+m),\n                            start_moment\n                        );\n                    },\n                    message: localize('Expiry time cannot be in the past.'),\n                },\n            ],\n        ],\n    },\n    ...getMultiplierValidationRules(),\n});\n\nexport const getMultiplierValidationRules = () => ({\n    stop_loss: {\n        rules: [\n            [\n                'req',\n                {\n                    condition: (store: TTradeStore) => store.has_stop_loss && !store.stop_loss,\n                    message: localize('Please enter a stop loss amount.'),\n                },\n            ],\n        ],\n    },\n    take_profit: {\n        rules: [\n            [\n                'req',\n                {\n                    condition: (store: TTradeStore) => store.has_take_profit && !store.take_profit,\n                    message: localize('Please enter a take profit amount.'),\n                },\n            ],\n        ],\n    },\n});\n","import { Buy, BuyContractResponse, BuyContractRequest } from '@deriv/api-types';\nimport { WS } from '@deriv/shared';\n\ntype TResponse = BuyContractResponse & {\n    echo_req: Buy;\n    error?: {\n        code: string;\n        message: string;\n        details?: BuyContractResponse['buy'] & { field: string };\n    };\n};\n\nexport const processPurchase = async (\n    proposal_id: string,\n    price: string | number,\n    passthrough?: BuyContractRequest['passthrough']\n): Promise<TResponse> =>\n    WS.buy({\n        proposal_id,\n        price,\n        ...(passthrough && { passthrough }),\n    });\n","/**\n * @param {Object} previous_ticks_history_stats - an object of type: { ticks_stayed_in: number[], last_tick_epoch: number }\n *                                                with ticks_stayed_in starting with the latest counter value;\n * @param {number[]} new_ticks_history_stats - an array of ticks counters containing 100 last values at first, and then only 1 latest updated counter value;\n * @param {number} last_tick_epoch - an epoch of the latest tick counted by the latest (last) ticks counter in new_ticks_stayed_in array;\n * @returns an object of the same type as previous_ticks_history_stats.\n */\n\nimport { TTradeStore } from 'Types';\n\ntype TGetUpdatedTicksHistoryStats = {\n    previous_ticks_history_stats: TTradeStore['ticks_history_stats'];\n    new_ticks_history_stats?: TTradeStore['ticks_history_stats']['ticks_stayed_in'];\n    last_tick_epoch: TTradeStore['ticks_history_stats']['last_tick_epoch'];\n};\n\nexport const getUpdatedTicksHistoryStats = ({\n    previous_ticks_history_stats = {},\n    new_ticks_history_stats = [],\n    last_tick_epoch,\n}: TGetUpdatedTicksHistoryStats) => {\n    // we anticipate that the latest counter value will be the last one in the received new_ticks_stayed_in array:\n    let ticks_stayed_in = [];\n    const previous_history = previous_ticks_history_stats.ticks_stayed_in || [];\n    const previous_epoch = previous_ticks_history_stats.last_tick_epoch ?? 0;\n    if (!new_ticks_history_stats.length || !last_tick_epoch) return previous_ticks_history_stats;\n    if (new_ticks_history_stats.length > 1) {\n        ticks_stayed_in = [...new_ticks_history_stats].reverse();\n    } else if (new_ticks_history_stats[0] <= previous_history[0] && last_tick_epoch > previous_epoch) {\n        ticks_stayed_in = [new_ticks_history_stats[0], ...previous_history.slice(0, previous_history.length - 1)];\n    } else if (last_tick_epoch === previous_epoch) {\n        ticks_stayed_in = previous_history;\n    } else {\n        ticks_stayed_in = [new_ticks_history_stats[0], ...previous_history.slice(1)];\n    }\n    return { ticks_stayed_in, last_tick_epoch };\n};\n","import { isDtraderV2DesktopEnabled, isDtraderV2MobileEnabled } from '@deriv/shared';\nimport { ContractType } from 'Stores/Modules/Trading/Helpers/contract-type';\nimport { TTradeStore } from 'Types';\n\nexport const onChangeContractTypeList = ({\n    root_store,\n    contract_types_list,\n    contract_types_list_v2,\n    contract_type,\n}: TTradeStore) => {\n    const is_dtrader_v2_enabled =\n        isDtraderV2MobileEnabled(root_store?.ui.is_mobile) || isDtraderV2DesktopEnabled(root_store?.ui.is_desktop);\n    const list = is_dtrader_v2_enabled ? contract_types_list_v2 : contract_types_list;\n    return ContractType.getContractType(list, contract_type);\n};\n\nexport const onChangeContractType = (store: TTradeStore) => {\n    return ContractType.getContractValues(store);\n};\n","import { getExpiryType, getDurationMinMaxValues } from '@deriv/shared';\nimport { ContractType } from 'Stores/Modules/Trading/Helpers/contract-type';\nimport { TTextValueStrings, TTradeStore } from 'Types';\n\ntype TOnChangeExpiry = (store: TTradeStore) => {\n    contract_expiry_type: string;\n    barrier_count?: number;\n    barrier_1?: string;\n    barrier_2?: string;\n};\n\nexport const onChangeExpiry: TOnChangeExpiry = store => {\n    const contract_expiry_type = getExpiryType(store);\n\n    // TODO: there will be no barrier available if contract is only daily but client chooses intraday endtime. we should find a way to handle this.\n    const obj_barriers =\n        store.contract_expiry_type !== contract_expiry_type && // barrier value changes for tick/intraday/daily\n        ContractType.getBarriers(store.contract_type, contract_expiry_type);\n\n    return {\n        contract_expiry_type,\n        ...obj_barriers,\n    };\n};\n\nexport const onChangeContractType = (store: TTradeStore, prev_duration_unit: string) => {\n    const contract_expiry_type = getExpiryType(store);\n\n    const { duration, duration_min_max, duration_unit, duration_units_list } = store;\n\n    const obj_duration = assertDuration({\n        contract_expiry_type,\n        duration,\n        duration_min_max,\n        duration_unit,\n        prev_duration_unit,\n        duration_units_list,\n    });\n\n    return {\n        ...obj_duration,\n    };\n};\n\nconst assertDuration = ({\n    contract_expiry_type,\n    duration,\n    duration_min_max,\n    duration_unit,\n    prev_duration_unit,\n    duration_units_list,\n}: {\n    contract_expiry_type: string;\n    duration: number;\n    duration_min_max: TTradeStore['duration_min_max'];\n    duration_unit: string;\n    prev_duration_unit?: string;\n    duration_units_list?: TTextValueStrings[];\n}) => {\n    const [min, max] = getDurationMinMaxValues(duration_min_max ?? {}, contract_expiry_type ?? '', duration_unit ?? '');\n\n    if (prev_duration_unit && !duration_units_list?.map(unit => unit.value).includes(prev_duration_unit)) {\n        return { duration: min };\n    }\n\n    if (Number(duration) < Number(min)) {\n        return { duration: min };\n    }\n    if (Number(duration) > Number(max)) {\n        return { duration: max };\n    }\n    return {};\n};\n","import { ContractType } from 'Stores/Modules/Trading/Helpers/contract-type';\nimport { TTradeStore } from 'Types';\n\nexport const onChangeStartDate = async (store: TTradeStore) => {\n    const { contract_type, duration_unit, start_date } = store;\n    const server_time = store.root_store?.common.server_time;\n    let { start_time, expiry_type } = store;\n\n    start_time = start_time || server_time?.clone().add(6, 'minute').format('HH:mm'); // when there is not a default value for start_time, it should be set more than 5 min after server_time\n\n    const obj_contract_start_type = ContractType.getStartType(start_date);\n    const contract_start_type = obj_contract_start_type.contract_start_type;\n    const obj_sessions = ContractType.getSessions(contract_type, start_date);\n    const sessions = obj_sessions.sessions;\n    const obj_start_time = ContractType.getStartTime(sessions, start_date, start_time);\n\n    const obj_duration_units_list = ContractType.getDurationUnitsList(contract_type, contract_start_type);\n    const duration_units_list = obj_duration_units_list.duration_units_list;\n    const obj_duration_unit = ContractType.getDurationUnit(duration_unit, contract_type, contract_start_type);\n\n    const obj_expiry_type = ContractType.getExpiryType(duration_units_list, expiry_type);\n    expiry_type = obj_expiry_type.expiry_type;\n    const obj_expiry_date = ContractType.getExpiryDate(duration_units_list, store.expiry_date, expiry_type, start_date);\n\n    const obj_duration_min_max = ContractType.getDurationMinMax(contract_type, contract_start_type);\n\n    return {\n        ...obj_contract_start_type,\n        ...obj_duration_units_list,\n        ...obj_duration_min_max,\n        ...obj_duration_unit,\n        ...obj_sessions,\n        ...obj_start_time,\n        ...obj_expiry_date,\n        ...obj_expiry_type,\n    };\n};\n\nexport const onChangeExpiry = async (store: TTradeStore) => {\n    const { start_time, expiry_date, expiry_type, expiry_time, start_date, symbol, sessions } = store;\n    const trading_times = await ContractType.getTradingTimes(expiry_date, symbol);\n    const obj_market_open_times = { market_open_times: trading_times.open };\n    const obj_market_close_times = { market_close_times: trading_times.close };\n\n    const market_close_times = obj_market_close_times.market_close_times;\n    const obj_expiry_time = ContractType.getExpiryTime(\n        expiry_date,\n        expiry_time,\n        expiry_type,\n        market_close_times,\n        sessions,\n        start_date,\n        start_time\n    );\n\n    return {\n        ...obj_expiry_time,\n        ...obj_market_open_times,\n        ...obj_market_close_times,\n    };\n};\n","import { ContractType as ContractTypeHelper } from 'Stores/Modules/Trading/Helpers/contract-type';\nimport * as ContractType from '../Actions/contract-type';\nimport * as Duration from '../Actions/duration';\nimport * as StartDate from '../Actions/start-date';\nimport { TTradeStore } from 'Types';\n\n// remove local TGetSnapshot type and assertion after TS migration for trader package is complete\ntype TGetSnapshot = (properties?: string[]) => TTradeStore;\n\nconst processInSequence = async (\n    store: TTradeStore,\n    functions: ReturnType<typeof getMethodsList> | ReturnType<typeof getExpiryMethodsList>\n) => {\n    const snapshot = (store.getSnapshot as TGetSnapshot)();\n    // To make sure that every function is invoked and affects the snapshot respectively, we have to use for instead of forEach\n    for (let i = 0; i < functions.length; i++) {\n        // Shallow copy with Object.assign is good enough to extend the snapshot with new state\n        // we don't need deep extension here, since each function in functions array composes a property of the store completely\n        Object.assign(snapshot, await functions[i](snapshot)); // eslint-disable-line no-await-in-loop\n    }\n    store.updateStore({\n        ...snapshot,\n    });\n};\n\nexport const processTradeParams = async (store: TTradeStore, new_state: Partial<TTradeStore>) => {\n    const functions = getMethodsList(store, new_state);\n    await processInSequence(store, functions);\n\n    const duration_functions = getExpiryMethodsList();\n    await processInSequence(store, duration_functions);\n\n    store.updateStore({\n        is_trade_enabled: true,\n        is_trade_enabled_v2: true,\n    });\n};\n\nconst getMethodsList = (\n    store: Parameters<typeof processTradeParams>[0],\n    new_state: Parameters<typeof processTradeParams>[1]\n) => {\n    const filtered_keys = Object.keys(new_state).filter(key => /\\b(symbol|contract_type|is_equal)\\b/.test(key));\n    const old_duration_unit = store.duration_unit;\n\n    // Create a modified version of Duration.onChangeContractType that includes old_duration_unit\n    const onChangeContractTypeWithOldUnit = (snapshot: TTradeStore) => {\n        return Duration.onChangeContractType(snapshot, old_duration_unit);\n    };\n\n    return [\n        ContractTypeHelper.getContractCategories,\n        ContractType.onChangeContractTypeList,\n        ...(filtered_keys.length > 0 || !store.contract_type // symbol/contract_type changed or contract_type not set yet\n            ? [ContractType.onChangeContractType]\n            : []),\n        StartDate.onChangeStartDate,\n        Duration.onChangeExpiry, // it should be always after StartDate.onChangeStartDate\n        ...(filtered_keys.length || !store.contract_type // symbol/contract_type changed or contract_type not set yet\n            ? [onChangeContractTypeWithOldUnit]\n            : []),\n    ];\n};\n\nconst getExpiryMethodsList = () => [StartDate.onChangeExpiry];\n","import { action, intercept, observable, reaction, toJS, when, makeObservable } from 'mobx';\nimport { isProduction, isEmptyObject, Validator } from '@deriv/shared';\nimport { getValidationRules } from './Modules/Trading/Constants/validation-rules';\nimport { TRootStore } from 'Types';\n\ntype TValidationRules = ReturnType<typeof getValidationRules> | Record<string, never>;\n\ntype TBaseStoreOptions = {\n    root_store: TRootStore;\n    local_storage_properties?: string[];\n    session_storage_properties?: string[];\n    validation_rules?: TValidationRules;\n    store_name?: string;\n};\n\n/**\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\n *  1. Creating snapshot object from the store.\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\n */\nexport default class BaseStore {\n    /**\n     * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\n     */\n    static STORAGES = Object.freeze({\n        LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\n        SESSION_STORAGE: Symbol('SESSION_STORAGE'),\n    });\n    clientInitDisposer: null | (() => void) = null;\n    client_init_listener: null | (() => Promise<void>) = null;\n    logoutDisposer: null | (() => void) = null;\n    logout_listener: null | (() => Promise<void>) = null;\n    local_storage_properties: string[];\n    networkStatusChangeDisposer: null | (() => void) = null;\n    network_status_change_listener: null | ((is_online: boolean) => void) = null;\n    partial_fetch_time = 0;\n    preSwitchAccountDisposer: null | (() => void) = null;\n    pre_switch_account_listener: null | (() => Promise<void>) = null;\n    realAccountSignupEndedDisposer: null | (() => void) = null;\n    real_account_signup_ended_listener: null | (() => Promise<void>) = null;\n    root_store: TRootStore;\n    session_storage_properties: string[];\n    store_name = '';\n    switchAccountDisposer: null | (() => void) = null;\n    switch_account_listener: null | (() => Promise<void>) = null;\n    themeChangeDisposer: null | (() => void) = null;\n    theme_change_listener: null | ((is_dark_mode_on: boolean) => void) = null;\n    validation_errors: { [key: string]: string[] } = {};\n    validation_rules: TValidationRules | Record<string, never> = {};\n    /**\n     * Constructor of the base class that gets properties' name of child which should be saved in storages\n     *\n     * @param {Object} options - An object that contains the following properties:\n     *     @property {Object}   root_store - An object that contains the root store of the app.\n     *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\n     *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\n     *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\n     *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\n     */\n    constructor(options = {} as TBaseStoreOptions) {\n        makeObservable(this, {\n            validation_errors: observable,\n            validation_rules: observable,\n            partial_fetch_time: observable,\n            retrieveFromStorage: action,\n            setValidationErrorMessages: action,\n            setValidationRules: action,\n            addRule: action,\n            validateProperty: action,\n            validateAllProperties: action,\n            onSwitchAccount: action.bound,\n            onPreSwitchAccount: action.bound,\n            onLogout: action.bound,\n            onClientInit: action.bound,\n            onNetworkStatusChange: action.bound,\n            onThemeChange: action.bound,\n            onRealAccountSignupEnd: action.bound,\n            disposePreSwitchAccount: action.bound,\n            disposeSwitchAccount: action.bound,\n            disposeLogout: action.bound,\n            disposeClientInit: action.bound,\n            disposeNetworkStatusChange: action.bound,\n            disposeThemeChange: action.bound,\n            disposeRealAccountSignupEnd: action.bound,\n            onUnmount: action.bound,\n            assertHasValidCache: action.bound,\n        });\n\n        const { root_store, local_storage_properties, session_storage_properties, validation_rules, store_name } =\n            options;\n\n        Object.defineProperty(this, 'root_store', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'local_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'session_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n\n        const has_local_or_session_storage = local_storage_properties?.length || session_storage_properties?.length;\n\n        if (has_local_or_session_storage) {\n            if (!store_name) {\n                throw new Error('store_name is required for local/session storage');\n            }\n\n            Object.defineProperty(this, 'store_name', {\n                value: store_name,\n                enumerable: false,\n                writable: false,\n            });\n        }\n\n        this.root_store = root_store;\n        this.local_storage_properties = local_storage_properties || [];\n        this.session_storage_properties = session_storage_properties || [];\n\n        setTimeout(() => {\n            this.setValidationRules(validation_rules);\n\n            this.setupReactionForLocalStorage();\n            this.setupReactionForSessionStorage();\n            this.retrieveFromStorage();\n        }, 0);\n    }\n\n    /**\n     * Returns an snapshot of the current store\n     *\n     * @param {String[]} properties - A list of properties' names that should be in the snapshot.\n     *\n     * @return {Object} Returns a cloned object of the store.\n     */\n    getSnapshot(properties: string[]): object {\n        let snapshot = toJS(this);\n\n        if (!isEmptyObject(this.root_store)) {\n            snapshot.root_store = this.root_store;\n        }\n\n        if (properties?.length) {\n            snapshot = properties.reduce(\n                (result, p) => Object.assign(result, { [p]: snapshot[p as keyof this] }),\n                {} as this\n            );\n        }\n\n        return snapshot;\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForLocalStorage() {\n        if (this.local_storage_properties.length) {\n            reaction(\n                () => this.local_storage_properties.map(i => this[i as keyof this]),\n                () => this.saveToStorage(this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForSessionStorage() {\n        if (this.session_storage_properties.length) {\n            reaction(\n                () => this.session_storage_properties.map(i => this[i as keyof this]),\n                () => this.saveToStorage(this.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\n     *\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\n     *\n     */\n    saveToStorage(properties: string[] = [], storage = Symbol('')) {\n        const snapshot = JSON.stringify(this.getSnapshot(properties), (key, value) => {\n            if (value !== null) return value;\n            return undefined;\n        });\n\n        if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\n            localStorage.setItem(this.store_name, snapshot);\n        } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\n            sessionStorage.setItem(this.store_name, snapshot);\n        }\n    }\n\n    /**\n     * Retrieves saved snapshot of the store and assigns to the current instance.\n     *\n     */\n    retrieveFromStorage() {\n        const local_storage_snapshot = JSON.parse(String(localStorage.getItem(this.store_name)));\n        const session_storage_snapshot = JSON.parse(String(sessionStorage.getItem(this.store_name)));\n\n        const snapshot = { ...local_storage_snapshot, ...session_storage_snapshot };\n\n        Object.keys(snapshot).forEach(k => (this[k as keyof this] = snapshot[k]));\n    }\n\n    /**\n     * Sets validation error messages for an observable property of the store\n     *\n     * @param {String} propertyName - The observable property's name\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\n     *\n     */\n    setValidationErrorMessages(propertyName: string, messages: string[]) {\n        const is_different = () =>\n            !!this.validation_errors[propertyName]\n                .filter(x => !messages.includes(x))\n                .concat(messages.filter(x => !this.validation_errors[propertyName].includes(x))).length;\n        if (!this.validation_errors[propertyName] || is_different()) {\n            this.validation_errors[propertyName] = messages;\n        }\n    }\n\n    /**\n     * Sets validation rules\n     *\n     * @param {object} rules\n     *\n     */\n    setValidationRules(rules: TValidationRules = {}): void {\n        Object.keys(rules).forEach(key => {\n            this.addRule<keyof TValidationRules>(key as keyof TValidationRules, rules[key as keyof TValidationRules]);\n        });\n    }\n\n    /**\n     * Adds rules to the particular property\n     *\n     * @param {String} property\n     * @param {String} rules\n     *\n     */\n    addRule<T extends keyof TValidationRules>(property: T, rules: TValidationRules[T]) {\n        this.validation_rules[property] = rules;\n\n        intercept(this, property as unknown as keyof this, change => {\n            this.validateProperty(property, change.newValue);\n            return change;\n        });\n    }\n\n    /**\n     * Validates a particular property of the store\n     *\n     * @param {String} property - The name of the property in the store\n     * @param {object} value    - The value of the property, it can be undefined.\n     *\n     */\n    validateProperty<T extends BaseStore>(property: string, value: T[keyof T]) {\n        const validation_rules_for_property = this.validation_rules[property] ?? {};\n        const trigger = (\n            'trigger' in validation_rules_for_property ? validation_rules_for_property.trigger : undefined\n        ) as keyof this;\n        const inputs = { [property]: value ?? this[property as keyof this] } as Pick<this, keyof this>;\n        const validation_rules = {\n            [property]: 'rules' in validation_rules_for_property ? validation_rules_for_property.rules : [],\n        };\n\n        if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\n            const validation_rules_for_trigger = this.validation_rules[trigger as keyof TValidationRules];\n            inputs[trigger] = this[trigger];\n            validation_rules[trigger as keyof TValidationRules] =\n                'rules' in validation_rules_for_trigger ? validation_rules_for_trigger.rules : [];\n        }\n        const validator = new Validator(inputs, validation_rules, this);\n\n        validator.isPassed();\n\n        Object.keys(inputs).forEach(key => {\n            this.setValidationErrorMessages(key, validator.errors.get(key));\n        });\n    }\n\n    /**\n     * Validates all properties which validation rule has been set for.\n     *\n     */\n    validateAllProperties() {\n        const validation_rules = Object.keys(this.validation_rules);\n        const validation_errors = Object.keys(this.validation_errors);\n        validation_rules.forEach(p => {\n            this.validateProperty(p, this[p as keyof this]);\n        });\n\n        // Remove keys that are present in error, but not in rules:\n        validation_errors.forEach(error => {\n            if (!validation_rules.includes(error)) {\n                delete this.validation_errors[error];\n            }\n        });\n    }\n\n    onSwitchAccount(listener: null | (() => Promise<void>)): void {\n        if (listener) {\n            this.switch_account_listener = listener;\n\n            this.switchAccountDisposer = when(\n                () => !!this.root_store.client.switch_broadcast,\n                () => {\n                    try {\n                        const result = this.switch_account_listener?.();\n                        if (result?.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.switchEndSignal();\n                                this.onSwitchAccount(this.switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Switching account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onPreSwitchAccount(listener: null | (() => Promise<void>)): void {\n        if (listener) {\n            this.pre_switch_account_listener = listener;\n            this.preSwitchAccountDisposer = when(\n                () => !!this.root_store.client.pre_switch_broadcast,\n                () => {\n                    try {\n                        const result = this.pre_switch_account_listener?.();\n                        if (result?.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.setPreSwitchAccount(false);\n                                this.onPreSwitchAccount(this.pre_switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Pre-switch account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onLogout(listener: null | (() => Promise<void>)): void {\n        this.logoutDisposer = when(\n            () => !!this.root_store.client.has_logged_out,\n            async () => {\n                try {\n                    const result = this.logout_listener?.();\n                    if (result?.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setLogout(false);\n                            this.onLogout(this.logout_listener);\n                        });\n                    } else {\n                        throw new Error('Logout listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.logout_listener = listener;\n    }\n\n    onClientInit(listener: null | (() => Promise<void>)): void {\n        this.clientInitDisposer = when(\n            () => !!this.root_store.client.initialized_broadcast,\n            async () => {\n                try {\n                    const result = this.client_init_listener?.();\n                    if (result?.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setInitialized(false);\n                            this.onClientInit(this.client_init_listener);\n                        });\n                    } else {\n                        throw new Error('Client init listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.client_init_listener = listener;\n    }\n\n    onNetworkStatusChange(listener: null | ((is_online: boolean) => void)): void {\n        this.networkStatusChangeDisposer = reaction(\n            () => this.root_store.common.is_network_online,\n            is_online => {\n                try {\n                    this.network_status_change_listener?.(is_online);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.network_status_change_listener = listener;\n    }\n\n    onThemeChange(listener: null | ((is_dark_mode_on: boolean) => void)): void {\n        this.themeChangeDisposer = reaction(\n            () => this.root_store.ui.is_dark_mode_on,\n            is_dark_mode_on => {\n                try {\n                    this.theme_change_listener?.(is_dark_mode_on);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.theme_change_listener = listener;\n    }\n\n    onRealAccountSignupEnd(listener: null | (() => Promise<void>)): void {\n        this.realAccountSignupEndedDisposer = when(\n            () => !!this.root_store.ui.has_real_account_signup_ended,\n            () => {\n                try {\n                    const result = this.real_account_signup_ended_listener?.();\n                    if (result?.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.ui.setRealAccountSignupEnd(false);\n                            this.onRealAccountSignupEnd(this.real_account_signup_ended_listener);\n                        });\n                    } else {\n                        throw new Error('Real account signup listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.real_account_signup_ended_listener = listener;\n    }\n\n    disposePreSwitchAccount() {\n        if (typeof this.preSwitchAccountDisposer === 'function') {\n            this.preSwitchAccountDisposer();\n        }\n        this.pre_switch_account_listener = null;\n    }\n\n    disposeSwitchAccount() {\n        if (typeof this.switchAccountDisposer === 'function') {\n            this.switchAccountDisposer();\n        }\n        this.switch_account_listener = null;\n    }\n\n    disposeLogout() {\n        if (typeof this.logoutDisposer === 'function') {\n            this.logoutDisposer();\n        }\n        this.logout_listener = null;\n    }\n\n    disposeClientInit() {\n        if (typeof this.clientInitDisposer === 'function') {\n            this.clientInitDisposer();\n        }\n        this.client_init_listener = null;\n    }\n\n    disposeNetworkStatusChange() {\n        if (typeof this.networkStatusChangeDisposer === 'function') {\n            this.networkStatusChangeDisposer();\n        }\n        this.network_status_change_listener = null;\n    }\n\n    disposeThemeChange() {\n        if (typeof this.themeChangeDisposer === 'function') {\n            this.themeChangeDisposer();\n        }\n        this.theme_change_listener = null;\n    }\n\n    disposeRealAccountSignupEnd() {\n        if (typeof this.realAccountSignupEndedDisposer === 'function') {\n            this.realAccountSignupEndedDisposer();\n        }\n        this.real_account_signup_ended_listener = null;\n    }\n\n    onUnmount() {\n        this.disposePreSwitchAccount();\n        this.disposeSwitchAccount();\n        this.disposeLogout();\n        this.disposeClientInit();\n        this.disposeNetworkStatusChange();\n        this.disposeThemeChange();\n        this.disposeRealAccountSignupEnd();\n    }\n\n    assertHasValidCache(loginid: string, ...reactions: VoidFunction[]): void {\n        // account was changed when this was unmounted.\n        if (this.root_store.client.loginid !== loginid) {\n            reactions.forEach(act => act());\n            this.partial_fetch_time = 0;\n        }\n    }\n}\n","import type { TEvents } from '@deriv-com/analytics';\n\nexport type TPayload = {\n    data: Omit<\n        Partial<TEvents['ce_chart_types_form'] & TEvents['ce_market_types_form'] & TEvents['ce_indicators_types_form']>,\n        'action'\n    > & {\n        action: string;\n    };\n    event_type: 'ce_chart_types_form' | 'ce_market_types_form' | 'ce_indicators_types_form';\n};\n\ntype TStateChangeOption = {\n    indicator_type_name?: string;\n    indicators_category_name?: string;\n    isClosed?: boolean;\n    is_favorite?: boolean;\n    is_info_open?: boolean;\n    is_open?: boolean;\n    chart_type_name?: string;\n    search_string?: string;\n    symbol?: string;\n    symbol_category?: string;\n    time_interval_name?: string;\n};\n\nexport const ACTION = {\n    ADD_ACTIVE: 'add_active',\n    ADD_TO_FAVORITES: 'add_to_favorites',\n    CHOOSE_CHART_TYPE: 'choose_chart_type',\n    CHOOSE_MARKET_TYPE: 'choose_market_type',\n    CHOOSE_TIME_INTERVAL: 'choose_time_interval',\n    CLEAN_ALL_ACTIVE: 'clean_all_active',\n    CLOSE: 'close',\n    DELETE_ACTIVE: 'delete_active',\n    DELETE_FROM_FAVORITES: 'delete_from_favorites',\n    EDIT_ACTIVE: 'edit_active',\n    INFO_OPEN: 'info_open',\n    INFO_CLOSE: 'info_close',\n    INFO_REDIRECT: 'info_redirect',\n    OPEN: 'open',\n    SEARCH: 'search',\n} as const;\n\nexport const STATE_TYPES = {\n    CHART_INTERVAL_CHANGE: 'CHART_INTERVAL_CHANGE',\n    CHART_TYPE_CHANGE: 'CHART_TYPE_CHANGE',\n    FAVORITE_MARKETS_TOGGLE: 'FAVORITE_MARKETS_TOGGLE',\n    INDICATOR_ADDED: 'INDICATOR_ADDED',\n    INDICATOR_DELETED: 'INDICATOR_DELETED',\n    INDICATOR_INFO_TOGGLE: 'INDICATOR_INFO_TOGGLE',\n    INDICATOR_SEARCH: 'INDICATOR_SEARCH',\n    INDICATOR_SETTINGS_OPEN: 'INDICATOR_SETTINGS_OPEN',\n    INDICATORS_CLEAR_ALL: 'INDICATORS_CLEAR_ALL',\n    INDICATORS_MODAL_TOGGLE: 'INDICATORS_MODAL_TOGGLE',\n    INITIAL: 'INITIAL',\n    MARKET_SEARCH: 'MARKET_SEARCH',\n    MARKET_STATE_CHANGE: 'MARKET_STATE_CHANGE',\n    READY: 'READY',\n    SCROLL_TO_LEFT: 'SCROLL_TO_LEFT',\n    SET_CHART_MODE: 'SET_CHART_MODE',\n    SYMBOL_CHANGE: 'SYMBOL_CHANGE',\n} as const;\n\nexport const SUBFORM_NAME = {\n    INDICATORS_INFO: 'indicators_info',\n    INDICATORS_TYPE: 'indicators_type',\n} as const;\n\nconst getChartTypeFormAnalyticsData = (state: keyof typeof STATE_TYPES, option: TStateChangeOption = {}) => {\n    const { chart_type_name = '', time_interval_name } = option;\n    const chart_event_type = 'ce_chart_types_form';\n    const payload: TPayload = {\n        data: {\n            action: '',\n            chart_type_name,\n            time_interval_name,\n        },\n        event_type: chart_event_type,\n    };\n    if (!chart_type_name) return {};\n    switch (state) {\n        case STATE_TYPES.CHART_INTERVAL_CHANGE:\n            payload.data.action = ACTION.CHOOSE_TIME_INTERVAL;\n            break;\n        case STATE_TYPES.CHART_TYPE_CHANGE:\n            payload.data.action = ACTION.CHOOSE_CHART_TYPE;\n            break;\n        default:\n            return {};\n    }\n    return payload;\n};\n\nconst getIndicatorTypeFormAnalyticsData = (state: keyof typeof STATE_TYPES, option: TStateChangeOption = {}) => {\n    const { indicator_type_name = '', indicators_category_name = '', is_info_open, is_open, search_string } = option;\n    const indicators_event_type = 'ce_indicators_types_form';\n    const indicators_subform = is_info_open ? SUBFORM_NAME.INDICATORS_INFO : SUBFORM_NAME.INDICATORS_TYPE;\n    const info_open_close_action = is_info_open ? ACTION.INFO_OPEN : ACTION.INFO_CLOSE;\n    const open_close_action = is_open ? ACTION.OPEN : ACTION.CLOSE;\n    const payload = {\n        event_type: indicators_event_type,\n    } as TPayload;\n    if (\n        (state === STATE_TYPES.INDICATOR_SEARCH && !option.search_string) ||\n        ((state === STATE_TYPES.INDICATOR_ADDED ||\n            state === STATE_TYPES.INDICATOR_DELETED ||\n            state === STATE_TYPES.INDICATOR_INFO_TOGGLE ||\n            state === STATE_TYPES.INDICATOR_SETTINGS_OPEN) &&\n            !indicator_type_name)\n    ) {\n        return {};\n    }\n    switch (state) {\n        case STATE_TYPES.INDICATOR_ADDED:\n            payload.data = {\n                action: ACTION.ADD_ACTIVE,\n                indicator_type_name,\n                indicators_category_name,\n                subform_name: indicators_subform,\n            };\n            break;\n        case STATE_TYPES.INDICATOR_DELETED:\n            payload.data = {\n                action: ACTION.DELETE_ACTIVE,\n                indicator_type_name,\n                indicators_category_name,\n            };\n            break;\n        case STATE_TYPES.INDICATOR_INFO_TOGGLE:\n            payload.data = {\n                action: info_open_close_action,\n                indicator_type_name,\n                indicators_category_name,\n            };\n            break;\n        case STATE_TYPES.INDICATOR_SEARCH:\n            payload.data = {\n                action: ACTION.SEARCH,\n                search_string,\n            };\n            break;\n        case STATE_TYPES.INDICATOR_SETTINGS_OPEN:\n            payload.data = {\n                action: ACTION.EDIT_ACTIVE,\n                indicator_type_name,\n                indicators_category_name,\n            };\n            break;\n        case STATE_TYPES.INDICATORS_MODAL_TOGGLE:\n            payload.data = {\n                action: open_close_action,\n            };\n            break;\n        case STATE_TYPES.INDICATORS_CLEAR_ALL:\n            payload.data = {\n                action: ACTION.CLEAN_ALL_ACTIVE,\n            };\n            break;\n        default:\n            return {};\n    }\n    return payload;\n};\n\nconst getMarketTypeFormAnalyticsData = (state: keyof typeof STATE_TYPES, option: TStateChangeOption = {}) => {\n    const { is_favorite, symbol_category: tab_market_name = '', search_string, symbol: market_type_name = '' } = option;\n    const market_event_type = 'ce_market_types_form';\n    const favorites_action = is_favorite ? ACTION.ADD_TO_FAVORITES : ACTION.DELETE_FROM_FAVORITES;\n    const payload = {\n        event_type: market_event_type,\n    } as TPayload;\n    if (\n        (state === STATE_TYPES.MARKET_SEARCH && !option.search_string) ||\n        (state === STATE_TYPES.FAVORITE_MARKETS_TOGGLE && !market_type_name)\n    ) {\n        return {};\n    }\n    switch (state) {\n        case STATE_TYPES.FAVORITE_MARKETS_TOGGLE:\n            payload.data = {\n                action: favorites_action,\n                market_type_name,\n            };\n            break;\n        case STATE_TYPES.MARKET_SEARCH:\n            payload.data = {\n                action: ACTION.SEARCH,\n                search_string,\n            };\n            break;\n        case STATE_TYPES.SYMBOL_CHANGE:\n            payload.data = {\n                action: ACTION.CHOOSE_MARKET_TYPE,\n                market_type_name,\n                tab_market_name,\n            };\n            break;\n        default:\n            return {};\n    }\n    return payload;\n};\n\nexport const getChartAnalyticsData = (state: keyof typeof STATE_TYPES, option: TStateChangeOption = {}) => {\n    const chart_type_form_events: string[] = [STATE_TYPES.CHART_INTERVAL_CHANGE, STATE_TYPES.CHART_TYPE_CHANGE];\n    const indicator_type_form_events: string[] = [\n        STATE_TYPES.INDICATOR_ADDED,\n        STATE_TYPES.INDICATOR_DELETED,\n        STATE_TYPES.INDICATOR_INFO_TOGGLE,\n        STATE_TYPES.INDICATOR_SEARCH,\n        STATE_TYPES.INDICATOR_SETTINGS_OPEN,\n        STATE_TYPES.INDICATORS_CLEAR_ALL,\n        STATE_TYPES.INDICATORS_MODAL_TOGGLE,\n    ];\n    const market_type_form_events: string[] = [\n        STATE_TYPES.FAVORITE_MARKETS_TOGGLE,\n        STATE_TYPES.MARKET_SEARCH,\n        STATE_TYPES.SYMBOL_CHANGE,\n    ];\n    if (chart_type_form_events.includes(state)) return getChartTypeFormAnalyticsData(state, option);\n    if (indicator_type_form_events.includes(state)) return getIndicatorTypeFormAnalyticsData(state, option);\n    if (market_type_form_events.includes(state)) return getMarketTypeFormAnalyticsData(state, option);\n    return {};\n};\n","import * as Symbol from './Actions/symbol';\nimport {\n    WS,\n    ChartBarrierStore,\n    cloneObject,\n    convertDurationLimit,\n    extractInfoFromShortcode,\n    findFirstOpenMarket,\n    getBarrierPipSize,\n    getMinPayout,\n    getPlatformSettings,\n    getPropertyValue,\n    getContractSubtype,\n    getTradeNotificationMessage,\n    isBarrierSupported,\n    isAccumulatorContract,\n    isCryptocurrency,\n    isEmptyObject,\n    isMarketClosed,\n    isMultiplierContract,\n    isTurbosContract,\n    isVanillaFxContract,\n    isVanillaContract,\n    pickDefaultSymbol,\n    resetEndTimeOnVolatilityIndices,\n    setLimitOrderBarriers,\n    showDigitalOptionsUnavailableError,\n    showUnavailableLocationError,\n    getCurrencyDisplayCode,\n    BARRIER_COLORS,\n    TRADE_TYPES,\n    hasBarrier,\n    isHighLow,\n    CONTRACT_TYPES,\n    setTradeURLParams,\n    getTradeURLParams,\n    isTouchContract,\n    getCardLabelsV2,\n    formatMoney,\n    getContractPath,\n    routes,\n    cacheTrackEvents,\n    isDtraderV2DesktopEnabled,\n    isDtraderV2MobileEnabled,\n} from '@deriv/shared';\nimport type { TEvents } from '@deriv-com/analytics';\nimport { localize } from '@deriv/translations';\nimport { getValidationRules, getMultiplierValidationRules } from 'Stores/Modules/Trading/Constants/validation-rules';\nimport { ContractType } from 'Stores/Modules/Trading/Helpers/contract-type';\nimport { isDigitContractType, isDigitTradeType } from 'Modules/Trading/Helpers/digits';\nimport ServerTime from '_common/base/server_time';\nimport { processPurchase } from './Actions/purchase';\nimport { getUpdatedTicksHistoryStats } from './Helpers/accumulator';\nimport { processTradeParams } from './Helpers/process';\nimport { action, computed, makeObservable, observable, override, reaction, runInAction, toJS, when } from 'mobx';\nimport { createProposalRequests, getProposalErrorField, getProposalInfo } from './Helpers/proposal';\nimport BaseStore from '../../base-store';\nimport { TContractTypesList, TRootStore, TTextValueNumber, TTextValueStrings } from 'Types';\nimport debounce from 'lodash.debounce';\nimport {\n    ActiveSymbols,\n    ActiveSymbolsRequest,\n    Buy,\n    BuyContractResponse,\n    History,\n    PriceProposalRequest,\n    PriceProposalResponse,\n    ServerTimeRequest,\n    TickSpotData,\n    TicksHistoryRequest,\n    TicksHistoryResponse,\n    TicksStreamResponse,\n    TradingTimesRequest,\n} from '@deriv/api-types';\nimport { STATE_TYPES, TPayload, getChartAnalyticsData } from './Helpers/chart';\nimport { safeParse } from '@deriv/utils';\nimport { sendDtraderPurchaseToAnalytics } from '../../../Analytics';\n\ntype TBarriers = Array<\n    ChartBarrierStore & {\n        hideOffscreenBarrier?: boolean;\n        isSingleBarrier?: boolean;\n    }\n>;\n\nexport type ProposalResponse = PriceProposalResponse & {\n    proposal: PriceProposalResponse['proposal'] & {\n        payout_choices: string[];\n        barrier_spot_distance: string;\n        contract_details: {\n            barrier: string;\n        };\n    };\n    error?: PriceProposalResponse['error'] & {\n        code: string;\n        message: string;\n        details?: {\n            payout_per_point_choices?: number[];\n            barrier_choices?: string[];\n            [k: string]: unknown;\n        };\n    };\n};\n\nexport type TChartLayout = {\n    adj: boolean;\n    aggregationType: string;\n    animation?: boolean;\n    candleWidth: number;\n    chartScale: string;\n    chartType: string;\n    crosshair: number;\n    extended: boolean;\n    flipped: boolean;\n    interval: number;\n    marketSessions: Partial<Record<string, boolean>>;\n    outliers: boolean;\n    panels: {\n        chart: {\n            chartName: string;\n            display: string;\n            index: number;\n            percent: number;\n            yAxis: {\n                name: string;\n                position: null;\n            };\n            yaxisLHS: string[];\n            yaxisRHS: string[];\n        };\n    };\n    periodicity: number;\n    previousMaxTicks?: number;\n    range: Partial<Record<string, unknown>>;\n    setSpan: Partial<Record<string, unknown>>;\n    studies?: Partial<Record<string, unknown>>;\n    symbols: [\n        {\n            interval: number;\n            periodicity: number;\n            setSpan: Partial<Record<string, unknown>>;\n            symbol: string;\n            symbolObject: ActiveSymbols[number];\n            timeUnit: string;\n        },\n    ];\n    timeUnit: string;\n    volumeUnderlay: boolean;\n};\nexport type TChartStateChangeOption = {\n    indicator_type_name?: string;\n    indicators_category_name?: string;\n    isClosed?: boolean;\n    is_favorite?: boolean;\n    is_info_open?: boolean;\n    is_open?: boolean;\n    chart_type_name?: string;\n    granularity?: number;\n    search_string?: string;\n    symbol?: string;\n    symbol_category?: string;\n    time_interval_name?: string;\n};\nexport type TV2ParamsInitialValues = {\n    growth_rate?: number;\n    strike?: string | number;\n    multiplier?: number;\n    barrier_1?: number;\n    payout_per_point?: string;\n};\ntype TContractDataForGTM = Omit<Partial<PriceProposalRequest>, 'cancellation' | 'limit_order'> &\n    ReturnType<typeof getProposalInfo> & {\n        buy_price: number;\n    };\ntype TPrevChartLayout =\n    | (TChartLayout & {\n          isDone?: VoidFunction;\n          is_used?: boolean;\n      })\n    | null;\n\ntype TDurationMinMax = {\n    [key: string]: { min: number; max: number };\n};\ntype TResponse<Req, Res extends { [key: string]: unknown }, K extends string> = Res & {\n    echo_req: Req;\n    error?: {\n        code: string;\n        message: string;\n        details?: Res[K] & { field: string; payout_per_point_choices?: number[] };\n    };\n};\ntype TProposalInfo = {\n    [key: string]: ReturnType<typeof getProposalInfo>;\n};\ntype TStakeBoundary = Record<\n    string,\n    {\n        min_stake?: number;\n        max_stake?: number;\n    }\n>;\ntype TTicksHistoryResponse = TicksHistoryResponse | TicksStreamResponse;\ntype TBarriersData = Record<string, never> | { barrier: string; barrier_choices?: string[] };\ntype TValidationParams = ReturnType<typeof getProposalInfo>['validation_params'];\n\nconst store_name = 'trade_store';\nconst g_subscribers_map: Partial<Record<string, ReturnType<typeof WS.subscribeTicksHistory>>> = {}; // blame amin.m\n\nexport default class TradeStore extends BaseStore {\n    // Control values\n    is_trade_component_mounted = false;\n    is_purchase_enabled = false;\n    is_trade_enabled = false;\n    is_trade_enabled_v2 = false;\n    is_equal = 0;\n    has_equals_only = false;\n\n    // Underlying\n    symbol = '';\n    is_market_closed = false;\n    previous_symbol = '';\n    active_symbols: ActiveSymbols = [];\n    has_symbols_for_v2 = false;\n\n    form_components: string[] = [];\n\n    // Contract Type\n    contract_expiry_type = '';\n    contract_start_type = '';\n    contract_type = '';\n    prev_contract_type = '';\n    contract_types_list: TContractTypesList = {};\n    non_available_contract_types_list: TContractTypesList = {};\n    trade_type_tab = '';\n    trade_types: { [key: string]: string } = {};\n    contract_types_list_v2: TContractTypesList = {};\n\n    // Amount\n    amount = 10;\n    basis = '';\n    basis_list: Array<TTextValueStrings> = [];\n    currency = '';\n    default_stake: number | undefined;\n    stake_boundary: Partial<TStakeBoundary> = {};\n\n    // Duration\n    duration = 5;\n    duration_min_max: TDurationMinMax = {};\n    duration_unit = '';\n    duration_units_list: Array<TTextValueStrings> = [];\n    expiry_date: string | null = '';\n    expiry_epoch: number | string = '';\n    expiry_time: string | null = '';\n    expiry_type: string | null = 'duration';\n    saved_expiry_date_v2: string = '';\n    unsaved_expiry_date_v2: string = '';\n\n    // Barrier\n    barrier = '';\n    barrier_1 = '';\n    barrier_2 = '';\n    barrier_count = 0;\n    main_barrier: ChartBarrierStore | null = null;\n    barriers: TBarriers = [];\n    barrier_choices: string[] = [];\n    payout_choices: string[] = [];\n    // Start Time\n    start_date = 0; // 0 refers to 'now'\n    start_dates_list: Array<{ text: string; value: number }> = [];\n    start_time: string | null = null;\n    sessions: Array<{ open: moment.Moment; close: moment.Moment }> = [];\n\n    market_open_times: string[] = [];\n    // End Date Time\n    /**\n     * An array that contains market closing time.\n     *\n     * e.g. [\"04:00:00\", \"08:00:00\"]\n     *\n     */\n    market_close_times: string[] = [];\n    validation_params: {\n        [key: string]: TValidationParams | Record<string, never>;\n    } = {};\n\n    // Last Digit\n    digit_stats: number[] = [];\n    last_digit = 5;\n    is_mobile_digit_view_selected = false;\n    tick_data: TickSpotData | null = null;\n\n    // Purchase\n    proposal_info: TProposalInfo = {};\n    purchase_info: Partial<BuyContractResponse> = {};\n\n    // Chart loader observables\n    is_chart_loading?: boolean;\n    should_show_active_symbols_loading = false;\n\n    // Accumulator trade params\n    accumulator_range_list: number[] = [];\n    growth_rate = 0.03;\n    maximum_payout = 0;\n    maximum_ticks = 0;\n    ticks_history_stats: {\n        ticks_stayed_in?: number[];\n        last_tick_epoch?: number;\n    } = {};\n    tick_size_barrier_percentage = '';\n\n    // Multiplier trade params\n    multiplier = 0;\n    multiplier_range_list: TTextValueNumber[] = [];\n    stop_loss?: string;\n    take_profit?: string;\n    has_stop_loss = false;\n    has_take_profit = false;\n    has_cancellation = false;\n    open_payout_wheelpicker = false;\n    commission?: string | number;\n    cancellation_price?: number;\n    stop_out?: number;\n    expiration?: number;\n    hovered_contract_type?: string | null;\n    cancellation_duration = '60m';\n    cancellation_range_list: Array<TTextValueStrings> = [];\n    cached_multiplier_cancellation_list: Array<TTextValueStrings> = [];\n    ref: React.RefObject<{\n        hasPredictionIndicators(): void;\n        triggerPopup(arg: () => void): void;\n    }> | null = null;\n    // Turbos trade params\n    long_barriers: TBarriersData = {};\n    short_barriers: TBarriersData = {};\n    payout_per_point = '';\n\n    // Vanilla trade params\n    strike_price_choices: TBarriersData = {};\n\n    // Mobile\n    is_trade_params_expanded = true;\n    v2_params_initial_values: TV2ParamsInitialValues = {};\n\n    debouncedSetChartStatus = debounce((status: boolean) => {\n        runInAction(() => {\n            this.is_chart_loading = status;\n        });\n    }); // no time is needed here, the only goal is to put the call into macrotasks queue\n    debouncedProposal = debounce(this.requestProposal, 500);\n    proposal_requests: Record<string, Partial<PriceProposalRequest>> = {};\n    is_purchasing_contract = false;\n\n    initial_barriers?: { barrier_1: string; barrier_2: string };\n    is_initial_barrier_applied = false;\n    is_digits_widget_active = false;\n    should_skip_prepost_lifecycle = false;\n    constructor({ root_store }: { root_store: TRootStore }) {\n        const local_storage_properties = [\n            'amount',\n            'currency',\n            'barrier_1',\n            'barrier_2',\n            'basis',\n            'contract_start_type',\n            'duration',\n            'duration_unit',\n            'expiry_date',\n            'expiry_type',\n            'growth_rate',\n            'has_take_profit',\n            'has_stop_loss',\n            'has_cancellation',\n            'short_barriers',\n            'long_barriers',\n            'strike_price_choices',\n            'is_equal',\n            'last_digit',\n            'multiplier',\n            'start_date',\n            'start_time',\n            'stop_loss',\n            'take_profit',\n            'is_trade_params_expanded',\n            'v2_params_initial_values',\n        ];\n        const session_storage_properties = ['contract_type', 'symbol'];\n\n        super({\n            root_store,\n            local_storage_properties,\n            session_storage_properties,\n            store_name,\n            validation_rules: getValidationRules(),\n        });\n\n        makeObservable(this, {\n            accumulator_range_list: observable,\n            active_symbols: observable,\n            amount: observable,\n            barrier_1: observable,\n            barrier_2: observable,\n            barrier_count: observable,\n            barrier_choices: observable,\n            payout_choices: observable,\n            barriers: observable,\n            basis_list: observable,\n            basis: observable,\n            payout_per_point: observable,\n            cancellation_duration: observable,\n            cancellation_price: observable,\n            cancellation_range_list: observable,\n            cached_multiplier_cancellation_list: observable,\n            commission: observable,\n            contract_expiry_type: observable,\n            contract_start_type: observable,\n            contract_type: observable,\n            contract_types_list: observable,\n            contract_types_list_v2: observable,\n            currency: observable,\n            default_stake: observable,\n            digit_stats: observable,\n            duration_min_max: observable,\n            duration_unit: observable,\n            duration_units_list: observable,\n            duration: observable,\n            expiration: observable,\n            expiry_date: observable,\n            saved_expiry_date_v2: observable,\n            unsaved_expiry_date_v2: observable,\n            setSavedExpiryDateV2: action.bound,\n            setUnsavedExpiryDateV2: action.bound,\n            expiry_epoch: observable,\n            expiry_time: observable,\n            expiry_type: observable,\n            form_components: observable,\n            growth_rate: observable,\n            has_cancellation: observable,\n            has_equals_only: observable,\n            has_open_accu_contract: computed,\n            has_stop_loss: observable,\n            has_symbols_for_v2: observable,\n            has_take_profit: observable,\n            hovered_contract_type: observable,\n            is_accumulator: computed,\n            is_chart_loading: observable,\n            is_digits_widget_active: observable,\n            is_dtrader_v2: computed,\n            is_dtrader_v2_mobile: computed,\n            is_dtrader_v2_desktop: computed,\n            is_equal: observable,\n            is_market_closed: observable,\n            is_mobile_digit_view_selected: observable,\n            is_purchase_enabled: observable,\n            is_synthetics_trading_market_available: computed,\n            is_trade_component_mounted: observable,\n            is_trade_enabled: observable,\n            is_trade_enabled_v2: observable,\n            is_trade_params_expanded: observable,\n            is_turbos: computed,\n            last_digit: observable,\n            long_barriers: observable,\n            main_barrier: observable,\n            market_close_times: observable,\n            market_open_times: observable,\n            maximum_payout: observable,\n            maximum_ticks: observable,\n            validation_params: observable,\n            multiplier_range_list: observable,\n            multiplier: observable,\n            non_available_contract_types_list: observable,\n            previous_symbol: observable,\n            ref: observable,\n            proposal_info: observable.ref,\n            purchase_info: observable.ref,\n            setDefaultStake: action.bound,\n            sessions: observable,\n            setDefaultGrowthRate: action.bound,\n            setDigitStats: action.bound,\n            setTickData: action.bound,\n            short_barriers: observable,\n            should_show_active_symbols_loading: observable,\n            should_skip_prepost_lifecycle: observable,\n            stake_boundary: observable,\n            start_date: observable,\n            start_dates_list: observable,\n            start_time: observable,\n            strike_price_choices: observable,\n            stop_loss: observable,\n            stop_out: observable,\n            symbol: observable,\n            take_profit: observable,\n            tick_data: observable,\n            tick_size_barrier_percentage: observable,\n            ticks_history_stats: observable,\n            trade_type_tab: observable,\n            trade_types: observable,\n            open_payout_wheelpicker: observable,\n            togglePayoutWheelPicker: action.bound,\n            v2_params_initial_values: observable,\n            accountSwitcherListener: action.bound,\n            barrier_pipsize: computed,\n            barriers_flattened: computed,\n            changeDurationValidationRules: action.bound,\n            chartStateChange: action.bound,\n            clearContracts: action.bound,\n            clearLimitOrderBarriers: action.bound,\n            clearPurchaseInfo: action.bound,\n            clientInitListener: action.bound,\n            clearV2ParamsInitialValues: action.bound,\n            processContractsForV2: action.bound,\n            enablePurchase: action.bound,\n            exportLayout: action.bound,\n            forgetAllProposal: action.bound,\n            getFirstOpenMarket: action.bound,\n            has_alternative_source: computed,\n            initAccountCurrency: action.bound,\n            is_multiplier: computed,\n            is_symbol_in_active_symbols: computed,\n            is_synthetics_available: computed,\n            is_vanilla: computed,\n            is_vanilla_fx: computed,\n            loadActiveSymbols: action.bound,\n            logoutListener: action.bound,\n            main_barrier_flattened: computed,\n            networkStatusChangeListener: action.bound,\n            onAllowEqualsChange: action.bound,\n            onChange: action.bound,\n            onChangeMultiple: action.bound,\n            onChartBarrierChange: action.bound,\n            onHoverPurchase: action.bound,\n            onMount: action.bound,\n            onProposalResponse: action.bound,\n            onPurchase: action.bound,\n            onPurchaseV2: action.bound,\n            onUnmount: override,\n            prepareTradeStore: action.bound,\n            preSwitchAccountListener: action.bound,\n            processPurchase: action.bound,\n            pushPurchaseDataToGtm: action.bound,\n            refresh: action.bound,\n            requestProposal: action.bound,\n            resetAccumulatorData: action.bound,\n            resetErrorServices: action.bound,\n            resetPreviousSymbol: action.bound,\n            setActiveSymbols: action.bound,\n            setActiveSymbolsV2: action.bound,\n            setBarrierChoices: action.bound,\n            setPayoutChoices: action.bound,\n            setChartModeFromURL: action.bound,\n            setChartStatus: action.bound,\n            setContractTypes: action.bound,\n            setContractTypesListV2: action.bound,\n            setDefaultSymbol: action.bound,\n            setIsTradeParamsExpanded: action.bound,\n            setIsDigitsWidgetActive: action.bound,\n            setMarketStatus: action.bound,\n            getTurbosChartBarrier: action.bound,\n            setMobileDigitView: action.bound,\n            setPreviousSymbol: action.bound,\n            setSkipPrePostLifecycle: action.bound,\n            setStakeBoundary: action.bound,\n            setTradeTypeTab: action.bound,\n            setTradeStatus: action.bound,\n            setV2ParamsInitialValues: action.bound,\n            show_digits_stats: computed,\n            updateStore: action.bound,\n            updateSymbol: action.bound,\n            setPayoutPerPoint: action.bound,\n        });\n\n        when(\n            () => !isEmptyObject(this.contract_types_list_v2),\n            () => {\n                if (!this.contract_types_list_v2 || !this.is_dtrader_v2) return;\n                const searchParams = new URLSearchParams(window.location.search);\n                const urlContractType = searchParams.get('trade_type');\n                const tradeStoreString = sessionStorage.getItem('trade_store');\n                const tradeStoreObj = safeParse(tradeStoreString ?? '{}') ?? {};\n                const flattedContractTypesV2 = Object.values(this.contract_types_list_v2)\n                    .map(contract_type => contract_type.categories)\n                    .flatMap(categories => categories);\n                const isValidContractType = flattedContractTypesV2.some(\n                    contract_type => contract_type.value === urlContractType\n                );\n                if (urlContractType) {\n                    if (isValidContractType) {\n                        tradeStoreObj.contract_type = urlContractType;\n                        sessionStorage.setItem('trade_store', JSON.stringify(tradeStoreObj));\n                        this.contract_type = urlContractType;\n                    } else {\n                        this.root_store.ui.toggleUrlUnavailableModal(true);\n                    }\n                }\n            }\n        );\n\n        when(\n            () => this.has_symbols_for_v2,\n            () => {\n                if (!this.contract_types_list_v2 || !this.is_dtrader_v2) return;\n                const searchParams = new URLSearchParams(window.location.search);\n                const urlSymbol = searchParams.get('symbol');\n                const tradeStoreString = sessionStorage.getItem('trade_store');\n                const tradeStoreObj = safeParse(tradeStoreString ?? '{}') ?? {};\n                const isValidSymbol = this.active_symbols.some(symbol => symbol.symbol === urlSymbol);\n\n                if (urlSymbol) {\n                    if (isValidSymbol) {\n                        tradeStoreObj.symbol = urlSymbol;\n                        sessionStorage.setItem('trade_store', JSON.stringify(tradeStoreObj));\n                        this.symbol = urlSymbol;\n                    } else {\n                        this.root_store.ui.toggleUrlUnavailableModal(true);\n                    }\n                }\n            }\n        );\n\n        reaction(\n            () => [this.contract_expiry_type, this.duration_min_max, this.duration_unit, this.expiry_type],\n            () => {\n                this.changeDurationValidationRules();\n            }\n        );\n        reaction(\n            () => this.is_equal,\n            () => {\n                this.contract_type?.includes(TRADE_TYPES.RISE_FALL) && this.onAllowEqualsChange();\n            }\n        );\n        reaction(\n            () => this.symbol,\n            () => {\n                const date = resetEndTimeOnVolatilityIndices(this.symbol, this.expiry_type);\n                if (date) {\n                    this.expiry_date = date;\n                }\n                this.setDefaultGrowthRate();\n                this.resetAccumulatorData();\n                if (this.active_symbols.length) {\n                    setTradeURLParams({ symbol: this.symbol });\n                }\n                this.root_store.notifications.removeTradeNotifications();\n            }\n        );\n        reaction(\n            () => this.duration_unit,\n            () => {\n                this.contract_expiry_type = this.duration_unit === 't' ? 'tick' : 'intraday';\n            }\n        );\n        reaction(\n            () => [this.has_stop_loss, this.has_take_profit],\n            () => {\n                if (!this.has_stop_loss) {\n                    this.validation_errors.stop_loss = [];\n                }\n                if (!this.has_take_profit) {\n                    this.validation_errors.take_profit = [];\n                }\n            }\n        );\n        reaction(\n            () => [this.contract_type],\n            () => {\n                this.root_store.portfolio.setContractType(this.contract_type);\n                if (this.is_accumulator || this.is_multiplier || this.is_turbos) {\n                    // when switching back to Multiplier contract, re-apply Stop loss / Take profit validation rules\n                    Object.assign(this.validation_rules, getMultiplierValidationRules());\n                } else {\n                    // we need to remove these two validation rules on contract_type change\n                    // to be able to remove any existing Stop loss / Take profit validation errors\n                    delete this.validation_rules.stop_loss;\n                    delete this.validation_rules.take_profit;\n                }\n                this.resetAccumulatorData();\n                if (!isEmptyObject(this.contract_types_list) || !isEmptyObject(this.contract_types_list_v2)) {\n                    setTradeURLParams({ contractType: this.contract_type });\n                }\n                this.root_store.notifications.removeTradeNotifications();\n            }\n        );\n        reaction(\n            () => this.root_store.common.current_language,\n            () => {\n                this.setValidationRules(getValidationRules());\n                this.changeDurationValidationRules();\n                if (!this.amount) {\n                    this.validateAllProperties();\n                }\n            }\n        );\n        reaction(\n            () => this.accumulator_range_list.length,\n            () => {\n                if (this.accumulator_range_list.length) {\n                    this.setDefaultGrowthRate();\n                }\n            }\n        );\n    }\n\n    get is_symbol_in_active_symbols() {\n        return this.active_symbols.some(\n            symbol_info => symbol_info.symbol === this.symbol && symbol_info.exchange_is_open === 1\n        );\n    }\n\n    get has_open_accu_contract() {\n        return (\n            this.is_accumulator &&\n            !!this.root_store.portfolio.open_accu_contract &&\n            !!this.root_store.portfolio.active_positions.find(\n                ({ contract_info, type }) => isAccumulatorContract(type) && contract_info.underlying === this.symbol\n            )\n        );\n    }\n\n    resetAccumulatorData() {\n        this.root_store.contract_trade.clearAccumulatorBarriersData(false, true);\n    }\n\n    setV2ParamsInitialValues({\n        value,\n        name,\n    }: {\n        value: number | string | boolean;\n        name: keyof TV2ParamsInitialValues;\n    }) {\n        this.v2_params_initial_values = { ...this.v2_params_initial_values, ...{ [name]: value } };\n    }\n\n    setSavedExpiryDateV2(date: string) {\n        this.saved_expiry_date_v2 = date || '';\n    }\n\n    setUnsavedExpiryDateV2(date: string) {\n        this.unsaved_expiry_date_v2 = date || '';\n    }\n\n    clearV2ParamsInitialValues() {\n        this.v2_params_initial_values = {};\n    }\n\n    setDefaultGrowthRate() {\n        if (\n            this.is_accumulator &&\n            !this.accumulator_range_list.includes(this.growth_rate) &&\n            this.accumulator_range_list.length\n        ) {\n            this.growth_rate = this.accumulator_range_list[0];\n        }\n    }\n\n    setSkipPrePostLifecycle(should_skip: boolean) {\n        if (!!should_skip !== !!this.should_skip_prepost_lifecycle) {\n            // to skip assignment if no change is made\n            this.should_skip_prepost_lifecycle = should_skip;\n        }\n    }\n\n    setTradeStatus(status: boolean) {\n        this.is_trade_enabled = status;\n    }\n\n    refresh() {\n        this.forgetAllProposal();\n        this.proposal_info = {};\n        this.purchase_info = {};\n        this.proposal_requests = {};\n    }\n\n    clearContracts = () => {\n        this.root_store.contract_trade.contracts = [];\n    };\n\n    async loadActiveSymbols(should_set_default_symbol = true, should_show_loading = true) {\n        if (this.is_dtrader_v2) {\n            await when(() => this.has_symbols_for_v2);\n            return;\n        }\n        this.should_show_active_symbols_loading = should_show_loading;\n\n        await this.setActiveSymbols();\n        await this.root_store.active_symbols.setActiveSymbols();\n\n        const { symbol, showModal } = getTradeURLParams({ active_symbols: this.active_symbols });\n        if (showModal && should_show_loading && !this.root_store.client.is_logging_in) {\n            this.root_store.ui.toggleUrlUnavailableModal(true);\n        }\n        const hasSymbolChanged = symbol && symbol !== this.symbol;\n        if (hasSymbolChanged) this.symbol = symbol;\n        if (should_set_default_symbol && !symbol) await this.setDefaultSymbol();\n        setTradeURLParams({ symbol: hasSymbolChanged ? symbol : this.symbol });\n\n        const r = await WS.storage.contractsFor(this.symbol);\n        if (['InvalidSymbol', 'InputValidationFailed'].includes(r.error?.code)) {\n            const symbol_to_update = await pickDefaultSymbol(this.active_symbols);\n            await this.processNewValuesAsync({ symbol: symbol_to_update });\n        }\n\n        runInAction(() => {\n            this.should_show_active_symbols_loading = false;\n        });\n    }\n\n    async setDefaultSymbol() {\n        if (!this.is_symbol_in_active_symbols) {\n            this.is_trade_enabled = false;\n\n            const symbol = await pickDefaultSymbol(this.active_symbols);\n            await this.processNewValuesAsync({ symbol });\n        }\n    }\n\n    async setActiveSymbols() {\n        const is_on_mf_account = this.root_store.client.landing_company_shortcode === 'maltainvest';\n        const is_logged_in = this.root_store.client.is_logged_in;\n        const showError = this.root_store.common.showError;\n\n        const { active_symbols, error } = await WS.authorized.activeSymbols();\n\n        if (error) {\n            showError({ message: localize('Trading is unavailable at this time.') });\n            return;\n        }\n\n        if (!active_symbols?.length) {\n            await WS.wait('get_settings');\n            /*\n             * This logic is related to EU country checks\n             * Avoid moving this upward in the scope since mobx will lose reactivity\n             */\n            if (is_on_mf_account) {\n                showDigitalOptionsUnavailableError(showError, {\n                    text: localize(\n                        'We’re working to have this available for you soon. If you have another account, switch to that account to continue trading. You may add a Deriv MT5 Financial.'\n                    ),\n                    title: localize('{{platform_name_trader}} is not available for this account', {\n                        platform_name_trader: getPlatformSettings('trader').name,\n                    }),\n                    link: localize('Go to {{platform_name_mt5}} dashboard', {\n                        platform_name_mt5: getPlatformSettings('mt5').name,\n                    }),\n                });\n                return;\n            } else if (!is_on_mf_account) {\n                showUnavailableLocationError(showError, is_logged_in);\n            }\n            showUnavailableLocationError(showError, is_logged_in);\n        }\n        await this.processNewValuesAsync({ active_symbols });\n    }\n\n    async processContractsForV2() {\n        const contract_categories = ContractType.getContractCategories();\n        this.processNewValuesAsync({\n            ...(contract_categories as Pick<TradeStore, 'contract_types_list'> & {\n                has_only_forward_starting_contracts: boolean;\n            }),\n        });\n        this.processNewValuesAsync(ContractType.getContractValues(this));\n    }\n\n    async setContractTypes() {\n        if (this.is_dtrader_v2) {\n            return;\n        }\n\n        let contractType: string | undefined = '';\n        if (this.symbol && this.is_symbol_in_active_symbols) {\n            await Symbol.onChangeSymbolAsync(this.symbol);\n            runInAction(() => {\n                const contract_categories = ContractType.getContractCategories();\n                const { contractType: contractTypeParam, showModal } = getTradeURLParams({\n                    contract_types_list: contract_categories.contract_types_list,\n                });\n                contractType = contractTypeParam;\n                const { is_logging_in, is_switching } = this.root_store.client;\n                if (showModal && !is_logging_in && !is_switching) this.root_store.ui.toggleUrlUnavailableModal(true);\n                this.processNewValuesAsync({\n                    ...(contract_categories as Pick<TradeStore, 'contract_types_list'> & {\n                        has_only_forward_starting_contracts: boolean;\n                    }),\n                    ...ContractType.getContractType(\n                        contract_categories.contract_types_list,\n                        contractType ?? this.contract_type\n                    ),\n                });\n                this.processNewValuesAsync(ContractType.getContractValues(this));\n            });\n        }\n        this.root_store.common.setSelectedContractType(contractType ?? this.contract_type);\n        this.root_store.portfolio.setContractType(contractType ?? this.contract_type);\n        setTradeURLParams({\n            contractType: contractType ?? this.contract_type,\n        });\n    }\n\n    async prepareTradeStore(should_set_default_symbol = true) {\n        this.initial_barriers = { barrier_1: this.barrier_1, barrier_2: this.barrier_2 };\n        await when(() => !this.root_store.client.is_populating_account_list);\n\n        // waits for `website_status` in order to set `stake_default` for the selected currency\n        await WS.wait('website_status');\n        await runInAction(async () => {\n            await this.processNewValuesAsync(\n                {\n                    // fallback to default currency if current logged-in client hasn't selected a currency yet\n                    currency: this.root_store.client.currency || this.root_store.client.default_currency,\n                },\n                true,\n                null,\n                false\n            );\n        });\n        await this.loadActiveSymbols(should_set_default_symbol);\n        await this.setContractTypes();\n        await this.processNewValuesAsync(\n            {\n                is_market_closed: isMarketClosed(this.active_symbols, this.symbol),\n            },\n            true,\n            null,\n            false\n        );\n    }\n\n    async onChangeMultiple(values: Partial<TradeStore>) {\n        Object.keys(values).forEach(name => {\n            if (!(name in this)) {\n                throw new Error(`Invalid Argument: ${name}`);\n            }\n        });\n\n        await this.processNewValuesAsync({ ...values }, true); // wait for store to be updated\n        this.validateAllProperties(); // then run validation before sending proposal\n    }\n\n    async onChange(e: { target: { name: string; value: unknown } }) {\n        const { name, value } = e.target;\n        if (\n            name === 'contract_type' &&\n            ['accumulator', 'match_diff', 'even_odd', 'over_under'].includes(value as string)\n        ) {\n            this.prev_contract_type = this.contract_type;\n        }\n\n        // reset stop loss after trade type was changed\n        if (name === 'contract_type' && this.has_stop_loss) {\n            this.has_stop_loss = false;\n            this.stop_loss = '';\n        }\n\n        if (name === 'symbol' && value) {\n            // set trade params skeleton and chart loader to true until processNewValuesAsync resolves\n            this.setChartStatus(true);\n            // reset market close status\n            this.setMarketStatus(false);\n            this.is_trade_enabled = false;\n            // this.root_store.modules.contract_trade.contracts = [];\n            // TODO: Clear the contracts in contract-trade-store\n        } else if (name === 'currency') {\n            // Only allow the currency dropdown change if client is not logged in\n            if (!this.root_store.client.is_logged_in) {\n                this.root_store.client.selectCurrency(value as string);\n            }\n        } else if (name === 'expiry_date') {\n            this.expiry_time = null;\n        } else if (!(name in this)) {\n            throw new Error(`Invalid Argument: ${name}`);\n        }\n\n        await this.processNewValuesAsync(\n            { [name]: value },\n            true,\n            name === 'contract_type' ? { contract_type: this.contract_type } : {}, // refer to [Multiplier validation rules] below\n            true\n        ); // wait for store to be updated\n        this.validateAllProperties(); // then run validation before sending proposal\n        this.root_store.common.setSelectedContractType(this.contract_type);\n    }\n\n    setDefaultStake(default_stake?: number) {\n        this.default_stake = default_stake;\n    }\n\n    setPreviousSymbol(symbol: string) {\n        if (this.previous_symbol !== symbol) this.previous_symbol = symbol;\n    }\n\n    setIsTradeParamsExpanded(value: boolean) {\n        this.is_trade_params_expanded = value;\n    }\n\n    async resetPreviousSymbol() {\n        this.setMarketStatus(isMarketClosed(this.active_symbols, this.previous_symbol));\n\n        await Symbol.onChangeSymbolAsync(this.previous_symbol);\n        this.updateSymbol(this.symbol);\n\n        this.setChartStatus(false);\n        runInAction(() => {\n            this.previous_symbol = ''; // reset the symbol to default\n        });\n    }\n\n    onHoverPurchase(is_over: boolean, contract_type?: string) {\n        if (this.is_accumulator) return;\n        if (this.is_purchase_enabled && this.main_barrier && !this.is_multiplier) {\n            this.main_barrier.updateBarrierShade(is_over, contract_type ?? '');\n        } else if (!is_over && this.main_barrier && !this.is_multiplier) {\n            this.main_barrier.updateBarrierShade(false, contract_type ?? '');\n        }\n\n        this.hovered_contract_type = is_over ? contract_type : null;\n        setLimitOrderBarriers({\n            barriers: this.root_store.portfolio.barriers,\n            is_over,\n            contract_type,\n            contract_info: this.proposal_info[contract_type ?? ''],\n        });\n    }\n\n    clearLimitOrderBarriers() {\n        this.hovered_contract_type = null;\n        const { barriers } = this;\n        setLimitOrderBarriers({\n            barriers,\n            is_over: false,\n        });\n    }\n\n    get barrier_pipsize() {\n        return getBarrierPipSize(this.barrier_1);\n    }\n\n    get main_barrier_flattened() {\n        const is_digit_trade_type = isDigitTradeType(this.contract_type);\n        return is_digit_trade_type ? null : toJS(this.main_barrier);\n    }\n\n    get barriers_flattened() {\n        return this.root_store.portfolio.barriers && toJS(this.root_store.portfolio.barriers);\n    }\n\n    setMainBarrier = (proposal_info: PriceProposalRequest) => {\n        if (!proposal_info) {\n            return;\n        }\n        const { contract_type, barrier, barrier2 } = proposal_info;\n        if (isBarrierSupported(contract_type)) {\n            // create barrier only when it's available in response\n            this.main_barrier = new ChartBarrierStore(barrier, barrier2, this.onChartBarrierChange, {\n                color: BARRIER_COLORS.BLUE,\n                not_draggable: this.is_turbos || this.is_vanilla,\n            });\n        } else {\n            this.main_barrier = null;\n        }\n    };\n\n    async onPurchaseV2(\n        trade_type: string,\n        isMobile: boolean,\n        callback?: (params: { message: string; redirectTo: string; title: string }, contract_id: number) => void\n    ) {\n        await when(() => {\n            const proposal_info_keys = Object.keys(this.proposal_info);\n            const proposal_request_keys = Object.keys(this.proposal_requests);\n            return proposal_info_keys.length > 0 && proposal_info_keys.length === proposal_request_keys.length;\n        });\n\n        const info = this.proposal_info?.[trade_type];\n        if (info) this.onPurchase(info.id, info.stake, trade_type, isMobile, callback, true);\n    }\n\n    onPurchase = debounce(this.processPurchase, 300);\n\n    processPurchase(\n        proposal_id: string,\n        price: string | number,\n        type: string,\n        isMobile: boolean,\n        callback?: (params: { message: string; redirectTo: string; title: string }, contract_id: number) => void,\n        is_dtrader_v2?: boolean\n    ) {\n        if (!this.is_purchase_enabled) return;\n        if (proposal_id) {\n            runInAction(() => {\n                this.is_purchase_enabled = false;\n                this.is_purchasing_contract = true;\n            });\n            const is_tick_contract = this.duration_unit === 't';\n            processPurchase(proposal_id, price).then(\n                action((response: TResponse<Buy, BuyContractResponse, 'buy'>) => {\n                    if (!this.is_trade_component_mounted) {\n                        this.enablePurchase();\n                        this.is_purchasing_contract = false;\n                        return;\n                    }\n\n                    const last_digit = +this.last_digit;\n                    if (response.error) {\n                        // using javascript to disable purchase-buttons manually to compensate for mobx lag\n                        this.disablePurchaseButtons();\n                        // invalidToken error will handle in socket-general.js\n                        if (response.error.code !== 'InvalidToken') {\n                            this.root_store.common.setServicesError(\n                                {\n                                    type: response.msg_type,\n                                    ...response.error,\n                                },\n                                this.is_dtrader_v2\n                            );\n\n                            // Clear purchase info on mobile after toast box error disappears (mobile_toast_timeout = 3500)\n                            if (isMobile && this.root_store.common?.services_error?.type === 'buy') {\n                                setTimeout(() => {\n                                    this.clearPurchaseInfo();\n                                    this.requestProposal();\n                                }, 3500);\n                            }\n                        }\n                    } else if (response.buy) {\n                        if (this.proposal_info[type] && this.proposal_info[type].id !== proposal_id) {\n                            throw new Error('Proposal ID does not match.');\n                        }\n\n                        // Clear open positions filter from session storage when a new contract is purchased\n                        sessionStorage.removeItem('open_positions_filter');\n\n                        const contract_data: TContractDataForGTM = {\n                            ...this.proposal_requests[type],\n                            ...this.proposal_info[type],\n                            buy_price: response.buy.buy_price,\n                        };\n                        const { contract_id, longcode, start_time } = response.buy;\n\n                        // toggle smartcharts to contract mode\n                        if (contract_id) {\n                            const shortcode = response.buy.shortcode;\n                            const { category, underlying } = extractInfoFromShortcode(shortcode);\n                            const is_digit_contract = isDigitContractType(category?.toUpperCase() ?? '');\n                            const is_multiplier = isMultiplierContract(category);\n                            const contract_type = category?.toUpperCase();\n                            const is_call = category.toUpperCase() === CONTRACT_TYPES.CALL;\n                            const is_put = category.toUpperCase() === CONTRACT_TYPES.PUT;\n                            const is_high_low = isHighLow({ shortcode_info: extractInfoFromShortcode(shortcode) });\n                            let higher_lower_contact = CONTRACT_TYPES.LOWER.toLowerCase();\n                            let rise_fall_contract = CONTRACT_TYPES.FALL.toLowerCase();\n                            if (is_call) {\n                                higher_lower_contact = CONTRACT_TYPES.HIGHER.toLowerCase();\n                                rise_fall_contract = CONTRACT_TYPES.RISE.toLowerCase();\n                            }\n                            const call_put_contract = is_high_low ? higher_lower_contact : rise_fall_contract;\n\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            if ((window as any).hj) {\n                                const event_string = `placed_${is_call || is_put ? call_put_contract : category}_trade`;\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                (window as any).hj('event', event_string);\n                            }\n\n                            this.root_store.contract_trade.addContract({\n                                contract_id,\n                                start_time,\n                                longcode,\n                                underlying,\n                                barrier: is_digit_contract ? last_digit : null,\n                                contract_type,\n                                is_tick_contract,\n                            });\n                            this.root_store.portfolio.onBuyResponse({\n                                contract_id,\n                                longcode,\n                                contract_type,\n                            });\n                            // NOTE: changing chart granularity and chart_type has to be done in a different render cycle\n                            // so we have to set chart granularity to zero, and change the chart_type to 'mountain' first,\n                            // and then set the chart view to the start_time\n                            // draw the start time line and show longcode then mount contract\n                            // this.root_store.modules.contract_trade.drawContractStartTime(start_time, longcode, contract_id);\n                            if (!is_dtrader_v2) {\n                                sendDtraderPurchaseToAnalytics(contract_type, this.symbol, contract_id);\n                            }\n\n                            if (!isMobile) {\n                                this.root_store.ui.openPositionsDrawer();\n                            }\n                            this.proposal_info = {};\n                            this.forgetAllProposal();\n                            this.purchase_info = response;\n                            this.proposal_requests = {};\n                            this.debouncedProposal();\n                            this.clearLimitOrderBarriers();\n                            this.pushPurchaseDataToGtm(contract_data);\n                            if (this.root_store.ui.is_mobile) {\n                                const shortcode = response.buy.shortcode;\n                                const extracted_info_from_shortcode = extractInfoFromShortcode(shortcode);\n                                const contract_id = response.buy.contract_id;\n                                const currency = getCurrencyDisplayCode(this.root_store.client.currency);\n                                const formatted_stake = `${getCardLabelsV2().STAKE}: ${formatMoney(\n                                    currency,\n                                    response.buy.buy_price,\n                                    true,\n                                    0,\n                                    0\n                                )} ${currency}`;\n                                const trade_type = extracted_info_from_shortcode.category;\n\n                                if (window.location.pathname === routes.trade)\n                                    callback?.(\n                                        {\n                                            message: getTradeNotificationMessage(shortcode),\n                                            redirectTo: getContractPath(contract_id),\n                                            title: formatted_stake,\n                                        },\n                                        contract_id\n                                    );\n\n                                this.root_store.notifications.addTradeNotification({\n                                    buy_price: is_multiplier ? this.amount : response.buy.buy_price,\n                                    contract_id,\n                                    contract_type: trade_type,\n                                    currency,\n                                    purchase_time: response.buy.purchase_time,\n                                    shortcode,\n                                    status: 'open',\n                                });\n                            }\n\n                            // Auto-scroll to bottom of page to show chart fully after contract is opened\n                            setTimeout(() => {\n                                const scrollContainer = document.querySelector('.bottom-nav-selection');\n                                if (scrollContainer) {\n                                    scrollContainer.scrollTo({\n                                        top: scrollContainer.scrollHeight,\n                                        behavior: 'smooth',\n                                    });\n                                }\n                            }, 100);\n\n                            this.is_purchasing_contract = false;\n                            return;\n                        }\n                    }\n                    this.forgetAllProposal();\n                    this.purchase_info = response;\n                    this.enablePurchase();\n                    this.is_purchasing_contract = false;\n                })\n            );\n        }\n    }\n\n    enablePurchase() {\n        if (!this.root_store.client.is_unwelcome) {\n            this.is_purchase_enabled = true;\n        }\n    }\n\n    disablePurchaseButtons = () => {\n        const el_purchase_value = document.getElementsByClassName('trade-container__price-info');\n        const el_purchase_buttons = document.getElementsByClassName('btn-purchase');\n        [].forEach.bind(el_purchase_buttons, el => {\n            (el as HTMLButtonElement).classList.add('btn-purchase--disabled');\n        })();\n        [].forEach.bind(el_purchase_value, el => {\n            (el as HTMLDivElement).classList.add('trade-container__price-info--fade');\n        })();\n    };\n\n    /**\n     * Updates the store with new values\n     * @param  {Object} new_state - new values to update the store with\n     * @return {Object} returns the object having only those values that are updated\n     */\n    updateStore(new_state: Partial<TradeStore>) {\n        Object.keys(cloneObject(new_state) || {}).forEach(key => {\n            if (key === 'root_store' || ['validation_rules', 'validation_errors', 'currency'].indexOf(key) > -1) return;\n            if (JSON.stringify(this[key as keyof this]) === JSON.stringify(new_state[key as keyof TradeStore])) {\n                delete new_state[key as keyof TradeStore];\n            } else {\n                if (key === 'symbol') {\n                    this.is_purchase_enabled = false;\n                    this.is_trade_enabled = false;\n                }\n\n                if (new_state.start_date && typeof new_state.start_date === 'string') {\n                    new_state.start_date = parseInt(new_state.start_date);\n                }\n\n                this[key as 'currency'] = new_state[key as keyof TradeStore] as TradeStore['currency'];\n\n                // validation is done in mobx intercept (base_store.js)\n                // when barrier_1 is set, it is compared with store.barrier_2 (which is not updated yet)\n                if (key === 'barrier_2' && new_state.barrier_1) {\n                    this.barrier_1 = new_state.barrier_1; // set it again, after barrier_2 is updated in store\n                }\n            }\n        });\n        return new_state;\n    }\n\n    async processNewValuesAsync(\n        obj_new_values: Partial<TradeStore> = {},\n        is_changed_by_user = false,\n        obj_old_values: Partial<TradeStore> | null = {},\n        should_forget_first = true\n    ) {\n        // To switch to rise_fall_equal contract type when allow equal is checked on first page refresh or\n        // when switch back to Rise/Fall from another contract type i.e.\n        if (obj_new_values.contract_type && obj_new_values.contract_type === TRADE_TYPES.RISE_FALL && !!this.is_equal) {\n            obj_new_values.contract_type = TRADE_TYPES.RISE_FALL_EQUAL;\n        }\n        // when accumulator is selected, we need to change chart type to mountain and granularity to 0\n        // and we need to restore previous chart type and granularity when accumulator is unselected\n        const {\n            prev_chart_type,\n            prev_granularity,\n            chart_type,\n            granularity,\n            savePreviousChartMode,\n            updateChartType,\n            updateGranularity,\n        } = this.root_store.contract_trade || {};\n        if (isAccumulatorContract(obj_new_values.contract_type) || isDigitTradeType(obj_new_values.contract_type)) {\n            savePreviousChartMode(chart_type, granularity);\n            updateGranularity(0);\n            updateChartType('line');\n        } else if (\n            (obj_new_values.contract_type || obj_new_values.symbol) &&\n            prev_chart_type &&\n            prev_granularity &&\n            (prev_chart_type !== chart_type || prev_granularity !== granularity)\n        ) {\n            updateGranularity(prev_granularity);\n            updateChartType(prev_chart_type);\n            savePreviousChartMode('', null);\n        }\n        if (/\\bduration\\b/.test(Object.keys(obj_new_values) as unknown as string)) {\n            // TODO: fix this in input-field.jsx\n            if (typeof obj_new_values.duration === 'string') {\n                obj_new_values.duration = +obj_new_values.duration;\n            }\n        }\n        // Sets the default value to Amount when Currency has changed from Fiat to Crypto and vice versa.\n        // The source of default values is the website_status response.\n        if (should_forget_first) {\n            this.forgetAllProposal();\n            this.proposal_requests = {};\n        }\n        if (is_changed_by_user && /\\bcurrency\\b/.test(Object.keys(obj_new_values) as unknown as string)) {\n            const prev_currency = obj_old_values?.currency || this.currency;\n            const has_currency_changed = obj_new_values.currency !== prev_currency;\n\n            const should_reset_stake =\n                isCryptocurrency(obj_new_values.currency ?? '') ||\n                // For switch between fiat and crypto and vice versa\n                isCryptocurrency(obj_new_values.currency ?? '') !== isCryptocurrency(prev_currency);\n\n            if (has_currency_changed && should_reset_stake) {\n                obj_new_values.amount = obj_new_values.amount || getMinPayout(obj_new_values.currency ?? '');\n            }\n            this.currency = obj_new_values.currency ?? '';\n        }\n\n        let has_only_forward_starting_contracts;\n\n        if (Object.keys(obj_new_values).includes('symbol')) {\n            this.setPreviousSymbol(this.symbol);\n            await Symbol.onChangeSymbolAsync(obj_new_values.symbol ?? '');\n            this.setMarketStatus(isMarketClosed(this.active_symbols, obj_new_values.symbol ?? ''));\n            has_only_forward_starting_contracts =\n                ContractType.getContractCategories().has_only_forward_starting_contracts;\n        }\n\n        // Set stake to default one (from contracts_for) on symbol or contract type switch.\n        // On contract type we also additionally reset take profit\n        if (this.default_stake && this.is_dtrader_v2) {\n            const has_contract_type_changed =\n                obj_new_values.contract_type &&\n                obj_old_values?.contract_type &&\n                obj_new_values.contract_type !== obj_old_values.contract_type;\n\n            if (has_contract_type_changed) {\n                obj_new_values.has_take_profit = false;\n                obj_new_values.take_profit = '';\n            }\n        }\n\n        // TODO: remove all traces of setHasOnlyForwardingContracts and has_only_forward_starting_contracts in app\n        //  once future contracts are implemented\n        this.root_store.ui.setHasOnlyForwardingContracts(has_only_forward_starting_contracts);\n        if (has_only_forward_starting_contracts) return;\n\n        const new_state = this.updateStore(cloneObject(obj_new_values));\n\n        if (\n            is_changed_by_user ||\n            /\\b(symbol|contract_types_list)\\b/.test(Object.keys(new_state) as unknown as string)\n        ) {\n            this.updateStore({\n                // disable purchase button(s), clear contract info\n                is_purchase_enabled: false,\n                proposal_info: {},\n            });\n\n            // To prevent infinite loop when changing from advanced end_time to digit type contract\n            if (obj_new_values.contract_type && this.root_store.ui.is_advanced_duration) {\n                if (isDigitTradeType(obj_new_values.contract_type)) {\n                    this.barrier_1 = '';\n                    this.barrier_2 = '';\n                    this.expiry_type = 'duration';\n                    this.root_store.ui.is_advanced_duration = false;\n                }\n            }\n            // TODO: handle barrier updates on proposal api\n            // const is_barrier_changed = 'barrier_1' in new_state || 'barrier_2' in new_state;\n            await processTradeParams(this, new_state);\n\n            this.updateStore({\n                ...(!this.is_initial_barrier_applied ? this.initial_barriers : {}),\n            });\n            this.is_initial_barrier_applied = true;\n            if (/\\b(contract_type|currency)\\b/.test(Object.keys(new_state) as unknown as string)) {\n                this.validateAllProperties();\n            }\n            this.debouncedProposal();\n        }\n    }\n\n    get is_dtrader_v2_mobile() {\n        return isDtraderV2MobileEnabled(this.root_store.ui.is_mobile);\n    }\n\n    get is_dtrader_v2_desktop() {\n        return isDtraderV2DesktopEnabled(this.root_store.ui.is_desktop);\n    }\n\n    get is_dtrader_v2() {\n        return this.is_dtrader_v2_mobile || this.is_dtrader_v2_desktop;\n    }\n\n    get is_synthetics_available() {\n        return !!this.active_symbols?.find(item => item.market === 'synthetic_index');\n    }\n\n    get is_synthetics_trading_market_available() {\n        return !!this.active_symbols?.find(\n            item => item.subgroup === 'synthetics' && !isMarketClosed(this.active_symbols, item.symbol)\n        );\n    }\n\n    get show_digits_stats() {\n        return isDigitTradeType(this.contract_type);\n    }\n\n    setDigitStats(digit_stats: number[]) {\n        this.digit_stats = digit_stats;\n    }\n\n    setTickData(tick: TickSpotData | null) {\n        this.tick_data = tick;\n    }\n\n    setMobileDigitView(bool: boolean) {\n        this.is_mobile_digit_view_selected = bool;\n    }\n\n    pushPurchaseDataToGtm(contract_data: TContractDataForGTM) {\n        const data = {\n            event: 'buy_contract',\n            bom_ui: 'new',\n            contract: {\n                amount: contract_data.amount,\n                barrier1: contract_data.barrier,\n                barrier2: contract_data.barrier2,\n                basis: contract_data.basis,\n                buy_price: contract_data.buy_price,\n                contract_type: contract_data.contract_type,\n                currency: contract_data.currency,\n                date_expiry: contract_data.date_expiry,\n                date_start: contract_data.date_start,\n                duration: contract_data.duration,\n                duration_unit: contract_data.duration_unit,\n                payout: contract_data.payout,\n                symbol: contract_data.symbol,\n            },\n            settings: {\n                theme: this.root_store.ui.is_dark_mode_on ? 'dark' : 'light',\n                positions_drawer: this.root_store.ui.is_positions_drawer_on ? 'open' : 'closed',\n                chart: {\n                    toolbar_position: this.root_store.ui.is_chart_layout_default ? 'bottom' : 'left',\n                    chart_asset_info: this.root_store.ui.is_chart_asset_info_visible ? 'visible' : 'hidden',\n                    chart_type: this.root_store.contract_trade.chart_type,\n                    granularity: this.root_store.contract_trade.granularity,\n                },\n            },\n        };\n        this.root_store.gtm.pushDataLayer(data);\n    }\n\n    clearPurchaseInfo() {\n        this.purchase_info = {};\n        this.proposal_requests = {};\n        this.proposal_info = {};\n    }\n\n    requestProposal() {\n        const requests = createProposalRequests(this);\n        if (Object.values(this.validation_errors).some(e => e.length)) {\n            runInAction(() => {\n                this.proposal_info = {};\n                this.purchase_info = {};\n            });\n            this.forgetAllProposal();\n            if (this.is_accumulator) this.resetAccumulatorData();\n            return;\n        }\n\n        if (!isEmptyObject(requests)) {\n            runInAction(() => {\n                this.proposal_requests = requests as Record<string, Partial<PriceProposalRequest>>;\n                this.purchase_info = {};\n            });\n            Object.keys(this.proposal_requests).forEach(type => {\n                WS.subscribeProposal(this.proposal_requests[type], this.onProposalResponse);\n            });\n        }\n        this.root_store.ui.resetPurchaseStates();\n    }\n\n    forgetAllProposal() {\n        const length = Object.keys(this.proposal_requests).length;\n        if (length > 0) WS.forgetAll('proposal');\n    }\n\n    setMarketStatus(status: boolean) {\n        this.is_market_closed = status;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getTurbosChartBarrier(response: ProposalResponse) {\n        return (Number(response.proposal?.contract_details?.barrier) - Number(response.proposal?.spot)).toFixed(\n            getBarrierPipSize(response.proposal?.contract_details?.barrier)\n        );\n    }\n\n    onProposalResponse(response: TResponse<PriceProposalRequest, ProposalResponse, 'proposal'>) {\n        const { contract_type } = response.echo_req;\n        const prev_proposal_info = getPropertyValue(this.proposal_info, contract_type) || {};\n        const obj_prev_contract_basis = getPropertyValue(prev_proposal_info, 'obj_contract_basis') || {};\n\n        // add/update expiration or date_expiry for crypto indices from proposal\n        const date_expiry = response.proposal?.date_expiry;\n        this.expiry_epoch = date_expiry || this.expiry_epoch;\n\n        if (!response.error && !!date_expiry && this.is_crypto_multiplier) {\n            this.expiration = date_expiry;\n        }\n\n        this.proposal_info = {\n            ...this.proposal_info,\n            [contract_type]: getProposalInfo(this, response, obj_prev_contract_basis),\n        };\n        this.validation_params[contract_type] = this.proposal_info[contract_type].validation_params;\n\n        if (this.is_multiplier && this.proposal_info && this.proposal_info.MULTUP) {\n            const { commission, cancellation, limit_order } = this.proposal_info.MULTUP;\n            // commission and cancellation.ask_price is the same for MULTUP/MULTDOWN\n            if (commission) {\n                this.commission = commission;\n            }\n            if (cancellation) {\n                this.cancellation_price = cancellation.ask_price;\n            }\n            this.stop_out = limit_order?.stop_out?.order_amount;\n        }\n\n        if (this.is_accumulator && this.proposal_info?.ACCU) {\n            const {\n                barrier_spot_distance,\n                maximum_ticks = 0,\n                ticks_stayed_in,\n                tick_size_barrier_percentage = '',\n                last_tick_epoch,\n                maximum_payout = 0,\n                high_barrier,\n                low_barrier,\n                spot_time,\n            } = this.proposal_info.ACCU;\n            this.ticks_history_stats = getUpdatedTicksHistoryStats({\n                previous_ticks_history_stats: this.ticks_history_stats,\n                new_ticks_history_stats: ticks_stayed_in,\n                last_tick_epoch,\n            });\n            this.maximum_ticks = maximum_ticks;\n            this.maximum_payout = maximum_payout;\n            this.tick_size_barrier_percentage = tick_size_barrier_percentage;\n            const { updateAccumulatorBarriersData } = this.root_store.contract_trade || {};\n            if (updateAccumulatorBarriersData) {\n                updateAccumulatorBarriersData({\n                    accumulators_high_barrier: high_barrier,\n                    accumulators_low_barrier: low_barrier,\n                    barrier_spot_distance,\n                    current_spot_time: spot_time,\n                    underlying: this.symbol,\n                });\n            }\n        }\n\n        if (!this.main_barrier || this.main_barrier?.shade) {\n            if (this.is_turbos) {\n                if (response.proposal) {\n                    const chart_barrier = response.proposal.barrier_spot_distance;\n                    this.setMainBarrier({\n                        ...response.echo_req,\n                        barrier: String(chart_barrier),\n                    });\n                }\n            } else {\n                this.setMainBarrier(response.echo_req);\n            }\n        }\n\n        if (this.hovered_contract_type === contract_type) {\n            setLimitOrderBarriers({\n                barriers: this.root_store.portfolio.barriers,\n                contract_info: this.proposal_info[this.hovered_contract_type ?? ''],\n                contract_type,\n                is_over: true,\n            });\n        }\n\n        if (response.error) {\n            const error_id = getProposalErrorField(response);\n            if (error_id) {\n                this.setValidationErrorMessages(error_id, [response.error.message]);\n            }\n            // Commission for multipliers is normally set from proposal response.\n            // But when we change the multiplier and if it is invalid, we don't get the proposal response to set the commission. We only get error message.\n            // This is a work around to set the commission from error message.\n            if (this.is_multiplier) {\n                const { message, details } = response.error;\n                const commission_match = (message || '').match(/\\((\\d+\\.*\\d*)\\)/);\n                if (details?.field === 'stop_loss' && commission_match?.[1]) {\n                    this.commission = commission_match[1];\n                }\n            }\n            if (this.is_accumulator) this.resetAccumulatorData();\n\n            // Sometimes when we navigate fast, `forget_all` proposal is called immediately after proposal subscription calls.\n            // But, in the BE, `forget_all` proposal call is processed before the proposal subscriptions are registered. In this case, `forget_all` proposal doesn't forget the new subscriptions.\n            // So when we send new proposal subscription requests, we get `AlreadySubscribed` error.\n            // If we get an error message with code `AlreadySubscribed`, `forget_all` proposal will be called and all the existing subscriptions will be marked as complete in `deriv-api` and will subscribe to new proposals\n            if (response.error.code === 'AlreadySubscribed') {\n                this.refresh();\n\n                if (this.is_trade_component_mounted) {\n                    this.debouncedProposal();\n                }\n                return;\n            }\n\n            // Sometimes the initial barrier doesn't match with current barrier choices received from API.\n            // When this happens we want to populate the list of barrier choices to choose from since the value cannot be specified manually\n            if (this.is_vanilla && response.error.details?.barrier_choices) {\n                const { barrier_choices, max_stake, min_stake } = response.error.details;\n\n                // Store the current barrier value before updating choices\n                const previous_barrier = this.barrier_1;\n\n                this.setStakeBoundary(contract_type, min_stake, max_stake);\n                this.setBarrierChoices(barrier_choices as string[]);\n                if (!this.barrier_choices.includes(previous_barrier)) {\n                    // Find the closest value instead of defaulting to median\n                    this.barrier_1 = this.findClosestBarrierValue(previous_barrier, this.barrier_choices);\n                    this.onChange({\n                        target: {\n                            name: 'barrier_1',\n                            value: this.barrier_1,\n                        },\n                    });\n                }\n            }\n            if (this.is_turbos && response.error.details?.payout_per_point_choices) {\n                const { payout_per_point_choices, min_stake, max_stake } = response.error.details;\n                const payoutIndex = Math.floor(payout_per_point_choices.length / 2);\n                this.setPayoutChoices(payout_per_point_choices.map(item => String(item)));\n                this.setStakeBoundary(contract_type, min_stake, max_stake);\n                this.onChange({\n                    target: {\n                        name: 'payout_per_point',\n                        value: String(payout_per_point_choices[payoutIndex]),\n                    },\n                });\n                this.barrier_1 = String(this.getTurbosChartBarrier(response));\n            }\n        } else {\n            this.validateAllProperties();\n            if (this.is_vanilla) {\n                const { max_stake, min_stake, barrier_choices } = response.proposal ?? {};\n\n                // Store the current barrier value before updating choices\n                const previous_barrier = this.barrier_1;\n\n                this.setBarrierChoices(barrier_choices as string[]);\n                this.setStakeBoundary(contract_type, min_stake, max_stake);\n\n                // If the current barrier is not in the new choices, find the closest match\n                if (barrier_choices && !barrier_choices.includes(previous_barrier)) {\n                    this.barrier_1 = this.findClosestBarrierValue(previous_barrier, barrier_choices as string[]);\n                    this.onChange({\n                        target: {\n                            name: 'barrier_1',\n                            value: this.barrier_1,\n                        },\n                    });\n                }\n            } else if (this.is_turbos) {\n                const { max_stake, min_stake, payout_choices } = response.proposal ?? {};\n                if (payout_choices) {\n                    if (this.payout_per_point == '') {\n                        this.onChange({\n                            target: {\n                                name: 'payout_per_point',\n                                value: String(Math.floor(payout_choices.length / 2)),\n                            },\n                        });\n                    }\n                    this.setPayoutChoices(payout_choices as string[]);\n                    this.setStakeBoundary(contract_type, min_stake, max_stake);\n                    this.barrier_1 = response.proposal.barrier_spot_distance;\n                }\n            }\n        }\n\n        if (!this.is_purchasing_contract) {\n            this.enablePurchase();\n        }\n    }\n\n    onChartBarrierChange(barrier_1: string, barrier_2?: string) {\n        this.processNewValuesAsync({ barrier_1, barrier_2 }, true);\n    }\n\n    onAllowEqualsChange() {\n        this.processNewValuesAsync(\n            { contract_type: this.is_equal ? TRADE_TYPES.RISE_FALL_EQUAL : TRADE_TYPES.RISE_FALL },\n            true\n        );\n    }\n\n    updateSymbol(underlying: string) {\n        if (!underlying) return;\n        this.onChange({\n            target: {\n                name: 'symbol',\n                value: underlying,\n            },\n        });\n    }\n\n    changeDurationValidationRules() {\n        if (this.expiry_type === 'endtime') {\n            this.validation_errors.duration = [];\n            return;\n        }\n\n        if (!this.validation_rules.duration) return;\n\n        const index = this.validation_rules.duration.rules?.findIndex(item => item[0] === 'number');\n        const limits = this.duration_min_max[this.contract_expiry_type] || false;\n\n        if (limits) {\n            const duration_options = {\n                min: convertDurationLimit(+limits.min, this.duration_unit),\n                max: convertDurationLimit(+limits.max, this.duration_unit),\n            };\n\n            if (Number(index) > -1 && this.validation_rules.duration.rules) {\n                this.validation_rules.duration.rules[Number(index)][1] = duration_options;\n            } else {\n                this.validation_rules.duration.rules?.push(['number', duration_options]);\n            }\n            this.validateProperty('duration', this.duration);\n        }\n    }\n\n    async accountSwitcherListener() {\n        if (this.root_store.common.is_language_changing) {\n            await this.loadActiveSymbols(false, false);\n            this.root_store.common.is_language_changing = false;\n        } else {\n            await this.loadActiveSymbols(true, false);\n        }\n\n        this.resetErrorServices();\n        await this.setContractTypes();\n        runInAction(async () => {\n            if (!this.is_dtrader_v2) {\n                this.processNewValuesAsync(\n                    { currency: this.root_store.client.currency || this.root_store.client.default_currency },\n                    true,\n                    { currency: this.currency },\n                    false\n                );\n            }\n        });\n        return Promise.resolve();\n    }\n\n    preSwitchAccountListener() {\n        this.clearContracts();\n        this.is_trade_enabled = false;\n        this.is_trade_enabled_v2 = false;\n        return Promise.resolve();\n    }\n\n    async logoutListener() {\n        this.clearContracts();\n        this.refresh();\n        this.resetErrorServices();\n        if (this.root_store.common.is_language_changing) {\n            await this.loadActiveSymbols(false);\n            this.root_store.common.is_language_changing = false;\n        } else {\n            await this.loadActiveSymbols();\n        }\n        await this.setContractTypes();\n        this.is_trade_enabled = true;\n        this.is_trade_enabled_v2 = true;\n        this.debouncedProposal();\n    }\n\n    clientInitListener() {\n        this.initAccountCurrency(this.root_store.client.currency || this.root_store.client.default_currency);\n        return Promise.resolve();\n    }\n\n    networkStatusChangeListener(is_online: boolean) {\n        this.setTradeStatus(is_online);\n        this.is_trade_enabled_v2 = is_online;\n    }\n\n    resetErrorServices() {\n        this.root_store.ui.toggleServicesErrorModal(false);\n    }\n\n    onMount() {\n        this.root_store.notifications.removeTradeNotifications();\n        if (this.is_trade_component_mounted && this.should_skip_prepost_lifecycle) {\n            const { chart_type, granularity } = this.root_store.contract_trade;\n            setTradeURLParams({\n                chartType: chart_type,\n                granularity,\n                symbol: this.symbol,\n                contractType: this.contract_type,\n            });\n            return;\n        }\n        this.root_store.notifications.setShouldShowPopups(false);\n        this.onPreSwitchAccount(this.preSwitchAccountListener);\n        this.onSwitchAccount(this.accountSwitcherListener);\n        this.resetAccumulatorData();\n        this.onLogout(this.logoutListener);\n        this.onClientInit(this.clientInitListener);\n        this.onNetworkStatusChange(this.networkStatusChangeListener);\n        this.setChartModeFromURL();\n        this.setChartStatus(true);\n        runInAction(async () => {\n            this.is_trade_component_mounted = true;\n            await this.prepareTradeStore();\n            this.root_store.notifications.setShouldShowPopups(true);\n        });\n    }\n\n    setChartModeFromURL() {\n        const { chartType: chartTypeParam, granularity: granularityParam, contractType } = getTradeURLParams();\n        const { chart_type, granularity, updateChartType, updateGranularity } = this.root_store.contract_trade;\n\n        if (!isNaN(Number(granularityParam)) && granularityParam !== granularity) {\n            updateGranularity(Number(granularityParam));\n        }\n        if (chartTypeParam && chartTypeParam !== chart_type) {\n            updateChartType(chartTypeParam);\n        }\n\n        const urlParams: {\n            chartType: string;\n            granularity: number;\n            contractType?: string;\n        } = {\n            chartType: chartTypeParam ?? chart_type,\n            granularity: granularityParam ?? Number(granularity),\n        };\n\n        if (contractType) {\n            this.contract_type = contractType ?? '';\n            urlParams.contractType = contractType;\n        }\n\n        setTradeURLParams(urlParams);\n    }\n\n    setChartStatus(status: boolean, isFromChart?: boolean) {\n        if (isFromChart) this.debouncedSetChartStatus(status);\n        else this.is_chart_loading = status;\n    }\n\n    async initAccountCurrency(new_currency: string) {\n        if (this.currency === new_currency) return;\n\n        await this.processNewValuesAsync({ currency: new_currency }, true, { currency: this.currency }, false);\n        this.refresh();\n        this.debouncedProposal();\n    }\n\n    onUnmount() {\n        if (this.should_skip_prepost_lifecycle) {\n            return;\n        }\n        this.disposePreSwitchAccount();\n        this.disposeSwitchAccount();\n        this.disposeLogout();\n        this.disposeClientInit();\n        this.disposeNetworkStatusChange();\n        this.disposeThemeChange();\n        this.is_trade_component_mounted = false;\n        this.clearV2ParamsInitialValues();\n        // TODO: Find a more elegant solution to unmount contract-trade-store\n        this.root_store.contract_trade.onUnmount();\n        this.refresh();\n\n        this.resetAccumulatorData();\n\n        this.resetErrorServices();\n        if (this.root_store.notifications.is_notifications_visible) {\n            this.root_store.notifications.toggleNotificationsModal();\n        }\n        if (this.prev_chart_layout) {\n            this.prev_chart_layout.is_used = false;\n        }\n        this.clearContracts();\n        this.resetAccumulatorData();\n        if (this.is_vanilla) {\n            this.setBarrierChoices([]);\n        }\n    }\n\n    prev_chart_layout: TPrevChartLayout = null;\n\n    get chart_layout() {\n        let layout = null;\n        if (this.prev_chart_layout && this.prev_chart_layout.is_used === false) {\n            layout = this.prev_chart_layout;\n        }\n        return layout;\n    }\n\n    get is_crypto_multiplier() {\n        return this.contract_type === TRADE_TYPES.MULTIPLIER && this.symbol.startsWith('cry');\n    }\n\n    exportLayout(layout: TChartLayout) {\n        delete layout.previousMaxTicks; // TODO: fix it in smartcharts\n        this.prev_chart_layout = layout;\n        if (this.prev_chart_layout) {\n            this.prev_chart_layout.isDone = () => {\n                if (this.prev_chart_layout) this.prev_chart_layout.is_used = true;\n                this.setChartStatus(false);\n            };\n        }\n    }\n\n    // ---------- WS ----------\n    wsSubscribe = (req: TicksHistoryRequest, callback: (response: TTicksHistoryResponse) => void) => {\n        const passthrough_callback = (...args: [TTicksHistoryResponse]) => {\n            callback(...args);\n            if ('ohlc' in args[0] && this.root_store.contract_trade.granularity !== 0) {\n                const { close, pip_size } = args[0].ohlc as { close: string; pip_size: number };\n                if (close && pip_size) this.setTickData({ pip_size, quote: Number(close) });\n            }\n            interface AccumulatorBarriersData {\n                current_spot?: number;\n                current_spot_time?: number;\n                tick_update_timestamp?: number;\n                accumulators_high_barrier?: string;\n                accumulators_low_barrier?: string;\n                barrier_spot_distance?: string;\n                previous_spot_time?: number;\n            }\n\n            if (this.is_accumulator) {\n                let current_spot_data: AccumulatorBarriersData = {};\n\n                if ('tick' in args[0]) {\n                    const { epoch, quote, symbol } = args[0].tick as TickSpotData;\n                    if (this.symbol !== symbol) return;\n                    current_spot_data = {\n                        current_spot: quote,\n                        current_spot_time: epoch,\n                    };\n                } else if ('history' in args[0]) {\n                    const { prices, times } = args[0].history as History;\n                    const symbol = args[0].echo_req.ticks_history;\n                    if (this.symbol !== symbol) return;\n                    current_spot_data = {\n                        current_spot: prices?.[prices?.length - 1],\n                        current_spot_time: times?.[times?.length - 1],\n                        previous_spot_time: times?.[times?.length - 2],\n                    };\n                } else {\n                    return;\n                }\n\n                // If switching accounts, include previous barrier values\n                if (this.root_store.client.is_switching) {\n                    const barriers_data = this.root_store.contract_trade\n                        .accumulator_barriers_data as AccumulatorBarriersData;\n\n                    if (\n                        current_spot_data.current_spot !== undefined &&\n                        barriers_data.barrier_spot_distance !== undefined\n                    ) {\n                        const barrier_spot_distance_num = parseFloat(barriers_data.barrier_spot_distance);\n\n                        current_spot_data = {\n                            ...current_spot_data,\n                            accumulators_high_barrier: String(\n                                current_spot_data.current_spot + barrier_spot_distance_num\n                            ),\n                            accumulators_low_barrier: String(\n                                current_spot_data.current_spot - barrier_spot_distance_num\n                            ),\n                            barrier_spot_distance: barriers_data.barrier_spot_distance,\n                        };\n                    }\n                }\n\n                this.root_store.contract_trade.updateAccumulatorBarriersData(current_spot_data);\n            }\n        };\n        if (isMarketClosed(this.active_symbols, req.ticks_history)) {\n            delete req.subscribe;\n            WS.getTicksHistory(req).then(passthrough_callback, passthrough_callback);\n        } else if (req.subscribe === 1) {\n            const key = JSON.stringify(req);\n            const subscriber = WS.subscribeTicksHistory(req, passthrough_callback);\n            g_subscribers_map[key] = subscriber;\n        }\n    };\n\n    wsForget = (req: TicksHistoryRequest) => {\n        const key = JSON.stringify(req);\n        if (g_subscribers_map[key]) {\n            g_subscribers_map[key]?.unsubscribe();\n            delete g_subscribers_map[key];\n        }\n        // WS.forget('ticks_history', callback, match);\n    };\n\n    wsForgetStream = (stream_id: string) => {\n        WS.forgetStream(stream_id);\n    };\n\n    wsSendRequest = (req: TradingTimesRequest | ActiveSymbolsRequest | ServerTimeRequest) => {\n        if ('time' in req) {\n            return ServerTime.timePromise().then(server_time => {\n                if (server_time) {\n                    return {\n                        msg_type: 'time',\n                        time: server_time.unix(),\n                    };\n                }\n                return WS.time();\n            });\n        }\n        if ('active_symbols' in req) {\n            if (this.root_store.client.is_logged_in) {\n                return WS.authorized.activeSymbols('brief');\n            }\n            return WS.activeSymbols('brief');\n        }\n        if ('trading_times' in req) {\n            return WS.tradingTimes(req.trading_times);\n        }\n        return WS.storage.send(req);\n    };\n\n    chartStateChange(state: string, option?: TChartStateChangeOption) {\n        if (\n            state === STATE_TYPES.MARKET_STATE_CHANGE &&\n            this.is_trade_component_mounted &&\n            option?.isClosed &&\n            option.isClosed !== this.is_market_closed\n        ) {\n            this.prepareTradeStore(false);\n        }\n        if (state === STATE_TYPES.SET_CHART_MODE) {\n            if (!isNaN(Number(option?.granularity))) {\n                this.root_store.contract_trade.updateGranularity(Number(option?.granularity));\n            }\n            if (option?.chart_type_name) {\n                this.root_store.contract_trade.updateChartType(option?.chart_type_name);\n            }\n        }\n        const { data, event_type } = getChartAnalyticsData(state as keyof typeof STATE_TYPES, option) as TPayload;\n        if (data) {\n            cacheTrackEvents.loadEvent([\n                {\n                    event: {\n                        name: event_type,\n                        properties: {\n                            ...data,\n                            action: data.action as TEvents['ce_indicators_types_form']['action'],\n                            form_name: 'default',\n                        },\n                    },\n                },\n            ]);\n        }\n    }\n\n    get has_alternative_source() {\n        return this.is_multiplier && !!this.hovered_contract_type;\n    }\n\n    get has_barrier() {\n        return hasBarrier(this.contract_type);\n    }\n\n    get is_accumulator() {\n        return this.contract_type === TRADE_TYPES.ACCUMULATOR;\n    }\n\n    get is_multiplier() {\n        return this.contract_type === TRADE_TYPES.MULTIPLIER;\n    }\n\n    get is_turbos() {\n        return isTurbosContract(this.contract_type);\n    }\n\n    get is_vanilla() {\n        return isVanillaContract(this.contract_type);\n    }\n\n    get is_vanilla_fx() {\n        return isVanillaFxContract(this.contract_type, this.symbol);\n    }\n\n    get is_touch() {\n        return isTouchContract(this.contract_type);\n    }\n\n    async getFirstOpenMarket(markets_to_search: string[]) {\n        if (this.active_symbols?.length) {\n            return findFirstOpenMarket(this.active_symbols, markets_to_search);\n        }\n        const { active_symbols, error } = await WS.authorized.activeSymbols();\n        if (error) {\n            this.root_store.common.showError({ message: localize('Trading is unavailable at this time.') });\n            return undefined;\n        }\n        return findFirstOpenMarket(active_symbols, markets_to_search);\n    }\n\n    setStakeBoundary(type: string, min_stake?: number, max_stake?: number) {\n        if (min_stake && max_stake) this.stake_boundary[type] = { min_stake, max_stake };\n    }\n\n    setActiveSymbolsV2(active_symbols: ActiveSymbols) {\n        this.active_symbols = active_symbols;\n        this.has_symbols_for_v2 = !!active_symbols.length;\n    }\n\n    setContractTypesListV2(contract_types_list: TContractTypesList) {\n        this.contract_types_list_v2 = contract_types_list;\n    }\n\n    /**\n     * Finds the closest barrier value from the available choices\n     * @param current_value - The current barrier value selected by the user\n     * @param barrier_choices - The list of available barrier choices\n     * @returns The closest available barrier value to the user's selection\n     */\n    findClosestBarrierValue(current_value: string, barrier_choices: string[]): string {\n        if (!barrier_choices.length) return current_value;\n        if (barrier_choices.includes(current_value)) return current_value;\n\n        // Convert strings to numbers for comparison\n        // Handle both formats: absolute values like \"1790.00\" and relative values like \"+0.650\"\n        const isRelative = current_value.startsWith('+') || current_value.startsWith('-');\n        const current_numeric = parseFloat(current_value);\n\n        // Find the closest value\n        return barrier_choices.reduce(\n            (closest, choice) => {\n                const choice_numeric = parseFloat(choice);\n\n                // If both are relative or both are absolute, compare directly\n                if (\n                    (isRelative && (choice.startsWith('+') || choice.startsWith('-'))) ||\n                    (!isRelative && !choice.startsWith('+') && !choice.startsWith('-'))\n                ) {\n                    if (Math.abs(choice_numeric - current_numeric) < Math.abs(parseFloat(closest) - current_numeric)) {\n                        return choice;\n                    }\n                }\n                return closest;\n            },\n            barrier_choices[Math.floor(barrier_choices.length / 2)]\n        ); // Default to median if comparison fails\n    }\n\n    setBarrierChoices(barrier_choices: string[]) {\n        this.barrier_choices = barrier_choices ?? [];\n        if (this.is_vanilla) {\n            this.strike_price_choices = { barrier: this.barrier_1, barrier_choices };\n        }\n    }\n\n    setPayoutChoices(payout_choices: string[]) {\n        this.payout_choices = payout_choices ?? [];\n        const stored_barriers_data = { barrier: this.barrier_1, payout_choices };\n        if (getContractSubtype(this.contract_type) === 'Long') {\n            this.long_barriers = stored_barriers_data;\n        } else {\n            this.short_barriers = stored_barriers_data;\n        }\n    }\n\n    togglePayoutWheelPicker() {\n        this.open_payout_wheelpicker = !this.open_payout_wheelpicker;\n    }\n    setPayoutPerPoint(val: string) {\n        if (val && val !== this.payout_per_point) {\n            this.payout_per_point = val;\n            this.onChange({\n                target: {\n                    name: 'payout_per_point',\n                    value: String(this.payout_per_point),\n                },\n            });\n        }\n    }\n    setIsDigitsWidgetActive(is_active: boolean) {\n        this.is_digits_widget_active = is_active;\n    }\n\n    setTradeTypeTab(label = '') {\n        this.trade_type_tab = label;\n    }\n}\n","import { makeObservable, observable, action, override } from 'mobx';\nimport { TRootStore } from 'Types';\nimport { getFilteredContractTypes } from 'AppV2/Utils/positions-utils';\nimport BaseStore from 'Stores/base-store';\n\nexport default class PositionsStore extends BaseStore {\n    openContractTypeFilter: string[] | [] = [];\n    closedContractTypeFilter: string[] | [] = [];\n    filteredContractTypes: string[] | [] = [];\n    timeFilter = '';\n    customTimeRangeFilter = '';\n    dateFrom: number | null = null;\n    dateTo: number | null = null;\n\n    constructor({ root_store }: { root_store: TRootStore }) {\n        super({ root_store });\n\n        makeObservable(this, {\n            openContractTypeFilter: observable,\n            closedContractTypeFilter: observable,\n            timeFilter: observable,\n            customTimeRangeFilter: observable,\n            dateFrom: observable,\n            dateTo: observable,\n            setClosedContractTypeFilter: action.bound,\n            setOpenContractTypeFilter: action.bound,\n            setTimeFilter: action.bound,\n            setCustomTimeRangeFilter: action.bound,\n            setDateFrom: action.bound,\n            setDateTo: action.bound,\n            onUnmount: override,\n        });\n    }\n\n    setClosedContractTypeFilter(contractTypes: string[] | []) {\n        this.closedContractTypeFilter = [...contractTypes];\n        this.filteredContractTypes = getFilteredContractTypes(contractTypes);\n    }\n\n    setOpenContractTypeFilter(contractTypes: string[] | []) {\n        this.openContractTypeFilter = [...contractTypes];\n    }\n\n    setTimeFilter(newTimeFilter?: string) {\n        this.timeFilter = newTimeFilter || '';\n    }\n\n    setCustomTimeRangeFilter(newCustomTimeFilter?: string) {\n        this.customTimeRangeFilter = newCustomTimeFilter || '';\n    }\n\n    setDateFrom(newDateFrom: number | null) {\n        this.dateFrom = newDateFrom;\n    }\n\n    setDateTo(newDateTo: number | null) {\n        this.dateTo = newDateTo;\n    }\n\n    onUnmount() {\n        this.setClosedContractTypeFilter([]);\n        this.setOpenContractTypeFilter([]);\n        this.setTimeFilter('');\n        this.setCustomTimeRangeFilter('');\n        this.setDateFrom(null);\n        this.setDateTo(null);\n    }\n}\n","import { makeObservable, observable, action } from 'mobx';\nimport { TRootStore } from 'Types';\nimport BaseStore from 'Stores/base-store';\n\nexport default class MarketsStore extends BaseStore {\n    // favorites\n    favoriteIndicators: string[] = [];\n    favoriteSymbols: string[] = [];\n\n    constructor({ root_store }: { root_store: TRootStore }) {\n        super({ root_store });\n\n        makeObservable(this, {\n            favoriteSymbols: observable,\n            favoriteIndicators: observable,\n            setFavoriteSymbols: action.bound,\n            setFavoriteIndicators: action.bound,\n            removeFavoriteSymbol: action.bound,\n            removeFavoriteIndicator: action.bound,\n        });\n\n        // Initialize localStorage if it doesn't exist\n        const existingFavorites = localStorage.getItem('cq-favorites');\n        if (!existingFavorites) {\n            const initialData = {\n                indicators: [],\n                'chartTitle&Comparison': [],\n            };\n            localStorage.setItem('cq-favorites', JSON.stringify(initialData));\n        } else {\n            const indicators = JSON.parse(existingFavorites).indicators;\n            const favoriteSymbols = JSON.parse(existingFavorites)['chartTitle&Comparison'];\n            this.favoriteIndicators = indicators;\n            this.favoriteSymbols = favoriteSymbols;\n        }\n    }\n\n    setFavoriteIndicators(indicators: string[]) {\n        this.favoriteIndicators = indicators;\n        this.syncLocalStorage();\n    }\n\n    setFavoriteSymbols(symbols: string[]) {\n        this.favoriteSymbols = symbols;\n        this.syncLocalStorage();\n    }\n\n    removeFavoriteIndicator(indicator: string) {\n        this.favoriteIndicators = this.favoriteIndicators.filter(favIndicator => favIndicator !== indicator);\n        this.syncLocalStorage();\n    }\n\n    removeFavoriteSymbol(symbol: string) {\n        this.favoriteSymbols = this.favoriteSymbols.filter(favSymbol => favSymbol !== symbol);\n        this.syncLocalStorage();\n    }\n\n    syncLocalStorage() {\n        const favorites = {\n            indicators: this.favoriteIndicators,\n            'chartTitle&Comparison': this.favoriteSymbols,\n        };\n        localStorage.setItem('cq-favorites', JSON.stringify(favorites));\n    }\n}\n","import TradeStore from './Trading/trade-store';\nimport PositionsStore from './Positions/positions-store';\nimport MarketsStore from './Markets/markets-store';\nimport { TCoreStores } from '@deriv/stores/types';\nimport { TRootStore } from 'Types';\n\nexport default class ModulesStore {\n    positions: PositionsStore;\n    markets: MarketsStore;\n    trade: TradeStore;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    cashier: any;\n\n    constructor(root_store: TRootStore, core_store: TCoreStores) {\n        this.cashier = core_store.modules.cashier;\n        this.trade = new TradeStore({ root_store });\n        this.positions = new PositionsStore({ root_store });\n        this.markets = new MarketsStore({ root_store });\n    }\n}\n","import { TCoreStores } from '@deriv/stores/types';\nimport ModulesStore from './Modules';\n\nexport default class RootStore {\n    client: TCoreStores['client'];\n    common: TCoreStores['common'];\n    modules: ModulesStore;\n    ui: TCoreStores['ui'];\n    gtm: TCoreStores['gtm'];\n    notifications: TCoreStores['notifications'];\n    contract_replay: TCoreStores['contract_replay'];\n    contract_trade: TCoreStores['contract_trade'];\n    portfolio: TCoreStores['portfolio'];\n    chart_barrier_store: TCoreStores['chart_barrier_store'];\n    active_symbols: TCoreStores['active_symbols'];\n\n    constructor(core_store: TCoreStores) {\n        this.client = core_store.client;\n        this.common = core_store.common;\n        this.modules = new ModulesStore(this, core_store);\n        this.ui = core_store.ui;\n        this.gtm = core_store.gtm;\n        this.notifications = core_store.notifications;\n        this.contract_replay = core_store.contract_replay;\n        this.contract_trade = core_store.contract_trade;\n        this.portfolio = core_store.portfolio;\n        this.chart_barrier_store = core_store.chart_barrier_store;\n        this.active_symbols = core_store.active_symbols;\n    }\n}\n","import { configure } from 'mobx';\nimport { setWebsocket } from '@deriv/shared';\nimport ServerTime from '_common/base/server_time';\nimport { TCoreStores } from '@deriv/stores/types';\nimport type { TWebSocket } from 'Types';\nimport RootStore from '../Stores';\n\nconfigure({ enforceActions: 'observed', isolateGlobalState: true });\n\nlet root_store: TCoreStores;\n\nconst initStore = (core_store: TCoreStores, websocket: TWebSocket) => {\n    if (root_store) return root_store;\n\n    ServerTime.init(core_store.common);\n    setWebsocket(websocket);\n    root_store = new RootStore(core_store) as unknown as TCoreStores;\n\n    return root_store;\n};\n\nexport default initStore;\n","import { CONTRACT_TYPES, getSupportedContracts, getTotalProfit, isHighLow, isMultiplierContract } from '@deriv/shared';\nimport { TPortfolioPosition } from '@deriv/stores/types';\nimport { TClosedPosition } from 'AppV2/Containers/Positions/positions-content';\nimport { CONTRACT_LIST } from './trade-types-utils';\n\nexport const DEFAULT_DATE_FORMATTING_CONFIG = {\n    day: '2-digit',\n    month: 'short',\n    year: 'numeric',\n} as Record<string, string>;\n\nexport const TAB_NAME = {\n    OPEN: 'Open',\n    CLOSED: 'Closed',\n};\n\nexport const filterPositions = (positions: (TPortfolioPosition | TClosedPosition)[], filter: string[]) => {\n    if (!filter.length) return positions;\n    // Split contract type names with '/' (e.g. Rise/Fall)\n    const splittedFilter = filter.map(option => (option.includes('/') ? option.split('/') : option)).flat();\n\n    return positions.filter(({ contract_info }) => {\n        const config = getSupportedContracts(isHighLow({ shortcode: contract_info.shortcode }))[\n            contract_info.contract_type as keyof ReturnType<typeof getSupportedContracts>\n        ];\n        if (!config) return false;\n        return splittedFilter.includes('main_title' in config ? config.main_title : config.name);\n    });\n};\nconst contractTypesConfig = {\n    [CONTRACT_LIST.ACCUMULATORS]: [CONTRACT_TYPES.ACCUMULATOR],\n    [CONTRACT_LIST.VANILLAS]: [CONTRACT_TYPES.VANILLA.CALL, CONTRACT_TYPES.VANILLA.PUT],\n    [CONTRACT_LIST.TURBOS]: [CONTRACT_TYPES.TURBOS.LONG, CONTRACT_TYPES.TURBOS.SHORT],\n    [CONTRACT_LIST.MULTIPLIERS]: [CONTRACT_TYPES.MULTIPLIER.DOWN, CONTRACT_TYPES.MULTIPLIER.UP],\n    [CONTRACT_LIST.RISE_FALL]: [CONTRACT_TYPES.CALL, CONTRACT_TYPES.PUT, CONTRACT_TYPES.CALLE, CONTRACT_TYPES.PUTE],\n    [CONTRACT_LIST.HIGHER_LOWER]: [CONTRACT_TYPES.CALL, CONTRACT_TYPES.PUT],\n    [CONTRACT_LIST.TOUCH_NO_TOUCH]: [CONTRACT_TYPES.TOUCH.NO_TOUCH, CONTRACT_TYPES.TOUCH.ONE_TOUCH],\n    [CONTRACT_LIST.MATCHES_DIFFERS]: [CONTRACT_TYPES.MATCH_DIFF.DIFF, CONTRACT_TYPES.MATCH_DIFF.MATCH],\n    [CONTRACT_LIST.EVEN_ODD]: [CONTRACT_TYPES.EVEN_ODD.EVEN, CONTRACT_TYPES.EVEN_ODD.ODD],\n    [CONTRACT_LIST.OVER_UNDER]: [CONTRACT_TYPES.OVER_UNDER.OVER, CONTRACT_TYPES.OVER_UNDER.UNDER],\n};\n\nexport const getFilteredContractTypes = (filter: string[] = []) => {\n    if (!filter.length) return [];\n    const filteredContractTypes = filter\n        .map(option => contractTypesConfig[option as keyof typeof contractTypesConfig] ?? [])\n        .flat();\n    return [...new Set(filteredContractTypes)];\n};\n\nexport const getProfit = (\n    contract_info: TPortfolioPosition['contract_info'] | TClosedPosition['contract_info']\n): string | number => {\n    return (\n        (contract_info as TClosedPosition['contract_info']).profit_loss?.replaceAll(',', '') ??\n        (isMultiplierContract(contract_info.contract_type)\n            ? getTotalProfit(contract_info as TPortfolioPosition['contract_info'])\n            : (contract_info as TPortfolioPosition['contract_info']).profit)\n    );\n};\n\nexport const getTotalPositionsProfit = (positions: (TPortfolioPosition | TClosedPosition)[]) => {\n    return positions.reduce((sum, { contract_info }) => sum + Number(getProfit(contract_info)), 0);\n};\n\nexport const setPositionURLParams = (tab_name: string) => {\n    const searchParams = new URLSearchParams(window.location.search);\n    searchParams.set('tab_name', tab_name);\n    if (searchParams.toString()) {\n        const newQuery = `${window.location.pathname}?${searchParams.toString()}`;\n        window.history.replaceState({}, document.title, newQuery);\n    }\n};\n","import {\n    CONTRACT_TYPES,\n    isTimeValid,\n    isTouchContract,\n    isTurbosContract,\n    isVanillaContract,\n    shouldShowExpiration,\n    TRADE_TYPES,\n} from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { Moment } from 'moment';\nimport React from 'react';\nimport { createProposalRequestForContract, getProposalInfo } from 'Stores/Modules/Trading/Helpers/proposal';\nimport { TTradeStore } from 'Types';\n\nexport const DURATION_UNIT = {\n    DAYS: 'd',\n    TICKS: 't',\n    MINUTES: 'm',\n    HOURS: 'h',\n    SECONDS: 's',\n};\n\nexport const getTradeParams = (symbol?: string, has_cancellation?: boolean) => ({\n    [TRADE_TYPES.RISE_FALL]: {\n        duration: true,\n        stake: true,\n        allow_equals: true,\n    },\n    [TRADE_TYPES.RISE_FALL_EQUAL]: {\n        duration: true,\n        stake: true,\n        allow_equals: true,\n    },\n    [TRADE_TYPES.HIGH_LOW]: {\n        trade_type_tabs: true,\n        duration: true,\n        barrier: true,\n        stake: true,\n        payout: true,\n    },\n    [TRADE_TYPES.TOUCH]: {\n        trade_type_tabs: true,\n        duration: true,\n        barrier: true,\n        stake: true,\n        payout: true,\n    },\n    [TRADE_TYPES.MATCH_DIFF]: {\n        last_digit: true,\n        duration: true,\n        stake: true,\n    },\n    [TRADE_TYPES.EVEN_ODD]: {\n        duration: true,\n        stake: true,\n    },\n    [TRADE_TYPES.OVER_UNDER]: {\n        last_digit: true,\n        duration: true,\n        stake: true,\n    },\n    [TRADE_TYPES.ACCUMULATOR]: {\n        growth_rate: true,\n        stake: true,\n        take_profit: true,\n        accu_info_display: true,\n    },\n    [TRADE_TYPES.MULTIPLIER]: {\n        multiplier: true,\n        stake: true,\n        risk_management: true,\n        ...(has_cancellation ? { mult_info_display: true } : {}),\n        ...(shouldShowExpiration(symbol) ? { expiration: true } : {}),\n    },\n    [TRADE_TYPES.TURBOS.LONG]: {\n        trade_type_tabs: true,\n        duration: true,\n        payout_per_point: true,\n        stake: true,\n        take_profit: true,\n        barrier_info: true,\n    },\n    [TRADE_TYPES.TURBOS.SHORT]: {\n        trade_type_tabs: true,\n        duration: true,\n        payout_per_point: true,\n        stake: true,\n        take_profit: true,\n        barrier_info: true,\n    },\n    [TRADE_TYPES.VANILLA.CALL]: {\n        trade_type_tabs: true,\n        duration: true,\n        strike: true,\n        stake: true,\n        payout_per_point_info: true,\n    },\n    [TRADE_TYPES.VANILLA.PUT]: {\n        trade_type_tabs: true,\n        duration: true,\n        strike: true,\n        stake: true,\n        payout_per_point_info: true,\n    },\n});\n\nexport const isDigitContractWinning = (\n    contract_type: string | undefined,\n    selected_digit: number | null,\n    current_digit: number | null\n) => {\n    const win_conditions = {\n        [CONTRACT_TYPES.MATCH_DIFF.MATCH]: current_digit === selected_digit,\n        [CONTRACT_TYPES.MATCH_DIFF.DIFF]: current_digit !== selected_digit,\n        [CONTRACT_TYPES.OVER_UNDER.OVER]:\n            !!((current_digit || current_digit === 0) && (selected_digit || selected_digit === 0)) &&\n            current_digit > selected_digit,\n        [CONTRACT_TYPES.OVER_UNDER.UNDER]:\n            !!((current_digit || current_digit === 0) && (selected_digit || selected_digit === 0)) &&\n            current_digit < selected_digit,\n        [CONTRACT_TYPES.EVEN_ODD.ODD]: !!current_digit && Boolean(current_digit % 2),\n        [CONTRACT_TYPES.EVEN_ODD.EVEN]: (!!current_digit && !(current_digit % 2)) || current_digit === 0,\n    } as { [key: string]: boolean };\n    if (!contract_type || !win_conditions[contract_type]) return false;\n    return win_conditions[contract_type];\n};\n\nexport const focusAndOpenKeyboard = (focused_input?: HTMLInputElement | null, main_input?: HTMLInputElement | null) => {\n    if (main_input && focused_input) {\n        // Reveal a temporary input element and put focus on it\n        focused_input.style.display = 'block';\n        focused_input.focus({ preventScroll: true });\n\n        // The keyboard is open, so now adding a delayed focus on the target element and hide the temporary input element\n        return setTimeout(() => {\n            main_input.focus();\n            main_input.click();\n            focused_input.style.display = 'none';\n        }, 300);\n    }\n};\n\nexport const getTradeTypeTabsList = (contract_type = '') => {\n    const is_turbos = isTurbosContract(contract_type);\n    const is_vanilla = isVanillaContract(contract_type);\n    const is_high_low = contract_type === TRADE_TYPES.HIGH_LOW;\n    const is_touch = isTouchContract(contract_type);\n    const tab_list = [\n        {\n            label: 'Up',\n            value: TRADE_TYPES.TURBOS.LONG,\n            contract_type: CONTRACT_TYPES.TURBOS.LONG,\n            is_displayed: is_turbos,\n        },\n        {\n            label: 'Down',\n            value: TRADE_TYPES.TURBOS.SHORT,\n            contract_type: CONTRACT_TYPES.TURBOS.SHORT,\n            is_displayed: is_turbos,\n        },\n        {\n            label: 'Call',\n            value: TRADE_TYPES.VANILLA.CALL,\n            contract_type: CONTRACT_TYPES.VANILLA.CALL,\n            is_displayed: is_vanilla,\n        },\n        {\n            label: 'Put',\n            value: TRADE_TYPES.VANILLA.PUT,\n            contract_type: CONTRACT_TYPES.VANILLA.PUT,\n            is_displayed: is_vanilla,\n        },\n        { label: 'Higher', value: TRADE_TYPES.HIGH_LOW, contract_type: CONTRACT_TYPES.CALL, is_displayed: is_high_low },\n        { label: 'Lower', value: TRADE_TYPES.HIGH_LOW, contract_type: CONTRACT_TYPES.PUT, is_displayed: is_high_low },\n        {\n            label: 'Touch',\n            value: TRADE_TYPES.TOUCH,\n            contract_type: CONTRACT_TYPES.TOUCH.ONE_TOUCH,\n            is_displayed: is_touch,\n        },\n        {\n            label: 'No Touch',\n            value: TRADE_TYPES.TOUCH,\n            contract_type: CONTRACT_TYPES.TOUCH.NO_TOUCH,\n            is_displayed: is_touch,\n        },\n    ];\n    return tab_list.filter(({ is_displayed }) => is_displayed);\n};\n\nexport const isSmallScreen = () => window.innerHeight <= 640;\n\nexport const addUnit = ({\n    value,\n    unit = localize('min'),\n    should_add_space = true,\n}: {\n    value: string | number;\n    unit?: string;\n    should_add_space?: boolean;\n}) => `${typeof value === 'number' ? value : parseInt(value)}${should_add_space ? ' ' : ''}${unit}`;\n\nexport const getSnackBarText = ({\n    has_cancellation,\n    has_take_profit,\n    has_stop_loss,\n    switching_cancellation,\n    switching_tp_sl,\n}: {\n    has_cancellation?: boolean;\n    has_take_profit?: boolean;\n    has_stop_loss?: boolean;\n    switching_cancellation?: boolean;\n    switching_tp_sl?: boolean;\n}) => {\n    if (switching_cancellation && has_cancellation) {\n        if (has_take_profit && has_stop_loss) return <Localize i18n_default_text='TP and SL have been turned off.' />;\n        if (has_take_profit) return <Localize i18n_default_text='TP has been turned off.' />;\n        if (has_stop_loss) return <Localize i18n_default_text='SL has been turned off.' />;\n    }\n    if (switching_tp_sl && (has_take_profit || has_stop_loss) && has_cancellation)\n        return <Localize i18n_default_text='DC has been turned off.' />;\n};\n\nexport const getClosestTimeToCurrentGMT = (interval: number): string => {\n    const now = new Date();\n    now.setMinutes(now.getMinutes() + 5);\n\n    const options: Intl.DateTimeFormatOptions = {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false,\n        timeZone: 'UTC',\n    };\n    const formattedTime = new Intl.DateTimeFormat('en-GB', options).format(now);\n\n    const [hours, minutes] = formattedTime.split(':').map(Number);\n\n    const date = new Date();\n    date.setUTCHours(hours);\n    date.setUTCMinutes(minutes);\n\n    const roundedMinutes = Math.ceil(date.getUTCMinutes() / interval) * interval;\n\n    if (roundedMinutes >= 60) {\n        date.setUTCHours(date.getUTCHours() + 1);\n        date.setUTCMinutes(0);\n    } else {\n        date.setUTCMinutes(roundedMinutes);\n    }\n\n    const newHours = String(date.getUTCHours()).padStart(2, '0');\n    const newMinutes = String(date.getUTCMinutes()).padStart(2, '0');\n\n    return `${newHours}:${newMinutes}`;\n};\n\ntype TDurationOption = {\n    value: number;\n    label: React.ReactNode;\n};\n\nconst generateOptions = (\n    startValue: number,\n    endValue: number,\n    singularLabel: React.ReactNode,\n    pluralLabel: React.ReactNode\n): TDurationOption[] => {\n    const length = endValue - startValue + 1;\n    return Array.from({ length }, (_, index): TDurationOption => {\n        const value = startValue + index;\n        return {\n            value,\n            label: (\n                <React.Fragment key={value}>\n                    {value} {value > 1 ? pluralLabel : singularLabel}\n                </React.Fragment>\n            ),\n        };\n    });\n};\n\nexport const getOptionPerUnit = (unit: string, duration_min_max: Record<string, { min: number; max: number }>) => {\n    const { intraday, tick, daily } = duration_min_max;\n    const unitConfig: Record<\n        string,\n        | { start: number; end: number; labelSingle: React.ReactNode; labelPlural: React.ReactNode }\n        | (() => { value: number; label: React.ReactNode }[][])\n    > = {\n        m: {\n            start: Math.max(1, intraday?.min / 60),\n            end: Math.min(59, intraday?.max / 60),\n            labelSingle: <Localize i18n_default_text='min' />,\n            labelPlural: <Localize i18n_default_text='min' />,\n        },\n        s: {\n            start: Math.max(15, intraday?.min),\n            end: Math.min(59, intraday?.max),\n            labelSingle: <Localize i18n_default_text='sec' />,\n            labelPlural: <Localize i18n_default_text='sec' />,\n        },\n        d: {\n            start: Math.max(1, daily?.min / 86400),\n            end: Math.min(365, daily?.max / 86400),\n            labelSingle: <Localize i18n_default_text='days' />,\n            labelPlural: <Localize i18n_default_text='days' />,\n        },\n        t: {\n            start: Math.max(1, tick?.min),\n            end: Math.min(10, tick?.max),\n            labelSingle: <Localize i18n_default_text='tick' />,\n            labelPlural: <Localize i18n_default_text='ticks' />,\n        },\n    };\n\n    const config = unitConfig[unit];\n\n    if (typeof config === 'function') {\n        return config();\n    }\n\n    if (config) {\n        const { start, end, labelSingle, labelPlural } = config;\n        return [generateOptions(Math.ceil(start), Math.floor(end), labelSingle, labelPlural)];\n    }\n\n    return [[]];\n};\n\nexport const getSmallestDuration = (\n    obj: { [x: string]: { min: number; max: number } | { min: number } },\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    durationUnits: any[]\n) => {\n    const keysPriority = ['tick', 'intraday', 'daily'];\n    let smallestValueInSeconds = Infinity;\n    let smallestUnit: 's' | 'm' | 'h' | 'd' | null = null;\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key of keysPriority) {\n        if (obj[key]) {\n            if (key === 'tick') {\n                const tickUnit = durationUnits.find((item: { value: string }) => item.value === 't');\n                if (tickUnit) {\n                    return { value: obj[key].min, unit: 't' };\n                }\n            }\n\n            if (obj[key].min < smallestValueInSeconds) {\n                smallestValueInSeconds = obj[key].min;\n\n                if (key === 'intraday') {\n                    if (smallestValueInSeconds >= 60 && smallestValueInSeconds < 3600) {\n                        smallestUnit = 'm';\n                    } else if (smallestValueInSeconds >= 3600 && smallestValueInSeconds < 86400) {\n                        smallestUnit = 'h';\n                    }\n                } else if (key === 'daily') {\n                    smallestUnit = 'd';\n                }\n            }\n        }\n    }\n\n    if (smallestUnit) {\n        const validUnit = durationUnits.find((item: { value: string; text: string }) => item.value === smallestUnit);\n        if (validUnit) {\n            let convertedValue;\n            switch (smallestUnit) {\n                case 'm':\n                    convertedValue = smallestValueInSeconds / 60;\n                    break;\n                case 'h':\n                    convertedValue = smallestValueInSeconds / 3600;\n                    break;\n                case 'd':\n                    convertedValue = smallestValueInSeconds / 86400;\n                    break;\n                default:\n                    convertedValue = 1;\n            }\n            return { value: convertedValue, unit: smallestUnit };\n        }\n    }\n\n    return null;\n};\n\nexport const getDatePickerStartDate = (\n    duration_units_list: { value: string }[],\n    server_time: Moment,\n    start_time: string | null,\n    duration_min_max: Record<string, { min: number; max: number }>\n) => {\n    const hasIntradayDurationUnit = (duration_units_list: { value: string }[]) => {\n        return duration_units_list.some((unit: { value: string }) => ['m', 'h'].indexOf(unit.value) !== -1);\n    };\n\n    const setMinTime = (dateObj: Date, time?: string) => {\n        const [hour, minute, second] = time ? time.split(':') : [0, 0, 0];\n        dateObj?.setUTCHours(Number(hour));\n        dateObj?.setUTCMinutes(Number(minute) || 0);\n        dateObj?.setUTCSeconds(Number(second) || 0);\n\n        return dateObj;\n    };\n\n    const toDate = (value: string | number | Date | Moment): Date => {\n        if (!value) return new Date();\n\n        if (value instanceof Date && !isNaN(value.getTime())) {\n            return value;\n        }\n\n        if (typeof value === 'number') {\n            return new Date(value * 1000);\n        }\n\n        const parsedDate = new Date(value as Date);\n        if (isNaN(parsedDate.getTime())) {\n            const today = new Date();\n            const daysInMonth = new Date(today.getUTCFullYear(), today.getUTCMonth() + 1, 0).getDate();\n            const valueAsNumber = Date.parse(value as string) / (1000 * 60 * 60 * 24);\n            return valueAsNumber > daysInMonth\n                ? new Date(today.setUTCDate(today.getUTCDate() + Number(value)))\n                : new Date(value as Date);\n        }\n\n        return parsedDate;\n    };\n\n    const getMinDuration = (server_time: string | number | Date | Moment, duration_units_list: { value: string }[]) => {\n        const server_date = toDate(server_time);\n        return hasIntradayDurationUnit(duration_units_list)\n            ? new Date(server_date)\n            : new Date(server_date.getTime() + (duration_min_max?.daily?.min || 0) * 1000);\n    };\n\n    const getMomentContractStartDateTime = () => {\n        const minDurationDate = getMinDuration(server_time, duration_units_list);\n        const time = isTimeValid(start_time ?? '') ? start_time : (server_time?.toISOString().substr(11, 8) ?? '');\n        return setMinTime(minDurationDate, time ?? '');\n    };\n\n    const min_date = new Date(getMomentContractStartDateTime());\n    return min_date;\n};\n\nexport const getProposalRequestObject = ({\n    new_values = {},\n    should_subscribe = false,\n    trade_store,\n    trade_type,\n}: {\n    new_values: Record<string, unknown>;\n    should_subscribe?: boolean;\n    trade_store: TTradeStore;\n    trade_type: string;\n}) => {\n    const store = {\n        ...trade_store,\n        ...new_values,\n    };\n\n    const request = createProposalRequestForContract(\n        store as Parameters<typeof createProposalRequestForContract>[0],\n        trade_type\n    ) as Omit<ReturnType<typeof createProposalRequestForContract>, 'subscribe'> & {\n        subscribe?: number;\n        limit_order:\n            | {\n                  take_profit?: number;\n                  stop_loss?: number;\n              }\n            | undefined;\n    };\n\n    if (!should_subscribe) delete request.subscribe;\n\n    return request;\n};\n\nexport const getPayoutInfo = (proposal_info: ReturnType<typeof getProposalInfo>) => {\n    // getting current payout\n    const { has_error, message = '', payout = 0, error_field } = proposal_info ?? {};\n    const float_number_search_regex = /\\d+(\\.\\d+)?/g;\n    const is_error_matching = has_error && (error_field === 'amount' || error_field === 'stake');\n    const proposal_error_message = is_error_matching ? message : '';\n    /* TODO: stop using error text for getting the payout value, need API changes */\n    // Extracting the value of exceeded payout from error text\n    const error_payout = proposal_error_message\n        ? Number(proposal_error_message.match(float_number_search_regex)?.[2])\n        : 0;\n    const contract_payout = payout || error_payout;\n\n    // getting max allowed payout\n    const { payout: validation_payout } = (proposal_info?.validation_params || proposal_info?.validation_params) ?? {};\n    const { max } = validation_payout ?? {};\n    /* TODO: stop using error text for getting the max payout value, need API changes */\n    // Extracting the value of max payout from error text\n    const error_max_payout = is_error_matching && message ? Number(message.match(float_number_search_regex)?.[1]) : 0;\n    const max_payout = max || error_max_payout;\n\n    return { contract_payout, max_payout, error: proposal_error_message };\n};\n","import React from 'react';\nimport { Localize } from '@deriv/translations';\nimport { getAvailableContractTypes, getCategoriesSortedByKey } from 'Modules/Trading/Helpers/contract-type';\nimport {\n    getContractTypePosition,\n    getSupportedContracts,\n    TRADE_TYPES,\n    unsupported_contract_types_list,\n} from '@deriv/shared';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { getTradeTypeTabsList } from './trade-params-utils';\n\ntype TContractType = {\n    text?: string;\n    value: string;\n};\n\ntype TCategories = {\n    id: string;\n    title: string;\n    icon?: React.ReactNode;\n};\n\nconst getSortedIndex = (type: string) =>\n    getContractTypePosition(type as keyof ReturnType<typeof getSupportedContracts>) === 'bottom' ? 1 : 0;\n\nexport const CONTRACT_LIST = {\n    ACCUMULATORS: 'Accumulators',\n    VANILLAS: 'Vanillas',\n    TURBOS: 'Turbos',\n    MULTIPLIERS: 'Multipliers',\n    RISE_FALL: 'Rise/Fall',\n    HIGHER_LOWER: 'Higher/Lower',\n    TOUCH_NO_TOUCH: 'Touch/No Touch',\n    MATCHES_DIFFERS: 'Matches/Differs',\n    EVEN_ODD: 'Even/Odd',\n    OVER_UNDER: 'Over/Under',\n};\n\nexport const AVAILABLE_CONTRACTS = [\n    {\n        tradeType: <Localize i18n_default_text='Accumulators' />,\n        id: CONTRACT_LIST.ACCUMULATORS,\n        for: [TRADE_TYPES.ACCUMULATOR],\n    },\n    {\n        tradeType: <Localize i18n_default_text='Vanillas' />,\n        id: CONTRACT_LIST.VANILLAS,\n        for: [TRADE_TYPES.VANILLA.CALL, TRADE_TYPES.VANILLA.PUT],\n    },\n    {\n        tradeType: <Localize i18n_default_text='Turbos' />,\n        id: CONTRACT_LIST.TURBOS,\n        for: [TRADE_TYPES.TURBOS.LONG, TRADE_TYPES.TURBOS.SHORT],\n    },\n    {\n        tradeType: <Localize i18n_default_text='Multipliers' />,\n        id: CONTRACT_LIST.MULTIPLIERS,\n        for: [TRADE_TYPES.MULTIPLIER],\n    },\n    {\n        tradeType: <Localize i18n_default_text='Rise/Fall' />,\n        id: CONTRACT_LIST.RISE_FALL,\n        for: [TRADE_TYPES.RISE_FALL, TRADE_TYPES.RISE_FALL_EQUAL],\n    },\n    {\n        tradeType: <Localize i18n_default_text='Higher/Lower' />,\n        id: CONTRACT_LIST.HIGHER_LOWER,\n        for: [TRADE_TYPES.HIGH_LOW],\n    },\n    {\n        tradeType: <Localize i18n_default_text='Touch/No Touch' />,\n        id: CONTRACT_LIST.TOUCH_NO_TOUCH,\n        for: [TRADE_TYPES.TOUCH],\n    },\n    {\n        tradeType: <Localize i18n_default_text='Matches/Differs' />,\n        id: CONTRACT_LIST.MATCHES_DIFFERS,\n        for: [TRADE_TYPES.MATCH_DIFF],\n    },\n    { tradeType: <Localize i18n_default_text='Even/Odd' />, id: CONTRACT_LIST.EVEN_ODD, for: [TRADE_TYPES.EVEN_ODD] },\n    {\n        tradeType: <Localize i18n_default_text='Over/Under' />,\n        id: CONTRACT_LIST.OVER_UNDER,\n        for: [TRADE_TYPES.OVER_UNDER],\n    },\n];\n\nexport const getTradeTypesList = (contract_types_list: ReturnType<typeof useTraderStore>['contract_types_list']) => {\n    const available_trade_types = getAvailableContractTypes(\n        contract_types_list as unknown as Parameters<typeof getAvailableContractTypes>[0],\n        unsupported_contract_types_list\n    );\n    return Object.values(getCategoriesSortedByKey(available_trade_types))\n        .map(({ contract_types }) =>\n            contract_types[0].value.startsWith('vanilla')\n                ? contract_types.map(type => ({ ...type, text: 'Vanillas' }))\n                : contract_types\n        )\n        .flat()\n        .filter(\n            ({ value }) =>\n                ![TRADE_TYPES.VANILLA.PUT, TRADE_TYPES.TURBOS.SHORT, TRADE_TYPES.RISE_FALL_EQUAL].includes(value)\n        );\n};\n\n/* Gets the array of sorted contract types that are used to display purchased buttons and other info based on a selected trade type tab if applicable. */\nexport const getDisplayedContractTypes = (\n    trade_types: ReturnType<typeof useTraderStore>['trade_types'],\n    contract_type: string,\n    trade_type_tab: string\n) =>\n    Object.keys(trade_types)\n        .filter(type => !getTradeTypeTabsList(contract_type).length || type === trade_type_tab)\n        .sort((a, b) => getSortedIndex(a) - getSortedIndex(b));\n\nexport const sortCategoriesInTradeTypeOrder = (trade_types: TContractType[], categories: TCategories[]) => {\n    return trade_types\n        .map((item: { value: string }) => {\n            return categories.find(category => category.id === item.value);\n        })\n        .filter(item => item) as TCategories[];\n};\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype TDigit = {\n    is_latest?: boolean;\n    is_lost?: boolean;\n    is_selected?: boolean;\n    is_won?: boolean;\n    percentage: number | null;\n    value: number;\n};\n\nconst Digit = ({ is_latest, is_lost, is_selected, is_won, percentage, value }: TDigit) => {\n    const display_percentage = percentage && !isNaN(percentage) ? parseFloat(percentage.toFixed(1)) : null;\n    return (\n        <React.Fragment>\n            <span\n                className={classNames('digits__digit-value', {\n                    'digits__digit-value--latest': is_latest,\n                    'digits__digit-value--selected': is_selected,\n                    'digits__digit-value--win': is_won && is_latest,\n                    'digits__digit-value--loss': is_lost && is_latest,\n                })}\n            >\n                <i\n                    className={classNames('digits__digit-display-value', {\n                        'digits__digit-display-value--no-stats': !display_percentage,\n                    })}\n                >\n                    {value}\n                </i>\n                {!!display_percentage && <i className='digits__digit-display-percentage'>{display_percentage}%</i>}\n            </span>\n        </React.Fragment>\n    );\n};\n\nexport default Digit;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Text } from '@deriv/components';\n\ntype TDigitSpot = {\n    current_spot?: string | null;\n    is_selected_winning?: boolean;\n    is_lost?: boolean;\n    is_won?: boolean;\n};\n\nconst DigitSpot = ({ current_spot, is_selected_winning, is_lost, is_won }: TDigitSpot) => (\n    <React.Fragment>\n        <Text\n            size='xs'\n            align='center'\n            weight='bold'\n            className='digits__digit-spot-value'\n            data-testid='dt_digits_digit_spot_value'\n        >\n            {current_spot?.slice(0, -1)}\n        </Text>\n        <span\n            className={classNames('digits__digit-spot-last', {\n                'digits__digit-spot-last--selected-win': is_selected_winning,\n                'digits__digit-spot-last--win': is_won,\n                'digits__digit-spot-last--loss': is_lost,\n            })}\n            data-testid='dt_digits_digit_spot_last'\n        >\n            {current_spot?.slice(-1)}\n        </span>\n    </React.Fragment>\n);\n\nexport default DigitSpot;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype TLastDigitStat = {\n    is_max: boolean | null;\n    is_min: boolean | null;\n    is_selected?: boolean;\n    percentage: number | null;\n};\n\nconst LastDigitStat = ({ is_max, is_min, is_selected, percentage }: TLastDigitStat) => {\n    // interpolate color opacity within 7.5 to 12.5 range\n    let opacity = ((percentage ?? 0) - 10) / 4;\n    opacity = Math.min(Math.max(opacity, -1), +1);\n    opacity = ((opacity + 1) / 2) * 0.85 + 0.15;\n    const w = 339.292;\n    let p = (20 * (percentage ?? 0) - 102) / 3 / 100;\n    p = Math.max(Math.min(p, 0.66), 0.06);\n\n    return (\n        <div\n            className={classNames('digits__pie-container', {\n                'digits__pie-container--selected': is_selected,\n            })}\n        >\n            <svg className='digits__pie-progress' width='120' height='120' viewBox='0 0 120 120'>\n                <circle\n                    className='progress__bg'\n                    cx='60'\n                    cy='60'\n                    r='54'\n                    fill='none'\n                    stroke='#E8EEFC'\n                    strokeWidth='12'\n                    data-testid='dt_progress_bg'\n                />\n                {percentage && (\n                    <circle\n                        className={classNames('progress__value', {\n                            'progress__value--is-max': is_max,\n                            'progress__value--is-min': is_min,\n                        })}\n                        cx='60'\n                        cy='60'\n                        r='54'\n                        fill='none'\n                        strokeOpacity={is_max || is_min ? 1 : opacity}\n                        strokeWidth='12'\n                        strokeDasharray={[w * p, w * (1 - p)].join(' ')}\n                        // strokeDashoffset={(w * (1 - (0 * 3.5 * percentage / 100)))}\n                        strokeDashoffset={w * ((p + 1) / 2)}\n                        data-testid='dt_progress_value'\n                    />\n                )}\n            </svg>\n        </div>\n    );\n};\n\nexport default LastDigitStat;\n","import classNames from 'classnames';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { DesktopWrapper } from '@deriv/components';\nimport { isMobile } from '@deriv/shared';\nimport { Bounce } from 'App/Components/Animations';\nimport Digit from './digit';\nimport DigitSpot from './digit-spot';\nimport LastDigitStat from './last-digit-stat';\nimport { ProposalOpenContract } from '@deriv/api-types';\n\ntype TDigitDisplay = Pick<React.ComponentProps<typeof DigitSpot>, 'is_lost' | 'is_won'> &\n    Pick<React.ComponentProps<typeof Digit>, 'is_lost' | 'is_won'> &\n    Pick<React.ComponentProps<typeof LastDigitStat>, 'is_max' | 'is_min'> & {\n        barrier: number | null;\n        is_digit_contract?: boolean;\n        has_entry_spot: boolean;\n        onSelect: ((digit_value: number) => void) | null;\n        latest_digit: {\n            digit: number | null;\n            spot: string | null;\n        };\n        selected_digit?: number;\n        status: ProposalOpenContract['status'];\n        stats?: number | null;\n        value: number;\n        onLastDigitSpot?: (value: {\n            spot: TDigitDisplay['latest_digit']['spot'];\n            is_lost: TDigitDisplay['is_lost'];\n            is_selected_winning: boolean;\n            is_latest: boolean;\n            is_won: TDigitDisplay['is_won'];\n        }) => void;\n    };\nconst DigitDisplay = ({\n    barrier,\n    is_digit_contract,\n    has_entry_spot,\n    is_lost,\n    is_max,\n    is_min,\n    is_won,\n    onSelect,\n    latest_digit,\n    selected_digit,\n    status,\n    stats,\n    value,\n    onLastDigitSpot,\n}: TDigitDisplay) => {\n    const { digit, spot } = latest_digit;\n    const is_latest = value === digit;\n    const is_selected = value === barrier;\n    const is_selected_winning = digit === barrier;\n    const percentage = stats ? (stats * 100) / 1000 : null;\n\n    React.useEffect(() => {\n        if (onLastDigitSpot) {\n            onLastDigitSpot({ spot, is_lost, is_selected_winning, is_latest, is_won });\n        }\n    }, [latest_digit, spot, barrier, value, is_lost, is_selected_winning, is_latest, is_won, onLastDigitSpot]);\n\n    const is_digit_selectable = isMobile() && typeof onSelect === 'function' && !status;\n    const is_digit_selected = isMobile() && value === selected_digit && !status;\n    return (\n        <div\n            className={classNames('digits__digit', {\n                'digits__digit--latest': is_latest,\n                'digits__digit--win': is_won && is_latest,\n                'digits__digit--loss': is_lost && is_latest,\n                'digits__digit--is-selectable': is_digit_selectable,\n                'digits__digit--is-selected': is_digit_selected,\n            })}\n            onClick={() => {\n                if (!is_digit_selectable) return;\n                onSelect(value);\n            }}\n        >\n            <LastDigitStat is_min={is_min} is_max={is_max} is_selected={is_selected} percentage={percentage} />\n            <DesktopWrapper>\n                <Bounce\n                    is_visible={!!(is_digit_contract && is_latest && spot && status && has_entry_spot)}\n                    className='digits__digit-spot'\n                    keyname='digits__digit-spot'\n                >\n                    <DigitSpot\n                        current_spot={spot}\n                        is_lost={is_lost}\n                        is_selected_winning={is_selected_winning}\n                        is_won={is_won}\n                    />\n                </Bounce>\n            </DesktopWrapper>\n            <Digit\n                is_latest={is_latest}\n                is_lost={is_lost}\n                is_selected={is_selected}\n                is_won={is_won}\n                percentage={percentage}\n                value={value}\n            />\n        </div>\n    );\n};\n\nexport default observer(DigitDisplay);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Icon } from '@deriv/components';\n\ntype TLastDigitPointer = {\n    is_lost?: boolean;\n    is_trade_page?: boolean;\n    is_won?: boolean;\n    position: {\n        left: number;\n        top: number;\n    };\n};\n\nconst LastDigitPointer = ({ is_lost, is_trade_page, is_won, position }: TLastDigitPointer) => (\n    <React.Fragment>\n        {!!position && (\n            <span\n                className='digits__pointer'\n                style={{ transform: `translate3d(calc(${position.left}px), ${position.top}px, 0px)` }}\n            >\n                <Icon\n                    icon='IcProfit'\n                    className={classNames('digits__icon', {\n                        'digits__icon--win': is_won && !is_trade_page,\n                        'digits__icon--loss': is_lost && !is_trade_page,\n                    })}\n                    color={is_won ? 'green' : 'red'}\n                    custom_color={!(is_won || is_lost) ? 'var(--brand-orange)' : undefined}\n                />\n            </span>\n        )}\n    </React.Fragment>\n);\n\nexport default LastDigitPointer;\n","import classNames from 'classnames';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { isMobile, TRADE_TYPES } from '@deriv/shared';\nimport DigitDisplay from './digit-display';\nimport LastDigitPointer from './last-digit-pointer';\nimport { ProposalOpenContract, TicksStreamResponse } from '@deriv/api-types';\n\ntype TLastDigitPrediction = Pick<\n    React.ComponentProps<typeof DigitDisplay>,\n    'barrier' | 'is_digit_contract' | 'has_entry_spot' | 'onLastDigitSpot'\n> & {\n    contract_type?: string;\n    digits?: number[];\n    digits_info: { [key: string]: { digit: number; spot: string } };\n    dimension: number;\n    is_ended?: boolean;\n    is_trade_page?: boolean;\n    onDigitChange?: (event: { target: { name: string; value: number } }) => void;\n    selected_digit?: number;\n    status?: ProposalOpenContract['status'];\n    tick?: TicksStreamResponse['tick'];\n    trade_type?: string;\n};\nconst display_array = Array.from(Array(10).keys()); // digits array [0 - 9]\n\nconst LastDigitPrediction = ({\n    barrier,\n    contract_type,\n    digits,\n    digits_info,\n    dimension,\n    is_digit_contract,\n    has_entry_spot,\n    is_ended,\n    is_trade_page,\n    onDigitChange,\n    onLastDigitSpot,\n    selected_digit,\n    status,\n    tick,\n    trade_type,\n}: TLastDigitPrediction) => {\n    const [digit_offset] = React.useState<Record<number, Record<'left' | 'top', number>>>({\n        0: { left: 6, top: 0 },\n        1: { left: 6 + dimension * 1, top: 0 },\n        2: { left: 6 + dimension * 2, top: 0 },\n        3: { left: 6 + dimension * 3, top: 0 },\n        4: { left: 6 + dimension * 4, top: 0 },\n        5: { left: 6 + dimension * 5, top: 0 },\n        6: { left: 6 + dimension * 6, top: 0 },\n        7: { left: 6 + dimension * 7, top: 0 },\n        8: { left: 6 + dimension * 8, top: 0 },\n        9: { left: 6 + dimension * 9, top: 0 },\n    });\n\n    const [digit_offset_mobile] = React.useState<Record<number, Record<'left' | 'top', number>>>({\n        0: { left: 6, top: -60 },\n        1: { left: 6 + dimension * 1, top: -60 },\n        2: { left: 6 + dimension * 2, top: -60 },\n        3: { left: 6 + dimension * 3, top: -60 },\n        4: { left: 6 + dimension * 4, top: -60 },\n        5: { left: 6 + dimension * 0, top: 8 },\n        6: { left: 6 + dimension * 1, top: 8 },\n        7: { left: 6 + dimension * 2, top: 8 },\n        8: { left: 6 + dimension * 3, top: 8 },\n        9: { left: 6 + dimension * 4, top: 8 },\n    });\n\n    const handleSelect = (digit_value: number) => {\n        if (!isSelectableDigitType()) return;\n        if (digit_value !== selected_digit && typeof onDigitChange === 'function') {\n            onDigitChange({ target: { name: 'last_digit', value: digit_value } });\n        }\n    };\n\n    const getBarrier = (num: number | null): number | null => {\n        const barrier_map: {\n            [key: string]: (val: number | null) => boolean;\n        } = {\n            DIGITMATCH: (val: number | null) => val === barrier,\n            DIGITDIFF: (val: number | null) => val !== barrier,\n            DIGITOVER: (val: number | null) => !!((val || val === 0) && (barrier || barrier === 0)) && val > barrier,\n            DIGITUNDER: (val: number | null) => !!((val || val === 0) && (barrier || barrier === 0)) && val < barrier,\n            DIGITODD: (val: number | null) => !!val && Boolean(val % 2),\n            DIGITEVEN: (val: number | null) => (!!val && !(val % 2)) || val === 0,\n        };\n        if (!contract_type || !barrier_map[contract_type]) return null;\n        return barrier_map[contract_type](num) ? num : null;\n    };\n\n    const getOffset = () => (isMobile() ? digit_offset_mobile : digit_offset);\n\n    const isSelectableDigitType = () => (isMobile() ? trade_type !== TRADE_TYPES.EVEN_ODD : false);\n    const digits_array = Object.keys(digits_info)\n        .sort((a, b) => +a - +b)\n        .map(spot_time => digits_info[+spot_time]);\n    const last_contract_digit = digits_array.slice(-1)[0] || {};\n\n    // 'won' or 'lost' status exists after contract expiry\n    const is_won = is_ended && status === 'won' && is_digit_contract;\n    // need to explicitly have is_lost condition here\n    // because negating is_won would always be true,\n    // but we only need is_lost condition only once we have the 'won' or 'lost' status\n    const is_lost = is_ended && status === 'lost' && is_digit_contract;\n\n    const min = digits ? Math.min(...digits) : null;\n    const max = digits ? Math.max(...digits) : null;\n\n    // latest last digit refers to digit and spot values from latest price\n    // latest contract digit refers to digit and spot values from last digit contract in contracts array\n    const latest_tick_pip_size = tick ? +tick.pip_size : null;\n    const latest_tick_quote_price =\n        tick?.quote && latest_tick_pip_size ? tick.quote.toFixed(latest_tick_pip_size) : null;\n    const latest_tick_digit = latest_tick_quote_price ? +(latest_tick_quote_price.split('').pop() || '') : null;\n    const position = tick ? getOffset()[latest_tick_digit ?? -1] : getOffset()[last_contract_digit.digit];\n    const latest_digit = !(is_won || is_lost)\n        ? { digit: latest_tick_digit, spot: latest_tick_quote_price }\n        : last_contract_digit;\n    return (\n        <div\n            className={classNames('digits', {\n                'digits--trade': is_trade_page,\n            })}\n        >\n            {display_array.map(idx => (\n                <DigitDisplay\n                    barrier={getBarrier(idx)}\n                    has_entry_spot={has_entry_spot}\n                    is_digit_contract={is_digit_contract}\n                    is_lost={is_lost}\n                    is_won={is_won}\n                    key={idx}\n                    is_max={digits ? digits[idx] === max : null}\n                    is_min={digits ? digits[idx] === min : null}\n                    stats={digits ? digits[idx] : null}\n                    status={status}\n                    latest_digit={is_trade_page ? latest_digit : last_contract_digit}\n                    value={idx}\n                    onLastDigitSpot={onLastDigitSpot}\n                    onSelect={isSelectableDigitType() ? handleSelect : null}\n                    selected_digit={isSelectableDigitType() ? selected_digit : undefined}\n                />\n            ))}\n            <LastDigitPointer is_lost={is_lost} is_trade_page={is_trade_page} is_won={is_won} position={position} />\n        </div>\n    );\n};\n\nexport default observer(LastDigitPrediction);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { toJS } from 'mobx';\nimport { Popover, Text } from '@deriv/components';\nimport { TickSpotData } from '@deriv/api-types';\nimport { getMarketNamesMap, useIsMounted, isContractElapsed, TContractStore } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { Bounce, SlideIn } from 'App/Components/Animations';\nimport { DigitSpot, LastDigitPrediction } from '../LastDigitPrediction';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TTraderStore = ReturnType<typeof useTraderStore>;\ntype TOnChangeStatus = { status: string | null | undefined; current_tick: number | null };\ntype TOnLastDigitSpot = {\n    spot: string | null;\n    is_lost?: boolean;\n    is_selected_winning: boolean;\n    is_latest: boolean;\n    is_won?: boolean;\n};\ntype TDigitsWrapper = TDigits & {\n    onChangeStatus?: (params: TOnChangeStatus) => void;\n    onLastDigitSpot?: (params: TOnLastDigitSpot) => void;\n};\ntype TDigits = Pick<TContractStore, 'contract_info' | 'digits_info'> & {\n    digits_array?: number[];\n    display_status?: TContractStore['display_status'];\n    is_digit_contract?: TContractStore['is_digit_contract'];\n    is_ended?: TContractStore['is_ended'];\n    is_trade_page?: boolean;\n    is_mobile: boolean;\n    onDigitChange?: TTraderStore['onChange'];\n    selected_digit?: TTraderStore['last_digit'];\n    trade_type?: TTraderStore['contract_type'];\n    tick?: TickSpotData | null;\n    underlying?: TTraderStore['symbol'];\n};\ntype TTickStream = NonNullable<TContractStore['contract_info']['tick_stream']>[number];\ntype TTickData =\n    | TickSpotData\n    | null\n    | undefined\n    | {\n          ask: TTickStream['tick'];\n          bid: TTickStream['tick'];\n          current_tick: number;\n          epoch: TTickStream['epoch'];\n          quote: TTickStream['tick'];\n          pip_size?: number;\n      };\n\nconst DigitsWrapper = ({\n    contract_info,\n    digits_array,\n    digits_info,\n    display_status,\n    is_digit_contract,\n    is_ended,\n    is_trade_page,\n    is_mobile,\n    onDigitChange,\n    selected_digit,\n    trade_type,\n    onChangeStatus,\n    ...props\n}: TDigitsWrapper) => {\n    const has_contract = contract_info.date_start;\n    let tick: TTickData = props.tick;\n\n    const is_tick_ready = is_trade_page ? !!tick : true;\n    const is_contract_elapsed = is_trade_page ? isContractElapsed(contract_info, tick) : false;\n    const status = !is_contract_elapsed && is_tick_ready ? display_status : null;\n\n    // tick from contract_info.tick_stream has totally different\n    // format from the tick from tick_history api call.\n    if (has_contract && !is_contract_elapsed) {\n        tick = null;\n        const tick_stream = contract_info.tick_stream;\n        if (tick_stream?.length) {\n            const t = toJS(tick_stream.slice(-1)[0]);\n            tick = {\n                ask: t.tick,\n                bid: t.tick,\n                epoch: t.epoch,\n                pip_size: t.tick_display_value?.split('.')[1].length,\n                quote: t.tick,\n                current_tick: tick_stream.length,\n            };\n        }\n    }\n\n    React.useEffect(() => {\n        if (onChangeStatus) {\n            onChangeStatus({ status, current_tick: tick && 'current_tick' in tick ? tick.current_tick : null });\n        }\n    }, [tick, is_trade_page, display_status, onChangeStatus, status]);\n\n    return (\n        <LastDigitPrediction\n            // dimension of a single digit widget including margin/padding (number)\n            // i.e - 40px + 6px left and 6px right padding/margin = 52\n            dimension={is_mobile ? 64 : 52}\n            has_entry_spot={!!contract_info.entry_tick}\n            barrier={!is_contract_elapsed && is_tick_ready ? Number(contract_info.barrier) : null}\n            contract_type={!is_contract_elapsed && is_tick_ready ? contract_info.contract_type : ''}\n            digits={digits_array}\n            digits_info={!is_contract_elapsed && is_tick_ready ? digits_info : {}}\n            is_digit_contract={is_digit_contract}\n            is_ended={is_ended}\n            is_trade_page={is_trade_page}\n            status={status as React.ComponentProps<typeof LastDigitPrediction>['status']}\n            tick={tick as React.ComponentProps<typeof LastDigitPrediction>['tick']}\n            trade_type={trade_type}\n            onDigitChange={onDigitChange}\n            selected_digit={selected_digit}\n            onLastDigitSpot={props.onLastDigitSpot}\n        />\n    );\n};\n\nconst Digits = React.memo((props: TDigits) => {\n    const [status, setStatus] = React.useState<string | null>();\n    const [current_tick, setCurrentTick] = React.useState<number | null>();\n    const [spot, setSpot] = React.useState<string | null>();\n    const [is_selected_winning, setIsSelectedWinning] = React.useState<boolean>();\n    const [is_won, setIsWon] = React.useState<boolean>();\n    const [is_lost, setIsLost] = React.useState<boolean>();\n    const isMounted = useIsMounted();\n    const { isMobile } = useDevice();\n\n    const { contract_info, digits_array, is_digit_contract, is_trade_page, underlying } = props;\n\n    const onChangeStatus = (params: TOnChangeStatus) => {\n        setStatus(params.status);\n        setCurrentTick(params.current_tick);\n    };\n\n    const onLastDigitSpot = (params: TOnLastDigitSpot) => {\n        setSpot(params.spot);\n        setIsLost(params.is_lost);\n        setIsSelectedWinning(params.is_selected_winning);\n        setIsWon(params.is_won);\n    };\n\n    const getPopoverMessage = () => {\n        const underlying_name = is_trade_page ? underlying : contract_info.underlying;\n        return (\n            <Localize\n                i18n_default_text='Last digit stats for latest 1000 ticks for {{underlying_name}}'\n                values={{\n                    underlying_name:\n                        getMarketNamesMap()[\n                            underlying_name?.toUpperCase() as keyof ReturnType<typeof getMarketNamesMap>\n                        ],\n                }}\n            />\n        );\n    };\n\n    if (isMobile) {\n        return (\n            <div className='digits__container'>\n                <Bounce\n                    is_visible={!!(is_digit_contract && status && spot && !!contract_info.entry_tick)}\n                    className={classNames('digits__digit-spot', {\n                        'digits__digit-spot--is-trading': is_trade_page,\n                    })}\n                    keyname='digits__digit-spot'\n                >\n                    {is_trade_page && (\n                        <Text size='xs' align='center' className='digits__digit-spot-value'>\n                            <Localize i18n_default_text='Tick {{current_tick}} - ' values={{ current_tick }} />\n                        </Text>\n                    )}\n                    <DigitSpot\n                        current_spot={spot}\n                        is_lost={is_lost}\n                        is_selected_winning={is_selected_winning}\n                        is_won={is_won}\n                    />\n                </Bounce>\n                <DigitsWrapper {...props} onChangeStatus={onChangeStatus} onLastDigitSpot={onLastDigitSpot} />\n            </div>\n        );\n    }\n\n    return (\n        <SlideIn\n            is_visible={(digits_array || is_digit_contract) && isMounted()}\n            className='digits__container'\n            keyname='digits'\n            type='bottom'\n        >\n            {is_trade_page && (\n                <div className='digits__tooltip-container'>\n                    <Popover\n                        alignment='top'\n                        classNameBubble='digits__tooltip-bubble'\n                        icon='info'\n                        id='dt_last_digits_info_tooltip'\n                        margin={4}\n                        message={getPopoverMessage()}\n                        zIndex='100'\n                    />\n                </div>\n            )}\n            <DigitsWrapper {...props} />\n        </SlideIn>\n    );\n});\n\nDigits.displayName = 'Digits';\n\nexport default Digits;\n","import Digits from './digits';\n\nexport default Digits;\n","import React from 'react';\nimport { PageError } from '@deriv/components';\nimport { routes, getUrlBase } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nconst Page404 = () => (\n    <PageError\n        header={localize('We couldn’t find that page')}\n        messages={[\n            localize('You may have followed a broken link, or the page has moved to a new address.'),\n            localize('Error code: {{error_code}} page not found', { error_code: 404 }),\n        ]}\n        redirect_urls={[routes.trade]}\n        redirect_labels={[localize('Return to trade')]}\n        classNameImage='page-404__image'\n        image_url={getUrlBase('/public/images/common/404.png')}\n    />\n);\n\nexport default Page404;\n","import Page404 from './Components/Page404';\n\nexport default Page404;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { addComma, formatMoney, getCurrencyDisplayCode, isMobile } from '@deriv/shared';\nimport { FastMarker } from 'Modules/SmartChart';\nimport classNames from 'classnames';\nimport { TRef } from './accumulators-profit-loss-tooltip';\nimport { ProposalOpenContract } from '@deriv/api-types';\n\ntype TAccumulatorsProfitLossText = Pick<ProposalOpenContract, 'current_spot' | 'current_spot_time' | 'currency'> & {\n    className?: string;\n    profit_value: number;\n    should_show_profit_percentage?: boolean;\n};\n\nconst ACTIONS = {\n    INC: 'increment',\n    DEC: 'decrement',\n    ADD10: 'add10',\n} as const;\n\nconst AccumulatorsProfitLossText = ({\n    current_spot,\n    current_spot_time,\n    currency,\n    className = 'sc-accumulators-profit-loss-text',\n    profit_value,\n    should_show_profit_percentage,\n}: TAccumulatorsProfitLossText) => {\n    const [is_fading_in, setIsFadingIn] = React.useState(false);\n    const [is_sliding, setIsSliding] = React.useState(false);\n    const formatted_profit = should_show_profit_percentage\n        ? addComma(profit_value, 2)\n        : formatMoney(currency ?? '', profit_value, true, 0, 0);\n    const prev_profit = React.useRef(formatted_profit);\n    const prev_profit_tenth = +prev_profit.current?.split('.')[1][0];\n    const [current_profit_tenth, setCurrentProfitTenth] = React.useState(prev_profit_tenth);\n    const profit_tenth_ref = React.useRef(0);\n    const interval_id_ref = React.useRef<ReturnType<typeof setInterval>>();\n    const fading_in_timeout_id = React.useRef<ReturnType<typeof setTimeout>>();\n    const sliding_timeout_id = React.useRef<ReturnType<typeof setTimeout>>();\n    const profit_portions_array = formatted_profit.split('.');\n    const profit_whole_number = profit_portions_array[0];\n    const profit_tenth = +profit_portions_array[1][0];\n    const profit_hundredths = +profit_portions_array[1].slice(1);\n    const won = profit_value >= 0;\n    const sign = profit_value > 0 ? '+' : '';\n\n    const runThroughTenthDigit = (\n        action: typeof ACTIONS[keyof typeof ACTIONS],\n        interval_ms: number,\n        start: number,\n        end: number\n    ) => {\n        clearInterval(interval_id_ref.current);\n        const interval_id = setInterval(() => {\n            if (action === ACTIONS.INC && profit_tenth_ref.current < end) {\n                profit_tenth_ref.current = (profit_tenth_ref.current + 1) % 10;\n            } else if (action === ACTIONS.DEC && profit_tenth_ref.current > end) {\n                profit_tenth_ref.current = Math.abs(profit_tenth_ref.current - 1) % 10;\n            } else if (action === ACTIONS.ADD10 && profit_tenth_ref.current < start + 10) {\n                profit_tenth_ref.current += 1;\n            } else if (\n                action === ACTIONS.ADD10 ? profit_tenth_ref.current === start + 10 : profit_tenth_ref.current === end\n            ) {\n                clearInterval(interval_id);\n            }\n            setCurrentProfitTenth(profit_tenth_ref.current % 10);\n        }, interval_ms);\n        interval_id_ref.current = interval_id;\n    };\n\n    React.useEffect(() => {\n        if (profit_value) {\n            setIsFadingIn(true);\n            setIsSliding(true);\n            fading_in_timeout_id.current = setTimeout(() => {\n                setIsFadingIn(false);\n            }, 600);\n            sliding_timeout_id.current = setTimeout(() => {\n                setIsSliding(false);\n            }, 300);\n        }\n        if (profit_value !== 0) {\n            const updateTenth = (start: number, end: number) => {\n                const delta = Math.abs(end - start);\n                profit_tenth_ref.current = start;\n                if (start < end) {\n                    runThroughTenthDigit(ACTIONS.INC, 300 / delta, start, end);\n                } else if (start > end) {\n                    runThroughTenthDigit(ACTIONS.DEC, 300 / delta, start, end);\n                } else {\n                    runThroughTenthDigit(ACTIONS.ADD10, 30, start, end);\n                }\n            };\n            updateTenth(prev_profit_tenth, profit_tenth);\n        }\n        return () => {\n            clearTimeout(fading_in_timeout_id.current);\n            clearTimeout(sliding_timeout_id.current);\n            clearInterval(interval_id_ref.current);\n        };\n    }, [profit_value, prev_profit_tenth, profit_tenth]);\n\n    const onRef = (ref: TRef | null): void => {\n        if (ref) {\n            if (!current_spot) {\n                // this call will hide the marker:\n                ref.setPosition({ epoch: null, price: null });\n            }\n            if (current_spot && current_spot_time) {\n                ref.setPosition({\n                    epoch: +current_spot_time,\n                    price: +current_spot,\n                });\n            }\n        }\n    };\n\n    return (\n        <FastMarker markerRef={onRef} className={classNames(className, won ? 'won' : 'lost')} overlap_y_axis={false}>\n            <Text\n                weight='bold'\n                size={isMobile() ? 's' : 'sm'}\n                color={won ? 'profit-success' : 'loss-danger'}\n                className={classNames(`${className}__profit`, `${className}__profit--${won ? 'won' : 'loss'}`, {\n                    [`${className}__profit--fading-in`]: is_fading_in,\n                })}\n                data-testid='dt_accumulator_profit_text'\n            >\n                {`${sign}${profit_whole_number}.`}\n                <div className={is_sliding ? `${className}__sliding-tenth` : ''}>{current_profit_tenth}</div>\n                {`${profit_hundredths}`}\n            </Text>\n            <Text size={isMobile() ? 'xxxs' : 'xxs'} as='div' className={`${className}__currency`}>\n                {should_show_profit_percentage ? '%' : getCurrencyDisplayCode(currency)}\n            </Text>\n        </FastMarker>\n    );\n};\n\nexport default React.memo(AccumulatorsProfitLossText);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { CSSTransition } from 'react-transition-group';\nimport { Money, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport AccumulatorsProfitLossText from './accumulators-profit-loss-text';\nimport { FastMarker } from 'Modules/SmartChart';\nimport { getDecimalPlaces } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\n\ntype TContractInfo = ReturnType<typeof useStore>['portfolio']['all_positions'][number]['contract_info'];\n\ntype TAccumulatorsProfitLossTooltip = {\n    alignment?: string;\n    className?: string;\n    should_show_profit_text?: boolean;\n    is_mobile?: boolean;\n} & TContractInfo;\n\nexport type TRef = {\n    setPosition: (position: { epoch: number | null; price: number | null }) => void;\n};\n\nconst AccumulatorsProfitLossTooltip = ({\n    alignment = 'right',\n    className = 'sc-accumulators-profit-loss-tooltip',\n    current_spot,\n    current_spot_time,\n    currency,\n    exit_tick,\n    exit_tick_time,\n    high_barrier,\n    is_sold,\n    profit,\n    profit_percentage,\n    should_show_profit_text,\n    is_mobile,\n}: TAccumulatorsProfitLossTooltip) => {\n    const [is_tooltip_open, setIsTooltipOpen] = React.useState(false);\n    const won = Number(profit) >= 0;\n    const tooltip_timeout = React.useRef<ReturnType<typeof setTimeout>>();\n    const should_show_profit_percentage = getDecimalPlaces(currency) > 2 && !!profit_percentage;\n\n    React.useEffect(() => {\n        return () => {\n            clearTimeout(tooltip_timeout.current);\n        };\n    }, []);\n\n    React.useEffect(() => {\n        if (is_sold) {\n            setIsTooltipOpen(true);\n            tooltip_timeout.current = onCloseDelayed(3000);\n        }\n    }, [is_sold]);\n\n    const onCloseDelayed = (duration: number) =>\n        setTimeout(() => {\n            setIsTooltipOpen(false);\n        }, duration);\n\n    const onHoverOrTapHandler = () => {\n        clearTimeout(tooltip_timeout.current);\n        tooltip_timeout.current = onCloseDelayed(1500);\n    };\n\n    const opposite_arrow_position = React.useMemo(() => {\n        const horizontal = ['left', 'right'];\n        return horizontal.includes(alignment)\n            ? horizontal.find(el => el !== alignment)\n            : ['top', 'bottom'].find(el => el !== alignment);\n    }, [alignment]);\n\n    const onRef = (ref: TRef | null): void => {\n        if (ref) {\n            if (!exit_tick) {\n                // this call will hide the marker:\n                ref.setPosition({ epoch: null, price: null });\n            }\n            if (exit_tick_time && exit_tick) {\n                ref.setPosition({\n                    epoch: +exit_tick_time,\n                    price: +exit_tick,\n                });\n            }\n        }\n    };\n\n    if (typeof profit !== 'number') return null;\n    if (!is_sold && current_spot_time && high_barrier && should_show_profit_text)\n        return (\n            <AccumulatorsProfitLossText\n                currency={currency}\n                current_spot={current_spot}\n                current_spot_time={current_spot_time}\n                profit_value={should_show_profit_percentage ? profit_percentage : profit}\n                should_show_profit_percentage={should_show_profit_percentage}\n            />\n        );\n\n    return is_sold && exit_tick_time ? (\n        <FastMarker markerRef={onRef} className={classNames(className, won ? 'won' : 'lost')}>\n            <span\n                className={`${className}__spot-circle`}\n                onMouseEnter={() => setIsTooltipOpen(true)}\n                onMouseLeave={onHoverOrTapHandler}\n                onTouchStart={() => setIsTooltipOpen(true)}\n                onTouchEnd={onHoverOrTapHandler}\n                data-testid='dt_accumulator_tooltip_spot'\n            />\n            <CSSTransition\n                in={is_tooltip_open}\n                timeout={{\n                    exit: 500,\n                }}\n                unmountOnExit\n                classNames={`${className}__content`}\n            >\n                <div className={classNames(`${className}__content`, `arrow-${opposite_arrow_position}`)}>\n                    <Text size={is_mobile ? 'xxxxs' : 'xxs'} className={`${className}__text`}>\n                        {localize('Total profit/loss:')}\n                    </Text>\n                    <Text size={is_mobile ? 'xxxs' : 'xs'} className={`${className}__text`} weight='bold'>\n                        <Money amount={profit} currency={currency} has_sign show_currency />\n                    </Text>\n                </div>\n            </CSSTransition>\n        </FastMarker>\n    ) : null;\n};\n\nexport default React.memo(AccumulatorsProfitLossTooltip);\n","import { filterByContractType } from 'App/Components/Elements/PositionsDrawer/helpers/positions-helper';\nimport React from 'react';\nimport { useStore } from '@deriv/stores';\nimport AccumulatorsProfitLossTooltip from './accumulators-profit-loss-tooltip';\nimport ChartMarker from './marker';\nimport { TRADE_TYPES } from '@deriv/shared';\n\ntype TPortfolioStore = ReturnType<typeof useStore>['portfolio'];\n\ntype TAccumulatorsChartElements = {\n    all_positions: TPortfolioStore['all_positions'];\n    current_spot?: number;\n    current_spot_time?: number;\n    has_crossed_accu_barriers: boolean;\n    should_show_profit_text: React.ComponentProps<typeof AccumulatorsProfitLossTooltip>['should_show_profit_text'];\n    symbol: string;\n    is_mobile?: boolean;\n};\n\nconst AccumulatorsChartElements = ({\n    all_positions,\n    current_spot,\n    current_spot_time,\n    has_crossed_accu_barriers,\n    should_show_profit_text,\n    symbol,\n    is_mobile,\n}: TAccumulatorsChartElements) => {\n    const accumulators_positions = all_positions.filter(\n        ({ contract_info }) =>\n            contract_info &&\n            symbol === contract_info.underlying &&\n            filterByContractType(contract_info, TRADE_TYPES.ACCUMULATOR)\n    );\n\n    return (\n        <React.Fragment>\n            {!!accumulators_positions.length &&\n                accumulators_positions.map(({ contract_info }) => (\n                    <AccumulatorsProfitLossTooltip\n                        key={contract_info.contract_id}\n                        {...contract_info}\n                        should_show_profit_text={should_show_profit_text}\n                        is_mobile={is_mobile}\n                    />\n                ))}\n            {has_crossed_accu_barriers && !!current_spot_time && !!current_spot && (\n                <ChartMarker\n                    marker_config={{\n                        ContentComponent: 'div',\n                        x: current_spot_time,\n                        y: current_spot,\n                    }}\n                    marker_content_props={{ className: 'sc-current-spot-emphasizer' }}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default React.memo(AccumulatorsChartElements);\n","import { toJS } from 'mobx';\nimport React, { useMemo } from 'react';\nimport { FastMarker } from 'Modules/SmartChart';\n\ntype TContentConfig = {\n    className?: string;\n    label?: string;\n    line_style?: string;\n    spot_className?: string;\n};\n\nexport type TMarkerContentConfig = TContentConfig & {\n    align_label?: string;\n    is_value_hidden?: boolean;\n    marker_config?: {\n        [key: string]: {\n            type: string;\n            marker_config: {\n                ContentComponent: React.ComponentType<TMarkerContentConfig> | string;\n                className?: string;\n            };\n            content_config: TContentConfig;\n        };\n    };\n    spot_epoch?: string;\n    spot_count?: number;\n    spot_profit?: string;\n    spot_value?: string;\n    status?: string;\n};\n\ntype TChartMarker = {\n    marker_config: {\n        ContentComponent: React.ComponentType<TMarkerContentConfig> | string;\n        className?: string;\n        x: string | number;\n        y: string | number | null;\n    };\n    marker_content_props: TMarkerContentConfig;\n    is_positioned_behind?: boolean;\n    is_positioned_before?: boolean;\n};\ntype TRef = {\n    setPosition: (position: { epoch: number | null; price: number | null }) => void;\n    div: HTMLDivElement;\n};\n\nconst ChartMarker = ({\n    marker_config,\n    marker_content_props,\n    is_positioned_behind = false,\n    is_positioned_before = false,\n}: TChartMarker) => {\n    const { ContentComponent, ...marker_props } = marker_config;\n\n    // TODO:\n    //  - rename x to epoch\n    //  - rename y to price\n    const onRef = (ref?: TRef) => {\n        if (ref) {\n            // NOTE: null price means vertical line.\n            if (!marker_props.y) {\n                const margin = 24; // height of line marker icon\n\n                ref.div.style.height = `calc(100% - ${margin}px)`;\n            } else {\n                ref.div.style.zIndex = '1';\n            }\n            if (is_positioned_behind) ref.div.style.zIndex = '-1';\n            if (is_positioned_before) ref.div.style.zIndex = '102';\n            ref.setPosition({\n                epoch: +marker_props.x,\n                price: Number(marker_props.y),\n            });\n        }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const Component = useMemo(() => ContentComponent, []);\n    return (\n        <FastMarker markerRef={onRef}>\n            <Component {...toJS(marker_content_props)} />\n        </FastMarker>\n    );\n};\n\nexport default ChartMarker;\n","import React from 'react';\n\nconst BottomWidgets = ({ Widget }: { Widget: React.ReactNode }) => <div className='bottom-widgets'>{Widget}</div>;\n\nexport default BottomWidgets;\n","import React from 'react';\nimport { ChartMode, DrawTools, Share, StudyLegend, Views, ToolbarWidget } from 'Modules/SmartChart';\nimport { useDevice } from '@deriv-com/ui';\nimport { isDesktopOs, isTabletOs } from '@deriv/shared';\n\ntype TToolbarWidgetsProps = {\n    position?: string;\n    updateChartType: (type: string) => void;\n    updateGranularity: (granularity: number) => void;\n};\n\nconst ToolbarWidgets = ({ position, updateChartType, updateGranularity }: TToolbarWidgetsProps) => {\n    const { isMobile } = useDevice();\n    const is_real_desktop_device = isDesktopOs() && !isTabletOs; // in a tablet simulator on desktop, isDesktopOs returns true\n\n    return (\n        <ToolbarWidget position={position || (isMobile ? 'bottom' : null)}>\n            <ChartMode portalNodeId='modal_root' onChartType={updateChartType} onGranularity={updateGranularity} />\n            {is_real_desktop_device && !isMobile && (\n                <StudyLegend portalNodeId='modal_root' searchInputClassName='data-hj-whitelist' />\n            )}\n            {!isMobile && (\n                <Views\n                    portalNodeId='modal_root'\n                    searchInputClassName='data-hj-whitelist'\n                    onChartType={updateChartType}\n                    onGranularity={updateGranularity}\n                />\n            )}\n            {is_real_desktop_device && !isMobile && <DrawTools portalNodeId='modal_root' />}\n            {is_real_desktop_device && !isMobile && <Share portalNodeId='modal_root' />}\n        </ToolbarWidget>\n    );\n};\n\nexport default React.memo(ToolbarWidgets);\n","import React from 'react';\nimport { observer, useStore } from '@deriv/stores';\nimport { isAccumulatorContract, isDigitContract, isEnded } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { Text } from '@deriv/components';\n\nconst RecentTradeInfo = observer(() => {\n    const { contract_trade } = useStore();\n    const { granularity, filtered_contracts } = contract_trade;\n\n    const latest_tick_contract = filtered_contracts[filtered_contracts.length - 1];\n\n    if (\n        !latest_tick_contract?.contract_info.tick_stream ||\n        isAccumulatorContract(latest_tick_contract.contract_info.contract_type)\n    )\n        return null;\n\n    const is_ended = isEnded(latest_tick_contract.contract_info);\n    if (is_ended || granularity !== 0) return null;\n\n    const { contract_type, tick_stream, tick_count } = latest_tick_contract.contract_info;\n    const current_tick = isDigitContract(contract_type) ? tick_stream.length : Math.max(tick_stream.length - 1, 0);\n    return (\n        <Text weight='bold' className='recent-trade-info'>\n            <Localize\n                i18n_default_text='Tick {{current_tick}}/{{tick_count}}'\n                values={{\n                    current_tick,\n                    tick_count,\n                }}\n            />\n        </Text>\n    );\n});\n\nexport default RecentTradeInfo;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ChartTitle } from 'Modules/SmartChart';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport RecentTradeInfo from './recent-trade-info';\n\ntype TTopWidgets = {\n    InfoBox?: React.ReactNode;\n    is_digits_widget_active?: boolean;\n    is_mobile?: boolean;\n    is_title_enabled?: boolean;\n    onSymbolChange?: ReturnType<typeof useTraderStore>['onChange'];\n    open?: boolean;\n    open_market?: {\n        category?: string;\n        subcategory?: string;\n    } | null;\n    theme?: string;\n    y_axis_width?: number;\n};\n\nconst TopWidgets = ({\n    InfoBox,\n    is_mobile,\n    is_title_enabled = true,\n    onSymbolChange,\n    theme,\n    open_market,\n    open,\n    is_digits_widget_active,\n}: TTopWidgets) => {\n    const ChartTitleLocal = (\n        <ChartTitle\n            open_market={open_market}\n            open={open}\n            enabled={is_title_enabled}\n            onChange={onSymbolChange}\n            searchInputClassName='data-hj-whitelist'\n            isNestedList={is_mobile}\n            portalNodeId={is_mobile ? 'deriv_app' : undefined}\n        />\n    );\n\n    const portal = ReactDOM.createPortal(\n        <div className={`smartcharts-${theme}`}>\n            <div className='top-widgets-portal'>\n                {ChartTitleLocal}\n                {!is_digits_widget_active && <RecentTradeInfo />}\n            </div>\n        </div>,\n        document.getElementById('app_contents') as Element | DocumentFragment\n    );\n\n    return (\n        <React.Fragment>\n            {InfoBox}\n            {is_mobile ? portal : ChartTitleLocal}\n        </React.Fragment>\n    );\n};\n\nexport default TopWidgets;\n","import React from 'react';\nimport { getUrlBase, moduleLoader } from '@deriv/shared';\n\nlet module;\n\nconst init = () => {\n    module = moduleLoader(() => {\n        return import(/* webpackChunkName: \"smart_chart\" */ '@deriv/deriv-charts');\n    });\n\n    module.then(({ setSmartChartsPublicPath }) => {\n        setSmartChartsPublicPath(getUrlBase('/js/smartcharts/'));\n    });\n};\n\n// React.Lazy expects a default export for the component\n// SmartChart library exports many components\nconst load = component_name => () => {\n    if (!module) {\n        init();\n    }\n    return module.then(module => {\n        return { default: module[component_name] };\n    });\n};\n\nexport const SmartChart = React.lazy(load('SmartChart'));\nexport const ChartTitle = React.lazy(load('ChartTitle'));\n\nexport const ChartSize = React.lazy(load('ChartSize'));\nexport const ChartMode = React.lazy(load('ChartMode'));\nexport const DrawTools = React.lazy(load('DrawTools'));\nexport const Share = React.lazy(load('Share'));\nexport const StudyLegend = React.lazy(load('StudyLegend'));\nexport const Views = React.lazy(load('Views'));\nexport const ToolbarWidget = React.lazy(load('ToolbarWidget'));\n\nexport const FastMarker = React.lazy(load('FastMarker'));\nexport const RawMarker = React.lazy(load('RawMarker'));\n","import React from 'react';\nimport { localize } from '@deriv/translations';\nimport { ActiveSymbols } from '@deriv/api-types';\nimport { TContractType, TContractCategory, TList } from '../Components/Form/ContractType/types';\nimport { unsupported_contract_types_list } from '@deriv/shared';\n\ntype TContractTypesList = {\n    [key: string]: {\n        name: string;\n        categories: DeepRequired<TContractType[]>;\n    };\n};\n\ntype TItem = {\n    value: string;\n};\n\nexport const isMajorPairsSymbol = (checked_symbol: string, active_symbols: ActiveSymbols) =>\n    active_symbols.some(({ submarket, symbol }) => /major_pairs/i.test(submarket) && checked_symbol === symbol);\n\nexport const contract_category_icon = {\n    [localize('Ups & Downs')]: 'IcUpsDowns',\n    [localize('Touch & No Touch')]: 'IcHighsLows',\n    [localize('Ins & Outs')]: 'IcInsOuts',\n    [localize('Look Backs')]: 'IcLookbacks',\n    [localize('Digits')]: 'IcDigits',\n    [localize('Multipliers')]: 'IcMultiplier',\n    [localize('Accumulators')]: 'IcCatAccumulator',\n} as const;\n\nexport const ordered_trade_categories = [\n    'Accumulators',\n    'Vanillas',\n    'Turbos',\n    'Multipliers',\n    'Ups & Downs',\n    'Touch & No Touch',\n    'Digits',\n];\n\nexport const getContractTypeCategoryIcons = () =>\n    ({\n        All: 'IcCatAll',\n        Accumulators: 'IcCatAccumulator',\n        Options: 'IcCatOptions',\n        Multipliers: 'IcCatMultiplier',\n        Turbos: 'IcCatTurbos',\n    }) as const;\n\n/**\n * Returns a list of contracts in the following format:\n * {\n *      label: '', // contract category label\n *      contract_types: [], // list of contract types\n *      icon: '', // contract categoty icon\n * }\n * @param {object} contract_types_list  - list of all contracts\n * @param {array}  unsupported_list - list of unsupported contract types\n */\n\nexport const getAvailableContractTypes = (\n    contract_types_list: TContractTypesList,\n    unsupported_list: typeof unsupported_contract_types_list\n) => {\n    return Object.keys(contract_types_list)\n        .map(key => {\n            const contract_types = contract_types_list[key].categories;\n            const contract_name = contract_types_list[key].name;\n            const available_contract_types = contract_types.filter(type =>\n                type.value &&\n                // TODO: remove this check once all contract types are supported\n                !unsupported_list.includes(type.value as (typeof unsupported_contract_types_list)[number])\n                    ? type\n                    : undefined\n            );\n\n            if (available_contract_types.length) {\n                return {\n                    key,\n                    label: contract_name,\n                    contract_types: available_contract_types,\n                    icon: contract_category_icon[contract_name],\n                    component: null,\n                };\n            }\n            return undefined;\n        })\n        .filter(Boolean) as {\n        key: string;\n        label: string;\n        contract_types: TContractType[];\n        icon:\n            | 'IcUpsDowns'\n            | 'IcHighsLows'\n            | 'IcInsOuts'\n            | 'IcLookbacks'\n            | 'IcDigits'\n            | 'IcMultiplier'\n            | 'IcCatAccumulator';\n        component: JSX.Element | null;\n    }[];\n};\n\n/**\n * Returns a filtered list\n * @param {object} contract_types_list  - list of all contracts\n * @param {array}  filtered_items_array - list of filtered contract category names and/or contract types names\n */\n/*export const getFilteredList = (contract_types_list, filtered_items_array: Array<string>) => {\n    return Object.keys(contract_types_list)\n        .map(key => {\n            const { label, contract_types, icon } = contract_types_list[key];\n\n            const filtered_by_contract_types = contract_types.filter(c =>\n                filtered_items_array.includes(c.text.toLowerCase())\n            );\n\n            const filtered_by_contract_category = filtered_items_array.includes(label.toLowerCase());\n\n            if (filtered_by_contract_types.length) {\n                return {\n                    label,\n                    contract_types: filtered_by_contract_types,\n                    icon,\n                };\n            } else if (filtered_by_contract_category) {\n                return {\n                    label,\n                    contract_types,\n                    icon,\n                };\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n};*/\n\n// const flatten = (arr: any) => [].concat(...arr);\n\n/**\n * Flatten list object into an array of contract category label and contract types names\n * @param {object} list\n */\n// export const getContractsList = (list: any) =>\n//     flatten(\n//         Object.keys(list).map(\n//             k => [\n//                 list[k].label.toLowerCase(), // contract category names\n//                 ...list[k].contract_types.map((c: any) => c.text.toLowerCase()),\n//             ] // contract types names\n//         )\n//     );\n\nexport const findContractCategory = (list: Partial<TList[]>, item: TItem) =>\n    list?.find(list_item => list_item?.contract_types?.some(i => i.value.includes(item.value))) ||\n    ({} as TContractCategory);\n\nexport const getContractCategoryKey = (list: TList[], item: TItem) => findContractCategory(list, item)?.key;\n\nexport const getContractTypes = (list: TList[], item: TItem) => findContractCategory(list, item)?.contract_types;\n\nexport const getCategoriesSortedByKey = (list: TContractCategory[] = []) =>\n    [...list].sort((a, b) => ordered_trade_categories.indexOf(a.key) - ordered_trade_categories.indexOf(b.key));\n","import { CONTRACT_TYPES, TRADE_TYPES } from '@deriv/shared';\n\nconst digitCategoriesMap = [TRADE_TYPES.EVEN_ODD, TRADE_TYPES.MATCH_DIFF, TRADE_TYPES.OVER_UNDER] as const;\nconst digitTypesMap = [\n    CONTRACT_TYPES.MATCH_DIFF.DIFF,\n    CONTRACT_TYPES.MATCH_DIFF.MATCH,\n    CONTRACT_TYPES.OVER_UNDER.OVER,\n    CONTRACT_TYPES.OVER_UNDER.UNDER,\n    CONTRACT_TYPES.EVEN_ODD.EVEN,\n    CONTRACT_TYPES.EVEN_ODD.ODD,\n] as const;\n\nexport const isDigitTradeType = (trade_type = '') => digitCategoriesMap.some(item => item === trade_type);\nexport const isDigitContractType = (contract_type: string) => digitTypesMap.some(item => item === contract_type);\n","import {\n    WS,\n    getPropertyValue,\n    getSortedTradeTypes,\n    cloneObject,\n    isTimeValid,\n    minDate,\n    toMoment,\n    getUnitMap,\n    buildBarriersConfig,\n    buildDurationConfig,\n    hasIntradayDurationUnit,\n    buildForwardStartingConfig,\n    unsupported_contract_types_list,\n    getCleanedUpCategories,\n    getContractCategoriesConfig,\n    getContractTypesConfig,\n    getContractSubtype,\n    getLocalizedBasis,\n    TTradeTypesCategories,\n    TRADE_TYPES,\n    isDtraderV2MobileEnabled,\n    isDtraderV2DesktopEnabled,\n} from '@deriv/shared';\nimport ServerTime from '_common/base/server_time';\nimport { localize } from '@deriv/translations';\nimport { isSessionAvailable } from './start-date';\nimport { ContractsFor, ContractsForSymbolResponse, TradingTimes, TradingTimesResponse } from '@deriv/api-types';\nimport { TConfig, TTradeStore } from 'Types';\n\ntype TBarriers = Record<\n    keyof TTradeStore['duration_min_max'],\n    {\n        barrier?: string;\n        high_barrier?: string;\n        low_barrier?: string;\n    }\n> & {\n    count: number;\n};\n\ntype TNonAvailableContractsList = Record<'contract_category' | 'contract_display_name' | 'contract_type', string>[];\ntype TTextValueStrings = {\n    text: string;\n    value: string;\n};\ntype TTimes = {\n    open: string[];\n    close: string[];\n};\ntype TEvents =\n    | {\n          dates: string;\n          descrip: string;\n      }[]\n    | [];\n\nexport const ContractType = (() => {\n    type TContractValues = ReturnType<typeof getComponents> &\n        ReturnType<typeof getBasis> &\n        ReturnType<typeof getTradeTypes> &\n        ReturnType<typeof getStartDates> &\n        ReturnType<typeof getStartType> &\n        ReturnType<typeof getBarriers> &\n        ReturnType<typeof getDurationUnit> &\n        ReturnType<typeof getDurationUnitsList> &\n        ReturnType<typeof getDurationMinMax> &\n        ReturnType<typeof getAccumulatorRange> &\n        ReturnType<typeof getMultiplierRange> &\n        ReturnType<typeof getCancellation> &\n        ReturnType<typeof getExpiryType> &\n        ReturnType<typeof getEqualProps>;\n\n    let available_contract_types: ReturnType<typeof getContractTypesConfig> = {};\n    let available_categories: TTradeTypesCategories = {};\n    let contract_types: ReturnType<typeof getContractTypesConfig>;\n    let non_available_categories: TTradeTypesCategories = {};\n    const trading_events: { [key: string]: Record<string, TEvents | undefined> } = {};\n    const trading_times: { [key: string]: Record<string, TTimes> } = {};\n    let has_only_forward_starting_contracts = false;\n\n    const buildContractTypesConfig = (symbol: string): Promise<void> =>\n        WS.contractsFor(symbol).then((r: Required<ContractsForSymbolResponse>) => {\n            const has_contracts = getPropertyValue(r, ['contracts_for']);\n            has_only_forward_starting_contracts =\n                has_contracts && !r.contracts_for.available.find(contract => contract.start_type !== 'forward');\n            if (!has_contracts || has_only_forward_starting_contracts) return;\n            const contract_categories = getContractCategoriesConfig();\n            contract_types = getContractTypesConfig(symbol);\n            available_contract_types = {};\n            available_categories = cloneObject(contract_categories); // To preserve the order (will clean the extra items later in this function)\n            r.contracts_for.available.forEach(contract => {\n                const type = Object.keys(contract_types).find(\n                    key =>\n                        contract_types[key].trade_types.indexOf(contract.contract_type) !== -1 &&\n                        (typeof contract_types[key].barrier_count === 'undefined' ||\n                            Number(contract_types[key].barrier_count) === contract.barriers) // To distinguish betweeen Rise/Fall & Higher/Lower\n                );\n\n                if (!type) return; // ignore unsupported contract types\n\n                if (!available_contract_types[type]) {\n                    // extend contract_categories to include what is needed to create the contract list\n                    const sub_cats =\n                        available_categories[\n                            Object.keys(available_categories).find(\n                                key => available_categories[key].categories.indexOf(type) !== -1\n                            ) ?? ''\n                        ].categories;\n\n                    if (!sub_cats) return;\n\n                    sub_cats[(sub_cats as string[]).indexOf(type)] = { value: type, text: contract_types[type].title };\n\n                    // populate available contract types\n                    available_contract_types[type] = cloneObject(contract_types[type]);\n                }\n                const config: TConfig = available_contract_types[type].config || {};\n\n                // set config values\n                config.has_spot = config.has_spot || contract.start_type === 'spot';\n                config.durations = config.hide_duration ? undefined : buildDurationConfig(contract, config.durations);\n                config.trade_types = buildTradeTypesConfig(contract, config.trade_types);\n                config.barriers = buildBarriersConfig(contract, config.barriers);\n                config.barrier_category = contract.barrier_category as TConfig['barrier_category'];\n                config.barrier_choices = contract.barrier_choices as TConfig['barrier_choices'];\n                config.forward_starting_dates = buildForwardStartingConfig(contract, config.forward_starting_dates);\n                config.growth_rate_range = contract.growth_rate_range as TConfig['growth_rate_range'];\n                config.multiplier_range = contract.multiplier_range as TConfig['multiplier_range'];\n                config.cancellation_range = contract.cancellation_range as TConfig['cancellation_range'];\n\n                available_contract_types[type].config = config;\n            });\n            available_categories = getCleanedUpCategories(available_categories);\n\n            non_available_categories = {};\n            const mutable_contracts_config = cloneObject(contract_categories);\n            const getCategories = (key = ''): string[] => mutable_contracts_config[key]?.categories ?? [];\n            const non_available_contracts = r.contracts_for.non_available as TNonAvailableContractsList;\n\n            if (non_available_contracts) {\n                non_available_contracts.forEach(({ contract_type }) => {\n                    const type =\n                        Object.keys(contract_types).find(key =>\n                            contract_types[key].trade_types.includes(contract_type)\n                        ) ?? '';\n                    const key = Object.keys(mutable_contracts_config).find(key => getCategories(key).includes(type));\n                    const categories: Array<string | TTextValueStrings> = getCategories(key);\n                    const title = contract_types[type]?.title;\n                    const is_available = !!available_categories[key as keyof TTradeTypesCategories]?.categories?.find(\n                        el => (el as TTextValueStrings).text === title\n                    );\n                    if (categories.includes(type) && !is_available) {\n                        categories[categories.indexOf(type)] = { value: type, text: title };\n                    }\n                    if (key) {\n                        non_available_categories[key] = mutable_contracts_config[key];\n                    }\n                });\n            }\n            non_available_categories = getCleanedUpCategories(non_available_categories);\n        });\n\n    const buildTradeTypesConfig = (\n        contract: ContractsFor['available'][number],\n        trade_types: { [key: string]: string } = {}\n    ) => {\n        trade_types[contract.contract_type] = contract.contract_display ?? '';\n        return trade_types;\n    };\n\n    const getArrayDefaultValue = <T>(arr_new_values: Array<T>, value: T): T =>\n        arr_new_values.indexOf(value) !== -1 ? value : arr_new_values[0];\n\n    const getContractValues = (store: TTradeStore): TContractValues | Record<string, never> => {\n        const {\n            contract_expiry_type,\n            contract_type,\n            basis,\n            duration_unit,\n            expiry_type,\n            multiplier,\n            start_date,\n            cancellation_duration,\n            short_barriers,\n            long_barriers,\n            strike_price_choices,\n            v2_params_initial_values,\n            root_store,\n        } = store;\n\n        if (!contract_type) return {};\n\n        let stored_barriers_data: TTradeStore['short_barriers' | 'long_barriers' | 'strike_price_choices'];\n        switch (getContractSubtype(contract_type)) {\n            case 'Short':\n                stored_barriers_data = short_barriers;\n                break;\n            case 'Long':\n                stored_barriers_data = long_barriers;\n                break;\n            case 'Call':\n            case 'Put':\n                stored_barriers_data =\n                    v2_params_initial_values?.strike &&\n                    (isDtraderV2MobileEnabled(root_store?.ui.is_mobile) ||\n                        isDtraderV2DesktopEnabled(root_store?.ui.is_desktop))\n                        ? ({\n                              ...strike_price_choices,\n                              barrier: v2_params_initial_values.strike,\n                          } as TTradeStore['strike_price_choices'])\n                        : strike_price_choices;\n                break;\n            default:\n                stored_barriers_data = {};\n        }\n\n        const form_components = getComponents(contract_type);\n        const obj_basis = getBasis(contract_type, basis);\n        const obj_trade_types = getTradeTypes(contract_type);\n        const obj_start_dates = getStartDates(contract_type, start_date);\n        const obj_start_type = getStartType(obj_start_dates.start_date);\n        const obj_barrier = getBarriers(contract_type, contract_expiry_type, stored_barriers_data?.barrier);\n        const obj_duration_unit = getDurationUnit(duration_unit, contract_type, obj_start_type.contract_start_type);\n\n        const obj_duration_units_list = getDurationUnitsList(contract_type, obj_start_type.contract_start_type);\n        const obj_duration_units_min_max = getDurationMinMax(contract_type, obj_start_type.contract_start_type);\n        const obj_accumulator_range_list = getAccumulatorRange(contract_type);\n        const obj_barrier_choices = getBarrierChoices(contract_type, stored_barriers_data?.barrier_choices);\n        const obj_multiplier_range_list = getMultiplierRange(contract_type, multiplier);\n        const obj_cancellation = getCancellation(contract_type, cancellation_duration);\n        const obj_expiry_type = getExpiryType(obj_duration_units_list.duration_units_list, expiry_type);\n        const obj_equal = getEqualProps(contract_type);\n\n        return {\n            ...form_components,\n            ...obj_basis,\n            ...obj_trade_types,\n            ...obj_start_dates,\n            ...obj_start_type,\n            ...obj_barrier,\n            ...obj_duration_unit,\n            ...obj_duration_units_list,\n            ...obj_duration_units_min_max,\n            ...obj_expiry_type,\n            ...obj_accumulator_range_list,\n            ...obj_barrier_choices,\n            ...obj_multiplier_range_list,\n            ...obj_cancellation,\n            ...obj_equal,\n        };\n    };\n\n    const getContractType = (list: TTradeTypesCategories, contractType: string) => {\n        const filteredList = Object.keys(list || {})\n            .reduce<string[]>((k, l) => [...k, ...(list[l].categories as TTextValueStrings[]).map(ct => ct.value)], [])\n            .filter(\n                type =>\n                    !unsupported_contract_types_list.includes(type as (typeof unsupported_contract_types_list)[number])\n            );\n        const sortedList = getSortedTradeTypes(filteredList);\n\n        return {\n            contract_type: getArrayDefaultValue(sortedList, contractType),\n        };\n    };\n\n    const getComponents = (c_type: string) => {\n        if (!contract_types) return {};\n        const check = ['duration', 'amount', ...(contract_types[c_type]?.components ?? [])].filter(\n            component =>\n                !(\n                    component === 'duration' &&\n                    contract_types[c_type].config &&\n                    contract_types[c_type].config?.hide_duration\n                )\n        );\n        return (\n            contract_types && {\n                form_components: check,\n            }\n        );\n    };\n\n    const getDurationUnitsList = (contract_type: string, contract_start_type: string) => {\n        return {\n            duration_units_list:\n                (getPropertyValue(available_contract_types, [\n                    contract_type,\n                    'config',\n                    'durations',\n                    'units_display',\n                    contract_start_type,\n                ]) as TTextValueStrings[]) || [],\n        };\n    };\n\n    const getDurationUnit = (duration_unit: string, contract_type: string, contract_start_type: string) => {\n        const duration_units =\n            (getPropertyValue(available_contract_types, [\n                contract_type,\n                'config',\n                'durations',\n                'units_display',\n                contract_start_type,\n            ]) as TTextValueStrings[]) || [];\n        const arr_units: string[] = [];\n        duration_units.forEach(obj => {\n            arr_units.push(obj.value);\n        });\n\n        return {\n            duration_unit: getArrayDefaultValue(arr_units, duration_unit),\n        };\n    };\n\n    const getDurationMinMax = (contract_type: string, contract_start_type: string, contract_expiry_type?: string) => {\n        let duration_min_max: TTradeStore['duration_min_max'] =\n            getPropertyValue(available_contract_types, [\n                contract_type,\n                'config',\n                'durations',\n                'min_max',\n                contract_start_type,\n            ]) || {};\n\n        if (contract_expiry_type) {\n            duration_min_max =\n                'contract_expiry_type' in duration_min_max\n                    ? (duration_min_max as unknown as { [key: string]: TTradeStore['duration_min_max'] })[\n                          contract_expiry_type\n                      ]\n                    : {};\n        }\n\n        return { duration_min_max };\n    };\n\n    const getFullContractTypes = () => available_contract_types;\n\n    const getStartType = (start_date: number) => ({\n        // Number(0) refers to 'now'\n        contract_start_type: start_date === Number(0) ? 'spot' : 'forward',\n    });\n\n    const getStartDates = (contract_type: string, current_start_date: number) => {\n        const config: TConfig = getPropertyValue(available_contract_types, [contract_type, 'config']);\n        const start_dates_list = [];\n\n        if (config?.has_spot) {\n            // Number(0) refers to 'now'\n            start_dates_list.push({ text: localize('Now'), value: Number(0) });\n        }\n        if (config?.forward_starting_dates) {\n            start_dates_list.push(...config.forward_starting_dates);\n        }\n\n        const start_date = start_dates_list.find(item => item.value === current_start_date)\n            ? current_start_date\n            : start_dates_list[0]?.value;\n\n        return { start_date, start_dates_list };\n    };\n\n    const getSessions = (contract_type: string, start_date: number) => {\n        const config: TConfig = getPropertyValue(available_contract_types, [contract_type, 'config']) || {};\n        const sessions = config.forward_starting_dates?.find(option => option.value === start_date)?.sessions;\n        return { sessions };\n    };\n\n    const hours = [...Array(24).keys()].map(a => `0${a}`.slice(-2));\n    const minutes = [...Array(12).keys()].map(a => `0${a * 5}`.slice(-2));\n\n    const getValidTime = (\n        sessions: ReturnType<typeof getSessions>['sessions'],\n        compare_moment: moment.Moment,\n        start_moment?: moment.Moment\n    ) => {\n        if (sessions && !isSessionAvailable(sessions, compare_moment)) {\n            // first see if changing the minute brings it to the right session\n            compare_moment.minute(\n                Number(\n                    minutes.find(m => isSessionAvailable(sessions, compare_moment.minute(+m))) ||\n                        compare_moment.format('mm')\n                )\n            );\n            // if not, also change the hour\n            if (!isSessionAvailable(sessions, compare_moment)) {\n                compare_moment.minute(0);\n                compare_moment.hour(\n                    Number(\n                        hours.find(h => isSessionAvailable(sessions, compare_moment.hour(+h), start_moment, true)) ||\n                            compare_moment.format('HH')\n                    )\n                );\n                compare_moment.minute(\n                    Number(\n                        minutes.find(m => isSessionAvailable(sessions, compare_moment.minute(+m))) ||\n                            compare_moment.format('mm')\n                    )\n                );\n            }\n        }\n        return compare_moment.format('HH:mm');\n    };\n\n    const buildMoment = (date: string | number | null, time?: string | null) => {\n        const [hour, minute] = isTimeValid(time ?? '') ? (time?.split(':') ?? []) : [0, 0];\n        return toMoment(date || ServerTime.get())\n            .hour(+hour)\n            .minute(+minute);\n    };\n\n    const getStartTime = (\n        sessions: ReturnType<typeof getSessions>['sessions'],\n        start_date: number,\n        start_time?: string | null\n    ) => ({\n        start_time: start_date ? getValidTime(sessions, buildMoment(start_date, start_time)) : null,\n    });\n\n    const getTradingEvents = async (date: string, underlying: string | null = null) => {\n        if (!date) {\n            return [];\n        }\n        if (!(date in trading_events)) {\n            const trading_times_response: TradingTimesResponse = await WS.tradingTimes(date);\n            const trading_times_data = trading_times_response.trading_times as TradingTimes;\n            if (getPropertyValue(trading_times_response, ['trading_times', 'markets'])) {\n                for (let i = 0; i < trading_times_data.markets.length; i++) {\n                    const submarkets = trading_times_data.markets[i].submarkets;\n                    if (submarkets) {\n                        for (let j = 0; j < submarkets.length; j++) {\n                            const symbols = submarkets[j].symbols;\n                            if (symbols) {\n                                for (let k = 0; k < symbols.length; k++) {\n                                    const symbol = symbols[k];\n                                    if (!trading_events[trading_times_response.echo_req.trading_times as string]) {\n                                        trading_events[trading_times_response.echo_req.trading_times as string] = {};\n                                    }\n                                    trading_events[trading_times_response.echo_req.trading_times as string][\n                                        symbol.symbol\n                                    ] = symbol.events as TEvents;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return trading_events[date][underlying as string];\n    };\n\n    const getTradingDays = async (date: string, underlying: string | null = null) => {\n        if (!date || !underlying) return null;\n\n        const response: TradingTimesResponse = await WS.tradingTimes(date);\n        const trading_times = response.trading_times as TradingTimes;\n\n        if (!getPropertyValue(response, ['trading_times', 'markets'])) return null;\n\n        const symbol_data = trading_times.markets.flatMap(\n            market =>\n                market.submarkets?.flatMap(\n                    submarket => submarket.symbols?.find(symbol => symbol.symbol === underlying) || []\n                ) || []\n        )[0];\n\n        return symbol_data?.trading_days || null;\n    };\n\n    const getTradingTimes = async (\n        date: string | null,\n        underlying: string | null = null\n    ): Promise<Record<string, never> | TTimes | Record<string, TTimes>> => {\n        if (!date) {\n            return {};\n        }\n\n        if (!(date in trading_times)) {\n            const trading_times_response: TradingTimesResponse = await WS.tradingTimes(date);\n            const trading_times_data = trading_times_response.trading_times as TradingTimes;\n            if (getPropertyValue(trading_times_response, ['trading_times', 'markets'])) {\n                for (let i = 0; i < trading_times_data.markets.length; i++) {\n                    const submarkets = trading_times_data.markets[i].submarkets;\n                    if (submarkets) {\n                        for (let j = 0; j < submarkets.length; j++) {\n                            const symbols = submarkets[j].symbols;\n                            if (symbols) {\n                                for (let k = 0; k < symbols.length; k++) {\n                                    const symbol = symbols[k];\n                                    if (!trading_times[trading_times_response.echo_req.trading_times as string]) {\n                                        trading_times[trading_times_response.echo_req.trading_times as string] = {};\n                                    }\n                                    trading_times[trading_times_response.echo_req.trading_times as string][\n                                        symbol.symbol\n                                    ] = {\n                                        open: (symbol.times as TTimes).open,\n                                        close: (symbol.times as TTimes).close,\n                                    };\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return underlying ? trading_times[date][underlying] : trading_times[date];\n    };\n\n    const getExpiryType = (\n        duration_units_list: ReturnType<typeof getDurationUnitsList>['duration_units_list'],\n        expiry_type: string | null\n    ) => {\n        if (duration_units_list) {\n            if (\n                (!expiry_type && duration_units_list.length > 0) ||\n                (duration_units_list.length === 1 && duration_units_list[0].value === 't')\n            ) {\n                return { expiry_type: 'duration' };\n            }\n            if (duration_units_list.length === 0) {\n                return {\n                    expiry_type: null,\n                };\n            }\n        }\n\n        return { expiry_type };\n    };\n\n    const getExpiryDate = (\n        duration_units_list: ReturnType<typeof getDurationUnitsList>['duration_units_list'],\n        expiry_date: string | null,\n        expiry_type: string | null,\n        start_date: number\n    ) => {\n        let proper_expiry_date = null;\n\n        if (expiry_type === 'endtime') {\n            const moment_start = toMoment(start_date);\n            const moment_expiry = toMoment(expiry_date);\n\n            if (!hasIntradayDurationUnit(duration_units_list)) {\n                const is_invalid = moment_expiry.isSameOrBefore(moment_start, 'day');\n                proper_expiry_date = (is_invalid ? moment_start.clone().add(1, 'day') : moment_expiry).format(\n                    'YYYY-MM-DD'\n                );\n            } else {\n                // forward starting contracts should only show today and tomorrow as expiry date\n                const is_invalid =\n                    moment_expiry.isBefore(moment_start, 'day') ||\n                    (start_date && moment_expiry.isAfter(moment_start.clone().add(1, 'day')));\n                proper_expiry_date = (is_invalid ? moment_start : moment_expiry).format('YYYY-MM-DD');\n            }\n        }\n\n        return { expiry_date: proper_expiry_date };\n    };\n\n    // It has to follow the correct order of checks:\n    // first check if end time is within available sessions\n    // then confirm that end time is at least 5 minute after start time\n    const getExpiryTime = (\n        expiry_date: string | null,\n        expiry_time: string | null,\n        expiry_type: string | null,\n        market_close_times: string[] | undefined | TTimes,\n        sessions: TTradeStore['sessions'],\n        start_date: number,\n        start_time?: string | null\n    ) => {\n        let end_time: moment.Moment | string | null = null;\n\n        if (expiry_type === 'endtime') {\n            let market_close_time = '23:59:59';\n\n            if (Array.isArray(market_close_times) && market_close_times?.length && market_close_times[0] !== '--') {\n                // Some of underlyings (e.g. Australian Index) have two close time during a day so we always select the further one as the end time of the contract.\n                market_close_time = market_close_times.slice(-1)[0];\n            }\n\n            // For contracts with a duration of more that 24 hours must set the expiry_time to the market's close time on the expiry date.\n            if (!start_date && ServerTime.get()?.isBefore(buildMoment(expiry_date), 'day')) {\n                end_time = market_close_time;\n            } else {\n                const start_moment = start_date\n                    ? buildMoment(start_date, start_time)\n                    : (ServerTime.get() as moment.Moment);\n                const end_moment = buildMoment(expiry_date, expiry_time);\n\n                end_time = end_moment.format('HH:mm');\n                // When the contract is forwarding, and the duration is endtime, users can purchase the contract within 24 hours.\n                const expiry_sessions = [\n                    {\n                        open: start_moment.clone().add(5, 'minute'), // expiry time should be at least 5 minute after start_time\n                        close: minDate(\n                            start_moment.clone().add(24, 'hour'),\n                            buildMoment(expiry_date, market_close_time)\n                        ),\n                    },\n                ];\n\n                if (!isSessionAvailable(expiry_sessions, end_moment)) {\n                    end_time = getValidTime(expiry_sessions, end_moment.clone(), start_moment.clone());\n                }\n                if (end_moment.isSameOrBefore(start_moment) || end_moment.diff(start_moment, 'minute') < 5) {\n                    const is_end_of_day = start_moment.get('hours') === 23 && start_moment.get('minute') >= 55;\n                    const is_end_of_session =\n                        sessions && !isSessionAvailable(sessions, start_moment.clone().add(5, 'minutes'));\n                    end_time = start_moment.clone().add(is_end_of_day || is_end_of_session ? 0 : 5, 'minutes');\n                    // Set the end_time to be multiple of 5 to be equal as the SELECTED_TIME that shown to the client.\n                    end_time = setMinuteMultipleByFive(end_time as moment.Moment).format('HH:mm');\n                }\n                // Set the expiry_time to 5 minute less than start_time for forwading contracts when the expiry_time is null and the expiry_date is tomorrow.\n                if (end_time === '00:00' && start_moment.isBefore(end_moment, 'day')) {\n                    end_time = start_moment.clone().subtract(5, 'minute').format('HH:mm');\n                }\n            }\n        }\n        return { expiry_time: end_time };\n    };\n\n    const setMinuteMultipleByFive = (moment_obj: moment.Moment) =>\n        moment_obj.minute(Math.ceil(moment_obj.minute() / 5) * 5);\n\n    const getTradeTypes = (contract_type: string) => ({\n        trade_types: getPropertyValue(available_contract_types, [contract_type, 'config', 'trade_types']),\n    });\n\n    const getBarriers = (contract_type: string, expiry_type: string, stored_barrier_value?: string) => {\n        const barriers =\n            (getPropertyValue(available_contract_types, [contract_type, 'config', 'barriers']) as TBarriers) || {};\n        const barrier_values = barriers[expiry_type] || {};\n        const barrier_1 = barrier_values.barrier || barrier_values.high_barrier || '';\n        const barrier_2 = barrier_values.low_barrier || '';\n        return {\n            barrier_count: barriers.count || 0,\n            barrier_1: stored_barrier_value || barrier_1.toString(),\n            barrier_2: barrier_2.toString(),\n        };\n    };\n\n    const getBasis = (contract_type: string, basis: string) => {\n        const arr_basis: string[] = getPropertyValue(available_contract_types, [contract_type, 'basis']) || [];\n        const localized_basis = getLocalizedBasis();\n        const basis_list = arr_basis.reduce<TTextValueStrings[]>(\n            (cur, bas) => [...cur, { text: localized_basis[bas as keyof typeof localized_basis], value: bas }],\n            []\n        );\n\n        return {\n            basis_list,\n            basis: getArrayDefaultValue(arr_basis, basis),\n        };\n    };\n\n    const getAccumulatorRange = (contract_type: string) => ({\n        accumulator_range_list:\n            (getPropertyValue(available_contract_types, [contract_type, 'config', 'growth_rate_range']) as number[]) ||\n            [],\n    });\n\n    const getBarrierCategory = (contract_type: string) => ({\n        barrier_category: getPropertyValue(available_contract_types, [contract_type, 'config', 'barrier_category']),\n    });\n\n    const getBarrierChoices = (contract_type: string, stored_barrier_choices = [] as string[]) => ({\n        barrier_choices: stored_barrier_choices.length\n            ? stored_barrier_choices\n            : getPropertyValue(available_contract_types, [contract_type, 'config', 'barrier_choices']) || [],\n    });\n\n    const getMultiplierRange = (contract_type: string, multiplier: number) => {\n        const arr_multiplier: number[] =\n            getPropertyValue(available_contract_types, [contract_type, 'config', 'multiplier_range']) || [];\n\n        return {\n            multiplier_range_list: arr_multiplier.map(m => ({ text: `x${m}`, value: m })),\n            multiplier: getArrayDefaultValue(arr_multiplier, multiplier),\n        };\n    };\n\n    const getCancellation = (contract_type: string, cancellation_duration: string) => {\n        const arr_cancellation_range: string[] =\n            getPropertyValue(available_contract_types, [contract_type, 'config', 'cancellation_range']) || [];\n        const cached_multipliers_cancellation: string[] =\n            getPropertyValue(available_contract_types, [TRADE_TYPES.MULTIPLIER, 'config', 'cancellation_range']) || [];\n        const regex = /(^(?:\\d){1,})|((?:[a-zA-Z]){1,}$)/g;\n        const getText = (str: string) => {\n            const [duration, unit] = str.match(regex) ?? [];\n            const unit_map = getUnitMap();\n            const unit_names = unit_map[unit as keyof typeof unit_map];\n            const name = 'name_plural' in unit_names ? unit_names.name_plural : unit_names.name;\n            return `${duration} ${name}`;\n        };\n        const mapCancellationRangeList = (d: string) => ({ text: `${getText(d)}`, value: d });\n\n        const should_show_cancellation = !!arr_cancellation_range.length;\n\n        return {\n            cancellation_duration: getArrayDefaultValue(arr_cancellation_range, cancellation_duration),\n            cancellation_range_list: arr_cancellation_range.map(mapCancellationRangeList),\n            cached_multiplier_cancellation_list: cached_multipliers_cancellation.map(mapCancellationRangeList),\n            ...(should_show_cancellation ? {} : { has_cancellation: false }),\n        };\n    };\n\n    const getEqualProps = (contract_type: string) => {\n        const base_contract_type = /^(.*)_equal$/.exec(contract_type)?.[1];\n\n        if (base_contract_type && !available_contract_types[base_contract_type]) {\n            return {\n                is_equal: 1,\n                has_equals_only: true,\n            };\n        }\n        return {};\n    };\n\n    return {\n        buildContractTypesConfig,\n        getBarrierCategory,\n        getBarriers,\n        getContractType,\n        getContractValues,\n        getDurationMinMax,\n        getDurationUnit,\n        getDurationUnitsList,\n        getFullContractTypes,\n        getExpiryDate,\n        getExpiryTime,\n        getExpiryType,\n        getSessions,\n        getStartTime,\n        getStartType,\n        getTradingEvents,\n        getTradingDays,\n        getTradingTimes,\n        getContractCategories: () => ({\n            contract_types_list: available_categories,\n            has_only_forward_starting_contracts,\n            non_available_contract_types_list: non_available_categories,\n        }),\n    };\n})();\n","import { PriceProposalResponse, Proposal } from '@deriv/api-types';\nimport {\n    convertToUnix,\n    getDecimalPlaces,\n    getLocalizedBasis,\n    getPropertyValue,\n    isAccumulatorContract,\n    isTurbosContract,\n    toMoment,\n    TRADE_TYPES,\n} from '@deriv/shared';\nimport { TError, TTradeStore } from 'Types';\n\ntype TObjContractBasis = {\n    text: string;\n    value: string;\n};\n\ntype TObjMultiplier = {\n    cancellation?: string;\n    limit_order?: {\n        take_profit?: number;\n        stop_loss?: number;\n    };\n    multiplier?: number;\n};\n\ntype TObjAccum = {\n    growth_rate?: number;\n    limit_order?: {\n        take_profit?: number;\n    };\n};\n\ntype TObjExpiry = {\n    date_expiry?: number;\n};\n\ntype TValidationParams =\n    | {\n          validation_params?: {\n              payout?: {\n                  max: string;\n              };\n              max_payout?: string;\n              max_ticks?: number;\n              stake?: {\n                  max: string;\n                  min: string;\n              };\n              take_profit: {\n                  max: string;\n                  min: string;\n              };\n              stop_loss: { max: string; min: string };\n          };\n      }\n    | undefined;\n\nexport type ExpandedProposal = Proposal & TValidationParams;\n\nconst isVisible = (elem: HTMLElement) => !(!elem || (elem.offsetWidth === 0 && elem.offsetHeight === 0));\n\nconst map_error_field: { [key: string]: string } = {\n    barrier: 'barrier_1',\n    barrier2: 'barrier_2',\n    date_expiry: 'expiry_date',\n};\n\nexport const getProposalErrorField = (response: PriceProposalResponse) => {\n    const error_field: string = getPropertyValue(response, ['error', 'details', 'field']);\n    if (!error_field) {\n        return null;\n    }\n    const error_id = map_error_field[error_field] || error_field;\n    const el_error = document.getElementsByName(error_id)[0];\n    return el_error && isVisible(el_error) ? error_id : null;\n};\n\nexport const getProposalInfo = (\n    store: TTradeStore,\n    response: PriceProposalResponse & TError,\n    obj_prev_contract_basis?: TObjContractBasis\n) => {\n    const proposal: ExpandedProposal = response.proposal || ({} as ExpandedProposal);\n    const profit = (proposal.payout || 0) - (proposal.ask_price || 0);\n    const returns = (profit * 100) / (proposal.ask_price || 1);\n    const stake = proposal.display_value;\n    const basis_list = store.basis_list;\n\n    const contract_basis: TObjContractBasis | undefined =\n        store.is_vanilla || store.is_turbos\n            ? { text: getLocalizedBasis().payout_per_point, value: 'display_number_of_contracts' }\n            : basis_list.find(o => o.value !== store.basis) || ({} as TObjContractBasis);\n\n    const is_stake = contract_basis?.value === 'stake';\n\n    const price = is_stake ? stake : (proposal[contract_basis?.value as keyof ExpandedProposal] as string | number);\n\n    const obj_contract_basis = {\n        text: contract_basis?.text || '',\n        value: price || '',\n    };\n\n    const commission = proposal.commission;\n    const cancellation = proposal.cancellation;\n    const accumulators_details = {\n        ...proposal.contract_details,\n        growth_rate: store.growth_rate,\n        spot_time: proposal.spot_time,\n    };\n\n    return {\n        commission,\n        cancellation,\n        id: proposal.id || '',\n        has_error: !!response.error,\n        has_error_details: !!getProposalErrorField(response),\n        error_code: response?.error?.code,\n        error_field: response?.error?.details?.field,\n        limit_order: proposal.limit_order,\n        message: proposal.longcode || response?.error?.message,\n        obj_contract_basis,\n        payout: proposal.payout,\n        profit: profit.toFixed(getDecimalPlaces(store.currency)),\n        returns: `${returns.toFixed(2)}%`,\n        stake,\n        spot: proposal.spot,\n        validation_params: proposal?.validation_params,\n        ...accumulators_details,\n    };\n};\n\nexport const createProposalRequests = (store: TTradeStore) => {\n    const requests = {} as Record<string, ReturnType<typeof createProposalRequestForContract>>;\n\n    Object.keys(store.trade_types).forEach(type => {\n        const new_req = createProposalRequestForContract(store, type);\n        requests[type] = new_req;\n    });\n\n    return requests;\n};\n\nconst setProposalMultiplier = (store: TTradeStore, obj_multiplier: TObjMultiplier) => {\n    obj_multiplier.multiplier = store.multiplier;\n    obj_multiplier.cancellation = store.has_cancellation ? store.cancellation_duration : undefined;\n\n    obj_multiplier.limit_order = store.has_take_profit || store.has_stop_loss ? {} : undefined;\n\n    if (store.has_take_profit && store.take_profit && obj_multiplier.limit_order) {\n        obj_multiplier.limit_order.take_profit = +store.take_profit || 0; // send positive take_profit to API\n    }\n\n    if (store.has_stop_loss && store.stop_loss && obj_multiplier.limit_order) {\n        obj_multiplier.limit_order.stop_loss = +store.stop_loss || 0; // send positive stop_loss to API\n    }\n};\n\nconst setProposalAccumulator = (store: TTradeStore, obj_accumulator: TObjAccum) => {\n    obj_accumulator.growth_rate = store.growth_rate;\n\n    obj_accumulator.limit_order = store.has_take_profit ? {} : undefined;\n\n    if (store.has_take_profit && store.take_profit && obj_accumulator.limit_order) {\n        obj_accumulator.limit_order.take_profit = +store.take_profit || 0; // send positive take_profit to API\n    }\n};\n\nexport const createProposalRequestForContract = (store: TTradeStore, type_of_contract: string) => {\n    const obj_accumulator: TObjAccum = {};\n    const obj_expiry: TObjExpiry = {};\n    const obj_multiplier: TObjMultiplier = {};\n    let limit_order;\n\n    if (store.expiry_type === 'endtime' && store.expiry_time) {\n        const expiry_date = toMoment(store.expiry_date);\n        obj_expiry.date_expiry = convertToUnix(expiry_date.unix(), store.expiry_time);\n    }\n\n    if (store.contract_type === TRADE_TYPES.MULTIPLIER) {\n        setProposalMultiplier(store, obj_multiplier);\n    }\n\n    if (store.contract_type === TRADE_TYPES.ACCUMULATOR) {\n        setProposalAccumulator(store, obj_accumulator);\n    }\n\n    if (isTurbosContract(store.contract_type) && store.has_take_profit && store.take_profit) {\n        limit_order = { take_profit: +store.take_profit || 0 };\n    }\n\n    return {\n        proposal: 1,\n        subscribe: 1,\n        amount: parseFloat(store.amount.toString()) || 0,\n        basis: store.basis,\n        contract_type: type_of_contract,\n        currency: store.currency,\n        symbol: store.symbol,\n        ...(store.start_date && store.start_time && { date_start: convertToUnix(store.start_date, store.start_time) }),\n        ...(store.expiry_type === 'duration'\n            ? {\n                  duration: parseInt(store.duration.toString()),\n                  duration_unit: store.duration_unit,\n              }\n            : obj_expiry),\n        ...((store.barrier_count > 0 || store.form_components.indexOf('last_digit') !== -1) &&\n            !isAccumulatorContract(type_of_contract) &&\n            !isTurbosContract(type_of_contract) && {\n                barrier: store.barrier || store.barrier_1 || store.last_digit,\n            }),\n        ...(store.barrier_count === 2 && !isAccumulatorContract(type_of_contract) && { barrier2: store.barrier_2 }),\n        ...(isTurbosContract(type_of_contract) && {\n            payout_per_point: store.payout_per_point || store.last_digit,\n        }),\n        limit_order,\n        ...obj_accumulator,\n        ...obj_multiplier,\n    };\n};\n","import ServerTime from '_common/base/server_time';\nimport { toMoment } from '@deriv/shared';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst isBeforeDate = (compare_moment: moment.Moment, should_only_check_hour: boolean, start_moment?: moment.Moment) => {\n    const now_moment = toMoment(start_moment);\n    if (should_only_check_hour) {\n        now_moment.minute(0).second(0);\n    }\n    return compare_moment.isBefore(now_moment) && now_moment.unix() !== compare_moment.unix();\n};\n\nexport const isSessionAvailable = (\n    sessions: ReturnType<typeof useTraderStore>['sessions'] = [],\n    compare_moment: moment.Moment = toMoment(ServerTime.get()),\n    start_moment: moment.Moment = toMoment(ServerTime.get()),\n    should_only_check_hour = false\n) =>\n    !isBeforeDate(compare_moment, should_only_check_hour, ServerTime.get()) &&\n    !isBeforeDate(compare_moment, should_only_check_hour, start_moment) &&\n    (!sessions.length ||\n        !!sessions.find(session =>\n            compare_moment.isBetween(session.open, session.close, should_only_check_hour ? 'hour' : null, '[]')\n        ));\n","import React from 'react';\nimport { StoreProvider } from '@deriv/stores';\nimport { ModulesStoreProvider } from 'Stores/useModulesStores';\nimport type { TCoreStores } from '@deriv/stores/types';\n\nexport const ModulesProvider = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    return (\n        <StoreProvider store={store}>\n            <ModulesStoreProvider>{children}</ModulesStoreProvider>\n        </StoreProvider>\n    );\n};\n\nexport default ModulesProvider;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport ModulesStore from './Modules';\n\nconst ModulesStoreContext = React.createContext<ModulesStore | null>(null);\n\nexport const ModulesStoreProvider = ({ children }: React.PropsWithChildren<unknown>) => {\n    const { modules } = useStore();\n    return <ModulesStoreContext.Provider value={modules as ModulesStore}>{children}</ModulesStoreContext.Provider>;\n};\n\nexport const useModulesStore = () => {\n    const store = React.useContext(ModulesStoreContext);\n\n    if (!store) {\n        throw new Error('useModulesStore must be used within ModulesStoreProvider');\n    }\n\n    return store;\n};\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport TradeStore from './Modules/Trading/trade-store';\n\nconst TraderStoreContext = React.createContext<TradeStore | null>(null);\n\nexport const TraderStoreProvider = ({ children }: React.PropsWithChildren<unknown>) => {\n    const { modules } = useStore();\n    // const memoizedValue = useMemo(() => new TraderStore(), []);\n\n    return <TraderStoreContext.Provider value={modules?.trade}>{children}</TraderStoreContext.Provider>;\n};\n\nexport const useTraderStore = () => {\n    const store = React.useContext(TraderStoreContext);\n\n    if (!store) {\n        throw new Error('useTraderStore must be used within TraderStoreProvider');\n    }\n\n    return store;\n};\n","import { TCoreStores } from '@deriv/stores/types';\nimport { PromiseUtils } from '@deriv-com/utils';\nimport moment from 'moment';\n\nconst ServerTime = (() => {\n    let clock_started = false;\n    const pending = PromiseUtils.createPromise<moment.Moment>();\n    let common_store: TCoreStores['common'];\n\n    const init = (store: TCoreStores['common']) => {\n        if (!clock_started) {\n            common_store = store;\n            pending.resolve?.(common_store.server_time);\n            clock_started = true;\n        }\n    };\n\n    const get = () => (clock_started && common_store.server_time ? common_store.server_time.clone() : undefined);\n\n    return {\n        init,\n        get,\n        timePromise: () => (clock_started ? Promise.resolve(common_store.server_time) : pending.promise),\n    };\n})();\n\nexport default ServerTime;\n","import React from 'react';\nimport { StoreProvider } from '@deriv/stores';\nimport { TraderStoreProvider } from 'Stores/useTraderStores';\nimport type { TCoreStores } from '@deriv/stores/types';\n\nexport const TraderProviders = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    return (\n        <StoreProvider store={store}>\n            <TraderStoreProvider>{children}</TraderStoreProvider>\n        </StoreProvider>\n    );\n};\n\nexport default TraderProviders;\n","/** check is stringified object or not */\nexport const safeParse = (s: string) => {\n    try {\n        return JSON.parse(s);\n    } catch (error) {\n        return s;\n    }\n};\n\n/**\n * Retrieves the value stored in localStorage for the given key.\n * @param {string} key - The localStorage key.\n * @returns {any} - The value stored in localStorage for the given key, or null if the key does not exist or has no value.\n */\n/**\n * @deprecated Please use 'LocalStorageUtils.getValue' from '@deriv-com/utils' instead of this.\n */\nexport const getLocalStorage = (key: string) => {\n    const data = localStorage.getItem(key);\n    return data ? safeParse(data) : null;\n};\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Analytics } from '@deriv-com/analytics';\n\nconst waitForGrowthbook = () => {\n    return new Promise(resolve => {\n        const startTime = Date.now();\n\n        const checkAnalytics = async () => {\n            // This is a fallback incase growthbook experience an error and never gets loaded\n            if (Date.now() - startTime >= 10000) {\n                resolve(false);\n                return;\n            }\n\n            if (typeof Analytics !== 'undefined') {\n                if (Analytics.getInstances()?.ab !== undefined) {\n                    resolve(true);\n                } else {\n                    const gbState = await Analytics?.getGrowthbookStatus();\n\n                    if (gbState?.isLoaded) {\n                        resolve(true);\n                    } else {\n                        setTimeout(checkAnalytics, 50);\n                    }\n                }\n            } else {\n                setTimeout(checkAnalytics, 50);\n            }\n        };\n\n        checkAnalytics();\n    });\n};\n\nconst getFeatureFlag = async (feature: string, defaultValue?: string | boolean | undefined) => {\n    let enabled = false;\n\n    if (typeof window?.GrowthbookFeatures === 'undefined') {\n        window.GrowthbookFeatures = {};\n    }\n\n    // Avoid rechecks and return previous result immediately\n    if (typeof window.GrowthbookFeatures[feature] !== 'undefined') {\n        return window.GrowthbookFeatures[feature];\n    }\n\n    const isSuccessfullyLoaded = await waitForGrowthbook();\n\n    if (Analytics && Analytics?.getGrowthbookStatus && isSuccessfullyLoaded) {\n        const gbState = await Analytics?.getGrowthbookStatus();\n\n        // If Growthbook has config error, down or encountering issues, feature flag will default to false\n        if (gbState.isLoaded && gbState.status?.success) {\n            enabled = Analytics?.getFeatureValue(feature, !!defaultValue);\n        }\n    }\n\n    window.GrowthbookFeatures[feature] = enabled;\n\n    return enabled;\n};\n\nexport default getFeatureFlag;\n","/* This utility function is responsible to pop out currently\n enabled widget based on growthbook feature flag */\n\nimport getFeatureFlag from './getFeatureFlag';\n\nconst Chat = {\n    isFreshChat: async () => getFeatureFlag('enable_freshworks_live_chat'),\n    isIntercom: async () => getFeatureFlag('enable_intercom'),\n\n    getFlags: async () => {\n        try {\n            const [isFreshChat, isIntercom] = await Promise.all([Chat.isFreshChat(), Chat.isIntercom()]);\n            return { isFreshChat, isIntercom };\n        } catch (_error) {\n            return { isFreshChat: false, isIntercom: false };\n        }\n    },\n\n    open: async () => {\n        const isFreshChat = await Chat.isFreshChat();\n        const isIntercom = await Chat.isIntercom();\n\n        if (isFreshChat) {\n            window.fcWidget?.open();\n        } else if (isIntercom) {\n            window.Intercom('show');\n        } else {\n            window.LiveChatWidget?.call('maximize');\n        }\n    },\n\n    clear: async () => {\n        const { isFreshChat, isIntercom } = await Chat.getFlags();\n        if (isFreshChat) {\n            window.fcWidget?.user.clear();\n        } else if (isIntercom && window.Intercom) {\n            window.Intercom('shutdown');\n            window.DerivInterCom.initialize({\n                hideLauncher: true,\n                token: null,\n            });\n        }\n    },\n\n    close: async () => {\n        const { isFreshChat, isIntercom } = await Chat.getFlags();\n\n        if (isFreshChat) {\n            window.fcWidget?.close();\n        } else if (isIntercom) {\n            window.Intercom('hide');\n        } else {\n            window.LiveChatWidget?.call('hide');\n        }\n    },\n};\n\nexport default Chat;\n","import Cookies from 'js-cookie';\n\nimport { requestSessionActive } from '@deriv-com/auth-client';\n\nimport Chat from './chat';\nimport isTmbEnabled from './isTmbEnabled';\n\ntype TMBApiReturnedValue = {\n    tokens?: {\n        loginid: string;\n        token: string;\n        cur: string;\n    };\n    active?: boolean;\n};\n\nconst domains = ['deriv.com', 'deriv.dev', 'binary.sx', 'pages.dev', 'localhost', 'deriv.be', 'deriv.me'];\nfunction endChat() {\n    window.LC_API?.close_chat?.();\n    window.LiveChatWidget?.call('hide');\n    window.fcWidget?.close();\n    Chat.clear();\n}\nconst currentDomain = window.location.hostname.split('.').slice(-2).join('.');\n\nconst handleLogout = async () => {\n    localStorage.removeItem('closed_toast_notifications');\n    localStorage.removeItem('is_wallet_migration_modal_closed');\n    localStorage.removeItem('active_wallet_loginid');\n    localStorage.removeItem('config.account1');\n    localStorage.removeItem('config.tokens');\n    localStorage.removeItem('verification_code.system_email_change');\n    localStorage.removeItem('verification_code.request_email');\n    localStorage.removeItem('new_email.system_email_change');\n    localStorage.removeItem('active_loginid');\n    localStorage.removeItem('clientAccounts');\n    Object.keys(sessionStorage)\n        .filter(key => key !== 'trade_store')\n        .forEach(key => sessionStorage.removeItem(key));\n    endChat();\n    if (domains.includes(currentDomain)) {\n        Cookies.set('logged_state', 'false', {\n            domain: currentDomain,\n            expires: 30,\n            path: '/',\n            secure: true,\n        });\n    }\n    // window.open(oauthUrl, '_self');\n};\n\n// Helper function to set account in session storage\nconst setAccountInSessionStorage = (loginid?: string, isWallet = false) => {\n    if (!loginid) return;\n\n    const key = isWallet ? 'active_wallet_loginid' : 'active_loginid';\n    sessionStorage.setItem(key, loginid);\n};\n\nconst getActiveSessions = async () => {\n    try {\n        const data = await requestSessionActive();\n\n        return data;\n    } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to get active sessions', error);\n    }\n};\n\nconst getActiveAccounts = async () => {\n    const is_tmb_enabled = await isTmbEnabled();\n\n    if (!is_tmb_enabled) {\n        return undefined;\n    }\n\n    const activeSessions = await getActiveSessions();\n\n    if (!activeSessions?.active) {\n        handleLogout();\n        return undefined;\n    }\n\n    if (activeSessions?.active) {\n        const localStorageClientAccounts = localStorage.getItem('clientAccounts');\n        const activeSessionTokens = JSON.stringify(activeSessions?.tokens);\n        const shouldReinitializeClientStore = localStorageClientAccounts !== activeSessionTokens;\n\n        if (shouldReinitializeClientStore) {\n            localStorage.removeItem('client.accounts');\n        }\n\n        localStorage.setItem('clientAccounts', activeSessionTokens);\n\n        // Get account from URL params and set the loginid to session storage\n        const params = new URLSearchParams(location.search);\n        let account = params.get('account');\n        const loginID =\n            params.get('loginid') ||\n            sessionStorage.getItem('active_wallet_loginid') ||\n            sessionStorage.getItem('active_loginid');\n\n        // If no account in params, determine from first available account\n        if (!account && !loginID && activeSessions?.tokens?.length > 0) {\n            const firstAccount = activeSessions.tokens[0];\n\n            // Set account based on account type (demo or real)\n            account = firstAccount.loginid.startsWith('VR') ? 'demo' : firstAccount.cur;\n\n            // Update URL params to reflect the selected account\n            params.set('account', account ?? '');\n            const newUrl = `${window.location.pathname}?${params.toString()}${window.location.hash}`;\n            window.history.replaceState({}, '', newUrl);\n        } else if (!account && loginID && activeSessions?.tokens?.length > 0) {\n            // Handle case where loginID is provided in query params\n            const matchingToken = activeSessions.tokens.find(token => token.loginid === loginID);\n\n            if (matchingToken) {\n                // Set account based on the loginID's currency and type\n                account = matchingToken.loginid.startsWith('VR') ? 'demo' : matchingToken.cur;\n\n                // Update URL params to reflect the selected account\n                params.set('account', account ?? '');\n                const newUrl = `${window.location.pathname}?${params.toString()}${window.location.hash}`;\n                window.history.replaceState({}, '', newUrl);\n            } else {\n                const firstAccount = activeSessions.tokens[0];\n\n                // Set account based on account type (demo or real)\n                account = firstAccount.loginid.startsWith('VR') ? 'demo' : firstAccount.cur;\n\n                // Update URL params to reflect the selected account\n                params.set('account', account ?? '');\n                const newUrl = `${window.location.pathname}?${params.toString()}${window.location.hash}`;\n                window.history.replaceState({}, '', newUrl);\n            }\n        }\n\n        if (account?.toLocaleUpperCase() === 'DEMO') {\n            // Handle account selection based on type (demo or real)\n            // For demo accounts, find virtual accounts with USD currency\n            const demoAccount = activeSessions?.tokens?.find(\n                item => item?.cur?.toLocaleUpperCase() === 'USD' && item.loginid.startsWith('VRTC')\n            );\n\n            const demoWalletAccount = activeSessions?.tokens?.find(\n                item => item?.cur?.toLocaleUpperCase() === 'USD' && item.loginid.startsWith('VRW')\n            );\n\n            if (!demoAccount && (sessionStorage.getItem('active_loginid') || localStorage.getItem('active_loginid'))) {\n                sessionStorage.removeItem('active_loginid');\n                localStorage.removeItem('active_loginid');\n            }\n\n            if (\n                !demoWalletAccount &&\n                (sessionStorage.getItem('active_wallet_loginid') || localStorage.getItem('active_wallet_loginid'))\n            ) {\n                sessionStorage.removeItem('active_wallet_loginid');\n                localStorage.removeItem('active_wallet_loginid');\n            }\n\n            setAccountInSessionStorage(demoAccount?.loginid);\n            setAccountInSessionStorage(demoWalletAccount?.loginid, true);\n        } else {\n            // For real accounts, find accounts matching the selected currency\n            const realAccount = activeSessions?.tokens?.find(\n                item =>\n                    item?.cur?.toLocaleUpperCase() === account?.toLocaleUpperCase() &&\n                    ((item?.loginid.startsWith('CR') && !item?.loginid.startsWith('CRW')) ||\n                        (item?.loginid.startsWith('MF') && !item.loginid.startsWith('MFW')))\n            );\n\n            const realWalletAccount = activeSessions?.tokens?.find(\n                item =>\n                    item?.cur?.toLocaleUpperCase() === account?.toLocaleUpperCase() &&\n                    (item?.loginid.startsWith('CRW') || item?.loginid.startsWith('MFW'))\n            );\n\n            // Check if stored loginid exists in active sessions before removing\n            const storedLoginid = sessionStorage.getItem('active_loginid') || localStorage.getItem('active_loginid');\n            const storedWalletLoginid =\n                sessionStorage.getItem('active_wallet_loginid') || localStorage.getItem('active_wallet_loginid');\n\n            const storedLoginidExists =\n                storedLoginid && activeSessions?.tokens?.some(token => token.loginid === storedLoginid);\n            const storedWalletLoginidExists =\n                storedWalletLoginid && activeSessions?.tokens?.some(token => token.loginid === storedWalletLoginid);\n\n            if (!realAccount && storedLoginid && !storedLoginidExists) {\n                sessionStorage.removeItem('active_loginid');\n                localStorage.removeItem('active_loginid');\n            }\n\n            if (!realWalletAccount && storedWalletLoginid && !storedWalletLoginidExists) {\n                sessionStorage.removeItem('active_wallet_loginid');\n                localStorage.removeItem('active_wallet_loginid');\n            }\n\n            // If we have a stored loginid that exists in active sessions, use that instead of realAccount\n            const accountToUse = realAccount ?? activeSessions?.tokens?.find(token => token.loginid === storedLoginid);\n            const walletAccountToUse =\n                realWalletAccount ?? activeSessions?.tokens?.find(token => token.loginid === storedWalletLoginid);\n\n            setAccountInSessionStorage(accountToUse?.loginid);\n            setAccountInSessionStorage(walletAccountToUse?.loginid, true);\n        }\n\n        const convertedResult = {};\n\n        activeSessions.tokens.forEach((account: TMBApiReturnedValue['tokens'], index: number) => {\n            const num = index + 1;\n            account?.loginid && ((convertedResult as Record<string, string>)[`acct${num}`] = account.loginid);\n            account?.token && ((convertedResult as Record<string, string>)[`token${num}`] = account.token);\n            account?.cur && ((convertedResult as Record<string, string>)[`cur${num}`] = account.cur);\n        });\n\n        return shouldReinitializeClientStore ? convertedResult : undefined;\n    }\n};\n\nexport default getActiveAccounts;\n"],"names":["createContext","FLAGS","dtrader_v2_mobile","dtrader_v2_desktop","next_qs","sharkfin","wallet","FeatureFlagsStore","_BaseStore","_this","_classCallCheck","instance","cleanup","_callSuper","data","update","Object","keys","length","old","forEach","flag","undefined","_inherits","key","value","this","unmount","BaseStore","name","onHydrationDone","makeObservable","observable","action","bound","makePersistable","properties","storage","window","localStorage","then","Function","stopPersisting","_ref","children","store","memoizedValue","useMemo","is_mock","_objectSpread","feature_flags","useEffect","values","_typeof","React","StoreContext","Provider","useContext","Error","sendDtraderV2OpenToAnalytics","cacheTrackEvents","loadEvent","event","sendSelectedTradeTypeToAnalytics","trade_name","subform_name","market_name","trade_type_count","sendOpenGuideToAnalytics","sendMarketTypeToAnalytics","sendDtraderV2PurchaseToAnalytics","contract_id","sendDtraderPurchaseToAnalytics","BounceUp","animate","y","opacity","initial","transition","type","stiffness","damping","duration","Bounce","className","is_visible","keyname","motion","div","SlideInFromTop","SlideInFromBottom","SlideIn","getBarrierLabel","contract_info","isDigitType","contract_type","localize","isVanillaContract","getBarrierValue","digitTypeMap","barrier","addComma","test","toLowerCase","_defineProperty","CONTRACT_TYPES","MATCH_DIFF","DIFF","EVEN_ODD","EVEN","MATCH","ODD","OVER_UNDER","OVER","UNDER","filterByContractType","_ref2","trade_contract_type","_getContractTypesConf","shortcode","is_call_put","isCallPut","is_high_low","isHighLow","is_vanilla","CALL","CALLE","PUT","PUTE","trade_types","getContractTypesConfig","match","includes","TRADE_TYPES","HIGH_LOW","_regeneratorRuntime","e","t","r","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","resolve","__await","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","onChangeSymbolAsync","_callee","symbol","_context","ContractType","buildContractTypesConfig","arguments","apply","_next","_throw","_x","getValidationRules","amount","rules","message","min","barrier_1","condition","barrier_count","form_components","indexOf","func","options","inputs","Number","barrier_2","_inputs$barrier_","input","trigger","_inputs$barrier_2","_inputs$barrier_3","start_date","expiry_date","start_time","contract_start_type","isTimeValid","isHourValid","isMinuteValid","_value$split","start_moment","toMoment","start_moment_clone","clone","_slicedToArray","split","m","isSessionAvailable","sessions","hour","minute","expiry_time","_value$split2","_ref4","getMultiplierValidationRules","stop_loss","has_stop_loss","take_profit","has_take_profit","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","getOwnPropertyDescriptors","defineProperties","toPrimitive","String","_toPrimitive","_toPropertyKey","processPurchase","proposal_id","price","passthrough","WS","buy","_x2","_x3","onChangeContractTypeList","root_store","contract_types_list","contract_types_list_v2","list","isDtraderV2MobileEnabled","ui","is_mobile","isDtraderV2DesktopEnabled","is_desktop","getContractType","onChangeContractType","getContractValues","onChangeExpiry","contract_expiry_type","getExpiryType","getBarriers","assertDuration","duration_min_max","duration_unit","prev_duration_unit","duration_units_list","_getDurationMinMaxVal2","getDurationMinMaxValues","max","map","unit","_asyncToGenerator","onChangeStartDate","_store$root_store","server_time","expiry_type","obj_contract_start_type","obj_sessions","obj_start_time","obj_duration_units_list","obj_duration_unit","obj_expiry_type","obj_expiry_date","obj_duration_min_max","common","add","format","getStartType","getSessions","getStartTime","getDurationUnitsList","getDurationUnit","getExpiryDate","getDurationMinMax","_callee2","trading_times","obj_market_open_times","obj_market_close_times","market_close_times","obj_expiry_time","_context2","getTradingTimes","market_open_times","open","close","getExpiryTime","processInSequence","functions","snapshot","getSnapshot","t0","t1","t2","assign","updateStore","processTradeParams","new_state","duration_functions","getMethodsList","getExpiryMethodsList","is_trade_enabled","is_trade_enabled_v2","_x4","filtered_keys","old_duration_unit","ContractTypeHelper","getContractCategories","concat","_toConsumableArray","StartDate","Duration","_defineProperties","clientInitDisposer","client_init_listener","logoutDisposer","logout_listener","local_storage_properties","networkStatusChangeDisposer","network_status_change_listener","partial_fetch_time","preSwitchAccountDisposer","pre_switch_account_listener","realAccountSignupEndedDisposer","real_account_signup_ended_listener","session_storage_properties","store_name","switchAccountDisposer","switch_account_listener","themeChangeDisposer","theme_change_listener","validation_errors","validation_rules","retrieveFromStorage","setValidationErrorMessages","setValidationRules","addRule","validateProperty","validateAllProperties","onSwitchAccount","onPreSwitchAccount","onLogout","onClientInit","onNetworkStatusChange","onThemeChange","onRealAccountSignupEnd","disposePreSwitchAccount","disposeSwitchAccount","disposeLogout","disposeClientInit","disposeNetworkStatusChange","disposeThemeChange","disposeRealAccountSignupEnd","onUnmount","assertHasValidCache","setTimeout","setupReactionForLocalStorage","setupReactionForSessionStorage","toJS","isEmptyObject","reduce","result","_this2","reaction","saveToStorage","STORAGES","LOCAL_STORAGE","_this3","SESSION_STORAGE","JSON","stringify","setItem","sessionStorage","_this4","local_storage_snapshot","parse","getItem","session_storage_snapshot","k","propertyName","messages","_this5","x","_this6","property","_this7","intercept","change","newValue","_this$validation_rule","_this8","validation_rules_for_property","validation_rules_for_trigger","validator","Validator","isPassed","errors","get","_this9","error","listener","_this10","when","client","switch_broadcast","_this10$switch_accoun","switchEndSignal","isProduction","console","_this11","pre_switch_broadcast","_this11$pre_switch_ac","setPreSwitchAccount","_this12","has_logged_out","_this12$logout_listen","setLogout","_this13","initialized_broadcast","_this13$client_init_l","setInitialized","_this14","is_network_online","is_online","_this14$network_statu","_this15","is_dark_mode_on","_this15$theme_change_","_this16","has_real_account_signup_ended","_this16$real_account_","setRealAccountSignupEnd","loginid","_len","reactions","Array","_key","act","freeze","ACTION","STATE_TYPES","SUBFORM_NAME","getChartAnalyticsData","state","option","indicator_type_form_events","market_type_form_events","_option$chart_type_na","chart_type_name","payload","time_interval_name","event_type","getChartTypeFormAnalyticsData","_option$indicator_typ","indicator_type_name","_option$indicators_ca","indicators_category_name","is_info_open","is_open","search_string","indicators_subform","info_open_close_action","open_close_action","getIndicatorTypeFormAnalyticsData","is_favorite","_option$symbol_catego","symbol_category","tab_market_name","_option$symbol","market_type_name","favorites_action","getMarketTypeFormAnalyticsData","_getPrototypeOf","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","Boolean","valueOf","bind","_setPrototypeOf","g_subscribers_map","TradeStore","is_trade_component_mounted","is_purchase_enabled","is_equal","has_equals_only","is_market_closed","previous_symbol","active_symbols","has_symbols_for_v2","prev_contract_type","non_available_contract_types_list","trade_type_tab","basis","basis_list","currency","default_stake","stake_boundary","expiry_epoch","saved_expiry_date_v2","unsaved_expiry_date_v2","main_barrier","barriers","barrier_choices","payout_choices","start_dates_list","validation_params","digit_stats","last_digit","is_mobile_digit_view_selected","tick_data","proposal_info","purchase_info","is_chart_loading","should_show_active_symbols_loading","accumulator_range_list","growth_rate","maximum_payout","maximum_ticks","ticks_history_stats","tick_size_barrier_percentage","multiplier","multiplier_range_list","has_cancellation","open_payout_wheelpicker","commission","cancellation_price","stop_out","expiration","hovered_contract_type","cancellation_duration","cancellation_range_list","cached_multiplier_cancellation_list","ref","long_barriers","short_barriers","payout_per_point","strike_price_choices","is_trade_params_expanded","v2_params_initial_values","debouncedSetChartStatus","debounce","status","runInAction","debouncedProposal","requestProposal","proposal_requests","is_purchasing_contract","initial_barriers","is_initial_barrier_applied","is_digits_widget_active","should_skip_prepost_lifecycle","clearContracts","contract_trade","contracts","setMainBarrier","barrier2","isBarrierSupported","ChartBarrierStore","onChartBarrierChange","color","BARRIER_COLORS","BLUE","not_draggable","is_turbos","onPurchase","disablePurchaseButtons","el_purchase_value","document","getElementsByClassName","el_purchase_buttons","el","classList","prev_chart_layout","wsSubscribe","req","callback","passthrough_callback","args","granularity","ohlc","pip_size","setTickData","quote","is_accumulator","current_spot_data","_ref3","tick","epoch","current_spot","current_spot_time","history","prices","times","echo_req","ticks_history","previous_spot_time","is_switching","barriers_data","accumulator_barriers_data","barrier_spot_distance","barrier_spot_distance_num","parseFloat","accumulators_high_barrier","accumulators_low_barrier","updateAccumulatorBarriersData","isMarketClosed","subscribe","getTicksHistory","subscriber","subscribeTicksHistory","wsForget","_g_subscribers_map$ke","unsubscribe","wsForgetStream","stream_id","forgetStream","wsSendRequest","ServerTime","timePromise","msg_type","time","unix","is_logged_in","authorized","activeSymbols","tradingTimes","send","setSavedExpiryDateV2","setUnsavedExpiryDateV2","has_open_accu_contract","computed","is_dtrader_v2","is_dtrader_v2_mobile","is_dtrader_v2_desktop","is_synthetics_trading_market_available","setDefaultStake","setDefaultGrowthRate","setDigitStats","togglePayoutWheelPicker","accountSwitcherListener","barrier_pipsize","barriers_flattened","changeDurationValidationRules","chartStateChange","clearLimitOrderBarriers","clearPurchaseInfo","clientInitListener","clearV2ParamsInitialValues","processContractsForV2","enablePurchase","exportLayout","forgetAllProposal","getFirstOpenMarket","has_alternative_source","initAccountCurrency","is_multiplier","is_symbol_in_active_symbols","is_synthetics_available","is_vanilla_fx","loadActiveSymbols","logoutListener","main_barrier_flattened","networkStatusChangeListener","onAllowEqualsChange","onChange","onChangeMultiple","onHoverPurchase","onMount","onProposalResponse","onPurchaseV2","override","prepareTradeStore","preSwitchAccountListener","pushPurchaseDataToGtm","refresh","resetAccumulatorData","resetErrorServices","resetPreviousSymbol","setActiveSymbols","setActiveSymbolsV2","setBarrierChoices","setPayoutChoices","setChartModeFromURL","setChartStatus","setContractTypes","setContractTypesListV2","setDefaultSymbol","setIsTradeParamsExpanded","setIsDigitsWidgetActive","setMarketStatus","getTurbosChartBarrier","setMobileDigitView","setPreviousSymbol","setSkipPrePostLifecycle","setStakeBoundary","setTradeTypeTab","setTradeStatus","setV2ParamsInitialValues","show_digits_stats","updateSymbol","setPayoutPerPoint","_safeParse","urlContractType","URLSearchParams","location","search","tradeStoreString","tradeStoreObj","safeParse","isValidContractType","categories","flatMap","some","toggleUrlUnavailableModal","_safeParse2","urlSymbol","isValidSymbol","_this$contract_type","RISE_FALL","date","resetEndTimeOnVolatilityIndices","setTradeURLParams","notifications","removeTradeNotifications","portfolio","setContractType","contractType","current_language","symbol_info","exchange_is_open","open_accu_contract","active_positions","find","_ref5","isAccumulatorContract","underlying","clearAccumulatorBarriersData","_ref6","should_skip","_loadActiveSymbols","_r$error","should_set_default_symbol","should_show_loading","_getTradeURLParams","hasSymbolChanged","symbol_to_update","_args","getTradeURLParams","showModal","is_logging_in","contractsFor","code","pickDefaultSymbol","processNewValuesAsync","_setDefaultSymbol","_setActiveSymbols","_callee3","is_on_mf_account","showError","_yield$WS$authorized$","_context3","landing_company_shortcode","wait","showDigitalOptionsUnavailableError","text","title","platform_name_trader","getPlatformSettings","link","platform_name_mt5","showUnavailableLocationError","_processContractsForV","_callee4","contract_categories","_context4","_setContractTypes","_callee5","_contractType2","_contractType3","_contractType4","_context5","_contractType","_getTradeURLParams2","contractTypeParam","_this5$root_store$cli","setSelectedContractType","_prepareTradeStore","_callee7","_args7","_context7","is_populating_account_list","_callee6","_context6","default_currency","_onChangeMultiple","_callee8","_context8","_onChange","_callee9","_e$target","_context9","target","selectCurrency","_resetPreviousSymbol","_callee10","_context10","is_over","updateBarrierShade","setLimitOrderBarriers","getBarrierPipSize","isDigitTradeType","_onPurchaseV","_callee11","trade_type","isMobile","_this$proposal_info","info","_context11","proposal_info_keys","proposal_request_keys","id","stake","_x5","is_tick_contract","response","_this10$root_store$co","_this10$root_store$co2","setServicesError","services_error","removeItem","contract_data","buy_price","_response$buy","longcode","_category$toUpperCase","_extractInfoFromShort","extractInfoFromShortcode","category","is_digit_contract","isDigitContractType","toUpperCase","isMultiplierContract","is_call","is_put","shortcode_info","higher_lower_contact","LOWER","rise_fall_contract","FALL","HIGHER","RISE","call_put_contract","hj","event_string","addContract","onBuyResponse","openPositionsDrawer","extracted_info_from_shortcode","getCurrencyDisplayCode","formatted_stake","getCardLabelsV2","STAKE","formatMoney","pathname","routes","trade","getTradeNotificationMessage","redirectTo","getContractPath","addTradeNotification","purchase_time","scrollContainer","querySelector","scrollTo","top","scrollHeight","behavior","is_unwelcome","cloneObject","parseInt","_processNewValuesAsync","_callee12","obj_new_values","is_changed_by_user","obj_old_values","should_forget_first","_ref8","prev_chart_type","prev_granularity","chart_type","savePreviousChartMode","updateChartType","updateGranularity","_obj_new_values$curre","_obj_new_values$curre2","_obj_new_values$curre4","prev_currency","has_currency_changed","should_reset_stake","_obj_new_values$curre3","has_only_forward_starting_contracts","_obj_new_values$symbo","_obj_new_values$symbo2","_args12","_context12","RISE_FALL_EQUAL","isCryptocurrency","getMinPayout","setHasOnlyForwardingContracts","is_advanced_duration","_this$active_symbols","item","market","_this$active_symbols2","subgroup","bool","bom_ui","contract","barrier1","date_expiry","date_start","payout","settings","theme","positions_drawer","is_positions_drawer_on","chart","toolbar_position","is_chart_layout_default","chart_asset_info","is_chart_asset_info_visible","gtm","pushDataLayer","requests","createProposalRequests","subscribeProposal","resetPurchaseStates","forgetAll","_response$proposal","_response$proposal$co","_response$proposal2","_response$proposal3","_response$proposal3$c","proposal","contract_details","spot","toFixed","_response$proposal4","_this$proposal_info2","_this$main_barrier","_this$hovered_contrac","prev_proposal_info","getPropertyValue","obj_prev_contract_basis","is_crypto_multiplier","getProposalInfo","MULTUP","_limit_order$stop_out","_this$proposal_info$M","cancellation","limit_order","ask_price","order_amount","ACCU","_this$proposal_info$A","_this$proposal_info$A2","ticks_stayed_in","_this$proposal_info$A3","last_tick_epoch","_this$proposal_info$A4","high_barrier","low_barrier","spot_time","_previous_ticks_histo","_ref$previous_ticks_h","previous_ticks_history_stats","_ref$new_ticks_histor","new_ticks_history_stats","previous_history","previous_epoch","getUpdatedTicksHistoryStats","shade","chart_barrier","_response$error$detai","_response$error$detai3","error_id","getProposalErrorField","_response$error","details","commission_match","field","_response$error$detai2","max_stake","min_stake","previous_barrier","findClosestBarrierValue","payout_per_point_choices","_response$error$detai4","payoutIndex","Math","floor","_response$proposal5","_ref10","_response$proposal6","_ref11","index","findIndex","limits","_this$validation_rule2","duration_options","convertDurationLimit","_accountSwitcherListener","_callee14","_context14","is_language_changing","_callee13","_context13","_logoutListener","_callee15","_context15","toggleServicesErrorModal","_this$root_store$cont","chartType","setShouldShowPopups","_callee16","_context16","_getTradeURLParams3","chartTypeParam","granularityParam","_this$root_store$cont2","urlParams","isFromChart","_initAccountCurrency","_callee17","new_currency","_context17","_x6","is_notifications_visible","toggleNotificationsModal","is_used","layout","MULTIPLIER","startsWith","previousMaxTicks","isDone","isClosed","_ref14","form_name","hasBarrier","ACCUMULATOR","isTurbosContract","isVanillaFxContract","isTouchContract","_getFirstOpenMarket","_callee18","markets_to_search","_this$active_symbols3","_yield$WS$authorized$2","_context18","findFirstOpenMarket","_x7","current_value","isRelative","current_numeric","closest","choice","choice_numeric","abs","stored_barriers_data","getContractSubtype","val","is_active","label","PositionsStore","openContractTypeFilter","closedContractTypeFilter","filteredContractTypes","timeFilter","customTimeRangeFilter","dateFrom","dateTo","setClosedContractTypeFilter","setOpenContractTypeFilter","setTimeFilter","setCustomTimeRangeFilter","setDateFrom","setDateTo","contractTypes","getFilteredContractTypes","newTimeFilter","newCustomTimeFilter","newDateFrom","newDateTo","MarketsStore","favoriteIndicators","favoriteSymbols","setFavoriteSymbols","setFavoriteIndicators","removeFavoriteSymbol","removeFavoriteIndicator","existingFavorites","indicators","syncLocalStorage","symbols","indicator","favIndicator","favSymbol","favorites","ModulesStore","_createClass","core_store","positions","markets","cashier","modules","RootStore","contract_replay","chart_barrier_store","configure","enforceActions","isolateGlobalState","websocket","init","setWebsocket","DEFAULT_DATE_FORMATTING_CONFIG","day","month","year","TAB_NAME","OPEN","CLOSED","filterPositions","splittedFilter","flat","config","getSupportedContracts","main_title","contractTypesConfig","CONTRACT_LIST","ACCUMULATORS","VANILLAS","VANILLA","TURBOS","LONG","SHORT","MULTIPLIERS","DOWN","UP","HIGHER_LOWER","TOUCH_NO_TOUCH","TOUCH","NO_TOUCH","ONE_TOUCH","MATCHES_DIFFERS","_contractTypesConfig2","Set","getProfit","_profit_loss$replaceA","_profit_loss","profit_loss","replaceAll","getTotalProfit","profit","getTotalPositionsProfit","sum","setPositionURLParams","tab_name","searchParams","set","toString","newQuery","replaceState","DURATION_UNIT","DAYS","TICKS","MINUTES","HOURS","SECONDS","getTradeParams","allow_equals","trade_type_tabs","accu_info_display","risk_management","mult_info_display","shouldShowExpiration","barrier_info","strike","payout_per_point_info","isDigitContractWinning","selected_digit","current_digit","win_conditions","focusAndOpenKeyboard","focused_input","main_input","style","display","focus","preventScroll","click","getTradeTypeTabsList","is_touch","is_displayed","isSmallScreen","innerHeight","addUnit","_ref3$unit","_ref3$should_add_spac","should_add_space","getSnackBarText","switching_cancellation","switching_tp_sl","Localize","i18n_default_text","getClosestTimeToCurrentGMT","interval","now","Date","setMinutes","getMinutes","_formattedTime$split$2","Intl","DateTimeFormat","hour12","timeZone","hours","minutes","setUTCHours","setUTCMinutes","roundedMinutes","ceil","getUTCMinutes","getUTCHours","newHours","padStart","newMinutes","getOptionPerUnit","startValue","endValue","singularLabel","pluralLabel","intraday","daily","start","end","labelSingle","labelPlural","from","_","getSmallestDuration","obj","durationUnits","smallestValueInSeconds","Infinity","smallestUnit","_i","_keysPriority","convertedValue","getDatePickerStartDate","_server_time$toISOStr","minDurationDate","getMinDuration","_duration_min_max$dai","server_date","getTime","parsedDate","today","daysInMonth","getUTCFullYear","getUTCMonth","getDate","setUTCDate","getUTCDate","toDate","hasIntradayDurationUnit","toISOString","substr","dateObj","second","setUTCSeconds","setMinTime","getProposalRequestObject","_ref7","_ref7$new_values","new_values","_ref7$should_subscrib","should_subscribe","trade_store","request","createProposalRequestForContract","getPayoutInfo","_proposal_error_messa","_message$match","has_error","_ref8$message","_ref8$payout","error_field","float_number_search_regex","is_error_matching","proposal_error_message","error_payout","contract_payout","validation_payout","error_max_payout","max_payout","getSortedIndex","getContractTypePosition","AVAILABLE_CONTRACTS","tradeType","for","getTradeTypesList","available_trade_types","getAvailableContractTypes","unsupported_contract_types_list","getCategoriesSortedByKey","contract_types","getDisplayedContractTypes","sort","b","sortCategoriesInTradeTypeOrder","is_latest","is_lost","is_selected","is_won","percentage","display_percentage","classNames","is_selected_winning","Text","size","align","weight","is_max","is_min","w","width","height","viewBox","cx","cy","fill","stroke","strokeWidth","strokeOpacity","strokeDasharray","join","strokeDashoffset","observer","has_entry_spot","onSelect","latest_digit","stats","onLastDigitSpot","digit","is_digit_selectable","is_digit_selected","onClick","LastDigitStat","DesktopWrapper","DigitSpot","Digit","is_trade_page","position","transform","left","Icon","icon","custom_color","display_array","digits","digits_info","dimension","is_ended","onDigitChange","digit_offset","digit_offset_mobile","handleSelect","digit_value","isSelectableDigitType","getOffset","last_contract_digit","latest_tick_pip_size","latest_tick_quote_price","latest_tick_digit","idx","DigitDisplay","num","barrier_map","DIGITMATCH","DIGITDIFF","DIGITOVER","DIGITUNDER","DIGITODD","DIGITEVEN","LastDigitPointer","DigitsWrapper","digits_array","display_status","onChangeStatus","props","_objectWithoutProperties","_excluded","has_contract","is_tick_ready","is_contract_elapsed","isContractElapsed","tick_stream","_t$tick_display_value","ask","bid","tick_display_value","current_tick","LastDigitPrediction","entry_tick","Digits","underlying_name","_React$useState2","setStatus","_React$useState4","setCurrentTick","_React$useState6","setSpot","_React$useState8","setIsSelectedWinning","_React$useState10","setIsWon","_React$useState12","setIsLost","isMounted","useIsMounted","useDevice","_extends","params","Popover","alignment","classNameBubble","margin","getMarketNamesMap","zIndex","PageError","header","error_code","redirect_urls","redirect_labels","classNameImage","image_url","getUrlBase","ACTIONS","AccumulatorsProfitLossText","_prev_profit$current","_ref$className","profit_value","should_show_profit_percentage","is_fading_in","setIsFadingIn","is_sliding","setIsSliding","formatted_profit","prev_profit_tenth","current","current_profit_tenth","setCurrentProfitTenth","profit_tenth_ref","interval_id_ref","fading_in_timeout_id","sliding_timeout_id","profit_portions_array","profit_whole_number","profit_tenth","profit_hundredths","won","sign","runThroughTenthDigit","interval_ms","clearInterval","interval_id","setInterval","delta","clearTimeout","FastMarker","markerRef","setPosition","overlap_y_axis","as","AccumulatorsProfitLossTooltip","_ref$alignment","exit_tick","exit_tick_time","is_sold","profit_percentage","should_show_profit_text","is_tooltip_open","setIsTooltipOpen","tooltip_timeout","getDecimalPlaces","onCloseDelayed","onHoverOrTapHandler","opposite_arrow_position","horizontal","onMouseEnter","onMouseLeave","onTouchStart","onTouchEnd","CSSTransition","in","timeout","exit","unmountOnExit","Money","has_sign","show_currency","AccumulatorsChartElements","all_positions","has_crossed_accu_barriers","accumulators_positions","ChartMarker","marker_config","ContentComponent","marker_content_props","_ref$is_positioned_be","is_positioned_behind","_ref$is_positioned_be2","is_positioned_before","marker_props","Component","Widget","ToolbarWidgets","is_real_desktop_device","isDesktopOs","isTabletOs","ToolbarWidget","ChartMode","portalNodeId","onChartType","onGranularity","StudyLegend","searchInputClassName","Views","DrawTools","Share","useStore","filtered_contracts","latest_tick_contract","isEnded","_latest_tick_contract","tick_count","isDigitContract","InfoBox","_ref$is_title_enabled","is_title_enabled","onSymbolChange","open_market","ChartTitleLocal","ChartTitle","enabled","isNestedList","portal","ReactDOM","RecentTradeInfo","getElementById","module","load","component_name","moduleLoader","setSmartChartsPublicPath","default","SmartChart","contract_category_icon","ordered_trade_categories","getContractTypeCategoryIcons","All","Accumulators","Options","Multipliers","Turbos","unsupported_list","contract_name","available_contract_types","component","findContractCategory","list_item","_list_item$contract_t","getContractCategoryKey","_findContractCategory","getContractTypes","_findContractCategory2","digitCategoriesMap","digitTypesMap","isArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_arrayLikeToArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","available_categories","non_available_categories","trading_events","buildTradeTypesConfig","getArrayDefaultValue","getComponents","getStartDates","getValidTime","buildMoment","getTradingEvents","getTradingDays","setMinuteMultipleByFive","getTradeTypes","getBasis","getAccumulatorRange","getBarrierChoices","getMultiplierRange","getCancellation","getEqualProps","_contract$contract_di","contract_display","arr_new_values","c_type","_contract_types$c_typ","_contract_types$c_typ2","check","components","_contract_types$c_typ3","hide_duration","duration_units","arr_units","current_start_date","_start_dates_list$","has_spot","forward_starting_dates","compare_moment","_time$split","trading_times_response","trading_times_data","submarkets","j","events","symbol_data","_args2","_market$submarkets","submarket","_submarket$symbols","trading_days","moment_obj","arr_basis","localized_basis","getLocalizedBasis","cur","bas","stored_barrier_choices","arr_multiplier","arr_cancellation_range","cached_multipliers_cancellation","regex","mapCancellationRangeList","str","_str$match","unit_names","getUnitMap","name_plural","should_show_cancellation","_exec","base_contract_type","exec","has_contracts","contracts_for","available","start_type","getContractCategoriesConfig","_Object$keys$find","sub_cats","durations","buildDurationConfig","buildBarriersConfig","barrier_category","buildForwardStartingConfig","growth_rate_range","multiplier_range","cancellation_range","getCleanedUpCategories","mutable_contracts_config","getCategories","_mutable_contracts_co","_mutable_contracts_co2","non_available_contracts","non_available","_Object$keys$find2","_contract_types$type","_available_categories","_available_categories2","is_available","getBarrierCategory","stored_barrier_value","barrier_values","count","filteredList","ct","sortedList","getSortedTradeTypes","_stored_barriers_data","_stored_barriers_data2","obj_basis","obj_trade_types","obj_start_dates","obj_start_type","obj_barrier","obj_duration_units_min_max","obj_accumulator_range_list","obj_barrier_choices","obj_multiplier_range_list","obj_cancellation","obj_equal","getFullContractTypes","proper_expiry_date","moment_start","moment_expiry","isBefore","isAfter","isSameOrBefore","end_time","_ServerTime$get","market_close_time","end_moment","expiry_sessions","minDate","diff","is_end_of_day","is_end_of_session","subtract","_config$forward_start","_config$forward_start2","_args3","map_error_field","elem","el_error","getElementsByName","offsetWidth","offsetHeight","_response$error2","_response$error2$deta","_response$error3","returns","display_value","contract_basis","obj_contract_basis","accumulators_details","has_error_details","new_req","type_of_contract","obj_accumulator","obj_expiry","obj_multiplier","convertToUnix","setProposalMultiplier","setProposalAccumulator","isBeforeDate","should_only_check_hour","now_moment","session","isBetween","StoreProvider","ModulesStoreProvider","ModulesStoreContext","useModulesStore","TraderStoreContext","TraderStoreProvider","useTraderStore","common_store","clock_started","pending","PromiseUtils","createPromise","_pending$resolve","promise","getLocalStorage","getFeatureFlag","feature","defaultValue","_window","isSuccessfullyLoaded","_gbState$status","gbState","GrowthbookFeatures","startTime","checkAnalytics","_Analytics$getInstanc","Analytics","getInstances","ab","getGrowthbookStatus","isLoaded","success","getFeatureValue","_close","_clear","_open","_getFlags","_isIntercom","_isFreshChat","Chat","isFreshChat","isIntercom","getFlags","_yield$Promise$all","_yield$Promise$all2","all","_window$fcWidget","_window$LiveChatWidge","fcWidget","Intercom","LiveChatWidget","clear","_yield$Chat$getFlags","_window$fcWidget2","user","DerivInterCom","initialize","hideLauncher","token","_yield$Chat$getFlags2","_window$fcWidget3","_window$LiveChatWidge2","hostname"],"sourceRoot":""}